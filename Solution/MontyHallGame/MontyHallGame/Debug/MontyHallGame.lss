
MontyHallGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ff4  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405ff4  00405ff4  0000dff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008d4  20000000  00405ffc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000d4  200008d4  004068d0  000108d4  2**2
                  ALLOC
  4 .stack        00003000  200009a8  004069a4  000108d4  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000108d4  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000108fe  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001bbab  00000000  00000000  0001096f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000052b2  00000000  00000000  0002c51a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cf9e  00000000  00000000  000317cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c50  00000000  00000000  0003e770  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000990  00000000  00000000  0003f3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00006c48  00000000  00000000  0003fd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001179a  00000000  00000000  00046998  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00052e1e  00000000  00000000  00058132  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001ad0  00000000  00000000  000aaf50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200039a8 	.word	0x200039a8
  400004:	00400d51 	.word	0x00400d51
  400008:	00400d4d 	.word	0x00400d4d
  40000c:	00400d4d 	.word	0x00400d4d
  400010:	00400d4d 	.word	0x00400d4d
  400014:	00400d4d 	.word	0x00400d4d
  400018:	00400d4d 	.word	0x00400d4d
	...
  40002c:	00400d4d 	.word	0x00400d4d
  400030:	00400d4d 	.word	0x00400d4d
  400034:	00000000 	.word	0x00000000
  400038:	00400d4d 	.word	0x00400d4d
  40003c:	00400d4d 	.word	0x00400d4d
  400040:	00400d4d 	.word	0x00400d4d
  400044:	00400d4d 	.word	0x00400d4d
  400048:	00400d4d 	.word	0x00400d4d
  40004c:	00400d4d 	.word	0x00400d4d
  400050:	00400d4d 	.word	0x00400d4d
  400054:	00400d4d 	.word	0x00400d4d
  400058:	00400d4d 	.word	0x00400d4d
  40005c:	00400d4d 	.word	0x00400d4d
  400060:	00400d4d 	.word	0x00400d4d
  400064:	00400d4d 	.word	0x00400d4d
  400068:	00000000 	.word	0x00000000
  40006c:	00400941 	.word	0x00400941
  400070:	00400955 	.word	0x00400955
  400074:	00400969 	.word	0x00400969
  400078:	00400d4d 	.word	0x00400d4d
  40007c:	00400d4d 	.word	0x00400d4d
	...
  400088:	00400d4d 	.word	0x00400d4d
  40008c:	00400d4d 	.word	0x00400d4d
  400090:	00400d4d 	.word	0x00400d4d
  400094:	00400d4d 	.word	0x00400d4d
  400098:	00400d4d 	.word	0x00400d4d
  40009c:	00400d4d 	.word	0x00400d4d
  4000a0:	00400d4d 	.word	0x00400d4d
  4000a4:	00400d4d 	.word	0x00400d4d
  4000a8:	00400d4d 	.word	0x00400d4d
  4000ac:	00400d4d 	.word	0x00400d4d
  4000b0:	00400d4d 	.word	0x00400d4d
  4000b4:	00400d4d 	.word	0x00400d4d
  4000b8:	00400d4d 	.word	0x00400d4d
  4000bc:	00400d4d 	.word	0x00400d4d
  4000c0:	00400d4d 	.word	0x00400d4d
  4000c4:	00400d4d 	.word	0x00400d4d
  4000c8:	00400d4d 	.word	0x00400d4d

004000cc <deregister_tm_clones>:
  4000cc:	b508      	push	{r3, lr}
  4000ce:	4805      	ldr	r0, [pc, #20]	; (4000e4 <deregister_tm_clones+0x18>)
  4000d0:	4b05      	ldr	r3, [pc, #20]	; (4000e8 <deregister_tm_clones+0x1c>)
  4000d2:	1a1b      	subs	r3, r3, r0
  4000d4:	2b06      	cmp	r3, #6
  4000d6:	d800      	bhi.n	4000da <deregister_tm_clones+0xe>
  4000d8:	bd08      	pop	{r3, pc}
  4000da:	4b04      	ldr	r3, [pc, #16]	; (4000ec <deregister_tm_clones+0x20>)
  4000dc:	2b00      	cmp	r3, #0
  4000de:	d0fb      	beq.n	4000d8 <deregister_tm_clones+0xc>
  4000e0:	4798      	blx	r3
  4000e2:	e7f9      	b.n	4000d8 <deregister_tm_clones+0xc>
  4000e4:	00405ffc 	.word	0x00405ffc
  4000e8:	00405fff 	.word	0x00405fff
  4000ec:	00000000 	.word	0x00000000

004000f0 <register_tm_clones>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4807      	ldr	r0, [pc, #28]	; (400110 <register_tm_clones+0x20>)
  4000f4:	4b07      	ldr	r3, [pc, #28]	; (400114 <register_tm_clones+0x24>)
  4000f6:	1a1b      	subs	r3, r3, r0
  4000f8:	109b      	asrs	r3, r3, #2
  4000fa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  4000fe:	1059      	asrs	r1, r3, #1
  400100:	d100      	bne.n	400104 <register_tm_clones+0x14>
  400102:	bd08      	pop	{r3, pc}
  400104:	4a04      	ldr	r2, [pc, #16]	; (400118 <register_tm_clones+0x28>)
  400106:	2a00      	cmp	r2, #0
  400108:	d0fb      	beq.n	400102 <register_tm_clones+0x12>
  40010a:	4790      	blx	r2
  40010c:	e7f9      	b.n	400102 <register_tm_clones+0x12>
  40010e:	bf00      	nop
  400110:	00405ffc 	.word	0x00405ffc
  400114:	00405ffc 	.word	0x00405ffc
  400118:	00000000 	.word	0x00000000

0040011c <__do_global_dtors_aux>:
  40011c:	b510      	push	{r4, lr}
  40011e:	4c06      	ldr	r4, [pc, #24]	; (400138 <__do_global_dtors_aux+0x1c>)
  400120:	7823      	ldrb	r3, [r4, #0]
  400122:	b943      	cbnz	r3, 400136 <__do_global_dtors_aux+0x1a>
  400124:	f7ff ffd2 	bl	4000cc <deregister_tm_clones>
  400128:	4b04      	ldr	r3, [pc, #16]	; (40013c <__do_global_dtors_aux+0x20>)
  40012a:	b113      	cbz	r3, 400132 <__do_global_dtors_aux+0x16>
  40012c:	4804      	ldr	r0, [pc, #16]	; (400140 <__do_global_dtors_aux+0x24>)
  40012e:	f3af 8000 	nop.w
  400132:	2301      	movs	r3, #1
  400134:	7023      	strb	r3, [r4, #0]
  400136:	bd10      	pop	{r4, pc}
  400138:	200008d4 	.word	0x200008d4
  40013c:	00000000 	.word	0x00000000
  400140:	00405ffc 	.word	0x00405ffc

00400144 <frame_dummy>:
  400144:	b508      	push	{r3, lr}
  400146:	4b08      	ldr	r3, [pc, #32]	; (400168 <frame_dummy+0x24>)
  400148:	b11b      	cbz	r3, 400152 <frame_dummy+0xe>
  40014a:	4808      	ldr	r0, [pc, #32]	; (40016c <frame_dummy+0x28>)
  40014c:	4908      	ldr	r1, [pc, #32]	; (400170 <frame_dummy+0x2c>)
  40014e:	f3af 8000 	nop.w
  400152:	4808      	ldr	r0, [pc, #32]	; (400174 <frame_dummy+0x30>)
  400154:	6803      	ldr	r3, [r0, #0]
  400156:	b113      	cbz	r3, 40015e <frame_dummy+0x1a>
  400158:	4b07      	ldr	r3, [pc, #28]	; (400178 <frame_dummy+0x34>)
  40015a:	b103      	cbz	r3, 40015e <frame_dummy+0x1a>
  40015c:	4798      	blx	r3
  40015e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400162:	f7ff bfc5 	b.w	4000f0 <register_tm_clones>
  400166:	bf00      	nop
  400168:	00000000 	.word	0x00000000
  40016c:	00405ffc 	.word	0x00405ffc
  400170:	200008d8 	.word	0x200008d8
  400174:	00405ffc 	.word	0x00405ffc
  400178:	00000000 	.word	0x00000000

0040017c <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  40017c:	b570      	push	{r4, r5, r6, lr}
  40017e:	b082      	sub	sp, #8
  400180:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400182:	ac02      	add	r4, sp, #8
  400184:	2302      	movs	r3, #2
  400186:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40018a:	4d09      	ldr	r5, [pc, #36]	; (4001b0 <ssd1306_write_command+0x34>)
  40018c:	4628      	mov	r0, r5
  40018e:	4621      	mov	r1, r4
  400190:	4b08      	ldr	r3, [pc, #32]	; (4001b4 <ssd1306_write_command+0x38>)
  400192:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400194:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400198:	4b07      	ldr	r3, [pc, #28]	; (4001b8 <ssd1306_write_command+0x3c>)
  40019a:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40019c:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  40019e:	2056      	movs	r0, #86	; 0x56
  4001a0:	4b06      	ldr	r3, [pc, #24]	; (4001bc <ssd1306_write_command+0x40>)
  4001a2:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4001a4:	4628      	mov	r0, r5
  4001a6:	4621      	mov	r1, r4
  4001a8:	4b05      	ldr	r3, [pc, #20]	; (4001c0 <ssd1306_write_command+0x44>)
  4001aa:	4798      	blx	r3
#endif
}
  4001ac:	b002      	add	sp, #8
  4001ae:	bd70      	pop	{r4, r5, r6, pc}
  4001b0:	40008000 	.word	0x40008000
  4001b4:	004003e9 	.word	0x004003e9
  4001b8:	400e1200 	.word	0x400e1200
  4001bc:	20000001 	.word	0x20000001
  4001c0:	00400419 	.word	0x00400419

004001c4 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
  4001c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001c6:	b085      	sub	sp, #20
  4001c8:	4d25      	ldr	r5, [pc, #148]	; (400260 <ssd1306_init+0x9c>)
  4001ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  4001ce:	636e      	str	r6, [r5, #52]	; 0x34
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	arch_ioport_set_pin_level(SSD1306_RES_PIN, false);
	delay_us(SSD1306_LATENCY); // At least 3us
  4001d0:	2056      	movs	r0, #86	; 0x56
  4001d2:	4c24      	ldr	r4, [pc, #144]	; (400264 <ssd1306_init+0xa0>)
  4001d4:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001d6:	632e      	str	r6, [r5, #48]	; 0x30
	arch_ioport_set_pin_level(SSD1306_RES_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
  4001d8:	2056      	movs	r0, #86	; 0x56
  4001da:	47a0      	blx	r4
	};
	usart_spi_init(SSD1306_USART_SPI);
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
			SSD1306_CLOCK_SPEED, spi_select_id);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {
  4001dc:	2702      	movs	r7, #2
  4001de:	ae04      	add	r6, sp, #16
  4001e0:	f846 7d04 	str.w	r7, [r6, #-4]!
		.id = SSD1306_CS_PIN,
	};
	spi_master_init(SSD1306_SPI);
  4001e4:	4c20      	ldr	r4, [pc, #128]	; (400268 <ssd1306_init+0xa4>)
  4001e6:	4620      	mov	r0, r4
  4001e8:	4b20      	ldr	r3, [pc, #128]	; (40026c <ssd1306_init+0xa8>)
  4001ea:	4798      	blx	r3
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
  4001ec:	2500      	movs	r5, #0
  4001ee:	9500      	str	r5, [sp, #0]
  4001f0:	4620      	mov	r0, r4
  4001f2:	4631      	mov	r1, r6
  4001f4:	462a      	mov	r2, r5
  4001f6:	4b1e      	ldr	r3, [pc, #120]	; (400270 <ssd1306_init+0xac>)
  4001f8:	4e1e      	ldr	r6, [pc, #120]	; (400274 <ssd1306_init+0xb0>)
  4001fa:	47b0      	blx	r6
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4001fc:	2301      	movs	r3, #1
  4001fe:	6023      	str	r3, [r4, #0]

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400200:	20a8      	movs	r0, #168	; 0xa8
  400202:	4c1d      	ldr	r4, [pc, #116]	; (400278 <ssd1306_init+0xb4>)
  400204:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400206:	201f      	movs	r0, #31
  400208:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  40020a:	20d3      	movs	r0, #211	; 0xd3
  40020c:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  40020e:	4628      	mov	r0, r5
  400210:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
  400212:	2040      	movs	r0, #64	; 0x40
  400214:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400216:	20a1      	movs	r0, #161	; 0xa1
  400218:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  40021a:	20c8      	movs	r0, #200	; 0xc8
  40021c:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  40021e:	20da      	movs	r0, #218	; 0xda
  400220:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400222:	4638      	mov	r0, r7
  400224:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400226:	2081      	movs	r0, #129	; 0x81
  400228:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  40022a:	208f      	movs	r0, #143	; 0x8f
  40022c:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  40022e:	20a4      	movs	r0, #164	; 0xa4
  400230:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400232:	20a6      	movs	r0, #166	; 0xa6
  400234:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400236:	20d5      	movs	r0, #213	; 0xd5
  400238:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  40023a:	2080      	movs	r0, #128	; 0x80
  40023c:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  40023e:	208d      	movs	r0, #141	; 0x8d
  400240:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400242:	2014      	movs	r0, #20
  400244:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400246:	20db      	movs	r0, #219	; 0xdb
  400248:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  40024a:	2040      	movs	r0, #64	; 0x40
  40024c:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  40024e:	20d9      	movs	r0, #217	; 0xd9
  400250:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400252:	20f1      	movs	r0, #241	; 0xf1
  400254:	47a0      	blx	r4
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400256:	20af      	movs	r0, #175	; 0xaf
  400258:	47a0      	blx	r4

	ssd1306_display_on();
}
  40025a:	b005      	add	sp, #20
  40025c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40025e:	bf00      	nop
  400260:	400e1200 	.word	0x400e1200
  400264:	20000001 	.word	0x20000001
  400268:	40008000 	.word	0x40008000
  40026c:	00400319 	.word	0x00400319
  400270:	004c4b40 	.word	0x004c4b40
  400274:	0040036d 	.word	0x0040036d
  400278:	0040017d 	.word	0x0040017d

0040027c <at30tse_init>:

/**
 * \brief Initialize the TWI instance used for AT30TSE75x.
 */
void at30tse_init(void)
{
  40027c:	b500      	push	{lr}
  40027e:	b085      	sub	sp, #20
	twi_options_t opts = {
  400280:	2300      	movs	r3, #0
  400282:	9303      	str	r3, [sp, #12]
  400284:	4b07      	ldr	r3, [pc, #28]	; (4002a4 <at30tse_init+0x28>)
  400286:	9301      	str	r3, [sp, #4]
  400288:	f242 7310 	movw	r3, #10000	; 0x2710
  40028c:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40028e:	2013      	movs	r0, #19
  400290:	4b05      	ldr	r3, [pc, #20]	; (4002a8 <at30tse_init+0x2c>)
  400292:	4798      	blx	r3
		.speed = BOARD_TWI_SPEED,
		.smbus = 0
	};

	sysclk_enable_peripheral_clock(BOARD_AT30TSE_TWI_ID);
	twi_master_init(BOARD_AT30TSE_TWI, &opts);
  400294:	4805      	ldr	r0, [pc, #20]	; (4002ac <at30tse_init+0x30>)
  400296:	a901      	add	r1, sp, #4
  400298:	4b05      	ldr	r3, [pc, #20]	; (4002b0 <at30tse_init+0x34>)
  40029a:	4798      	blx	r3
}
  40029c:	b005      	add	sp, #20
  40029e:	f85d fb04 	ldr.w	pc, [sp], #4
  4002a2:	bf00      	nop
  4002a4:	07270e00 	.word	0x07270e00
  4002a8:	00400af1 	.word	0x00400af1
  4002ac:	40018000 	.word	0x40018000
  4002b0:	00400ca9 	.word	0x00400ca9

004002b4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4002b4:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4002b6:	480e      	ldr	r0, [pc, #56]	; (4002f0 <sysclk_init+0x3c>)
  4002b8:	4b0e      	ldr	r3, [pc, #56]	; (4002f4 <sysclk_init+0x40>)
  4002ba:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4002bc:	2000      	movs	r0, #0
  4002be:	213e      	movs	r1, #62	; 0x3e
  4002c0:	4b0d      	ldr	r3, [pc, #52]	; (4002f8 <sysclk_init+0x44>)
  4002c2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4002c4:	4c0d      	ldr	r4, [pc, #52]	; (4002fc <sysclk_init+0x48>)
  4002c6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4002c8:	2800      	cmp	r0, #0
  4002ca:	d0fc      	beq.n	4002c6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4002cc:	4b0c      	ldr	r3, [pc, #48]	; (400300 <sysclk_init+0x4c>)
  4002ce:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4002d0:	4a0c      	ldr	r2, [pc, #48]	; (400304 <sysclk_init+0x50>)
  4002d2:	4b0d      	ldr	r3, [pc, #52]	; (400308 <sysclk_init+0x54>)
  4002d4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4002d6:	4c0d      	ldr	r4, [pc, #52]	; (40030c <sysclk_init+0x58>)
  4002d8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4002da:	2800      	cmp	r0, #0
  4002dc:	d0fc      	beq.n	4002d8 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4002de:	2010      	movs	r0, #16
  4002e0:	4b0b      	ldr	r3, [pc, #44]	; (400310 <sysclk_init+0x5c>)
  4002e2:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4002e4:	4b0b      	ldr	r3, [pc, #44]	; (400314 <sysclk_init+0x60>)
  4002e6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4002e8:	4801      	ldr	r0, [pc, #4]	; (4002f0 <sysclk_init+0x3c>)
  4002ea:	4b02      	ldr	r3, [pc, #8]	; (4002f4 <sysclk_init+0x40>)
  4002ec:	4798      	blx	r3
  4002ee:	bd10      	pop	{r4, pc}
  4002f0:	07270e00 	.word	0x07270e00
  4002f4:	00400f19 	.word	0x00400f19
  4002f8:	00400a6d 	.word	0x00400a6d
  4002fc:	00400ac1 	.word	0x00400ac1
  400300:	00400ad1 	.word	0x00400ad1
  400304:	20133f01 	.word	0x20133f01
  400308:	400e0400 	.word	0x400e0400
  40030c:	00400ae1 	.word	0x00400ae1
  400310:	00400a09 	.word	0x00400a09
  400314:	00400e05 	.word	0x00400e05

00400318 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400318:	b510      	push	{r4, lr}
  40031a:	4604      	mov	r4, r0
	spi_enable_clock(p_spi);
  40031c:	4b10      	ldr	r3, [pc, #64]	; (400360 <spi_master_init+0x48>)
  40031e:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  400320:	2380      	movs	r3, #128	; 0x80
  400322:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400324:	6863      	ldr	r3, [r4, #4]
  400326:	f043 0301 	orr.w	r3, r3, #1
  40032a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40032c:	6863      	ldr	r3, [r4, #4]
  40032e:	f043 0310 	orr.w	r3, r3, #16
  400332:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400334:	6863      	ldr	r3, [r4, #4]
  400336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40033a:	6063      	str	r3, [r4, #4]
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  40033c:	4620      	mov	r0, r4
  40033e:	2100      	movs	r1, #0
  400340:	4b08      	ldr	r3, [pc, #32]	; (400364 <spi_master_init+0x4c>)
  400342:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400344:	6863      	ldr	r3, [r4, #4]
  400346:	f023 0302 	bic.w	r3, r3, #2
  40034a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  40034c:	6863      	ldr	r3, [r4, #4]
  40034e:	f023 0304 	bic.w	r3, r3, #4
  400352:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  400354:	4620      	mov	r0, r4
  400356:	2100      	movs	r1, #0
  400358:	4b03      	ldr	r3, [pc, #12]	; (400368 <spi_master_init+0x50>)
  40035a:	4798      	blx	r3
  40035c:	bd10      	pop	{r4, pc}
  40035e:	bf00      	nop
  400360:	00400b49 	.word	0x00400b49
  400364:	00400b59 	.word	0x00400b59
  400368:	00400b71 	.word	0x00400b71

0040036c <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  40036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40036e:	4605      	mov	r5, r0
  400370:	460c      	mov	r4, r1
  400372:	4616      	mov	r6, r2
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
  400374:	4618      	mov	r0, r3
  400376:	4914      	ldr	r1, [pc, #80]	; (4003c8 <spi_master_setup_device+0x5c>)
  400378:	4b14      	ldr	r3, [pc, #80]	; (4003cc <spi_master_setup_device+0x60>)
  40037a:	4798      	blx	r3
  40037c:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  40037e:	4628      	mov	r0, r5
  400380:	6821      	ldr	r1, [r4, #0]
  400382:	2200      	movs	r2, #0
  400384:	4613      	mov	r3, r2
  400386:	f8df c05c 	ldr.w	ip, [pc, #92]	; 4003e4 <spi_master_setup_device+0x78>
  40038a:	47e0      	blx	ip
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  40038c:	4628      	mov	r0, r5
  40038e:	6821      	ldr	r1, [r4, #0]
  400390:	2208      	movs	r2, #8
  400392:	4b0f      	ldr	r3, [pc, #60]	; (4003d0 <spi_master_setup_device+0x64>)
  400394:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400396:	4628      	mov	r0, r5
  400398:	6821      	ldr	r1, [r4, #0]
  40039a:	b2fa      	uxtb	r2, r7
  40039c:	4b0d      	ldr	r3, [pc, #52]	; (4003d4 <spi_master_setup_device+0x68>)
  40039e:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  4003a0:	4628      	mov	r0, r5
  4003a2:	6821      	ldr	r1, [r4, #0]
  4003a4:	2208      	movs	r2, #8
  4003a6:	4b0c      	ldr	r3, [pc, #48]	; (4003d8 <spi_master_setup_device+0x6c>)
  4003a8:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  4003aa:	4628      	mov	r0, r5
  4003ac:	6821      	ldr	r1, [r4, #0]
  4003ae:	0872      	lsrs	r2, r6, #1
  4003b0:	4b0a      	ldr	r3, [pc, #40]	; (4003dc <spi_master_setup_device+0x70>)
  4003b2:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  4003b4:	f086 0201 	eor.w	r2, r6, #1
  4003b8:	4628      	mov	r0, r5
  4003ba:	6821      	ldr	r1, [r4, #0]
  4003bc:	f002 0201 	and.w	r2, r2, #1
  4003c0:	4b07      	ldr	r3, [pc, #28]	; (4003e0 <spi_master_setup_device+0x74>)
  4003c2:	4798      	blx	r3
  4003c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4003c6:	bf00      	nop
  4003c8:	07270e00 	.word	0x07270e00
  4003cc:	00400c1d 	.word	0x00400c1d
  4003d0:	00400c09 	.word	0x00400c09
  4003d4:	00400c35 	.word	0x00400c35
  4003d8:	00400bc5 	.word	0x00400bc5
  4003dc:	00400b85 	.word	0x00400b85
  4003e0:	00400ba5 	.word	0x00400ba5
  4003e4:	00400c4d 	.word	0x00400c4d

004003e8 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  4003e8:	b508      	push	{r3, lr}
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  4003ea:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  4003ec:	f013 0f04 	tst.w	r3, #4
  4003f0:	d005      	beq.n	4003fe <spi_select_device+0x16>
		if (device->id < MAX_NUM_WITH_DECODER) {
  4003f2:	6809      	ldr	r1, [r1, #0]
  4003f4:	290f      	cmp	r1, #15
  4003f6:	d80b      	bhi.n	400410 <spi_select_device+0x28>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  4003f8:	4b06      	ldr	r3, [pc, #24]	; (400414 <spi_select_device+0x2c>)
  4003fa:	4798      	blx	r3
  4003fc:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  4003fe:	680b      	ldr	r3, [r1, #0]
  400400:	2b03      	cmp	r3, #3
  400402:	d805      	bhi.n	400410 <spi_select_device+0x28>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  400404:	2201      	movs	r2, #1
  400406:	fa02 f103 	lsl.w	r1, r2, r3
  40040a:	43c9      	mvns	r1, r1
  40040c:	4b01      	ldr	r3, [pc, #4]	; (400414 <spi_select_device+0x2c>)
  40040e:	4798      	blx	r3
  400410:	bd08      	pop	{r3, pc}
  400412:	bf00      	nop
  400414:	00400b59 	.word	0x00400b59

00400418 <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  400418:	b510      	push	{r4, lr}
  40041a:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40041c:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  40041e:	f413 7f00 	tst.w	r3, #512	; 0x200
  400422:	d0fb      	beq.n	40041c <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  400424:	4620      	mov	r0, r4
  400426:	210f      	movs	r1, #15
  400428:	4b02      	ldr	r3, [pc, #8]	; (400434 <spi_deselect_device+0x1c>)
  40042a:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  40042c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400430:	6023      	str	r3, [r4, #0]
  400432:	bd10      	pop	{r4, pc}
  400434:	00400b59 	.word	0x00400b59

00400438 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  400438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  40043a:	4838      	ldr	r0, [pc, #224]	; (40051c <board_init+0xe4>)
  40043c:	4b38      	ldr	r3, [pc, #224]	; (400520 <board_init+0xe8>)
  40043e:	4798      	blx	r3
  400440:	200b      	movs	r0, #11
  400442:	4c38      	ldr	r4, [pc, #224]	; (400524 <board_init+0xec>)
  400444:	47a0      	blx	r4
  400446:	200c      	movs	r0, #12
  400448:	47a0      	blx	r4
  40044a:	200d      	movs	r0, #13
  40044c:	47a0      	blx	r4
  40044e:	4b36      	ldr	r3, [pc, #216]	; (400528 <board_init+0xf0>)
  400450:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400454:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400456:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400458:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40045c:	4c33      	ldr	r4, [pc, #204]	; (40052c <board_init+0xf4>)
  40045e:	2504      	movs	r5, #4
  400460:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400462:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400466:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400468:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40046c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40046e:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400470:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400474:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400476:	f022 0204 	bic.w	r2, r2, #4
  40047a:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40047c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40047e:	f022 0204 	bic.w	r2, r2, #4
  400482:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400484:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400488:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40048a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40048c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400490:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400494:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400496:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400498:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40049c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4004a0:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004a2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  4004a8:	4821      	ldr	r0, [pc, #132]	; (400530 <board_init+0xf8>)
  4004aa:	210c      	movs	r1, #12
  4004ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4004b0:	4b20      	ldr	r3, [pc, #128]	; (400534 <board_init+0xfc>)
  4004b2:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4004b4:	4f20      	ldr	r7, [pc, #128]	; (400538 <board_init+0x100>)
  4004b6:	2003      	movs	r0, #3
  4004b8:	4639      	mov	r1, r7
  4004ba:	4e20      	ldr	r6, [pc, #128]	; (40053c <board_init+0x104>)
  4004bc:	47b0      	blx	r6
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4004be:	4628      	mov	r0, r5
  4004c0:	4639      	mov	r1, r7
  4004c2:	47b0      	blx	r6
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  4004c4:	200c      	movs	r0, #12
  4004c6:	4639      	mov	r1, r7
  4004c8:	47b0      	blx	r6
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  4004ca:	200d      	movs	r0, #13
  4004cc:	4639      	mov	r1, r7
  4004ce:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  4004d0:	200e      	movs	r0, #14
  4004d2:	4639      	mov	r1, r7
  4004d4:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS1
#if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS1_PA9_GPIO, SPI_NPCS1_PA9_FLAGS);
  4004d6:	2009      	movs	r0, #9
  4004d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4004dc:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS2
#if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS2_PA10_GPIO, SPI_NPCS2_PA10_FLAGS);
  4004de:	200a      	movs	r0, #10
  4004e0:	4917      	ldr	r1, [pc, #92]	; (400540 <board_init+0x108>)
  4004e2:	47b0      	blx	r6
#endif
#endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_OLED_UG_2832HSWEG04
	gpio_configure_pin(UG_2832HSWEG04_DATA_CMD_GPIO, UG_2832HSWEG04_DATA_CMD_FLAGS);
  4004e4:	f107 5740 	add.w	r7, r7, #805306368	; 0x30000000
  4004e8:	2055      	movs	r0, #85	; 0x55
  4004ea:	4639      	mov	r1, r7
  4004ec:	47b0      	blx	r6
	gpio_configure_pin(UG_2832HSWEG04_RESET_GPIO, UG_2832HSWEG04_RESET_FLAGS);
  4004ee:	205f      	movs	r0, #95	; 0x5f
  4004f0:	4639      	mov	r1, r7
  4004f2:	47b0      	blx	r6
#endif

#ifdef CONF_BOARD_SD_MMC_SPI
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  4004f4:	205b      	movs	r0, #91	; 0x5b
  4004f6:	4913      	ldr	r1, [pc, #76]	; (400544 <board_init+0x10c>)
  4004f8:	47b0      	blx	r6
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4004fa:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4004fc:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400500:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400502:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400504:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400508:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40050a:	f023 0304 	bic.w	r3, r3, #4
  40050e:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400510:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400512:	f023 0304 	bic.w	r3, r3, #4
  400516:	6763      	str	r3, [r4, #116]	; 0x74
  400518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40051a:	bf00      	nop
  40051c:	400e1450 	.word	0x400e1450
  400520:	00400d45 	.word	0x00400d45
  400524:	00400af1 	.word	0x00400af1
  400528:	400e1200 	.word	0x400e1200
  40052c:	400e0e00 	.word	0x400e0e00
  400530:	400e1000 	.word	0x400e1000
  400534:	004007b9 	.word	0x004007b9
  400538:	08000001 	.word	0x08000001
  40053c:	00400695 	.word	0x00400695
  400540:	10000001 	.word	0x10000001
  400544:	28000001 	.word	0x28000001

00400548 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400548:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  40054c:	0052      	lsls	r2, r2, #1
  40054e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400552:	fbb3 f3f2 	udiv	r3, r3, r2
  400556:	3b01      	subs	r3, #1
  400558:	f3c3 030d 	ubfx	r3, r3, #0, #14
  40055c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  400560:	4770      	bx	lr
  400562:	bf00      	nop

00400564 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400564:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400566:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  400568:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40056c:	d02e      	beq.n	4005cc <pio_set_peripheral+0x68>
  40056e:	d808      	bhi.n	400582 <pio_set_peripheral+0x1e>
  400570:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400574:	d014      	beq.n	4005a0 <pio_set_peripheral+0x3c>
  400576:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40057a:	d01d      	beq.n	4005b8 <pio_set_peripheral+0x54>
  40057c:	2900      	cmp	r1, #0
  40057e:	d135      	bne.n	4005ec <pio_set_peripheral+0x88>
  400580:	e035      	b.n	4005ee <pio_set_peripheral+0x8a>
  400582:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400586:	d032      	beq.n	4005ee <pio_set_peripheral+0x8a>
  400588:	d803      	bhi.n	400592 <pio_set_peripheral+0x2e>
  40058a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40058e:	d027      	beq.n	4005e0 <pio_set_peripheral+0x7c>
  400590:	e02c      	b.n	4005ec <pio_set_peripheral+0x88>
  400592:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400596:	d02a      	beq.n	4005ee <pio_set_peripheral+0x8a>
  400598:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40059c:	d027      	beq.n	4005ee <pio_set_peripheral+0x8a>
  40059e:	e025      	b.n	4005ec <pio_set_peripheral+0x88>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005a0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005a2:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4005a4:	43d3      	mvns	r3, r2
  4005a6:	4021      	ands	r1, r4
  4005a8:	4019      	ands	r1, r3
  4005aa:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005ac:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4005ae:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4005b0:	4021      	ands	r1, r4
  4005b2:	400b      	ands	r3, r1
  4005b4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4005b6:	e019      	b.n	4005ec <pio_set_peripheral+0x88>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4005ba:	4313      	orrs	r3, r2
  4005bc:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005be:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4005c0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4005c2:	400b      	ands	r3, r1
  4005c4:	ea23 0302 	bic.w	r3, r3, r2
  4005c8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4005ca:	e00f      	b.n	4005ec <pio_set_peripheral+0x88>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005cc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005ce:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4005d0:	400b      	ands	r3, r1
  4005d2:	ea23 0302 	bic.w	r3, r3, r2
  4005d6:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005d8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4005da:	4313      	orrs	r3, r2
  4005dc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4005de:	e005      	b.n	4005ec <pio_set_peripheral+0x88>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005e0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4005e2:	4313      	orrs	r3, r2
  4005e4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005e6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4005e8:	4313      	orrs	r3, r2
  4005ea:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4005ec:	6042      	str	r2, [r0, #4]
}
  4005ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005f2:	4770      	bx	lr

004005f4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4005f4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005f6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4005fa:	bf14      	ite	ne
  4005fc:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005fe:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400600:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400604:	bf14      	ite	ne
  400606:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400608:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40060a:	f012 0f02 	tst.w	r2, #2
  40060e:	d002      	beq.n	400616 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400610:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400614:	e004      	b.n	400620 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400616:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40061a:	bf18      	it	ne
  40061c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400620:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400622:	6001      	str	r1, [r0, #0]
  400624:	4770      	bx	lr
  400626:	bf00      	nop

00400628 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400628:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40062a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40062c:	9c01      	ldr	r4, [sp, #4]
  40062e:	b10c      	cbz	r4, 400634 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400630:	6641      	str	r1, [r0, #100]	; 0x64
  400632:	e000      	b.n	400636 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400634:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400636:	b10b      	cbz	r3, 40063c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400638:	6501      	str	r1, [r0, #80]	; 0x50
  40063a:	e000      	b.n	40063e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40063c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40063e:	b10a      	cbz	r2, 400644 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400640:	6301      	str	r1, [r0, #48]	; 0x30
  400642:	e000      	b.n	400646 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400644:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400646:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400648:	6001      	str	r1, [r0, #0]
}
  40064a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40064e:	4770      	bx	lr

00400650 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400650:	f012 0f10 	tst.w	r2, #16
  400654:	d010      	beq.n	400678 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400656:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40065a:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40065e:	bf14      	ite	ne
  400660:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400664:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400668:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40066c:	bf14      	ite	ne
  40066e:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  400672:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400676:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400678:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40067c:	4770      	bx	lr
  40067e:	bf00      	nop

00400680 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  400680:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  400682:	6401      	str	r1, [r0, #64]	; 0x40
  400684:	4770      	bx	lr
  400686:	bf00      	nop

00400688 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400688:	6441      	str	r1, [r0, #68]	; 0x44
  40068a:	4770      	bx	lr

0040068c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40068c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40068e:	4770      	bx	lr

00400690 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400690:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400692:	4770      	bx	lr

00400694 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400694:	b570      	push	{r4, r5, r6, lr}
  400696:	b082      	sub	sp, #8
  400698:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40069a:	0944      	lsrs	r4, r0, #5
  40069c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
  4006a0:	f204 7407 	addw	r4, r4, #1799	; 0x707
  4006a4:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4006a6:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
  4006aa:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  4006ae:	d047      	beq.n	400740 <pio_configure_pin+0xac>
  4006b0:	d809      	bhi.n	4006c6 <pio_configure_pin+0x32>
  4006b2:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  4006b6:	d021      	beq.n	4006fc <pio_configure_pin+0x68>
  4006b8:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  4006bc:	d02f      	beq.n	40071e <pio_configure_pin+0x8a>
  4006be:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  4006c2:	d16f      	bne.n	4007a4 <pio_configure_pin+0x110>
  4006c4:	e009      	b.n	4006da <pio_configure_pin+0x46>
  4006c6:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  4006ca:	d055      	beq.n	400778 <pio_configure_pin+0xe4>
  4006cc:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  4006d0:	d052      	beq.n	400778 <pio_configure_pin+0xe4>
  4006d2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  4006d6:	d044      	beq.n	400762 <pio_configure_pin+0xce>
  4006d8:	e064      	b.n	4007a4 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4006da:	f000 001f 	and.w	r0, r0, #31
  4006de:	2401      	movs	r4, #1
  4006e0:	4084      	lsls	r4, r0
  4006e2:	4630      	mov	r0, r6
  4006e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4006e8:	4622      	mov	r2, r4
  4006ea:	4b30      	ldr	r3, [pc, #192]	; (4007ac <pio_configure_pin+0x118>)
  4006ec:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4006ee:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4006f2:	bf14      	ite	ne
  4006f4:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4006f6:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4006f8:	2001      	movs	r0, #1
  4006fa:	e054      	b.n	4007a6 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4006fc:	f000 001f 	and.w	r0, r0, #31
  400700:	2401      	movs	r4, #1
  400702:	4084      	lsls	r4, r0
  400704:	4630      	mov	r0, r6
  400706:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40070a:	4622      	mov	r2, r4
  40070c:	4b27      	ldr	r3, [pc, #156]	; (4007ac <pio_configure_pin+0x118>)
  40070e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400710:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400714:	bf14      	ite	ne
  400716:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400718:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40071a:	2001      	movs	r0, #1
  40071c:	e043      	b.n	4007a6 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40071e:	f000 001f 	and.w	r0, r0, #31
  400722:	2401      	movs	r4, #1
  400724:	4084      	lsls	r4, r0
  400726:	4630      	mov	r0, r6
  400728:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40072c:	4622      	mov	r2, r4
  40072e:	4b1f      	ldr	r3, [pc, #124]	; (4007ac <pio_configure_pin+0x118>)
  400730:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400732:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400736:	bf14      	ite	ne
  400738:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40073a:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40073c:	2001      	movs	r0, #1
  40073e:	e032      	b.n	4007a6 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400740:	f000 001f 	and.w	r0, r0, #31
  400744:	2401      	movs	r4, #1
  400746:	4084      	lsls	r4, r0
  400748:	4630      	mov	r0, r6
  40074a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40074e:	4622      	mov	r2, r4
  400750:	4b16      	ldr	r3, [pc, #88]	; (4007ac <pio_configure_pin+0x118>)
  400752:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400754:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400758:	bf14      	ite	ne
  40075a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40075c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40075e:	2001      	movs	r0, #1
  400760:	e021      	b.n	4007a6 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400762:	f000 011f 	and.w	r1, r0, #31
  400766:	2401      	movs	r4, #1
  400768:	4630      	mov	r0, r6
  40076a:	fa04 f101 	lsl.w	r1, r4, r1
  40076e:	462a      	mov	r2, r5
  400770:	4b0f      	ldr	r3, [pc, #60]	; (4007b0 <pio_configure_pin+0x11c>)
  400772:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400774:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400776:	e016      	b.n	4007a6 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400778:	f000 011f 	and.w	r1, r0, #31
  40077c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40077e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400782:	ea05 0304 	and.w	r3, r5, r4
  400786:	9300      	str	r3, [sp, #0]
  400788:	4630      	mov	r0, r6
  40078a:	fa04 f101 	lsl.w	r1, r4, r1
  40078e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400792:	bf14      	ite	ne
  400794:	2200      	movne	r2, #0
  400796:	2201      	moveq	r2, #1
  400798:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40079c:	4d05      	ldr	r5, [pc, #20]	; (4007b4 <pio_configure_pin+0x120>)
  40079e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
  4007a0:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4007a2:	e000      	b.n	4007a6 <pio_configure_pin+0x112>

	default:
		return 0;
  4007a4:	2000      	movs	r0, #0
	}

	return 1;
}
  4007a6:	b002      	add	sp, #8
  4007a8:	bd70      	pop	{r4, r5, r6, pc}
  4007aa:	bf00      	nop
  4007ac:	00400565 	.word	0x00400565
  4007b0:	004005f5 	.word	0x004005f5
  4007b4:	00400629 	.word	0x00400629

004007b8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4007ba:	b083      	sub	sp, #12
  4007bc:	4607      	mov	r7, r0
  4007be:	460e      	mov	r6, r1
  4007c0:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4007c2:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
  4007c6:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  4007ca:	d038      	beq.n	40083e <pio_configure_pin_group+0x86>
  4007cc:	d809      	bhi.n	4007e2 <pio_configure_pin_group+0x2a>
  4007ce:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  4007d2:	d01c      	beq.n	40080e <pio_configure_pin_group+0x56>
  4007d4:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  4007d8:	d025      	beq.n	400826 <pio_configure_pin_group+0x6e>
  4007da:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  4007de:	d150      	bne.n	400882 <pio_configure_pin_group+0xca>
  4007e0:	e009      	b.n	4007f6 <pio_configure_pin_group+0x3e>
  4007e2:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  4007e6:	d03a      	beq.n	40085e <pio_configure_pin_group+0xa6>
  4007e8:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  4007ec:	d037      	beq.n	40085e <pio_configure_pin_group+0xa6>
  4007ee:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  4007f2:	d030      	beq.n	400856 <pio_configure_pin_group+0x9e>
  4007f4:	e045      	b.n	400882 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4007f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4007fa:	4632      	mov	r2, r6
  4007fc:	4b22      	ldr	r3, [pc, #136]	; (400888 <pio_configure_pin_group+0xd0>)
  4007fe:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400800:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400804:	bf14      	ite	ne
  400806:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400808:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40080a:	2001      	movs	r0, #1
  40080c:	e03a      	b.n	400884 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40080e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400812:	4632      	mov	r2, r6
  400814:	4b1c      	ldr	r3, [pc, #112]	; (400888 <pio_configure_pin_group+0xd0>)
  400816:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400818:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40081c:	bf14      	ite	ne
  40081e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400820:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400822:	2001      	movs	r0, #1
  400824:	e02e      	b.n	400884 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400826:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40082a:	4632      	mov	r2, r6
  40082c:	4b16      	ldr	r3, [pc, #88]	; (400888 <pio_configure_pin_group+0xd0>)
  40082e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400830:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400834:	bf14      	ite	ne
  400836:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400838:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40083a:	2001      	movs	r0, #1
  40083c:	e022      	b.n	400884 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  40083e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400842:	4632      	mov	r2, r6
  400844:	4b10      	ldr	r3, [pc, #64]	; (400888 <pio_configure_pin_group+0xd0>)
  400846:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400848:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40084c:	bf14      	ite	ne
  40084e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400850:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400852:	2001      	movs	r0, #1
  400854:	e016      	b.n	400884 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  400856:	4b0d      	ldr	r3, [pc, #52]	; (40088c <pio_configure_pin_group+0xd4>)
  400858:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  40085a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  40085c:	e012      	b.n	400884 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40085e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  400862:	f005 0301 	and.w	r3, r5, #1
  400866:	9300      	str	r3, [sp, #0]
  400868:	4638      	mov	r0, r7
  40086a:	4631      	mov	r1, r6
  40086c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400870:	bf14      	ite	ne
  400872:	2200      	movne	r2, #0
  400874:	2201      	moveq	r2, #1
  400876:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40087a:	4c05      	ldr	r4, [pc, #20]	; (400890 <pio_configure_pin_group+0xd8>)
  40087c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  40087e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400880:	e000      	b.n	400884 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  400882:	2000      	movs	r0, #0
	}

	return 1;
}
  400884:	b003      	add	sp, #12
  400886:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400888:	00400565 	.word	0x00400565
  40088c:	004005f5 	.word	0x004005f5
  400890:	00400629 	.word	0x00400629

00400894 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400898:	4681      	mov	r9, r0
  40089a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40089c:	4b14      	ldr	r3, [pc, #80]	; (4008f0 <pio_handler_process+0x5c>)
  40089e:	4798      	blx	r3
  4008a0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4008a2:	4648      	mov	r0, r9
  4008a4:	4b13      	ldr	r3, [pc, #76]	; (4008f4 <pio_handler_process+0x60>)
  4008a6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4008a8:	4005      	ands	r5, r0
  4008aa:	d017      	beq.n	4008dc <pio_handler_process+0x48>
  4008ac:	4f12      	ldr	r7, [pc, #72]	; (4008f8 <pio_handler_process+0x64>)
  4008ae:	f107 040c 	add.w	r4, r7, #12
  4008b2:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4008b4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  4008b8:	42b3      	cmp	r3, r6
  4008ba:	d10a      	bne.n	4008d2 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4008bc:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4008c0:	4229      	tst	r1, r5
  4008c2:	d006      	beq.n	4008d2 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4008c4:	6823      	ldr	r3, [r4, #0]
  4008c6:	4630      	mov	r0, r6
  4008c8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4008ca:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4008ce:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4008d2:	42bc      	cmp	r4, r7
  4008d4:	d002      	beq.n	4008dc <pio_handler_process+0x48>
  4008d6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4008d8:	2d00      	cmp	r5, #0
  4008da:	d1eb      	bne.n	4008b4 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4008dc:	4b07      	ldr	r3, [pc, #28]	; (4008fc <pio_handler_process+0x68>)
  4008de:	681b      	ldr	r3, [r3, #0]
  4008e0:	b123      	cbz	r3, 4008ec <pio_handler_process+0x58>
		if (pio_capture_handler) {
  4008e2:	4b07      	ldr	r3, [pc, #28]	; (400900 <pio_handler_process+0x6c>)
  4008e4:	681b      	ldr	r3, [r3, #0]
  4008e6:	b10b      	cbz	r3, 4008ec <pio_handler_process+0x58>
			pio_capture_handler(p_pio);
  4008e8:	4648      	mov	r0, r9
  4008ea:	4798      	blx	r3
  4008ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008f0:	0040068d 	.word	0x0040068d
  4008f4:	00400691 	.word	0x00400691
  4008f8:	200008f8 	.word	0x200008f8
  4008fc:	200009a0 	.word	0x200009a0
  400900:	200008f4 	.word	0x200008f4

00400904 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400906:	4c0b      	ldr	r4, [pc, #44]	; (400934 <pio_handler_set+0x30>)
  400908:	6824      	ldr	r4, [r4, #0]
  40090a:	2c06      	cmp	r4, #6
  40090c:	d810      	bhi.n	400930 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  40090e:	4f0a      	ldr	r7, [pc, #40]	; (400938 <pio_handler_set+0x34>)
  400910:	0126      	lsls	r6, r4, #4
  400912:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
  400914:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
  400916:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
  400918:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
  40091a:	9906      	ldr	r1, [sp, #24]
  40091c:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
  40091e:	3401      	adds	r4, #1
  400920:	4904      	ldr	r1, [pc, #16]	; (400934 <pio_handler_set+0x30>)
  400922:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400924:	4611      	mov	r1, r2
  400926:	461a      	mov	r2, r3
  400928:	4b04      	ldr	r3, [pc, #16]	; (40093c <pio_handler_set+0x38>)
  40092a:	4798      	blx	r3

	return 0;
  40092c:	2000      	movs	r0, #0
  40092e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  400930:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  400932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400934:	200008f0 	.word	0x200008f0
  400938:	200008f8 	.word	0x200008f8
  40093c:	00400651 	.word	0x00400651

00400940 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400940:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400942:	4802      	ldr	r0, [pc, #8]	; (40094c <PIOA_Handler+0xc>)
  400944:	210b      	movs	r1, #11
  400946:	4b02      	ldr	r3, [pc, #8]	; (400950 <PIOA_Handler+0x10>)
  400948:	4798      	blx	r3
  40094a:	bd08      	pop	{r3, pc}
  40094c:	400e0e00 	.word	0x400e0e00
  400950:	00400895 	.word	0x00400895

00400954 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400954:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400956:	4802      	ldr	r0, [pc, #8]	; (400960 <PIOB_Handler+0xc>)
  400958:	210c      	movs	r1, #12
  40095a:	4b02      	ldr	r3, [pc, #8]	; (400964 <PIOB_Handler+0x10>)
  40095c:	4798      	blx	r3
  40095e:	bd08      	pop	{r3, pc}
  400960:	400e1000 	.word	0x400e1000
  400964:	00400895 	.word	0x00400895

00400968 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400968:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40096a:	4802      	ldr	r0, [pc, #8]	; (400974 <PIOC_Handler+0xc>)
  40096c:	210d      	movs	r1, #13
  40096e:	4b02      	ldr	r3, [pc, #8]	; (400978 <PIOC_Handler+0x10>)
  400970:	4798      	blx	r3
  400972:	bd08      	pop	{r3, pc}
  400974:	400e1200 	.word	0x400e1200
  400978:	00400895 	.word	0x00400895

0040097c <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  40097c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400980:	4605      	mov	r5, r0
  400982:	460c      	mov	r4, r1
  400984:	4691      	mov	r9, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  400986:	4b1b      	ldr	r3, [pc, #108]	; (4009f4 <pio_handler_set_priority+0x78>)
  400988:	4798      	blx	r3
  40098a:	4680      	mov	r8, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40098c:	4628      	mov	r0, r5
  40098e:	f04f 31ff 	mov.w	r1, #4294967295
  400992:	4b19      	ldr	r3, [pc, #100]	; (4009f8 <pio_handler_set_priority+0x7c>)
  400994:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  400996:	4628      	mov	r0, r5
  400998:	4b18      	ldr	r3, [pc, #96]	; (4009fc <pio_handler_set_priority+0x80>)
  40099a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40099c:	b2e7      	uxtb	r7, r4
  40099e:	f007 031f 	and.w	r3, r7, #31
  4009a2:	2601      	movs	r6, #1
  4009a4:	409e      	lsls	r6, r3
  4009a6:	0963      	lsrs	r3, r4, #5
  4009a8:	009b      	lsls	r3, r3, #2
  4009aa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  4009ae:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  4009b2:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4009b6:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  4009ba:	2c00      	cmp	r4, #0
  4009bc:	da09      	bge.n	4009d2 <pio_handler_set_priority+0x56>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4009be:	f007 070f 	and.w	r7, r7, #15
  4009c2:	ea4f 1909 	mov.w	r9, r9, lsl #4
  4009c6:	fa5f f989 	uxtb.w	r9, r9
  4009ca:	4a0d      	ldr	r2, [pc, #52]	; (400a00 <pio_handler_set_priority+0x84>)
  4009cc:	f802 9007 	strb.w	r9, [r2, r7]
  4009d0:	e009      	b.n	4009e6 <pio_handler_set_priority+0x6a>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4009d2:	ea4f 1909 	mov.w	r9, r9, lsl #4
  4009d6:	fa5f f989 	uxtb.w	r9, r9
  4009da:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  4009de:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  4009e2:	f884 9300 	strb.w	r9, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4009e6:	601e      	str	r6, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4009e8:	4628      	mov	r0, r5
  4009ea:	4641      	mov	r1, r8
  4009ec:	4b05      	ldr	r3, [pc, #20]	; (400a04 <pio_handler_set_priority+0x88>)
  4009ee:	4798      	blx	r3
  4009f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4009f4:	00400691 	.word	0x00400691
  4009f8:	00400689 	.word	0x00400689
  4009fc:	0040068d 	.word	0x0040068d
  400a00:	e000ed14 	.word	0xe000ed14
  400a04:	00400681 	.word	0x00400681

00400a08 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400a08:	4b17      	ldr	r3, [pc, #92]	; (400a68 <pmc_switch_mck_to_pllack+0x60>)
  400a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400a0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  400a10:	4310      	orrs	r0, r2
  400a12:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a16:	f013 0f08 	tst.w	r3, #8
  400a1a:	d109      	bne.n	400a30 <pmc_switch_mck_to_pllack+0x28>
  400a1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400a20:	4911      	ldr	r1, [pc, #68]	; (400a68 <pmc_switch_mck_to_pllack+0x60>)
  400a22:	e001      	b.n	400a28 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400a24:	3b01      	subs	r3, #1
  400a26:	d019      	beq.n	400a5c <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400a28:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400a2a:	f012 0f08 	tst.w	r2, #8
  400a2e:	d0f9      	beq.n	400a24 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400a30:	4b0d      	ldr	r3, [pc, #52]	; (400a68 <pmc_switch_mck_to_pllack+0x60>)
  400a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400a34:	f022 0203 	bic.w	r2, r2, #3
  400a38:	f042 0202 	orr.w	r2, r2, #2
  400a3c:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400a3e:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400a40:	f010 0008 	ands.w	r0, r0, #8
  400a44:	d10c      	bne.n	400a60 <pmc_switch_mck_to_pllack+0x58>
  400a46:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400a4a:	4907      	ldr	r1, [pc, #28]	; (400a68 <pmc_switch_mck_to_pllack+0x60>)
  400a4c:	e001      	b.n	400a52 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400a4e:	3b01      	subs	r3, #1
  400a50:	d008      	beq.n	400a64 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400a52:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400a54:	f012 0f08 	tst.w	r2, #8
  400a58:	d0f9      	beq.n	400a4e <pmc_switch_mck_to_pllack+0x46>
  400a5a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400a5c:	2001      	movs	r0, #1
  400a5e:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400a60:	2000      	movs	r0, #0
  400a62:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400a64:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400a66:	4770      	bx	lr
  400a68:	400e0400 	.word	0x400e0400

00400a6c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400a6c:	b138      	cbz	r0, 400a7e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a6e:	4911      	ldr	r1, [pc, #68]	; (400ab4 <pmc_switch_mainck_to_xtal+0x48>)
  400a70:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400a72:	4a11      	ldr	r2, [pc, #68]	; (400ab8 <pmc_switch_mainck_to_xtal+0x4c>)
  400a74:	401a      	ands	r2, r3
  400a76:	4b11      	ldr	r3, [pc, #68]	; (400abc <pmc_switch_mainck_to_xtal+0x50>)
  400a78:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a7a:	620b      	str	r3, [r1, #32]
  400a7c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a7e:	4a0d      	ldr	r2, [pc, #52]	; (400ab4 <pmc_switch_mainck_to_xtal+0x48>)
  400a80:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a82:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400a86:	f023 0303 	bic.w	r3, r3, #3
  400a8a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400a8e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400a92:	0209      	lsls	r1, r1, #8
  400a94:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a96:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a98:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400a9a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a9c:	f013 0f01 	tst.w	r3, #1
  400aa0:	d0fb      	beq.n	400a9a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400aa2:	4a04      	ldr	r2, [pc, #16]	; (400ab4 <pmc_switch_mainck_to_xtal+0x48>)
  400aa4:	6a13      	ldr	r3, [r2, #32]
  400aa6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400aae:	6213      	str	r3, [r2, #32]
  400ab0:	4770      	bx	lr
  400ab2:	bf00      	nop
  400ab4:	400e0400 	.word	0x400e0400
  400ab8:	fec8fffc 	.word	0xfec8fffc
  400abc:	01370002 	.word	0x01370002

00400ac0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400ac0:	4b02      	ldr	r3, [pc, #8]	; (400acc <pmc_osc_is_ready_mainck+0xc>)
  400ac2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ac4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400ac8:	4770      	bx	lr
  400aca:	bf00      	nop
  400acc:	400e0400 	.word	0x400e0400

00400ad0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400ad0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ad4:	4b01      	ldr	r3, [pc, #4]	; (400adc <pmc_disable_pllack+0xc>)
  400ad6:	629a      	str	r2, [r3, #40]	; 0x28
  400ad8:	4770      	bx	lr
  400ada:	bf00      	nop
  400adc:	400e0400 	.word	0x400e0400

00400ae0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400ae0:	4b02      	ldr	r3, [pc, #8]	; (400aec <pmc_is_locked_pllack+0xc>)
  400ae2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ae4:	f000 0002 	and.w	r0, r0, #2
  400ae8:	4770      	bx	lr
  400aea:	bf00      	nop
  400aec:	400e0400 	.word	0x400e0400

00400af0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400af0:	2822      	cmp	r0, #34	; 0x22
  400af2:	d820      	bhi.n	400b36 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  400af4:	281f      	cmp	r0, #31
  400af6:	d80d      	bhi.n	400b14 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400af8:	4b12      	ldr	r3, [pc, #72]	; (400b44 <pmc_enable_periph_clk+0x54>)
  400afa:	699a      	ldr	r2, [r3, #24]
  400afc:	2301      	movs	r3, #1
  400afe:	4083      	lsls	r3, r0
  400b00:	401a      	ands	r2, r3
  400b02:	4293      	cmp	r3, r2
  400b04:	d019      	beq.n	400b3a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
  400b06:	2301      	movs	r3, #1
  400b08:	fa03 f000 	lsl.w	r0, r3, r0
  400b0c:	4b0d      	ldr	r3, [pc, #52]	; (400b44 <pmc_enable_periph_clk+0x54>)
  400b0e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400b10:	2000      	movs	r0, #0
  400b12:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400b14:	4b0b      	ldr	r3, [pc, #44]	; (400b44 <pmc_enable_periph_clk+0x54>)
  400b16:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  400b1a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400b1c:	2301      	movs	r3, #1
  400b1e:	4083      	lsls	r3, r0
  400b20:	401a      	ands	r2, r3
  400b22:	4293      	cmp	r3, r2
  400b24:	d00b      	beq.n	400b3e <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
  400b26:	2301      	movs	r3, #1
  400b28:	fa03 f000 	lsl.w	r0, r3, r0
  400b2c:	4b05      	ldr	r3, [pc, #20]	; (400b44 <pmc_enable_periph_clk+0x54>)
  400b2e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400b32:	2000      	movs	r0, #0
  400b34:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400b36:	2001      	movs	r0, #1
  400b38:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400b3a:	2000      	movs	r0, #0
  400b3c:	4770      	bx	lr
  400b3e:	2000      	movs	r0, #0
}
  400b40:	4770      	bx	lr
  400b42:	bf00      	nop
  400b44:	400e0400 	.word	0x400e0400

00400b48 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400b48:	b508      	push	{r3, lr}
  400b4a:	2015      	movs	r0, #21
  400b4c:	4b01      	ldr	r3, [pc, #4]	; (400b54 <spi_enable_clock+0xc>)
  400b4e:	4798      	blx	r3
  400b50:	bd08      	pop	{r3, pc}
  400b52:	bf00      	nop
  400b54:	00400af1 	.word	0x00400af1

00400b58 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400b58:	6843      	ldr	r3, [r0, #4]
  400b5a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400b5e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400b60:	6843      	ldr	r3, [r0, #4]
  400b62:	0409      	lsls	r1, r1, #16
  400b64:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400b68:	430b      	orrs	r3, r1
  400b6a:	6043      	str	r3, [r0, #4]
  400b6c:	4770      	bx	lr
  400b6e:	bf00      	nop

00400b70 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  400b70:	6843      	ldr	r3, [r0, #4]
  400b72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400b76:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  400b78:	6843      	ldr	r3, [r0, #4]
  400b7a:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  400b7e:	6041      	str	r1, [r0, #4]
  400b80:	4770      	bx	lr
  400b82:	bf00      	nop

00400b84 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400b84:	b132      	cbz	r2, 400b94 <spi_set_clock_polarity+0x10>
  400b86:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400b8a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400b8c:	f043 0301 	orr.w	r3, r3, #1
  400b90:	6303      	str	r3, [r0, #48]	; 0x30
  400b92:	4770      	bx	lr
  400b94:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400b98:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400b9a:	f023 0301 	bic.w	r3, r3, #1
  400b9e:	6303      	str	r3, [r0, #48]	; 0x30
  400ba0:	4770      	bx	lr
  400ba2:	bf00      	nop

00400ba4 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400ba4:	b132      	cbz	r2, 400bb4 <spi_set_clock_phase+0x10>
  400ba6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400baa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400bac:	f043 0302 	orr.w	r3, r3, #2
  400bb0:	6303      	str	r3, [r0, #48]	; 0x30
  400bb2:	4770      	bx	lr
  400bb4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400bb8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400bba:	f023 0302 	bic.w	r3, r3, #2
  400bbe:	6303      	str	r3, [r0, #48]	; 0x30
  400bc0:	4770      	bx	lr
  400bc2:	bf00      	nop

00400bc4 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400bc4:	2a04      	cmp	r2, #4
  400bc6:	d10a      	bne.n	400bde <spi_configure_cs_behavior+0x1a>
  400bc8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400bcc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400bce:	f023 0308 	bic.w	r3, r3, #8
  400bd2:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400bd4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400bd6:	f043 0304 	orr.w	r3, r3, #4
  400bda:	6303      	str	r3, [r0, #48]	; 0x30
  400bdc:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400bde:	b952      	cbnz	r2, 400bf6 <spi_configure_cs_behavior+0x32>
  400be0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400be4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400be6:	f023 0308 	bic.w	r3, r3, #8
  400bea:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400bec:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400bee:	f023 0304 	bic.w	r3, r3, #4
  400bf2:	6303      	str	r3, [r0, #48]	; 0x30
  400bf4:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400bf6:	2a08      	cmp	r2, #8
  400bf8:	d105      	bne.n	400c06 <spi_configure_cs_behavior+0x42>
  400bfa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400bfe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c00:	f043 0308 	orr.w	r3, r3, #8
  400c04:	6303      	str	r3, [r0, #48]	; 0x30
  400c06:	4770      	bx	lr

00400c08 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400c08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400c0c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400c0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400c12:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400c14:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400c16:	431a      	orrs	r2, r3
  400c18:	630a      	str	r2, [r1, #48]	; 0x30
  400c1a:	4770      	bx	lr

00400c1c <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400c1c:	1e43      	subs	r3, r0, #1
  400c1e:	4419      	add	r1, r3
  400c20:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400c24:	1e43      	subs	r3, r0, #1
  400c26:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400c28:	bf94      	ite	ls
  400c2a:	b280      	uxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  400c2c:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}

	return baud_div;
}
  400c30:	b200      	sxth	r0, r0
  400c32:	4770      	bx	lr

00400c34 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  400c34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400c38:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400c3e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400c40:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400c42:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  400c46:	630a      	str	r2, [r1, #48]	; 0x30
  400c48:	4770      	bx	lr
  400c4a:	bf00      	nop

00400c4c <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  400c4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  400c50:	6b08      	ldr	r0, [r1, #48]	; 0x30
  400c52:	b280      	uxth	r0, r0
  400c54:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400c56:	6b08      	ldr	r0, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
  400c58:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400c5c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  400c60:	630a      	str	r2, [r1, #48]	; 0x30
  400c62:	4770      	bx	lr

00400c64 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400c64:	4b0f      	ldr	r3, [pc, #60]	; (400ca4 <twi_set_speed+0x40>)
  400c66:	4299      	cmp	r1, r3
  400c68:	d819      	bhi.n	400c9e <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400c6a:	0049      	lsls	r1, r1, #1
  400c6c:	fbb2 f2f1 	udiv	r2, r2, r1
  400c70:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400c72:	2aff      	cmp	r2, #255	; 0xff
  400c74:	d907      	bls.n	400c86 <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400c76:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
  400c78:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  400c7a:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400c7c:	2aff      	cmp	r2, #255	; 0xff
  400c7e:	d903      	bls.n	400c88 <twi_set_speed+0x24>
  400c80:	2b07      	cmp	r3, #7
  400c82:	d1f9      	bne.n	400c78 <twi_set_speed+0x14>
  400c84:	e000      	b.n	400c88 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400c86:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400c88:	0211      	lsls	r1, r2, #8
  400c8a:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
  400c8c:	041b      	lsls	r3, r3, #16
  400c8e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400c92:	430b      	orrs	r3, r1
  400c94:	b2d2      	uxtb	r2, r2
  400c96:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  400c98:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  400c9a:	2000      	movs	r0, #0
  400c9c:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  400c9e:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
  400ca0:	4770      	bx	lr
  400ca2:	bf00      	nop
  400ca4:	00061a80 	.word	0x00061a80

00400ca8 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400ca8:	b538      	push	{r3, r4, r5, lr}
  400caa:	4604      	mov	r4, r0
  400cac:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400cae:	f04f 33ff 	mov.w	r3, #4294967295
  400cb2:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400cb4:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400cb6:	2380      	movs	r3, #128	; 0x80
  400cb8:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400cba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400cbc:	2308      	movs	r3, #8
  400cbe:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400cc0:	2320      	movs	r3, #32
  400cc2:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  400cc4:	2304      	movs	r3, #4
  400cc6:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400cc8:	6849      	ldr	r1, [r1, #4]
  400cca:	682a      	ldr	r2, [r5, #0]
  400ccc:	4b05      	ldr	r3, [pc, #20]	; (400ce4 <twi_master_init+0x3c>)
  400cce:	4798      	blx	r3
  400cd0:	2801      	cmp	r0, #1
  400cd2:	bf14      	ite	ne
  400cd4:	2000      	movne	r0, #0
  400cd6:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  400cd8:	7a6b      	ldrb	r3, [r5, #9]
  400cda:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  400cdc:	bf04      	itt	eq
  400cde:	2340      	moveq	r3, #64	; 0x40
  400ce0:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  400ce2:	bd38      	pop	{r3, r4, r5, pc}
  400ce4:	00400c65 	.word	0x00400c65

00400ce8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400ce8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400cea:	23ac      	movs	r3, #172	; 0xac
  400cec:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400cee:	680a      	ldr	r2, [r1, #0]
  400cf0:	684b      	ldr	r3, [r1, #4]
  400cf2:	fbb2 f3f3 	udiv	r3, r2, r3
  400cf6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400cf8:	1e5c      	subs	r4, r3, #1
  400cfa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400cfe:	4294      	cmp	r4, r2
  400d00:	d80a      	bhi.n	400d18 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  400d02:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400d04:	688b      	ldr	r3, [r1, #8]
  400d06:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400d08:	f240 2302 	movw	r3, #514	; 0x202
  400d0c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400d10:	2350      	movs	r3, #80	; 0x50
  400d12:	6003      	str	r3, [r0, #0]

	return 0;
  400d14:	2000      	movs	r0, #0
  400d16:	e000      	b.n	400d1a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400d18:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d1e:	4770      	bx	lr

00400d20 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  400d20:	2340      	movs	r3, #64	; 0x40
  400d22:	6003      	str	r3, [r0, #0]
  400d24:	4770      	bx	lr
  400d26:	bf00      	nop

00400d28 <uart_enable>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400d28:	2350      	movs	r3, #80	; 0x50
  400d2a:	6003      	str	r3, [r0, #0]
  400d2c:	4770      	bx	lr
  400d2e:	bf00      	nop

00400d30 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400d30:	6943      	ldr	r3, [r0, #20]
  400d32:	f013 0f02 	tst.w	r3, #2
  400d36:	d002      	beq.n	400d3e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400d38:	61c1      	str	r1, [r0, #28]
	return 0;
  400d3a:	2000      	movs	r0, #0
  400d3c:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400d3e:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400d40:	4770      	bx	lr
  400d42:	bf00      	nop

00400d44 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400d44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d48:	6043      	str	r3, [r0, #4]
  400d4a:	4770      	bx	lr

00400d4c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400d4c:	e7fe      	b.n	400d4c <Dummy_Handler>
  400d4e:	bf00      	nop

00400d50 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400d50:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400d52:	4b20      	ldr	r3, [pc, #128]	; (400dd4 <Reset_Handler+0x84>)
  400d54:	4a20      	ldr	r2, [pc, #128]	; (400dd8 <Reset_Handler+0x88>)
  400d56:	429a      	cmp	r2, r3
  400d58:	d912      	bls.n	400d80 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400d5a:	4b20      	ldr	r3, [pc, #128]	; (400ddc <Reset_Handler+0x8c>)
  400d5c:	4a1d      	ldr	r2, [pc, #116]	; (400dd4 <Reset_Handler+0x84>)
  400d5e:	429a      	cmp	r2, r3
  400d60:	d21f      	bcs.n	400da2 <Reset_Handler+0x52>
  400d62:	1d13      	adds	r3, r2, #4
  400d64:	4c1e      	ldr	r4, [pc, #120]	; (400de0 <Reset_Handler+0x90>)
  400d66:	1ae4      	subs	r4, r4, r3
  400d68:	f024 0403 	bic.w	r4, r4, #3
  400d6c:	3404      	adds	r4, #4
  400d6e:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
  400d70:	4610      	mov	r0, r2
  400d72:	4919      	ldr	r1, [pc, #100]	; (400dd8 <Reset_Handler+0x88>)
  400d74:	585a      	ldr	r2, [r3, r1]
  400d76:	501a      	str	r2, [r3, r0]
  400d78:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400d7a:	42a3      	cmp	r3, r4
  400d7c:	d1fa      	bne.n	400d74 <Reset_Handler+0x24>
  400d7e:	e010      	b.n	400da2 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400d80:	4b14      	ldr	r3, [pc, #80]	; (400dd4 <Reset_Handler+0x84>)
  400d82:	4a15      	ldr	r2, [pc, #84]	; (400dd8 <Reset_Handler+0x88>)
  400d84:	429a      	cmp	r2, r3
  400d86:	d20c      	bcs.n	400da2 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400d88:	4a14      	ldr	r2, [pc, #80]	; (400ddc <Reset_Handler+0x8c>)
  400d8a:	4619      	mov	r1, r3
  400d8c:	1ad3      	subs	r3, r2, r3
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400d8e:	4815      	ldr	r0, [pc, #84]	; (400de4 <Reset_Handler+0x94>)
  400d90:	4418      	add	r0, r3
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400d92:	b133      	cbz	r3, 400da2 <Reset_Handler+0x52>
  400d94:	4613      	mov	r3, r2
  400d96:	1a9c      	subs	r4, r3, r2
			*pDest-- = *pSrc--;
  400d98:	5824      	ldr	r4, [r4, r0]
  400d9a:	f843 4d04 	str.w	r4, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400d9e:	4299      	cmp	r1, r3
  400da0:	d1f9      	bne.n	400d96 <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400da2:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400da4:	4b10      	ldr	r3, [pc, #64]	; (400de8 <Reset_Handler+0x98>)
  400da6:	4a11      	ldr	r2, [pc, #68]	; (400dec <Reset_Handler+0x9c>)
  400da8:	429a      	cmp	r2, r3
  400daa:	d20b      	bcs.n	400dc4 <Reset_Handler+0x74>
  400dac:	1f13      	subs	r3, r2, #4
  400dae:	4910      	ldr	r1, [pc, #64]	; (400df0 <Reset_Handler+0xa0>)
  400db0:	1ac9      	subs	r1, r1, r3
  400db2:	f021 0103 	bic.w	r1, r1, #3
  400db6:	1d1a      	adds	r2, r3, #4
  400db8:	4411      	add	r1, r2
		*pDest++ = 0;
  400dba:	2200      	movs	r2, #0
  400dbc:	f843 2f04 	str.w	r2, [r3, #4]!
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400dc0:	428b      	cmp	r3, r1
  400dc2:	d1fb      	bne.n	400dbc <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400dc4:	4b0b      	ldr	r3, [pc, #44]	; (400df4 <Reset_Handler+0xa4>)
  400dc6:	4a0c      	ldr	r2, [pc, #48]	; (400df8 <Reset_Handler+0xa8>)
  400dc8:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400dca:	4b0c      	ldr	r3, [pc, #48]	; (400dfc <Reset_Handler+0xac>)
  400dcc:	4798      	blx	r3

	/* Branch to main function */
	main();
  400dce:	4b0c      	ldr	r3, [pc, #48]	; (400e00 <Reset_Handler+0xb0>)
  400dd0:	4798      	blx	r3
  400dd2:	e7fe      	b.n	400dd2 <Reset_Handler+0x82>
  400dd4:	20000000 	.word	0x20000000
  400dd8:	00405ffc 	.word	0x00405ffc
  400ddc:	200008d4 	.word	0x200008d4
  400de0:	200008d7 	.word	0x200008d7
  400de4:	00405ff8 	.word	0x00405ff8
  400de8:	200009a8 	.word	0x200009a8
  400dec:	200008d4 	.word	0x200008d4
  400df0:	200009a3 	.word	0x200009a3
  400df4:	e000ed00 	.word	0xe000ed00
  400df8:	00400000 	.word	0x00400000
  400dfc:	00401c0d 	.word	0x00401c0d
  400e00:	00401211 	.word	0x00401211

00400e04 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400e04:	4b3d      	ldr	r3, [pc, #244]	; (400efc <SystemCoreClockUpdate+0xf8>)
  400e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e08:	f003 0303 	and.w	r3, r3, #3
  400e0c:	2b03      	cmp	r3, #3
  400e0e:	d85d      	bhi.n	400ecc <SystemCoreClockUpdate+0xc8>
  400e10:	e8df f003 	tbb	[pc, r3]
  400e14:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400e18:	4b39      	ldr	r3, [pc, #228]	; (400f00 <SystemCoreClockUpdate+0xfc>)
  400e1a:	695b      	ldr	r3, [r3, #20]
  400e1c:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400e20:	bf14      	ite	ne
  400e22:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400e26:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400e2a:	4b36      	ldr	r3, [pc, #216]	; (400f04 <SystemCoreClockUpdate+0x100>)
  400e2c:	601a      	str	r2, [r3, #0]
  400e2e:	e04d      	b.n	400ecc <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400e30:	4b32      	ldr	r3, [pc, #200]	; (400efc <SystemCoreClockUpdate+0xf8>)
  400e32:	6a1b      	ldr	r3, [r3, #32]
  400e34:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e38:	d003      	beq.n	400e42 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400e3a:	4a33      	ldr	r2, [pc, #204]	; (400f08 <SystemCoreClockUpdate+0x104>)
  400e3c:	4b31      	ldr	r3, [pc, #196]	; (400f04 <SystemCoreClockUpdate+0x100>)
  400e3e:	601a      	str	r2, [r3, #0]
  400e40:	e044      	b.n	400ecc <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e42:	4a32      	ldr	r2, [pc, #200]	; (400f0c <SystemCoreClockUpdate+0x108>)
  400e44:	4b2f      	ldr	r3, [pc, #188]	; (400f04 <SystemCoreClockUpdate+0x100>)
  400e46:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400e48:	4b2c      	ldr	r3, [pc, #176]	; (400efc <SystemCoreClockUpdate+0xf8>)
  400e4a:	6a1b      	ldr	r3, [r3, #32]
  400e4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e50:	2b10      	cmp	r3, #16
  400e52:	d002      	beq.n	400e5a <SystemCoreClockUpdate+0x56>
  400e54:	2b20      	cmp	r3, #32
  400e56:	d004      	beq.n	400e62 <SystemCoreClockUpdate+0x5e>
  400e58:	e038      	b.n	400ecc <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400e5a:	4a2d      	ldr	r2, [pc, #180]	; (400f10 <SystemCoreClockUpdate+0x10c>)
  400e5c:	4b29      	ldr	r3, [pc, #164]	; (400f04 <SystemCoreClockUpdate+0x100>)
  400e5e:	601a      	str	r2, [r3, #0]
			break;
  400e60:	e034      	b.n	400ecc <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400e62:	4a29      	ldr	r2, [pc, #164]	; (400f08 <SystemCoreClockUpdate+0x104>)
  400e64:	4b27      	ldr	r3, [pc, #156]	; (400f04 <SystemCoreClockUpdate+0x100>)
  400e66:	601a      	str	r2, [r3, #0]
			break;
  400e68:	e030      	b.n	400ecc <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400e6a:	4b24      	ldr	r3, [pc, #144]	; (400efc <SystemCoreClockUpdate+0xf8>)
  400e6c:	6a1b      	ldr	r3, [r3, #32]
  400e6e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e72:	d003      	beq.n	400e7c <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400e74:	4a24      	ldr	r2, [pc, #144]	; (400f08 <SystemCoreClockUpdate+0x104>)
  400e76:	4b23      	ldr	r3, [pc, #140]	; (400f04 <SystemCoreClockUpdate+0x100>)
  400e78:	601a      	str	r2, [r3, #0]
  400e7a:	e012      	b.n	400ea2 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e7c:	4a23      	ldr	r2, [pc, #140]	; (400f0c <SystemCoreClockUpdate+0x108>)
  400e7e:	4b21      	ldr	r3, [pc, #132]	; (400f04 <SystemCoreClockUpdate+0x100>)
  400e80:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400e82:	4b1e      	ldr	r3, [pc, #120]	; (400efc <SystemCoreClockUpdate+0xf8>)
  400e84:	6a1b      	ldr	r3, [r3, #32]
  400e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e8a:	2b10      	cmp	r3, #16
  400e8c:	d002      	beq.n	400e94 <SystemCoreClockUpdate+0x90>
  400e8e:	2b20      	cmp	r3, #32
  400e90:	d004      	beq.n	400e9c <SystemCoreClockUpdate+0x98>
  400e92:	e006      	b.n	400ea2 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400e94:	4a1e      	ldr	r2, [pc, #120]	; (400f10 <SystemCoreClockUpdate+0x10c>)
  400e96:	4b1b      	ldr	r3, [pc, #108]	; (400f04 <SystemCoreClockUpdate+0x100>)
  400e98:	601a      	str	r2, [r3, #0]
					break;
  400e9a:	e002      	b.n	400ea2 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400e9c:	4a1a      	ldr	r2, [pc, #104]	; (400f08 <SystemCoreClockUpdate+0x104>)
  400e9e:	4b19      	ldr	r3, [pc, #100]	; (400f04 <SystemCoreClockUpdate+0x100>)
  400ea0:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400ea2:	4b16      	ldr	r3, [pc, #88]	; (400efc <SystemCoreClockUpdate+0xf8>)
  400ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ea6:	f003 0303 	and.w	r3, r3, #3
  400eaa:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400eac:	4b13      	ldr	r3, [pc, #76]	; (400efc <SystemCoreClockUpdate+0xf8>)
  400eae:	bf07      	ittee	eq
  400eb0:	6a98      	ldreq	r0, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400eb2:	6a99      	ldreq	r1, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400eb4:	6ad8      	ldrne	r0, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400eb6:	6ad9      	ldrne	r1, [r3, #44]	; 0x2c
  400eb8:	4b12      	ldr	r3, [pc, #72]	; (400f04 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400eba:	f3c0 400a 	ubfx	r0, r0, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400ebe:	681a      	ldr	r2, [r3, #0]
  400ec0:	fb00 2202 	mla	r2, r0, r2, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  400ec4:	b2c9      	uxtb	r1, r1
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400ec6:	fbb2 f2f1 	udiv	r2, r2, r1
  400eca:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400ecc:	4b0b      	ldr	r3, [pc, #44]	; (400efc <SystemCoreClockUpdate+0xf8>)
  400ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ed4:	2b70      	cmp	r3, #112	; 0x70
  400ed6:	d107      	bne.n	400ee8 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400ed8:	4b0a      	ldr	r3, [pc, #40]	; (400f04 <SystemCoreClockUpdate+0x100>)
  400eda:	681a      	ldr	r2, [r3, #0]
  400edc:	490d      	ldr	r1, [pc, #52]	; (400f14 <SystemCoreClockUpdate+0x110>)
  400ede:	fba1 0202 	umull	r0, r2, r1, r2
  400ee2:	0852      	lsrs	r2, r2, #1
  400ee4:	601a      	str	r2, [r3, #0]
  400ee6:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400ee8:	4b04      	ldr	r3, [pc, #16]	; (400efc <SystemCoreClockUpdate+0xf8>)
  400eea:	6b19      	ldr	r1, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400eec:	4b05      	ldr	r3, [pc, #20]	; (400f04 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400eee:	f3c1 1102 	ubfx	r1, r1, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400ef2:	681a      	ldr	r2, [r3, #0]
  400ef4:	40ca      	lsrs	r2, r1
  400ef6:	601a      	str	r2, [r3, #0]
  400ef8:	4770      	bx	lr
  400efa:	bf00      	nop
  400efc:	400e0400 	.word	0x400e0400
  400f00:	400e1410 	.word	0x400e1410
  400f04:	2000000c 	.word	0x2000000c
  400f08:	00b71b00 	.word	0x00b71b00
  400f0c:	003d0900 	.word	0x003d0900
  400f10:	007a1200 	.word	0x007a1200
  400f14:	aaaaaaab 	.word	0xaaaaaaab

00400f18 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400f18:	4b1a      	ldr	r3, [pc, #104]	; (400f84 <system_init_flash+0x6c>)
  400f1a:	4298      	cmp	r0, r3
  400f1c:	d807      	bhi.n	400f2e <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400f1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400f22:	4a19      	ldr	r2, [pc, #100]	; (400f88 <system_init_flash+0x70>)
  400f24:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400f26:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f2a:	6013      	str	r3, [r2, #0]
  400f2c:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400f2e:	4b17      	ldr	r3, [pc, #92]	; (400f8c <system_init_flash+0x74>)
  400f30:	4298      	cmp	r0, r3
  400f32:	d806      	bhi.n	400f42 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400f34:	4b16      	ldr	r3, [pc, #88]	; (400f90 <system_init_flash+0x78>)
  400f36:	4a14      	ldr	r2, [pc, #80]	; (400f88 <system_init_flash+0x70>)
  400f38:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400f3a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f3e:	6013      	str	r3, [r2, #0]
  400f40:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400f42:	4b14      	ldr	r3, [pc, #80]	; (400f94 <system_init_flash+0x7c>)
  400f44:	4298      	cmp	r0, r3
  400f46:	d806      	bhi.n	400f56 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400f48:	4b13      	ldr	r3, [pc, #76]	; (400f98 <system_init_flash+0x80>)
  400f4a:	4a0f      	ldr	r2, [pc, #60]	; (400f88 <system_init_flash+0x70>)
  400f4c:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400f4e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f52:	6013      	str	r3, [r2, #0]
  400f54:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400f56:	4b11      	ldr	r3, [pc, #68]	; (400f9c <system_init_flash+0x84>)
  400f58:	4298      	cmp	r0, r3
  400f5a:	d806      	bhi.n	400f6a <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400f5c:	4b10      	ldr	r3, [pc, #64]	; (400fa0 <system_init_flash+0x88>)
  400f5e:	4a0a      	ldr	r2, [pc, #40]	; (400f88 <system_init_flash+0x70>)
  400f60:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400f62:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f66:	6013      	str	r3, [r2, #0]
  400f68:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400f6a:	4b0e      	ldr	r3, [pc, #56]	; (400fa4 <system_init_flash+0x8c>)
  400f6c:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400f6e:	bf94      	ite	ls
  400f70:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400f74:	4b0c      	ldrhi	r3, [pc, #48]	; (400fa8 <system_init_flash+0x90>)
  400f76:	4a04      	ldr	r2, [pc, #16]	; (400f88 <system_init_flash+0x70>)
  400f78:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400f7a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f7e:	6013      	str	r3, [r2, #0]
  400f80:	4770      	bx	lr
  400f82:	bf00      	nop
  400f84:	01312cff 	.word	0x01312cff
  400f88:	400e0a00 	.word	0x400e0a00
  400f8c:	026259ff 	.word	0x026259ff
  400f90:	04000100 	.word	0x04000100
  400f94:	039386ff 	.word	0x039386ff
  400f98:	04000200 	.word	0x04000200
  400f9c:	04c4b3ff 	.word	0x04c4b3ff
  400fa0:	04000300 	.word	0x04000300
  400fa4:	05f5e0ff 	.word	0x05f5e0ff
  400fa8:	04000500 	.word	0x04000500

00400fac <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400fac:	4b09      	ldr	r3, [pc, #36]	; (400fd4 <_sbrk+0x28>)
  400fae:	681b      	ldr	r3, [r3, #0]
  400fb0:	b913      	cbnz	r3, 400fb8 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400fb2:	4a09      	ldr	r2, [pc, #36]	; (400fd8 <_sbrk+0x2c>)
  400fb4:	4b07      	ldr	r3, [pc, #28]	; (400fd4 <_sbrk+0x28>)
  400fb6:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400fb8:	4b06      	ldr	r3, [pc, #24]	; (400fd4 <_sbrk+0x28>)
  400fba:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400fbc:	181a      	adds	r2, r3, r0
  400fbe:	4907      	ldr	r1, [pc, #28]	; (400fdc <_sbrk+0x30>)
  400fc0:	4291      	cmp	r1, r2
  400fc2:	db04      	blt.n	400fce <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400fc4:	4610      	mov	r0, r2
  400fc6:	4a03      	ldr	r2, [pc, #12]	; (400fd4 <_sbrk+0x28>)
  400fc8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400fca:	4618      	mov	r0, r3
  400fcc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400fce:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400fd2:	4770      	bx	lr
  400fd4:	20000968 	.word	0x20000968
  400fd8:	200039a8 	.word	0x200039a8
  400fdc:	20027ffc 	.word	0x20027ffc

00400fe0 <Button1_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void Button1_Handler(uint32_t id, uint32_t mask)
{
	if ((PIN_PUSHBUTTON_1_ID == id) && (PIN_PUSHBUTTON_1_MASK == mask))
  400fe0:	280b      	cmp	r0, #11
  400fe2:	d104      	bne.n	400fee <Button1_Handler+0xe>
  400fe4:	2901      	cmp	r1, #1
  400fe6:	d102      	bne.n	400fee <Button1_Handler+0xe>
static void ProcessButtonEvt(uint8_t uc_button)
{
	if ((uc_button >= DOOR_PRESSED_MIN) && 
	    (uc_button <= DOOR_PRESSED_MAX))
	{
		g_door_pressed = uc_button;
  400fe8:	2201      	movs	r2, #1
  400fea:	4b01      	ldr	r3, [pc, #4]	; (400ff0 <Button1_Handler+0x10>)
  400fec:	601a      	str	r2, [r3, #0]
  400fee:	4770      	bx	lr
  400ff0:	20000010 	.word	0x20000010

00400ff4 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  400ff4:	b570      	push	{r4, r5, r6, lr}
  400ff6:	b082      	sub	sp, #8
  400ff8:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400ffa:	ac02      	add	r4, sp, #8
  400ffc:	2302      	movs	r3, #2
  400ffe:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  401002:	4d09      	ldr	r5, [pc, #36]	; (401028 <ssd1306_write_command+0x34>)
  401004:	4628      	mov	r0, r5
  401006:	4621      	mov	r1, r4
  401008:	4b08      	ldr	r3, [pc, #32]	; (40102c <ssd1306_write_command+0x38>)
  40100a:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40100c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401010:	4b07      	ldr	r3, [pc, #28]	; (401030 <ssd1306_write_command+0x3c>)
  401012:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401014:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  401016:	2056      	movs	r0, #86	; 0x56
  401018:	4b06      	ldr	r3, [pc, #24]	; (401034 <ssd1306_write_command+0x40>)
  40101a:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  40101c:	4628      	mov	r0, r5
  40101e:	4621      	mov	r1, r4
  401020:	4b05      	ldr	r3, [pc, #20]	; (401038 <ssd1306_write_command+0x44>)
  401022:	4798      	blx	r3
#endif
}
  401024:	b002      	add	sp, #8
  401026:	bd70      	pop	{r4, r5, r6, pc}
  401028:	40008000 	.word	0x40008000
  40102c:	004003e9 	.word	0x004003e9
  401030:	400e1200 	.word	0x400e1200
  401034:	20000001 	.word	0x20000001
  401038:	00400419 	.word	0x00400419

0040103c <Button3_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void Button3_Handler(uint32_t id, uint32_t mask)
{
	if ((PIN_PUSHBUTTON_3_ID == id) && (PIN_PUSHBUTTON_3_MASK == mask))
  40103c:	280d      	cmp	r0, #13
  40103e:	d105      	bne.n	40104c <Button3_Handler+0x10>
  401040:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  401044:	d102      	bne.n	40104c <Button3_Handler+0x10>
static void ProcessButtonEvt(uint8_t uc_button)
{
	if ((uc_button >= DOOR_PRESSED_MIN) && 
	    (uc_button <= DOOR_PRESSED_MAX))
	{
		g_door_pressed = uc_button;
  401046:	2203      	movs	r2, #3
  401048:	4b01      	ldr	r3, [pc, #4]	; (401050 <Button3_Handler+0x14>)
  40104a:	601a      	str	r2, [r3, #0]
  40104c:	4770      	bx	lr
  40104e:	bf00      	nop
  401050:	20000010 	.word	0x20000010

00401054 <Button2_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void Button2_Handler(uint32_t id, uint32_t mask)
{
	if ((PIN_PUSHBUTTON_2_ID == id) && (PIN_PUSHBUTTON_2_MASK == mask))
  401054:	280d      	cmp	r0, #13
  401056:	d105      	bne.n	401064 <Button2_Handler+0x10>
  401058:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40105c:	d102      	bne.n	401064 <Button2_Handler+0x10>
static void ProcessButtonEvt(uint8_t uc_button)
{
	if ((uc_button >= DOOR_PRESSED_MIN) && 
	    (uc_button <= DOOR_PRESSED_MAX))
	{
		g_door_pressed = uc_button;
  40105e:	2202      	movs	r2, #2
  401060:	4b01      	ldr	r3, [pc, #4]	; (401068 <Button2_Handler+0x14>)
  401062:	601a      	str	r2, [r3, #0]
  401064:	4770      	bx	lr
  401066:	bf00      	nop
  401068:	20000010 	.word	0x20000010

0040106c <pick_open_door>:
	uint32_t winning_door;
	
} monty_hall_state;
	
uint32_t pick_open_door( uint32_t winning_door, uint32_t first_door )
{
  40106c:	b538      	push	{r3, r4, r5, lr}
  40106e:	460c      	mov	r4, r1
	uint32_t open_door = DOOR_NOT_PRESSED;
	if( first_door != winning_door )
  401070:	4281      	cmp	r1, r0
  401072:	d014      	beq.n	40109e <pick_open_door+0x32>
	{
		// Since the winning door is not the selected door,
		//  we need simply pick the opposite unselected door
		//  There is probably a more efficient algorithm for this,
		//  but this will work for now.
		if (first_door == 1)
  401074:	2901      	cmp	r1, #1
  401076:	d104      	bne.n	401082 <pick_open_door+0x16>
		{
			if (winning_door == 2)
			{
				open_door = 3;
  401078:	2802      	cmp	r0, #2
  40107a:	bf14      	ite	ne
  40107c:	2502      	movne	r5, #2
  40107e:	2503      	moveq	r5, #3
  401080:	e01c      	b.n	4010bc <pick_open_door+0x50>
			else
			{
				open_door = 2;
			}
		}
		else if (first_door == 2)
  401082:	2902      	cmp	r1, #2
  401084:	d104      	bne.n	401090 <pick_open_door+0x24>
		{
			if (winning_door == 3)
			{
				open_door = 1;
  401086:	2803      	cmp	r0, #3
  401088:	bf14      	ite	ne
  40108a:	2503      	movne	r5, #3
  40108c:	2501      	moveq	r5, #1
  40108e:	e015      	b.n	4010bc <pick_open_door+0x50>
			else
			{
				open_door = 3;
			}
		}
		else if (first_door == 3)
  401090:	2903      	cmp	r1, #3
  401092:	d112      	bne.n	4010ba <pick_open_door+0x4e>
		{
			if (winning_door == 1)
			{
				open_door = 2;
  401094:	2801      	cmp	r0, #1
  401096:	bf14      	ite	ne
  401098:	2501      	movne	r5, #1
  40109a:	2502      	moveq	r5, #2
  40109c:	e00e      	b.n	4010bc <pick_open_door+0x50>
			}
		}
	}
	else
	{
		open_door = 1;
  40109e:	2901      	cmp	r1, #1
  4010a0:	bf0c      	ite	eq
  4010a2:	2502      	moveq	r5, #2
  4010a4:	2501      	movne	r5, #1
			open_door++;
		}
		
		// Since Monty can open either door, we need to randomly select
		//  a door.
		int random_value = rand();
  4010a6:	4b06      	ldr	r3, [pc, #24]	; (4010c0 <pick_open_door+0x54>)
  4010a8:	4798      	blx	r3
		if( random_value & 0x1 )
  4010aa:	f010 0f01 	tst.w	r0, #1
		{
			open_door++;
  4010ae:	bf18      	it	ne
  4010b0:	3501      	addne	r5, #1
		}
		if( open_door == winning_door )
  4010b2:	42a5      	cmp	r5, r4
  4010b4:	d102      	bne.n	4010bc <pick_open_door+0x50>
		{
			// we can't pick this door, since it is the winning one
			open_door++;
  4010b6:	3501      	adds	r5, #1
  4010b8:	e000      	b.n	4010bc <pick_open_door+0x50>
	
} monty_hall_state;
	
uint32_t pick_open_door( uint32_t winning_door, uint32_t first_door )
{
	uint32_t open_door = DOOR_NOT_PRESSED;
  4010ba:	2504      	movs	r5, #4
			// we can't pick this door, since it is the winning one
			open_door++;
		}
	}
	return open_door;
}
  4010bc:	4628      	mov	r0, r5
  4010be:	bd38      	pop	{r3, r4, r5, pc}
  4010c0:	00401c79 	.word	0x00401c79

004010c4 <handle_door_press>:

int32_t handle_door_press( monty_hall_state *p_game_state, uint32_t new_door_press )
{
  4010c4:	b538      	push	{r3, r4, r5, lr}
  4010c6:	460d      	mov	r5, r1
	if( p_game_state == NULL )
  4010c8:	4604      	mov	r4, r0
  4010ca:	2800      	cmp	r0, #0
  4010cc:	d03b      	beq.n	401146 <handle_door_press+0x82>
	{
		return -1;
	}
	
	switch( p_game_state->state )
  4010ce:	7c03      	ldrb	r3, [r0, #16]
  4010d0:	b113      	cbz	r3, 4010d8 <handle_door_press+0x14>
  4010d2:	2b01      	cmp	r3, #1
  4010d4:	d015      	beq.n	401102 <handle_door_press+0x3e>
  4010d6:	e033      	b.n	401140 <handle_door_press+0x7c>
	{
		case MONTY_GAME_STARTED:
		{
			p_game_state->winning_door = (rand() % 3) + 1;
  4010d8:	4b1e      	ldr	r3, [pc, #120]	; (401154 <handle_door_press+0x90>)
  4010da:	4798      	blx	r3
  4010dc:	4b1e      	ldr	r3, [pc, #120]	; (401158 <handle_door_press+0x94>)
  4010de:	fb83 2300 	smull	r2, r3, r3, r0
  4010e2:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  4010e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4010ea:	1ac0      	subs	r0, r0, r3
  4010ec:	3001      	adds	r0, #1
  4010ee:	61e0      	str	r0, [r4, #28]
			p_game_state->first_door = new_door_press;
  4010f0:	6165      	str	r5, [r4, #20]
			p_game_state->state = FIRST_DOOR_OPEN;
  4010f2:	2301      	movs	r3, #1
  4010f4:	7423      	strb	r3, [r4, #16]
			p_game_state->open_door = pick_open_door( p_game_state->winning_door, new_door_press );
  4010f6:	4629      	mov	r1, r5
  4010f8:	4b18      	ldr	r3, [pc, #96]	; (40115c <handle_door_press+0x98>)
  4010fa:	4798      	blx	r3
  4010fc:	61a0      	str	r0, [r4, #24]
		{
			p_game_state->state = MONTY_GAME_STARTED;
			break;
		}
	}
	return 0;
  4010fe:	2000      	movs	r0, #0
		{
			p_game_state->winning_door = (rand() % 3) + 1;
			p_game_state->first_door = new_door_press;
			p_game_state->state = FIRST_DOOR_OPEN;
			p_game_state->open_door = pick_open_door( p_game_state->winning_door, new_door_press );
			break;
  401100:	bd38      	pop	{r3, r4, r5, pc}
		}
		case FIRST_DOOR_OPEN:
		{
			if( p_game_state->open_door == new_door_press )
  401102:	6983      	ldr	r3, [r0, #24]
  401104:	428b      	cmp	r3, r1
  401106:	d021      	beq.n	40114c <handle_door_press+0x88>
			{
				// Invalid button press, stay in this state and wait for another press
				return -1;
			}
			if( p_game_state->winning_door == new_door_press )
  401108:	69c3      	ldr	r3, [r0, #28]
  40110a:	428b      	cmp	r3, r1
  40110c:	d105      	bne.n	40111a <handle_door_press+0x56>
			{
				p_game_state->state = GAME_OVER_WON;
  40110e:	2302      	movs	r3, #2
  401110:	7403      	strb	r3, [r0, #16]
				p_game_state->times_won++;
  401112:	68c3      	ldr	r3, [r0, #12]
  401114:	3301      	adds	r3, #1
  401116:	60c3      	str	r3, [r0, #12]
  401118:	e001      	b.n	40111e <handle_door_press+0x5a>
			}
			else
			{
				p_game_state->state = GAME_OVER_LOST;
  40111a:	2303      	movs	r3, #3
  40111c:	7403      	strb	r3, [r0, #16]
			}
			if( p_game_state->first_door != new_door_press )
  40111e:	6963      	ldr	r3, [r4, #20]
  401120:	42ab      	cmp	r3, r5
  401122:	d008      	beq.n	401136 <handle_door_press+0x72>
			{
				p_game_state->times_switched++;
  401124:	6863      	ldr	r3, [r4, #4]
  401126:	3301      	adds	r3, #1
  401128:	6063      	str	r3, [r4, #4]
				if( p_game_state->state == GAME_OVER_WON )
  40112a:	7c23      	ldrb	r3, [r4, #16]
  40112c:	2b02      	cmp	r3, #2
  40112e:	d102      	bne.n	401136 <handle_door_press+0x72>
				{
					p_game_state->times_switched_won++;
  401130:	68a3      	ldr	r3, [r4, #8]
  401132:	3301      	adds	r3, #1
  401134:	60a3      	str	r3, [r4, #8]
				}
			}
			p_game_state->number_of_games++;
  401136:	6823      	ldr	r3, [r4, #0]
  401138:	3301      	adds	r3, #1
  40113a:	6023      	str	r3, [r4, #0]
		{
			p_game_state->state = MONTY_GAME_STARTED;
			break;
		}
	}
	return 0;
  40113c:	2000      	movs	r0, #0
				{
					p_game_state->times_switched_won++;
				}
			}
			p_game_state->number_of_games++;
			break;
  40113e:	bd38      	pop	{r3, r4, r5, pc}
		}
		default:
		case GAME_OVER_LOST:
		case GAME_OVER_WON:
		{
			p_game_state->state = MONTY_GAME_STARTED;
  401140:	2000      	movs	r0, #0
  401142:	7420      	strb	r0, [r4, #16]
			break;
  401144:	bd38      	pop	{r3, r4, r5, pc}

int32_t handle_door_press( monty_hall_state *p_game_state, uint32_t new_door_press )
{
	if( p_game_state == NULL )
	{
		return -1;
  401146:	f04f 30ff 	mov.w	r0, #4294967295
  40114a:	bd38      	pop	{r3, r4, r5, pc}
		case FIRST_DOOR_OPEN:
		{
			if( p_game_state->open_door == new_door_press )
			{
				// Invalid button press, stay in this state and wait for another press
				return -1;
  40114c:	f04f 30ff 	mov.w	r0, #4294967295
			p_game_state->state = MONTY_GAME_STARTED;
			break;
		}
	}
	return 0;
}
  401150:	bd38      	pop	{r3, r4, r5, pc}
  401152:	bf00      	nop
  401154:	00401c79 	.word	0x00401c79
  401158:	55555556 	.word	0x55555556
  40115c:	0040106d 	.word	0x0040106d

00401160 <sam4s_console_uart_init>:

/**
 * \brief Initializes the UART for transmitting characters
 */
sam4s_console_uart_init()
{
  401160:	b510      	push	{r4, lr}
  401162:	b084      	sub	sp, #16
	pmc_enable_periph_clk(ID_UART1);
  401164:	2009      	movs	r0, #9
  401166:	4b0b      	ldr	r3, [pc, #44]	; (401194 <sam4s_console_uart_init+0x34>)
  401168:	4798      	blx	r3
    const sam_uart_opt_t uart_console_settings = {
  40116a:	4b0b      	ldr	r3, [pc, #44]	; (401198 <sam4s_console_uart_init+0x38>)
  40116c:	9301      	str	r3, [sp, #4]
  40116e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  401172:	9302      	str	r3, [sp, #8]
  401174:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401178:	9303      	str	r3, [sp, #12]
        sysclk_get_cpu_hz(),
        9600,
        UART_MR_PAR_NO
    };

    uart_init(UART1,&uart_console_settings);
  40117a:	4c08      	ldr	r4, [pc, #32]	; (40119c <sam4s_console_uart_init+0x3c>)
  40117c:	4620      	mov	r0, r4
  40117e:	a901      	add	r1, sp, #4
  401180:	4b07      	ldr	r3, [pc, #28]	; (4011a0 <sam4s_console_uart_init+0x40>)
  401182:	4798      	blx	r3
    uart_enable_tx(UART1);                 
  401184:	4620      	mov	r0, r4
  401186:	4b07      	ldr	r3, [pc, #28]	; (4011a4 <sam4s_console_uart_init+0x44>)
  401188:	4798      	blx	r3
    uart_enable(UART1);
  40118a:	4620      	mov	r0, r4
  40118c:	4b06      	ldr	r3, [pc, #24]	; (4011a8 <sam4s_console_uart_init+0x48>)
  40118e:	4798      	blx	r3
}
  401190:	b004      	add	sp, #16
  401192:	bd10      	pop	{r4, pc}
  401194:	00400af1 	.word	0x00400af1
  401198:	07270e00 	.word	0x07270e00
  40119c:	400e0800 	.word	0x400e0800
  4011a0:	00400ce9 	.word	0x00400ce9
  4011a4:	00400d21 	.word	0x00400d21
  4011a8:	00400d29 	.word	0x00400d29

004011ac <print_uart>:
 * \param p_string - buffer of characters to transmit
 * \param max_len - maximum number of characters that may be in the buffer
 * \param uart_timeout_cnt - number of times to try to write to the UART before timing out
 */
void print_uart( char * p_string, uint32_t max_len, uint32_t uart_timeout_cnt )
{
  4011ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4011b0:	4607      	mov	r7, r0
  4011b2:	4616      	mov	r6, r2
    uint32_t len = strnlen(p_string, max_len);
  4011b4:	4b13      	ldr	r3, [pc, #76]	; (401204 <print_uart+0x58>)
  4011b6:	4798      	blx	r3
    for( uint32_t i = 0; i < len; i++ )
  4011b8:	4682      	mov	sl, r0
  4011ba:	b198      	cbz	r0, 4011e4 <print_uart+0x38>
  4011bc:	2500      	movs	r5, #0
    {
        for( uint32_t count = 0; count < uart_timeout_cnt; count++ )
        {
            if( uart_write(UART1, p_string[i]) == 0 )
  4011be:	f8df 9048 	ldr.w	r9, [pc, #72]	; 401208 <print_uart+0x5c>
  4011c2:	f8df 8048 	ldr.w	r8, [pc, #72]	; 40120c <print_uart+0x60>
  4011c6:	e009      	b.n	4011dc <print_uart+0x30>
  4011c8:	4640      	mov	r0, r8
  4011ca:	5d79      	ldrb	r1, [r7, r5]
  4011cc:	47c8      	blx	r9
  4011ce:	b110      	cbz	r0, 4011d6 <print_uart+0x2a>
void print_uart( char * p_string, uint32_t max_len, uint32_t uart_timeout_cnt )
{
    uint32_t len = strnlen(p_string, max_len);
    for( uint32_t i = 0; i < len; i++ )
    {
        for( uint32_t count = 0; count < uart_timeout_cnt; count++ )
  4011d0:	3401      	adds	r4, #1
  4011d2:	42b4      	cmp	r4, r6
  4011d4:	d1f8      	bne.n	4011c8 <print_uart+0x1c>
 * \param uart_timeout_cnt - number of times to try to write to the UART before timing out
 */
void print_uart( char * p_string, uint32_t max_len, uint32_t uart_timeout_cnt )
{
    uint32_t len = strnlen(p_string, max_len);
    for( uint32_t i = 0; i < len; i++ )
  4011d6:	3501      	adds	r5, #1
  4011d8:	4555      	cmp	r5, sl
  4011da:	d003      	beq.n	4011e4 <print_uart+0x38>
    {
        for( uint32_t count = 0; count < uart_timeout_cnt; count++ )
  4011dc:	2e00      	cmp	r6, #0
  4011de:	d0fa      	beq.n	4011d6 <print_uart+0x2a>
  4011e0:	2400      	movs	r4, #0
  4011e2:	e7f1      	b.n	4011c8 <print_uart+0x1c>
            {
                break;
            }
        }
    }
    for( uint32_t count = 0; count < uart_timeout_cnt; count++ )
  4011e4:	b15e      	cbz	r6, 4011fe <print_uart+0x52>
  4011e6:	2400      	movs	r4, #0
    {
        if( uart_write(UART1, '\n') == 0 )
  4011e8:	f8df 8020 	ldr.w	r8, [pc, #32]	; 40120c <print_uart+0x60>
  4011ec:	270a      	movs	r7, #10
  4011ee:	4d06      	ldr	r5, [pc, #24]	; (401208 <print_uart+0x5c>)
  4011f0:	4640      	mov	r0, r8
  4011f2:	4639      	mov	r1, r7
  4011f4:	47a8      	blx	r5
  4011f6:	b110      	cbz	r0, 4011fe <print_uart+0x52>
            {
                break;
            }
        }
    }
    for( uint32_t count = 0; count < uart_timeout_cnt; count++ )
  4011f8:	3401      	adds	r4, #1
  4011fa:	42b4      	cmp	r4, r6
  4011fc:	d1f8      	bne.n	4011f0 <print_uart+0x44>
  4011fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401202:	bf00      	nop
  401204:	00401d4d 	.word	0x00401d4d
  401208:	00400d31 	.word	0x00400d31
  40120c:	400e0800 	.word	0x400e0800

00401210 <main>:
    }
}


int main(void)
{
  401210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401214:	b0ab      	sub	sp, #172	; 0xac
	const uint32_t max_disp_string = 120;
    const uint32_t max_uart_tries  = 1000000;
    char result_disp[max_disp_string];

	// Initialize clocks.
	sysclk_init();
  401216:	4b77      	ldr	r3, [pc, #476]	; (4013f4 <main+0x1e4>)
  401218:	4798      	blx	r3

	// Initialize GPIO states.
	board_init();
  40121a:	4b77      	ldr	r3, [pc, #476]	; (4013f8 <main+0x1e8>)
  40121c:	4798      	blx	r3

	// Initialize at30tse.
	at30tse_init();
  40121e:	4b77      	ldr	r3, [pc, #476]	; (4013fc <main+0x1ec>)
  401220:	4798      	blx	r3
 * pressed or released.
 */
static void configure_buttons(void)
{
	/* Configure Pushbutton 1. */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_1_ID);
  401222:	200b      	movs	r0, #11
  401224:	f8df a23c 	ldr.w	sl, [pc, #572]	; 401464 <main+0x254>
  401228:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  40122a:	4c75      	ldr	r4, [pc, #468]	; (401400 <main+0x1f0>)
  40122c:	4620      	mov	r0, r4
  40122e:	2101      	movs	r1, #1
  401230:	220a      	movs	r2, #10
  401232:	f8df 9234 	ldr.w	r9, [pc, #564]	; 401468 <main+0x258>
  401236:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  401238:	4b72      	ldr	r3, [pc, #456]	; (401404 <main+0x1f4>)
  40123a:	9300      	str	r3, [sp, #0]
  40123c:	4620      	mov	r0, r4
  40123e:	210b      	movs	r1, #11
  401240:	2201      	movs	r2, #1
  401242:	2379      	movs	r3, #121	; 0x79
  401244:	f8df 8224 	ldr.w	r8, [pc, #548]	; 40146c <main+0x25c>
  401248:	47c0      	blx	r8
  40124a:	4f6f      	ldr	r7, [pc, #444]	; (401408 <main+0x1f8>)
  40124c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401250:	603b      	str	r3, [r7, #0]
			PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, Button1_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_1_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO, (IRQn_Type) PIN_PUSHBUTTON_1_ID, IRQ_PRIOR_PIO);
  401252:	4620      	mov	r0, r4
  401254:	210b      	movs	r1, #11
  401256:	2200      	movs	r2, #0
  401258:	4e6c      	ldr	r6, [pc, #432]	; (40140c <main+0x1fc>)
  40125a:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  40125c:	4620      	mov	r0, r4
  40125e:	2101      	movs	r1, #1
  401260:	4d6b      	ldr	r5, [pc, #428]	; (401410 <main+0x200>)
  401262:	47a8      	blx	r5

	/* Configure Pushbutton 2. */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_2_ID);
  401264:	200d      	movs	r0, #13
  401266:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK, 10);
  401268:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  40126c:	4620      	mov	r0, r4
  40126e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401272:	220a      	movs	r2, #10
  401274:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_ID,
  401276:	4b67      	ldr	r3, [pc, #412]	; (401414 <main+0x204>)
  401278:	9300      	str	r3, [sp, #0]
  40127a:	4620      	mov	r0, r4
  40127c:	210d      	movs	r1, #13
  40127e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401282:	2379      	movs	r3, #121	; 0x79
  401284:	47c0      	blx	r8
  401286:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  40128a:	f8c7 b000 	str.w	fp, [r7]
			PIN_PUSHBUTTON_2_MASK, PIN_PUSHBUTTON_2_ATTR, Button2_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_2_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_2_PIO, (IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
  40128e:	4620      	mov	r0, r4
  401290:	210d      	movs	r1, #13
  401292:	2200      	movs	r2, #0
  401294:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
  401296:	4620      	mov	r0, r4
  401298:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40129c:	47a8      	blx	r5

	/* Configure Pushbutton 3. */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_3_ID);
  40129e:	200d      	movs	r0, #13
  4012a0:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK, 10);
  4012a2:	4620      	mov	r0, r4
  4012a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4012a8:	220a      	movs	r2, #10
  4012aa:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_ID,
  4012ac:	4b5a      	ldr	r3, [pc, #360]	; (401418 <main+0x208>)
  4012ae:	9300      	str	r3, [sp, #0]
  4012b0:	4620      	mov	r0, r4
  4012b2:	210d      	movs	r1, #13
  4012b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4012b8:	2379      	movs	r3, #121	; 0x79
  4012ba:	47c0      	blx	r8
  4012bc:	f8c7 b000 	str.w	fp, [r7]
			PIN_PUSHBUTTON_3_MASK, PIN_PUSHBUTTON_3_ATTR, Button3_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_3_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_3_PIO, (IRQn_Type) PIN_PUSHBUTTON_3_ID, IRQ_PRIOR_PIO);
  4012c0:	4620      	mov	r0, r4
  4012c2:	210d      	movs	r1, #13
  4012c4:	2200      	movs	r2, #0
  4012c6:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK);
  4012c8:	4620      	mov	r0, r4
  4012ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4012ce:	47a8      	blx	r5

	// Configure IO1 buttons.
	configure_buttons();

	// Start the UART
	sam4s_console_uart_init();
  4012d0:	4b52      	ldr	r3, [pc, #328]	; (40141c <main+0x20c>)
  4012d2:	4798      	blx	r3
	
	// Initialize SPI and SSD1306 controller.
	ssd1306_init();
  4012d4:	4b52      	ldr	r3, [pc, #328]	; (401420 <main+0x210>)
  4012d6:	4798      	blx	r3
  4012d8:	f04f 0a00 	mov.w	sl, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4012dc:	f8df b190 	ldr.w	fp, [pc, #400]	; 401470 <main+0x260>
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  4012e0:	4f50      	ldr	r7, [pc, #320]	; (401424 <main+0x214>)
  4012e2:	f8df 9190 	ldr.w	r9, [pc, #400]	; 401474 <main+0x264>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012e6:	46a0      	mov	r8, r4
  4012e8:	463e      	mov	r6, r7
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4012ea:	f00a 0007 	and.w	r0, sl, #7
  4012ee:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4012f2:	47d8      	blx	fp
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4012f4:	2010      	movs	r0, #16
  4012f6:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4012f8:	2000      	movs	r0, #0
  4012fa:	47d8      	blx	fp
  4012fc:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4012fe:	ac2a      	add	r4, sp, #168	; 0xa8
  401300:	2302      	movs	r3, #2
  401302:	f844 3d9c 	str.w	r3, [r4, #-156]!
	spi_select_device(SSD1306_SPI, &device);
  401306:	4630      	mov	r0, r6
  401308:	4621      	mov	r1, r4
  40130a:	47c8      	blx	r9
  40130c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401310:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  401314:	2300      	movs	r3, #0
  401316:	60fb      	str	r3, [r7, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  401318:	2056      	movs	r0, #86	; 0x56
  40131a:	4b43      	ldr	r3, [pc, #268]	; (401428 <main+0x218>)
  40131c:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  40131e:	4630      	mov	r0, r6
  401320:	4621      	mov	r1, r4
  401322:	4b42      	ldr	r3, [pc, #264]	; (40142c <main+0x21c>)
  401324:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  401326:	3d01      	subs	r5, #1
  401328:	d1e9      	bne.n	4012fe <main+0xee>
  40132a:	f10a 0a01 	add.w	sl, sl, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  40132e:	f1ba 0f04 	cmp.w	sl, #4
  401332:	d1da      	bne.n	4012ea <main+0xda>
	ssd1306_clear();


	monty_hall_state game_state = { 0, 0, 0, 0, MONTY_GAME_STARTED,
  401334:	ac04      	add	r4, sp, #16
  401336:	4d3e      	ldr	r5, [pc, #248]	; (401430 <main+0x220>)
  401338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40133a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40133c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  401340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								DOOR_NOT_PRESSED, DOOR_NOT_PRESSED, DOOR_NOT_PRESSED };
	for( ;; )
	{
		int32_t result = 0;
		if( g_door_pressed != DOOR_NOT_PRESSED )
  401344:	4c3b      	ldr	r4, [pc, #236]	; (401434 <main+0x224>)
		{
			uint32_t game_over = false;
			result = handle_door_press( &game_state, g_door_pressed );
  401346:	4d3c      	ldr	r5, [pc, #240]	; (401438 <main+0x228>)
				print_uart( "Press a button to select a door", max_disp_string, max_uart_tries );

			}
			if( game_over )
			{
				sprintf( result_disp, "Games Played: %d, Games Won %d, Switched %d Switched Won %d",
  401348:	4e3c      	ldr	r6, [pc, #240]	; (40143c <main+0x22c>)
	monty_hall_state game_state = { 0, 0, 0, 0, MONTY_GAME_STARTED,
								DOOR_NOT_PRESSED, DOOR_NOT_PRESSED, DOOR_NOT_PRESSED };
	for( ;; )
	{
		int32_t result = 0;
		if( g_door_pressed != DOOR_NOT_PRESSED )
  40134a:	6823      	ldr	r3, [r4, #0]
  40134c:	2b04      	cmp	r3, #4
  40134e:	d03c      	beq.n	4013ca <main+0x1ba>
		{
			uint32_t game_over = false;
			result = handle_door_press( &game_state, g_door_pressed );
  401350:	6821      	ldr	r1, [r4, #0]
  401352:	a804      	add	r0, sp, #16
  401354:	47a8      	blx	r5
			g_door_pressed = DOOR_NOT_PRESSED;
  401356:	2304      	movs	r3, #4
  401358:	6023      	str	r3, [r4, #0]
			if( game_state.state == FIRST_DOOR_OPEN )
  40135a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  40135e:	2b01      	cmp	r3, #1
  401360:	d10d      	bne.n	40137e <main+0x16e>
			{
				sprintf( result_disp, "Game State %d: selected door %d open door %d", 
  401362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401364:	9300      	str	r3, [sp, #0]
  401366:	a80c      	add	r0, sp, #48	; 0x30
  401368:	4935      	ldr	r1, [pc, #212]	; (401440 <main+0x230>)
  40136a:	2201      	movs	r2, #1
  40136c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40136e:	4f35      	ldr	r7, [pc, #212]	; (401444 <main+0x234>)
  401370:	47b8      	blx	r7
				         game_state.state,
						 game_state.first_door,
						 game_state.open_door );
				print_uart( result_disp, max_disp_string, max_uart_tries );
  401372:	a80c      	add	r0, sp, #48	; 0x30
  401374:	2178      	movs	r1, #120	; 0x78
  401376:	4a34      	ldr	r2, [pc, #208]	; (401448 <main+0x238>)
  401378:	4b34      	ldr	r3, [pc, #208]	; (40144c <main+0x23c>)
  40137a:	4798      	blx	r3
  40137c:	e025      	b.n	4013ca <main+0x1ba>
			}
			else if( game_state.state == GAME_OVER_WON )
  40137e:	2b02      	cmp	r3, #2
  401380:	d10d      	bne.n	40139e <main+0x18e>
			{
				sprintf( result_disp, "Won: Game State %d: selected door %d open door %d", 
  401382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401384:	9300      	str	r3, [sp, #0]
  401386:	a80c      	add	r0, sp, #48	; 0x30
  401388:	4931      	ldr	r1, [pc, #196]	; (401450 <main+0x240>)
  40138a:	2202      	movs	r2, #2
  40138c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40138e:	4f2d      	ldr	r7, [pc, #180]	; (401444 <main+0x234>)
  401390:	47b8      	blx	r7
				         game_state.state,
						 game_state.first_door,
						 game_state.open_door );
				print_uart( result_disp, max_disp_string, max_uart_tries );
  401392:	a80c      	add	r0, sp, #48	; 0x30
  401394:	2178      	movs	r1, #120	; 0x78
  401396:	4a2c      	ldr	r2, [pc, #176]	; (401448 <main+0x238>)
  401398:	4b2c      	ldr	r3, [pc, #176]	; (40144c <main+0x23c>)
  40139a:	4798      	blx	r3
  40139c:	e019      	b.n	4013d2 <main+0x1c2>
				game_over = true;
			}
			else if( game_state.state == GAME_OVER_LOST )
  40139e:	2b03      	cmp	r3, #3
  4013a0:	d10d      	bne.n	4013be <main+0x1ae>
			{
				sprintf( result_disp, "Lost: Game State %d: selected door %d open door %d", 
  4013a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4013a4:	9300      	str	r3, [sp, #0]
  4013a6:	a80c      	add	r0, sp, #48	; 0x30
  4013a8:	492a      	ldr	r1, [pc, #168]	; (401454 <main+0x244>)
  4013aa:	2203      	movs	r2, #3
  4013ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4013ae:	4f25      	ldr	r7, [pc, #148]	; (401444 <main+0x234>)
  4013b0:	47b8      	blx	r7
				         game_state.state,
						 game_state.first_door,
						 game_state.open_door );
				print_uart( result_disp, max_disp_string, max_uart_tries );
  4013b2:	a80c      	add	r0, sp, #48	; 0x30
  4013b4:	2178      	movs	r1, #120	; 0x78
  4013b6:	4a24      	ldr	r2, [pc, #144]	; (401448 <main+0x238>)
  4013b8:	4b24      	ldr	r3, [pc, #144]	; (40144c <main+0x23c>)
  4013ba:	4798      	blx	r3
  4013bc:	e009      	b.n	4013d2 <main+0x1c2>
				game_over = true;
			}
			else if( game_state.state == MONTY_GAME_STARTED )
  4013be:	b923      	cbnz	r3, 4013ca <main+0x1ba>
			{
				print_uart( "Press a button to select a door", max_disp_string, max_uart_tries );
  4013c0:	4825      	ldr	r0, [pc, #148]	; (401458 <main+0x248>)
  4013c2:	2178      	movs	r1, #120	; 0x78
  4013c4:	4a20      	ldr	r2, [pc, #128]	; (401448 <main+0x238>)
  4013c6:	4b21      	ldr	r3, [pc, #132]	; (40144c <main+0x23c>)
  4013c8:	4798      	blx	r3
			ssd1306_draw_graph(0, 1, BUFFER_SIZE, 3, temperature);
		}
#endif

		/* Wait and stop screen flickers. */
		delay_ms(50);
  4013ca:	4824      	ldr	r0, [pc, #144]	; (40145c <main+0x24c>)
  4013cc:	4b16      	ldr	r3, [pc, #88]	; (401428 <main+0x218>)
  4013ce:	4798      	blx	r3
	}
  4013d0:	e7bb      	b.n	40134a <main+0x13a>
				print_uart( "Press a button to select a door", max_disp_string, max_uart_tries );

			}
			if( game_over )
			{
				sprintf( result_disp, "Games Played: %d, Games Won %d, Switched %d Switched Won %d",
  4013d2:	9b05      	ldr	r3, [sp, #20]
  4013d4:	9300      	str	r3, [sp, #0]
  4013d6:	9b06      	ldr	r3, [sp, #24]
  4013d8:	9301      	str	r3, [sp, #4]
  4013da:	a80c      	add	r0, sp, #48	; 0x30
  4013dc:	4631      	mov	r1, r6
  4013de:	9a04      	ldr	r2, [sp, #16]
  4013e0:	9b07      	ldr	r3, [sp, #28]
  4013e2:	4f18      	ldr	r7, [pc, #96]	; (401444 <main+0x234>)
  4013e4:	47b8      	blx	r7
				         game_state.number_of_games,
						 game_state.times_won,
						 game_state.times_switched,
						 game_state.times_switched_won );
				print_uart( "Press a button to play again", max_disp_string, max_uart_tries );
  4013e6:	481e      	ldr	r0, [pc, #120]	; (401460 <main+0x250>)
  4013e8:	2178      	movs	r1, #120	; 0x78
  4013ea:	4a17      	ldr	r2, [pc, #92]	; (401448 <main+0x238>)
  4013ec:	4b17      	ldr	r3, [pc, #92]	; (40144c <main+0x23c>)
  4013ee:	4798      	blx	r3
  4013f0:	e7eb      	b.n	4013ca <main+0x1ba>
  4013f2:	bf00      	nop
  4013f4:	004002b5 	.word	0x004002b5
  4013f8:	00400439 	.word	0x00400439
  4013fc:	0040027d 	.word	0x0040027d
  401400:	400e0e00 	.word	0x400e0e00
  401404:	00400fe1 	.word	0x00400fe1
  401408:	e000e100 	.word	0xe000e100
  40140c:	0040097d 	.word	0x0040097d
  401410:	00400681 	.word	0x00400681
  401414:	00401055 	.word	0x00401055
  401418:	0040103d 	.word	0x0040103d
  40141c:	00401161 	.word	0x00401161
  401420:	004001c5 	.word	0x004001c5
  401424:	40008000 	.word	0x40008000
  401428:	20000001 	.word	0x20000001
  40142c:	00400419 	.word	0x00400419
  401430:	00405ce4 	.word	0x00405ce4
  401434:	20000010 	.word	0x20000010
  401438:	004010c5 	.word	0x004010c5
  40143c:	00405dbc 	.word	0x00405dbc
  401440:	00405d04 	.word	0x00405d04
  401444:	00401cf5 	.word	0x00401cf5
  401448:	000f4240 	.word	0x000f4240
  40144c:	004011ad 	.word	0x004011ad
  401450:	00405d34 	.word	0x00405d34
  401454:	00405d68 	.word	0x00405d68
  401458:	00405d9c 	.word	0x00405d9c
  40145c:	00068a1c 	.word	0x00068a1c
  401460:	00405df8 	.word	0x00405df8
  401464:	00400af1 	.word	0x00400af1
  401468:	00400549 	.word	0x00400549
  40146c:	00400905 	.word	0x00400905
  401470:	00400ff5 	.word	0x00400ff5
  401474:	004003e9 	.word	0x004003e9

00401478 <__aeabi_drsub>:
  401478:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40147c:	e002      	b.n	401484 <__adddf3>
  40147e:	bf00      	nop

00401480 <__aeabi_dsub>:
  401480:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401484 <__adddf3>:
  401484:	b530      	push	{r4, r5, lr}
  401486:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40148a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40148e:	ea94 0f05 	teq	r4, r5
  401492:	bf08      	it	eq
  401494:	ea90 0f02 	teqeq	r0, r2
  401498:	bf1f      	itttt	ne
  40149a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40149e:	ea55 0c02 	orrsne.w	ip, r5, r2
  4014a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4014a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4014aa:	f000 80e2 	beq.w	401672 <__adddf3+0x1ee>
  4014ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4014b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4014b6:	bfb8      	it	lt
  4014b8:	426d      	neglt	r5, r5
  4014ba:	dd0c      	ble.n	4014d6 <__adddf3+0x52>
  4014bc:	442c      	add	r4, r5
  4014be:	ea80 0202 	eor.w	r2, r0, r2
  4014c2:	ea81 0303 	eor.w	r3, r1, r3
  4014c6:	ea82 0000 	eor.w	r0, r2, r0
  4014ca:	ea83 0101 	eor.w	r1, r3, r1
  4014ce:	ea80 0202 	eor.w	r2, r0, r2
  4014d2:	ea81 0303 	eor.w	r3, r1, r3
  4014d6:	2d36      	cmp	r5, #54	; 0x36
  4014d8:	bf88      	it	hi
  4014da:	bd30      	pophi	{r4, r5, pc}
  4014dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4014e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4014e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4014e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4014ec:	d002      	beq.n	4014f4 <__adddf3+0x70>
  4014ee:	4240      	negs	r0, r0
  4014f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4014f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4014f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4014fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401500:	d002      	beq.n	401508 <__adddf3+0x84>
  401502:	4252      	negs	r2, r2
  401504:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401508:	ea94 0f05 	teq	r4, r5
  40150c:	f000 80a7 	beq.w	40165e <__adddf3+0x1da>
  401510:	f1a4 0401 	sub.w	r4, r4, #1
  401514:	f1d5 0e20 	rsbs	lr, r5, #32
  401518:	db0d      	blt.n	401536 <__adddf3+0xb2>
  40151a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40151e:	fa22 f205 	lsr.w	r2, r2, r5
  401522:	1880      	adds	r0, r0, r2
  401524:	f141 0100 	adc.w	r1, r1, #0
  401528:	fa03 f20e 	lsl.w	r2, r3, lr
  40152c:	1880      	adds	r0, r0, r2
  40152e:	fa43 f305 	asr.w	r3, r3, r5
  401532:	4159      	adcs	r1, r3
  401534:	e00e      	b.n	401554 <__adddf3+0xd0>
  401536:	f1a5 0520 	sub.w	r5, r5, #32
  40153a:	f10e 0e20 	add.w	lr, lr, #32
  40153e:	2a01      	cmp	r2, #1
  401540:	fa03 fc0e 	lsl.w	ip, r3, lr
  401544:	bf28      	it	cs
  401546:	f04c 0c02 	orrcs.w	ip, ip, #2
  40154a:	fa43 f305 	asr.w	r3, r3, r5
  40154e:	18c0      	adds	r0, r0, r3
  401550:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401558:	d507      	bpl.n	40156a <__adddf3+0xe6>
  40155a:	f04f 0e00 	mov.w	lr, #0
  40155e:	f1dc 0c00 	rsbs	ip, ip, #0
  401562:	eb7e 0000 	sbcs.w	r0, lr, r0
  401566:	eb6e 0101 	sbc.w	r1, lr, r1
  40156a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40156e:	d31b      	bcc.n	4015a8 <__adddf3+0x124>
  401570:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401574:	d30c      	bcc.n	401590 <__adddf3+0x10c>
  401576:	0849      	lsrs	r1, r1, #1
  401578:	ea5f 0030 	movs.w	r0, r0, rrx
  40157c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401580:	f104 0401 	add.w	r4, r4, #1
  401584:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401588:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40158c:	f080 809a 	bcs.w	4016c4 <__adddf3+0x240>
  401590:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401594:	bf08      	it	eq
  401596:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40159a:	f150 0000 	adcs.w	r0, r0, #0
  40159e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4015a2:	ea41 0105 	orr.w	r1, r1, r5
  4015a6:	bd30      	pop	{r4, r5, pc}
  4015a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4015ac:	4140      	adcs	r0, r0
  4015ae:	eb41 0101 	adc.w	r1, r1, r1
  4015b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4015b6:	f1a4 0401 	sub.w	r4, r4, #1
  4015ba:	d1e9      	bne.n	401590 <__adddf3+0x10c>
  4015bc:	f091 0f00 	teq	r1, #0
  4015c0:	bf04      	itt	eq
  4015c2:	4601      	moveq	r1, r0
  4015c4:	2000      	moveq	r0, #0
  4015c6:	fab1 f381 	clz	r3, r1
  4015ca:	bf08      	it	eq
  4015cc:	3320      	addeq	r3, #32
  4015ce:	f1a3 030b 	sub.w	r3, r3, #11
  4015d2:	f1b3 0220 	subs.w	r2, r3, #32
  4015d6:	da0c      	bge.n	4015f2 <__adddf3+0x16e>
  4015d8:	320c      	adds	r2, #12
  4015da:	dd08      	ble.n	4015ee <__adddf3+0x16a>
  4015dc:	f102 0c14 	add.w	ip, r2, #20
  4015e0:	f1c2 020c 	rsb	r2, r2, #12
  4015e4:	fa01 f00c 	lsl.w	r0, r1, ip
  4015e8:	fa21 f102 	lsr.w	r1, r1, r2
  4015ec:	e00c      	b.n	401608 <__adddf3+0x184>
  4015ee:	f102 0214 	add.w	r2, r2, #20
  4015f2:	bfd8      	it	le
  4015f4:	f1c2 0c20 	rsble	ip, r2, #32
  4015f8:	fa01 f102 	lsl.w	r1, r1, r2
  4015fc:	fa20 fc0c 	lsr.w	ip, r0, ip
  401600:	bfdc      	itt	le
  401602:	ea41 010c 	orrle.w	r1, r1, ip
  401606:	4090      	lslle	r0, r2
  401608:	1ae4      	subs	r4, r4, r3
  40160a:	bfa2      	ittt	ge
  40160c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401610:	4329      	orrge	r1, r5
  401612:	bd30      	popge	{r4, r5, pc}
  401614:	ea6f 0404 	mvn.w	r4, r4
  401618:	3c1f      	subs	r4, #31
  40161a:	da1c      	bge.n	401656 <__adddf3+0x1d2>
  40161c:	340c      	adds	r4, #12
  40161e:	dc0e      	bgt.n	40163e <__adddf3+0x1ba>
  401620:	f104 0414 	add.w	r4, r4, #20
  401624:	f1c4 0220 	rsb	r2, r4, #32
  401628:	fa20 f004 	lsr.w	r0, r0, r4
  40162c:	fa01 f302 	lsl.w	r3, r1, r2
  401630:	ea40 0003 	orr.w	r0, r0, r3
  401634:	fa21 f304 	lsr.w	r3, r1, r4
  401638:	ea45 0103 	orr.w	r1, r5, r3
  40163c:	bd30      	pop	{r4, r5, pc}
  40163e:	f1c4 040c 	rsb	r4, r4, #12
  401642:	f1c4 0220 	rsb	r2, r4, #32
  401646:	fa20 f002 	lsr.w	r0, r0, r2
  40164a:	fa01 f304 	lsl.w	r3, r1, r4
  40164e:	ea40 0003 	orr.w	r0, r0, r3
  401652:	4629      	mov	r1, r5
  401654:	bd30      	pop	{r4, r5, pc}
  401656:	fa21 f004 	lsr.w	r0, r1, r4
  40165a:	4629      	mov	r1, r5
  40165c:	bd30      	pop	{r4, r5, pc}
  40165e:	f094 0f00 	teq	r4, #0
  401662:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401666:	bf06      	itte	eq
  401668:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40166c:	3401      	addeq	r4, #1
  40166e:	3d01      	subne	r5, #1
  401670:	e74e      	b.n	401510 <__adddf3+0x8c>
  401672:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401676:	bf18      	it	ne
  401678:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40167c:	d029      	beq.n	4016d2 <__adddf3+0x24e>
  40167e:	ea94 0f05 	teq	r4, r5
  401682:	bf08      	it	eq
  401684:	ea90 0f02 	teqeq	r0, r2
  401688:	d005      	beq.n	401696 <__adddf3+0x212>
  40168a:	ea54 0c00 	orrs.w	ip, r4, r0
  40168e:	bf04      	itt	eq
  401690:	4619      	moveq	r1, r3
  401692:	4610      	moveq	r0, r2
  401694:	bd30      	pop	{r4, r5, pc}
  401696:	ea91 0f03 	teq	r1, r3
  40169a:	bf1e      	ittt	ne
  40169c:	2100      	movne	r1, #0
  40169e:	2000      	movne	r0, #0
  4016a0:	bd30      	popne	{r4, r5, pc}
  4016a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4016a6:	d105      	bne.n	4016b4 <__adddf3+0x230>
  4016a8:	0040      	lsls	r0, r0, #1
  4016aa:	4149      	adcs	r1, r1
  4016ac:	bf28      	it	cs
  4016ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4016b2:	bd30      	pop	{r4, r5, pc}
  4016b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4016b8:	bf3c      	itt	cc
  4016ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4016be:	bd30      	popcc	{r4, r5, pc}
  4016c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4016c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4016c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4016cc:	f04f 0000 	mov.w	r0, #0
  4016d0:	bd30      	pop	{r4, r5, pc}
  4016d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4016d6:	bf1a      	itte	ne
  4016d8:	4619      	movne	r1, r3
  4016da:	4610      	movne	r0, r2
  4016dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4016e0:	bf1c      	itt	ne
  4016e2:	460b      	movne	r3, r1
  4016e4:	4602      	movne	r2, r0
  4016e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4016ea:	bf06      	itte	eq
  4016ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4016f0:	ea91 0f03 	teqeq	r1, r3
  4016f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4016f8:	bd30      	pop	{r4, r5, pc}
  4016fa:	bf00      	nop

004016fc <__aeabi_ui2d>:
  4016fc:	f090 0f00 	teq	r0, #0
  401700:	bf04      	itt	eq
  401702:	2100      	moveq	r1, #0
  401704:	4770      	bxeq	lr
  401706:	b530      	push	{r4, r5, lr}
  401708:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40170c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401710:	f04f 0500 	mov.w	r5, #0
  401714:	f04f 0100 	mov.w	r1, #0
  401718:	e750      	b.n	4015bc <__adddf3+0x138>
  40171a:	bf00      	nop

0040171c <__aeabi_i2d>:
  40171c:	f090 0f00 	teq	r0, #0
  401720:	bf04      	itt	eq
  401722:	2100      	moveq	r1, #0
  401724:	4770      	bxeq	lr
  401726:	b530      	push	{r4, r5, lr}
  401728:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40172c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401730:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401734:	bf48      	it	mi
  401736:	4240      	negmi	r0, r0
  401738:	f04f 0100 	mov.w	r1, #0
  40173c:	e73e      	b.n	4015bc <__adddf3+0x138>
  40173e:	bf00      	nop

00401740 <__aeabi_f2d>:
  401740:	0042      	lsls	r2, r0, #1
  401742:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401746:	ea4f 0131 	mov.w	r1, r1, rrx
  40174a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40174e:	bf1f      	itttt	ne
  401750:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401754:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401758:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40175c:	4770      	bxne	lr
  40175e:	f092 0f00 	teq	r2, #0
  401762:	bf14      	ite	ne
  401764:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401768:	4770      	bxeq	lr
  40176a:	b530      	push	{r4, r5, lr}
  40176c:	f44f 7460 	mov.w	r4, #896	; 0x380
  401770:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401778:	e720      	b.n	4015bc <__adddf3+0x138>
  40177a:	bf00      	nop

0040177c <__aeabi_ul2d>:
  40177c:	ea50 0201 	orrs.w	r2, r0, r1
  401780:	bf08      	it	eq
  401782:	4770      	bxeq	lr
  401784:	b530      	push	{r4, r5, lr}
  401786:	f04f 0500 	mov.w	r5, #0
  40178a:	e00a      	b.n	4017a2 <__aeabi_l2d+0x16>

0040178c <__aeabi_l2d>:
  40178c:	ea50 0201 	orrs.w	r2, r0, r1
  401790:	bf08      	it	eq
  401792:	4770      	bxeq	lr
  401794:	b530      	push	{r4, r5, lr}
  401796:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40179a:	d502      	bpl.n	4017a2 <__aeabi_l2d+0x16>
  40179c:	4240      	negs	r0, r0
  40179e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4017a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4017a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4017aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4017ae:	f43f aedc 	beq.w	40156a <__adddf3+0xe6>
  4017b2:	f04f 0203 	mov.w	r2, #3
  4017b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4017ba:	bf18      	it	ne
  4017bc:	3203      	addne	r2, #3
  4017be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4017c2:	bf18      	it	ne
  4017c4:	3203      	addne	r2, #3
  4017c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4017ca:	f1c2 0320 	rsb	r3, r2, #32
  4017ce:	fa00 fc03 	lsl.w	ip, r0, r3
  4017d2:	fa20 f002 	lsr.w	r0, r0, r2
  4017d6:	fa01 fe03 	lsl.w	lr, r1, r3
  4017da:	ea40 000e 	orr.w	r0, r0, lr
  4017de:	fa21 f102 	lsr.w	r1, r1, r2
  4017e2:	4414      	add	r4, r2
  4017e4:	e6c1      	b.n	40156a <__adddf3+0xe6>
  4017e6:	bf00      	nop

004017e8 <__aeabi_dmul>:
  4017e8:	b570      	push	{r4, r5, r6, lr}
  4017ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4017ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4017f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4017f6:	bf1d      	ittte	ne
  4017f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4017fc:	ea94 0f0c 	teqne	r4, ip
  401800:	ea95 0f0c 	teqne	r5, ip
  401804:	f000 f8de 	bleq	4019c4 <__aeabi_dmul+0x1dc>
  401808:	442c      	add	r4, r5
  40180a:	ea81 0603 	eor.w	r6, r1, r3
  40180e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  401812:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  401816:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40181a:	bf18      	it	ne
  40181c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  401820:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401828:	d038      	beq.n	40189c <__aeabi_dmul+0xb4>
  40182a:	fba0 ce02 	umull	ip, lr, r0, r2
  40182e:	f04f 0500 	mov.w	r5, #0
  401832:	fbe1 e502 	umlal	lr, r5, r1, r2
  401836:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40183a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40183e:	f04f 0600 	mov.w	r6, #0
  401842:	fbe1 5603 	umlal	r5, r6, r1, r3
  401846:	f09c 0f00 	teq	ip, #0
  40184a:	bf18      	it	ne
  40184c:	f04e 0e01 	orrne.w	lr, lr, #1
  401850:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  401854:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  401858:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40185c:	d204      	bcs.n	401868 <__aeabi_dmul+0x80>
  40185e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  401862:	416d      	adcs	r5, r5
  401864:	eb46 0606 	adc.w	r6, r6, r6
  401868:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40186c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  401870:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  401874:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  401878:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40187c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401880:	bf88      	it	hi
  401882:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401886:	d81e      	bhi.n	4018c6 <__aeabi_dmul+0xde>
  401888:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40188c:	bf08      	it	eq
  40188e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  401892:	f150 0000 	adcs.w	r0, r0, #0
  401896:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40189a:	bd70      	pop	{r4, r5, r6, pc}
  40189c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4018a0:	ea46 0101 	orr.w	r1, r6, r1
  4018a4:	ea40 0002 	orr.w	r0, r0, r2
  4018a8:	ea81 0103 	eor.w	r1, r1, r3
  4018ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4018b0:	bfc2      	ittt	gt
  4018b2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4018b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4018ba:	bd70      	popgt	{r4, r5, r6, pc}
  4018bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4018c0:	f04f 0e00 	mov.w	lr, #0
  4018c4:	3c01      	subs	r4, #1
  4018c6:	f300 80ab 	bgt.w	401a20 <__aeabi_dmul+0x238>
  4018ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4018ce:	bfde      	ittt	le
  4018d0:	2000      	movle	r0, #0
  4018d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4018d6:	bd70      	pople	{r4, r5, r6, pc}
  4018d8:	f1c4 0400 	rsb	r4, r4, #0
  4018dc:	3c20      	subs	r4, #32
  4018de:	da35      	bge.n	40194c <__aeabi_dmul+0x164>
  4018e0:	340c      	adds	r4, #12
  4018e2:	dc1b      	bgt.n	40191c <__aeabi_dmul+0x134>
  4018e4:	f104 0414 	add.w	r4, r4, #20
  4018e8:	f1c4 0520 	rsb	r5, r4, #32
  4018ec:	fa00 f305 	lsl.w	r3, r0, r5
  4018f0:	fa20 f004 	lsr.w	r0, r0, r4
  4018f4:	fa01 f205 	lsl.w	r2, r1, r5
  4018f8:	ea40 0002 	orr.w	r0, r0, r2
  4018fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  401900:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401904:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401908:	fa21 f604 	lsr.w	r6, r1, r4
  40190c:	eb42 0106 	adc.w	r1, r2, r6
  401910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401914:	bf08      	it	eq
  401916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40191a:	bd70      	pop	{r4, r5, r6, pc}
  40191c:	f1c4 040c 	rsb	r4, r4, #12
  401920:	f1c4 0520 	rsb	r5, r4, #32
  401924:	fa00 f304 	lsl.w	r3, r0, r4
  401928:	fa20 f005 	lsr.w	r0, r0, r5
  40192c:	fa01 f204 	lsl.w	r2, r1, r4
  401930:	ea40 0002 	orr.w	r0, r0, r2
  401934:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401938:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40193c:	f141 0100 	adc.w	r1, r1, #0
  401940:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401944:	bf08      	it	eq
  401946:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40194a:	bd70      	pop	{r4, r5, r6, pc}
  40194c:	f1c4 0520 	rsb	r5, r4, #32
  401950:	fa00 f205 	lsl.w	r2, r0, r5
  401954:	ea4e 0e02 	orr.w	lr, lr, r2
  401958:	fa20 f304 	lsr.w	r3, r0, r4
  40195c:	fa01 f205 	lsl.w	r2, r1, r5
  401960:	ea43 0302 	orr.w	r3, r3, r2
  401964:	fa21 f004 	lsr.w	r0, r1, r4
  401968:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40196c:	fa21 f204 	lsr.w	r2, r1, r4
  401970:	ea20 0002 	bic.w	r0, r0, r2
  401974:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  401978:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40197c:	bf08      	it	eq
  40197e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401982:	bd70      	pop	{r4, r5, r6, pc}
  401984:	f094 0f00 	teq	r4, #0
  401988:	d10f      	bne.n	4019aa <__aeabi_dmul+0x1c2>
  40198a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40198e:	0040      	lsls	r0, r0, #1
  401990:	eb41 0101 	adc.w	r1, r1, r1
  401994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401998:	bf08      	it	eq
  40199a:	3c01      	subeq	r4, #1
  40199c:	d0f7      	beq.n	40198e <__aeabi_dmul+0x1a6>
  40199e:	ea41 0106 	orr.w	r1, r1, r6
  4019a2:	f095 0f00 	teq	r5, #0
  4019a6:	bf18      	it	ne
  4019a8:	4770      	bxne	lr
  4019aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4019ae:	0052      	lsls	r2, r2, #1
  4019b0:	eb43 0303 	adc.w	r3, r3, r3
  4019b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4019b8:	bf08      	it	eq
  4019ba:	3d01      	subeq	r5, #1
  4019bc:	d0f7      	beq.n	4019ae <__aeabi_dmul+0x1c6>
  4019be:	ea43 0306 	orr.w	r3, r3, r6
  4019c2:	4770      	bx	lr
  4019c4:	ea94 0f0c 	teq	r4, ip
  4019c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4019cc:	bf18      	it	ne
  4019ce:	ea95 0f0c 	teqne	r5, ip
  4019d2:	d00c      	beq.n	4019ee <__aeabi_dmul+0x206>
  4019d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4019d8:	bf18      	it	ne
  4019da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4019de:	d1d1      	bne.n	401984 <__aeabi_dmul+0x19c>
  4019e0:	ea81 0103 	eor.w	r1, r1, r3
  4019e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4019e8:	f04f 0000 	mov.w	r0, #0
  4019ec:	bd70      	pop	{r4, r5, r6, pc}
  4019ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4019f2:	bf06      	itte	eq
  4019f4:	4610      	moveq	r0, r2
  4019f6:	4619      	moveq	r1, r3
  4019f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4019fc:	d019      	beq.n	401a32 <__aeabi_dmul+0x24a>
  4019fe:	ea94 0f0c 	teq	r4, ip
  401a02:	d102      	bne.n	401a0a <__aeabi_dmul+0x222>
  401a04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  401a08:	d113      	bne.n	401a32 <__aeabi_dmul+0x24a>
  401a0a:	ea95 0f0c 	teq	r5, ip
  401a0e:	d105      	bne.n	401a1c <__aeabi_dmul+0x234>
  401a10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  401a14:	bf1c      	itt	ne
  401a16:	4610      	movne	r0, r2
  401a18:	4619      	movne	r1, r3
  401a1a:	d10a      	bne.n	401a32 <__aeabi_dmul+0x24a>
  401a1c:	ea81 0103 	eor.w	r1, r1, r3
  401a20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401a24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401a28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401a2c:	f04f 0000 	mov.w	r0, #0
  401a30:	bd70      	pop	{r4, r5, r6, pc}
  401a32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401a36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  401a3a:	bd70      	pop	{r4, r5, r6, pc}

00401a3c <__aeabi_ddiv>:
  401a3c:	b570      	push	{r4, r5, r6, lr}
  401a3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401a42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401a46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401a4a:	bf1d      	ittte	ne
  401a4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401a50:	ea94 0f0c 	teqne	r4, ip
  401a54:	ea95 0f0c 	teqne	r5, ip
  401a58:	f000 f8a7 	bleq	401baa <__aeabi_ddiv+0x16e>
  401a5c:	eba4 0405 	sub.w	r4, r4, r5
  401a60:	ea81 0e03 	eor.w	lr, r1, r3
  401a64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401a68:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401a6c:	f000 8088 	beq.w	401b80 <__aeabi_ddiv+0x144>
  401a70:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401a74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  401a78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  401a7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  401a80:	ea4f 2202 	mov.w	r2, r2, lsl #8
  401a84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  401a88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  401a8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  401a90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  401a94:	429d      	cmp	r5, r3
  401a96:	bf08      	it	eq
  401a98:	4296      	cmpeq	r6, r2
  401a9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  401a9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  401aa2:	d202      	bcs.n	401aaa <__aeabi_ddiv+0x6e>
  401aa4:	085b      	lsrs	r3, r3, #1
  401aa6:	ea4f 0232 	mov.w	r2, r2, rrx
  401aaa:	1ab6      	subs	r6, r6, r2
  401aac:	eb65 0503 	sbc.w	r5, r5, r3
  401ab0:	085b      	lsrs	r3, r3, #1
  401ab2:	ea4f 0232 	mov.w	r2, r2, rrx
  401ab6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  401aba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  401abe:	ebb6 0e02 	subs.w	lr, r6, r2
  401ac2:	eb75 0e03 	sbcs.w	lr, r5, r3
  401ac6:	bf22      	ittt	cs
  401ac8:	1ab6      	subcs	r6, r6, r2
  401aca:	4675      	movcs	r5, lr
  401acc:	ea40 000c 	orrcs.w	r0, r0, ip
  401ad0:	085b      	lsrs	r3, r3, #1
  401ad2:	ea4f 0232 	mov.w	r2, r2, rrx
  401ad6:	ebb6 0e02 	subs.w	lr, r6, r2
  401ada:	eb75 0e03 	sbcs.w	lr, r5, r3
  401ade:	bf22      	ittt	cs
  401ae0:	1ab6      	subcs	r6, r6, r2
  401ae2:	4675      	movcs	r5, lr
  401ae4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  401ae8:	085b      	lsrs	r3, r3, #1
  401aea:	ea4f 0232 	mov.w	r2, r2, rrx
  401aee:	ebb6 0e02 	subs.w	lr, r6, r2
  401af2:	eb75 0e03 	sbcs.w	lr, r5, r3
  401af6:	bf22      	ittt	cs
  401af8:	1ab6      	subcs	r6, r6, r2
  401afa:	4675      	movcs	r5, lr
  401afc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  401b00:	085b      	lsrs	r3, r3, #1
  401b02:	ea4f 0232 	mov.w	r2, r2, rrx
  401b06:	ebb6 0e02 	subs.w	lr, r6, r2
  401b0a:	eb75 0e03 	sbcs.w	lr, r5, r3
  401b0e:	bf22      	ittt	cs
  401b10:	1ab6      	subcs	r6, r6, r2
  401b12:	4675      	movcs	r5, lr
  401b14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  401b18:	ea55 0e06 	orrs.w	lr, r5, r6
  401b1c:	d018      	beq.n	401b50 <__aeabi_ddiv+0x114>
  401b1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  401b22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  401b26:	ea4f 1606 	mov.w	r6, r6, lsl #4
  401b2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  401b2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  401b32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  401b36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  401b3a:	d1c0      	bne.n	401abe <__aeabi_ddiv+0x82>
  401b3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401b40:	d10b      	bne.n	401b5a <__aeabi_ddiv+0x11e>
  401b42:	ea41 0100 	orr.w	r1, r1, r0
  401b46:	f04f 0000 	mov.w	r0, #0
  401b4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  401b4e:	e7b6      	b.n	401abe <__aeabi_ddiv+0x82>
  401b50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401b54:	bf04      	itt	eq
  401b56:	4301      	orreq	r1, r0
  401b58:	2000      	moveq	r0, #0
  401b5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401b5e:	bf88      	it	hi
  401b60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401b64:	f63f aeaf 	bhi.w	4018c6 <__aeabi_dmul+0xde>
  401b68:	ebb5 0c03 	subs.w	ip, r5, r3
  401b6c:	bf04      	itt	eq
  401b6e:	ebb6 0c02 	subseq.w	ip, r6, r2
  401b72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401b76:	f150 0000 	adcs.w	r0, r0, #0
  401b7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401b7e:	bd70      	pop	{r4, r5, r6, pc}
  401b80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  401b84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  401b88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  401b8c:	bfc2      	ittt	gt
  401b8e:	ebd4 050c 	rsbsgt	r5, r4, ip
  401b92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401b96:	bd70      	popgt	{r4, r5, r6, pc}
  401b98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401b9c:	f04f 0e00 	mov.w	lr, #0
  401ba0:	3c01      	subs	r4, #1
  401ba2:	e690      	b.n	4018c6 <__aeabi_dmul+0xde>
  401ba4:	ea45 0e06 	orr.w	lr, r5, r6
  401ba8:	e68d      	b.n	4018c6 <__aeabi_dmul+0xde>
  401baa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401bae:	ea94 0f0c 	teq	r4, ip
  401bb2:	bf08      	it	eq
  401bb4:	ea95 0f0c 	teqeq	r5, ip
  401bb8:	f43f af3b 	beq.w	401a32 <__aeabi_dmul+0x24a>
  401bbc:	ea94 0f0c 	teq	r4, ip
  401bc0:	d10a      	bne.n	401bd8 <__aeabi_ddiv+0x19c>
  401bc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401bc6:	f47f af34 	bne.w	401a32 <__aeabi_dmul+0x24a>
  401bca:	ea95 0f0c 	teq	r5, ip
  401bce:	f47f af25 	bne.w	401a1c <__aeabi_dmul+0x234>
  401bd2:	4610      	mov	r0, r2
  401bd4:	4619      	mov	r1, r3
  401bd6:	e72c      	b.n	401a32 <__aeabi_dmul+0x24a>
  401bd8:	ea95 0f0c 	teq	r5, ip
  401bdc:	d106      	bne.n	401bec <__aeabi_ddiv+0x1b0>
  401bde:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401be2:	f43f aefd 	beq.w	4019e0 <__aeabi_dmul+0x1f8>
  401be6:	4610      	mov	r0, r2
  401be8:	4619      	mov	r1, r3
  401bea:	e722      	b.n	401a32 <__aeabi_dmul+0x24a>
  401bec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401bf0:	bf18      	it	ne
  401bf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401bf6:	f47f aec5 	bne.w	401984 <__aeabi_dmul+0x19c>
  401bfa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  401bfe:	f47f af0d 	bne.w	401a1c <__aeabi_dmul+0x234>
  401c02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  401c06:	f47f aeeb 	bne.w	4019e0 <__aeabi_dmul+0x1f8>
  401c0a:	e712      	b.n	401a32 <__aeabi_dmul+0x24a>

00401c0c <__libc_init_array>:
  401c0c:	b570      	push	{r4, r5, r6, lr}
  401c0e:	4b0e      	ldr	r3, [pc, #56]	; (401c48 <__libc_init_array+0x3c>)
  401c10:	4d0e      	ldr	r5, [pc, #56]	; (401c4c <__libc_init_array+0x40>)
  401c12:	1aed      	subs	r5, r5, r3
  401c14:	10ad      	asrs	r5, r5, #2
  401c16:	2400      	movs	r4, #0
  401c18:	461e      	mov	r6, r3
  401c1a:	42ac      	cmp	r4, r5
  401c1c:	d004      	beq.n	401c28 <__libc_init_array+0x1c>
  401c1e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  401c22:	4790      	blx	r2
  401c24:	3401      	adds	r4, #1
  401c26:	e7f8      	b.n	401c1a <__libc_init_array+0xe>
  401c28:	f004 f9d2 	bl	405fd0 <_init>
  401c2c:	4d08      	ldr	r5, [pc, #32]	; (401c50 <__libc_init_array+0x44>)
  401c2e:	4b09      	ldr	r3, [pc, #36]	; (401c54 <__libc_init_array+0x48>)
  401c30:	1aed      	subs	r5, r5, r3
  401c32:	10ad      	asrs	r5, r5, #2
  401c34:	2400      	movs	r4, #0
  401c36:	461e      	mov	r6, r3
  401c38:	42ac      	cmp	r4, r5
  401c3a:	d004      	beq.n	401c46 <__libc_init_array+0x3a>
  401c3c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  401c40:	4790      	blx	r2
  401c42:	3401      	adds	r4, #1
  401c44:	e7f8      	b.n	401c38 <__libc_init_array+0x2c>
  401c46:	bd70      	pop	{r4, r5, r6, pc}
  401c48:	00405fdc 	.word	0x00405fdc
  401c4c:	00405fdc 	.word	0x00405fdc
  401c50:	00405fe4 	.word	0x00405fe4
  401c54:	00405fdc 	.word	0x00405fdc

00401c58 <memset>:
  401c58:	4402      	add	r2, r0
  401c5a:	4603      	mov	r3, r0
  401c5c:	4293      	cmp	r3, r2
  401c5e:	d002      	beq.n	401c66 <memset+0xe>
  401c60:	f803 1b01 	strb.w	r1, [r3], #1
  401c64:	e7fa      	b.n	401c5c <memset+0x4>
  401c66:	4770      	bx	lr

00401c68 <srand>:
  401c68:	4b02      	ldr	r3, [pc, #8]	; (401c74 <srand+0xc>)
  401c6a:	681b      	ldr	r3, [r3, #0]
  401c6c:	2100      	movs	r1, #0
  401c6e:	e9c3 012a 	strd	r0, r1, [r3, #168]	; 0xa8
  401c72:	4770      	bx	lr
  401c74:	20000018 	.word	0x20000018

00401c78 <rand>:
  401c78:	b510      	push	{r4, lr}
  401c7a:	4b0b      	ldr	r3, [pc, #44]	; (401ca8 <rand+0x30>)
  401c7c:	4c0b      	ldr	r4, [pc, #44]	; (401cac <rand+0x34>)
  401c7e:	6819      	ldr	r1, [r3, #0]
  401c80:	4b0b      	ldr	r3, [pc, #44]	; (401cb0 <rand+0x38>)
  401c82:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
  401c86:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
  401c8a:	4354      	muls	r4, r2
  401c8c:	fb03 4000 	mla	r0, r3, r0, r4
  401c90:	fba2 2303 	umull	r2, r3, r2, r3
  401c94:	3201      	adds	r2, #1
  401c96:	4403      	add	r3, r0
  401c98:	f143 0300 	adc.w	r3, r3, #0
  401c9c:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
  401ca0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
  401ca4:	bd10      	pop	{r4, pc}
  401ca6:	bf00      	nop
  401ca8:	20000018 	.word	0x20000018
  401cac:	5851f42d 	.word	0x5851f42d
  401cb0:	4c957f2d 	.word	0x4c957f2d

00401cb4 <_sprintf_r>:
  401cb4:	b40c      	push	{r2, r3}
  401cb6:	b510      	push	{r4, lr}
  401cb8:	b09c      	sub	sp, #112	; 0x70
  401cba:	ab1e      	add	r3, sp, #120	; 0x78
  401cbc:	9102      	str	r1, [sp, #8]
  401cbe:	9106      	str	r1, [sp, #24]
  401cc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  401cc4:	9104      	str	r1, [sp, #16]
  401cc6:	9107      	str	r1, [sp, #28]
  401cc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
  401ccc:	f853 2b04 	ldr.w	r2, [r3], #4
  401cd0:	f8ad 1016 	strh.w	r1, [sp, #22]
  401cd4:	f44f 7402 	mov.w	r4, #520	; 0x208
  401cd8:	a902      	add	r1, sp, #8
  401cda:	9301      	str	r3, [sp, #4]
  401cdc:	f8ad 4014 	strh.w	r4, [sp, #20]
  401ce0:	f000 f842 	bl	401d68 <_svfprintf_r>
  401ce4:	9b02      	ldr	r3, [sp, #8]
  401ce6:	2200      	movs	r2, #0
  401ce8:	701a      	strb	r2, [r3, #0]
  401cea:	b01c      	add	sp, #112	; 0x70
  401cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401cf0:	b002      	add	sp, #8
  401cf2:	4770      	bx	lr

00401cf4 <sprintf>:
  401cf4:	b40e      	push	{r1, r2, r3}
  401cf6:	b500      	push	{lr}
  401cf8:	b09c      	sub	sp, #112	; 0x70
  401cfa:	f44f 7102 	mov.w	r1, #520	; 0x208
  401cfe:	f8ad 1014 	strh.w	r1, [sp, #20]
  401d02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  401d06:	9104      	str	r1, [sp, #16]
  401d08:	9107      	str	r1, [sp, #28]
  401d0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  401d0e:	ab1d      	add	r3, sp, #116	; 0x74
  401d10:	f8ad 1016 	strh.w	r1, [sp, #22]
  401d14:	4908      	ldr	r1, [pc, #32]	; (401d38 <sprintf+0x44>)
  401d16:	f853 2b04 	ldr.w	r2, [r3], #4
  401d1a:	9002      	str	r0, [sp, #8]
  401d1c:	9006      	str	r0, [sp, #24]
  401d1e:	6808      	ldr	r0, [r1, #0]
  401d20:	9301      	str	r3, [sp, #4]
  401d22:	a902      	add	r1, sp, #8
  401d24:	f000 f820 	bl	401d68 <_svfprintf_r>
  401d28:	9b02      	ldr	r3, [sp, #8]
  401d2a:	2200      	movs	r2, #0
  401d2c:	701a      	strb	r2, [r3, #0]
  401d2e:	b01c      	add	sp, #112	; 0x70
  401d30:	f85d eb04 	ldr.w	lr, [sp], #4
  401d34:	b003      	add	sp, #12
  401d36:	4770      	bx	lr
  401d38:	20000018 	.word	0x20000018

00401d3c <strlen>:
  401d3c:	4603      	mov	r3, r0
  401d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
  401d42:	2a00      	cmp	r2, #0
  401d44:	d1fb      	bne.n	401d3e <strlen+0x2>
  401d46:	1a18      	subs	r0, r3, r0
  401d48:	3801      	subs	r0, #1
  401d4a:	4770      	bx	lr

00401d4c <strnlen>:
  401d4c:	b510      	push	{r4, lr}
  401d4e:	4603      	mov	r3, r0
  401d50:	4401      	add	r1, r0
  401d52:	428b      	cmp	r3, r1
  401d54:	461a      	mov	r2, r3
  401d56:	d101      	bne.n	401d5c <strnlen+0x10>
  401d58:	1a10      	subs	r0, r2, r0
  401d5a:	bd10      	pop	{r4, pc}
  401d5c:	7814      	ldrb	r4, [r2, #0]
  401d5e:	3301      	adds	r3, #1
  401d60:	2c00      	cmp	r4, #0
  401d62:	d1f6      	bne.n	401d52 <strnlen+0x6>
  401d64:	e7f8      	b.n	401d58 <strnlen+0xc>
	...

00401d68 <_svfprintf_r>:
  401d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d6c:	b0c3      	sub	sp, #268	; 0x10c
  401d6e:	468b      	mov	fp, r1
  401d70:	4698      	mov	r8, r3
  401d72:	920b      	str	r2, [sp, #44]	; 0x2c
  401d74:	4682      	mov	sl, r0
  401d76:	f001 ff27 	bl	403bc8 <_localeconv_r>
  401d7a:	6800      	ldr	r0, [r0, #0]
  401d7c:	9018      	str	r0, [sp, #96]	; 0x60
  401d7e:	f7ff ffdd 	bl	401d3c <strlen>
  401d82:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401d86:	9010      	str	r0, [sp, #64]	; 0x40
  401d88:	0619      	lsls	r1, r3, #24
  401d8a:	d515      	bpl.n	401db8 <_svfprintf_r+0x50>
  401d8c:	f8db 3010 	ldr.w	r3, [fp, #16]
  401d90:	b993      	cbnz	r3, 401db8 <_svfprintf_r+0x50>
  401d92:	4650      	mov	r0, sl
  401d94:	2140      	movs	r1, #64	; 0x40
  401d96:	f001 ff29 	bl	403bec <_malloc_r>
  401d9a:	f8cb 0000 	str.w	r0, [fp]
  401d9e:	f8cb 0010 	str.w	r0, [fp, #16]
  401da2:	b930      	cbnz	r0, 401db2 <_svfprintf_r+0x4a>
  401da4:	230c      	movs	r3, #12
  401da6:	f8ca 3000 	str.w	r3, [sl]
  401daa:	f04f 30ff 	mov.w	r0, #4294967295
  401dae:	f000 bf6c 	b.w	402c8a <_svfprintf_r+0xf22>
  401db2:	2340      	movs	r3, #64	; 0x40
  401db4:	f8cb 3014 	str.w	r3, [fp, #20]
  401db8:	2400      	movs	r4, #0
  401dba:	2500      	movs	r5, #0
  401dbc:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  401dc0:	2300      	movs	r3, #0
  401dc2:	ae32      	add	r6, sp, #200	; 0xc8
  401dc4:	9625      	str	r6, [sp, #148]	; 0x94
  401dc6:	9327      	str	r3, [sp, #156]	; 0x9c
  401dc8:	9326      	str	r3, [sp, #152]	; 0x98
  401dca:	9309      	str	r3, [sp, #36]	; 0x24
  401dcc:	931b      	str	r3, [sp, #108]	; 0x6c
  401dce:	931a      	str	r3, [sp, #104]	; 0x68
  401dd0:	930f      	str	r3, [sp, #60]	; 0x3c
  401dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401dd4:	461c      	mov	r4, r3
  401dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
  401dda:	b91a      	cbnz	r2, 401de4 <_svfprintf_r+0x7c>
  401ddc:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401dde:	1a25      	subs	r5, r4, r0
  401de0:	d103      	bne.n	401dea <_svfprintf_r+0x82>
  401de2:	e01b      	b.n	401e1c <_svfprintf_r+0xb4>
  401de4:	2a25      	cmp	r2, #37	; 0x25
  401de6:	d1f5      	bne.n	401dd4 <_svfprintf_r+0x6c>
  401de8:	e7f8      	b.n	401ddc <_svfprintf_r+0x74>
  401dea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  401dec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401dee:	442b      	add	r3, r5
  401df0:	9327      	str	r3, [sp, #156]	; 0x9c
  401df2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  401df4:	3301      	adds	r3, #1
  401df6:	2b07      	cmp	r3, #7
  401df8:	e886 0022 	stmia.w	r6, {r1, r5}
  401dfc:	9326      	str	r3, [sp, #152]	; 0x98
  401dfe:	dc01      	bgt.n	401e04 <_svfprintf_r+0x9c>
  401e00:	3608      	adds	r6, #8
  401e02:	e008      	b.n	401e16 <_svfprintf_r+0xae>
  401e04:	4650      	mov	r0, sl
  401e06:	4659      	mov	r1, fp
  401e08:	aa25      	add	r2, sp, #148	; 0x94
  401e0a:	f002 fefd 	bl	404c08 <__ssprint_r>
  401e0e:	2800      	cmp	r0, #0
  401e10:	f040 8733 	bne.w	402c7a <_svfprintf_r+0xf12>
  401e14:	ae32      	add	r6, sp, #200	; 0xc8
  401e16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e18:	442a      	add	r2, r5
  401e1a:	920f      	str	r2, [sp, #60]	; 0x3c
  401e1c:	7823      	ldrb	r3, [r4, #0]
  401e1e:	2b00      	cmp	r3, #0
  401e20:	f000 8724 	beq.w	402c6c <_svfprintf_r+0xf04>
  401e24:	2300      	movs	r3, #0
  401e26:	3401      	adds	r4, #1
  401e28:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  401e2c:	f04f 39ff 	mov.w	r9, #4294967295
  401e30:	930e      	str	r3, [sp, #56]	; 0x38
  401e32:	461f      	mov	r7, r3
  401e34:	1c65      	adds	r5, r4, #1
  401e36:	7824      	ldrb	r4, [r4, #0]
  401e38:	950b      	str	r5, [sp, #44]	; 0x2c
  401e3a:	9408      	str	r4, [sp, #32]
  401e3c:	9c08      	ldr	r4, [sp, #32]
  401e3e:	f1a4 0220 	sub.w	r2, r4, #32
  401e42:	2a58      	cmp	r2, #88	; 0x58
  401e44:	f200 8384 	bhi.w	402550 <_svfprintf_r+0x7e8>
  401e48:	e8df f012 	tbh	[pc, r2, lsl #1]
  401e4c:	0382006d 	.word	0x0382006d
  401e50:	00710382 	.word	0x00710382
  401e54:	03820382 	.word	0x03820382
  401e58:	03820382 	.word	0x03820382
  401e5c:	03820382 	.word	0x03820382
  401e60:	0059005b 	.word	0x0059005b
  401e64:	00770382 	.word	0x00770382
  401e68:	0382007a 	.word	0x0382007a
  401e6c:	00a300a0 	.word	0x00a300a0
  401e70:	00a300a3 	.word	0x00a300a3
  401e74:	00a300a3 	.word	0x00a300a3
  401e78:	00a300a3 	.word	0x00a300a3
  401e7c:	00a300a3 	.word	0x00a300a3
  401e80:	03820382 	.word	0x03820382
  401e84:	03820382 	.word	0x03820382
  401e88:	03820382 	.word	0x03820382
  401e8c:	03820382 	.word	0x03820382
  401e90:	03820382 	.word	0x03820382
  401e94:	00ff00d4 	.word	0x00ff00d4
  401e98:	00ff0382 	.word	0x00ff0382
  401e9c:	03820382 	.word	0x03820382
  401ea0:	03820382 	.word	0x03820382
  401ea4:	038200b7 	.word	0x038200b7
  401ea8:	026a0382 	.word	0x026a0382
  401eac:	03820382 	.word	0x03820382
  401eb0:	03820382 	.word	0x03820382
  401eb4:	02ba0382 	.word	0x02ba0382
  401eb8:	03820382 	.word	0x03820382
  401ebc:	03820068 	.word	0x03820068
  401ec0:	03820382 	.word	0x03820382
  401ec4:	03820382 	.word	0x03820382
  401ec8:	03820382 	.word	0x03820382
  401ecc:	03820382 	.word	0x03820382
  401ed0:	00ca0382 	.word	0x00ca0382
  401ed4:	00ff0065 	.word	0x00ff0065
  401ed8:	00ff00ff 	.word	0x00ff00ff
  401edc:	006500ba 	.word	0x006500ba
  401ee0:	03820382 	.word	0x03820382
  401ee4:	038200bd 	.word	0x038200bd
  401ee8:	026c024b 	.word	0x026c024b
  401eec:	00c7028b 	.word	0x00c7028b
  401ef0:	029d0382 	.word	0x029d0382
  401ef4:	02bc0382 	.word	0x02bc0382
  401ef8:	03820382 	.word	0x03820382
  401efc:	02d7      	.short	0x02d7
  401efe:	232b      	movs	r3, #43	; 0x2b
  401f00:	e007      	b.n	401f12 <_svfprintf_r+0x1aa>
  401f02:	f8d8 5000 	ldr.w	r5, [r8]
  401f06:	950e      	str	r5, [sp, #56]	; 0x38
  401f08:	2d00      	cmp	r5, #0
  401f0a:	f108 0204 	add.w	r2, r8, #4
  401f0e:	db11      	blt.n	401f34 <_svfprintf_r+0x1cc>
  401f10:	4690      	mov	r8, r2
  401f12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  401f14:	e78e      	b.n	401e34 <_svfprintf_r+0xcc>
  401f16:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  401f1a:	e06f      	b.n	401ffc <_svfprintf_r+0x294>
  401f1c:	4cab      	ldr	r4, [pc, #684]	; (4021cc <_svfprintf_r+0x464>)
  401f1e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  401f22:	941b      	str	r4, [sp, #108]	; 0x6c
  401f24:	e26d      	b.n	402402 <_svfprintf_r+0x69a>
  401f26:	2b00      	cmp	r3, #0
  401f28:	bf08      	it	eq
  401f2a:	2320      	moveq	r3, #32
  401f2c:	e7f1      	b.n	401f12 <_svfprintf_r+0x1aa>
  401f2e:	f047 0701 	orr.w	r7, r7, #1
  401f32:	e7ee      	b.n	401f12 <_svfprintf_r+0x1aa>
  401f34:	426d      	negs	r5, r5
  401f36:	950e      	str	r5, [sp, #56]	; 0x38
  401f38:	4690      	mov	r8, r2
  401f3a:	f047 0704 	orr.w	r7, r7, #4
  401f3e:	e7e8      	b.n	401f12 <_svfprintf_r+0x1aa>
  401f40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  401f42:	7825      	ldrb	r5, [r4, #0]
  401f44:	9508      	str	r5, [sp, #32]
  401f46:	2d2a      	cmp	r5, #42	; 0x2a
  401f48:	f104 0201 	add.w	r2, r4, #1
  401f4c:	d002      	beq.n	401f54 <_svfprintf_r+0x1ec>
  401f4e:	f04f 0900 	mov.w	r9, #0
  401f52:	e00b      	b.n	401f6c <_svfprintf_r+0x204>
  401f54:	f8d8 9000 	ldr.w	r9, [r8]
  401f58:	920b      	str	r2, [sp, #44]	; 0x2c
  401f5a:	f108 0104 	add.w	r1, r8, #4
  401f5e:	f1b9 0f00 	cmp.w	r9, #0
  401f62:	4688      	mov	r8, r1
  401f64:	dad5      	bge.n	401f12 <_svfprintf_r+0x1aa>
  401f66:	f04f 39ff 	mov.w	r9, #4294967295
  401f6a:	e7d2      	b.n	401f12 <_svfprintf_r+0x1aa>
  401f6c:	9d08      	ldr	r5, [sp, #32]
  401f6e:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
  401f72:	2909      	cmp	r1, #9
  401f74:	d806      	bhi.n	401f84 <_svfprintf_r+0x21c>
  401f76:	200a      	movs	r0, #10
  401f78:	f812 4b01 	ldrb.w	r4, [r2], #1
  401f7c:	9408      	str	r4, [sp, #32]
  401f7e:	fb00 1909 	mla	r9, r0, r9, r1
  401f82:	e7f3      	b.n	401f6c <_svfprintf_r+0x204>
  401f84:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
  401f88:	920b      	str	r2, [sp, #44]	; 0x2c
  401f8a:	e757      	b.n	401e3c <_svfprintf_r+0xd4>
  401f8c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  401f90:	e7bf      	b.n	401f12 <_svfprintf_r+0x1aa>
  401f92:	2400      	movs	r4, #0
  401f94:	940e      	str	r4, [sp, #56]	; 0x38
  401f96:	9d08      	ldr	r5, [sp, #32]
  401f98:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  401f9a:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
  401f9e:	210a      	movs	r1, #10
  401fa0:	fb01 2404 	mla	r4, r1, r4, r2
  401fa4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401fa6:	940e      	str	r4, [sp, #56]	; 0x38
  401fa8:	f812 5b01 	ldrb.w	r5, [r2], #1
  401fac:	9508      	str	r5, [sp, #32]
  401fae:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
  401fb2:	2909      	cmp	r1, #9
  401fb4:	d8e8      	bhi.n	401f88 <_svfprintf_r+0x220>
  401fb6:	920b      	str	r2, [sp, #44]	; 0x2c
  401fb8:	e7ed      	b.n	401f96 <_svfprintf_r+0x22e>
  401fba:	f047 0708 	orr.w	r7, r7, #8
  401fbe:	e7a8      	b.n	401f12 <_svfprintf_r+0x1aa>
  401fc0:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  401fc4:	e7a5      	b.n	401f12 <_svfprintf_r+0x1aa>
  401fc6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  401fc8:	7822      	ldrb	r2, [r4, #0]
  401fca:	2a6c      	cmp	r2, #108	; 0x6c
  401fcc:	d102      	bne.n	401fd4 <_svfprintf_r+0x26c>
  401fce:	3401      	adds	r4, #1
  401fd0:	940b      	str	r4, [sp, #44]	; 0x2c
  401fd2:	e002      	b.n	401fda <_svfprintf_r+0x272>
  401fd4:	f047 0710 	orr.w	r7, r7, #16
  401fd8:	e79b      	b.n	401f12 <_svfprintf_r+0x1aa>
  401fda:	f047 0720 	orr.w	r7, r7, #32
  401fde:	e798      	b.n	401f12 <_svfprintf_r+0x1aa>
  401fe0:	f8d8 3000 	ldr.w	r3, [r8]
  401fe4:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  401fe8:	2500      	movs	r5, #0
  401fea:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  401fee:	f108 0804 	add.w	r8, r8, #4
  401ff2:	e2b8      	b.n	402566 <_svfprintf_r+0x7fe>
  401ff4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  401ff8:	f047 0710 	orr.w	r7, r7, #16
  401ffc:	06ba      	lsls	r2, r7, #26
  401ffe:	d508      	bpl.n	402012 <_svfprintf_r+0x2aa>
  402000:	f108 0807 	add.w	r8, r8, #7
  402004:	f028 0307 	bic.w	r3, r8, #7
  402008:	f103 0808 	add.w	r8, r3, #8
  40200c:	e9d3 4500 	ldrd	r4, r5, [r3]
  402010:	e00f      	b.n	402032 <_svfprintf_r+0x2ca>
  402012:	f017 0f10 	tst.w	r7, #16
  402016:	f108 0304 	add.w	r3, r8, #4
  40201a:	d002      	beq.n	402022 <_svfprintf_r+0x2ba>
  40201c:	f8d8 4000 	ldr.w	r4, [r8]
  402020:	e005      	b.n	40202e <_svfprintf_r+0x2c6>
  402022:	f8d8 4000 	ldr.w	r4, [r8]
  402026:	f017 0f40 	tst.w	r7, #64	; 0x40
  40202a:	bf18      	it	ne
  40202c:	b224      	sxthne	r4, r4
  40202e:	17e5      	asrs	r5, r4, #31
  402030:	4698      	mov	r8, r3
  402032:	2c00      	cmp	r4, #0
  402034:	f175 0100 	sbcs.w	r1, r5, #0
  402038:	f280 820e 	bge.w	402458 <_svfprintf_r+0x6f0>
  40203c:	232d      	movs	r3, #45	; 0x2d
  40203e:	4264      	negs	r4, r4
  402040:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402044:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402048:	e206      	b.n	402458 <_svfprintf_r+0x6f0>
  40204a:	9c08      	ldr	r4, [sp, #32]
  40204c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402050:	f108 0807 	add.w	r8, r8, #7
  402054:	f028 0307 	bic.w	r3, r8, #7
  402058:	970a      	str	r7, [sp, #40]	; 0x28
  40205a:	9411      	str	r4, [sp, #68]	; 0x44
  40205c:	e9d3 4500 	ldrd	r4, r5, [r3]
  402060:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  402064:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  402068:	f103 0808 	add.w	r8, r3, #8
  40206c:	f002 fd90 	bl	404b90 <__fpclassifyd>
  402070:	2801      	cmp	r0, #1
  402072:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  402076:	d114      	bne.n	4020a2 <_svfprintf_r+0x33a>
  402078:	2200      	movs	r2, #0
  40207a:	2300      	movs	r3, #0
  40207c:	f003 fb0c 	bl	405698 <__aeabi_dcmplt>
  402080:	b110      	cbz	r0, 402088 <_svfprintf_r+0x320>
  402082:	232d      	movs	r3, #45	; 0x2d
  402084:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402088:	9d08      	ldr	r5, [sp, #32]
  40208a:	4b51      	ldr	r3, [pc, #324]	; (4021d0 <_svfprintf_r+0x468>)
  40208c:	4a51      	ldr	r2, [pc, #324]	; (4021d4 <_svfprintf_r+0x46c>)
  40208e:	2d47      	cmp	r5, #71	; 0x47
  402090:	bfd8      	it	le
  402092:	461a      	movle	r2, r3
  402094:	9207      	str	r2, [sp, #28]
  402096:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40209a:	f04f 0903 	mov.w	r9, #3
  40209e:	2500      	movs	r5, #0
  4020a0:	e268      	b.n	402574 <_svfprintf_r+0x80c>
  4020a2:	f002 fd75 	bl	404b90 <__fpclassifyd>
  4020a6:	b958      	cbnz	r0, 4020c0 <_svfprintf_r+0x358>
  4020a8:	4b4b      	ldr	r3, [pc, #300]	; (4021d8 <_svfprintf_r+0x470>)
  4020aa:	4a4c      	ldr	r2, [pc, #304]	; (4021dc <_svfprintf_r+0x474>)
  4020ac:	9c08      	ldr	r4, [sp, #32]
  4020ae:	2c47      	cmp	r4, #71	; 0x47
  4020b0:	bfd8      	it	le
  4020b2:	461a      	movle	r2, r3
  4020b4:	9207      	str	r2, [sp, #28]
  4020b6:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  4020ba:	f04f 0903 	mov.w	r9, #3
  4020be:	e258      	b.n	402572 <_svfprintf_r+0x80a>
  4020c0:	f1b9 3fff 	cmp.w	r9, #4294967295
  4020c4:	d00a      	beq.n	4020dc <_svfprintf_r+0x374>
  4020c6:	9d08      	ldr	r5, [sp, #32]
  4020c8:	f025 0320 	bic.w	r3, r5, #32
  4020cc:	2b47      	cmp	r3, #71	; 0x47
  4020ce:	d107      	bne.n	4020e0 <_svfprintf_r+0x378>
  4020d0:	f1b9 0f00 	cmp.w	r9, #0
  4020d4:	bf08      	it	eq
  4020d6:	f04f 0901 	moveq.w	r9, #1
  4020da:	e001      	b.n	4020e0 <_svfprintf_r+0x378>
  4020dc:	f04f 0906 	mov.w	r9, #6
  4020e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  4020e4:	2b00      	cmp	r3, #0
  4020e6:	f447 7780 	orr.w	r7, r7, #256	; 0x100
  4020ea:	da08      	bge.n	4020fe <_svfprintf_r+0x396>
  4020ec:	990d      	ldr	r1, [sp, #52]	; 0x34
  4020ee:	980c      	ldr	r0, [sp, #48]	; 0x30
  4020f0:	9012      	str	r0, [sp, #72]	; 0x48
  4020f2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4020f6:	242d      	movs	r4, #45	; 0x2d
  4020f8:	9113      	str	r1, [sp, #76]	; 0x4c
  4020fa:	9419      	str	r4, [sp, #100]	; 0x64
  4020fc:	e005      	b.n	40210a <_svfprintf_r+0x3a2>
  4020fe:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
  402102:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  402106:	2500      	movs	r5, #0
  402108:	9519      	str	r5, [sp, #100]	; 0x64
  40210a:	9d08      	ldr	r5, [sp, #32]
  40210c:	f025 0420 	bic.w	r4, r5, #32
  402110:	2c46      	cmp	r4, #70	; 0x46
  402112:	d004      	beq.n	40211e <_svfprintf_r+0x3b6>
  402114:	2c45      	cmp	r4, #69	; 0x45
  402116:	d105      	bne.n	402124 <_svfprintf_r+0x3bc>
  402118:	f109 0501 	add.w	r5, r9, #1
  40211c:	e003      	b.n	402126 <_svfprintf_r+0x3be>
  40211e:	464d      	mov	r5, r9
  402120:	2303      	movs	r3, #3
  402122:	e001      	b.n	402128 <_svfprintf_r+0x3c0>
  402124:	464d      	mov	r5, r9
  402126:	2302      	movs	r3, #2
  402128:	e88d 0028 	stmia.w	sp, {r3, r5}
  40212c:	ab1f      	add	r3, sp, #124	; 0x7c
  40212e:	9302      	str	r3, [sp, #8]
  402130:	ab20      	add	r3, sp, #128	; 0x80
  402132:	9303      	str	r3, [sp, #12]
  402134:	ab23      	add	r3, sp, #140	; 0x8c
  402136:	9304      	str	r3, [sp, #16]
  402138:	4650      	mov	r0, sl
  40213a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  40213e:	f000 fe48 	bl	402dd2 <_dtoa_r>
  402142:	2c47      	cmp	r4, #71	; 0x47
  402144:	9007      	str	r0, [sp, #28]
  402146:	d10a      	bne.n	40215e <_svfprintf_r+0x3f6>
  402148:	980a      	ldr	r0, [sp, #40]	; 0x28
  40214a:	07c3      	lsls	r3, r0, #31
  40214c:	d407      	bmi.n	40215e <_svfprintf_r+0x3f6>
  40214e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402150:	9d07      	ldr	r5, [sp, #28]
  402152:	2c47      	cmp	r4, #71	; 0x47
  402154:	ebc5 0303 	rsb	r3, r5, r3
  402158:	9309      	str	r3, [sp, #36]	; 0x24
  40215a:	d141      	bne.n	4021e0 <_svfprintf_r+0x478>
  40215c:	e02d      	b.n	4021ba <_svfprintf_r+0x452>
  40215e:	f8dd c01c 	ldr.w	ip, [sp, #28]
  402162:	2c46      	cmp	r4, #70	; 0x46
  402164:	44ac      	add	ip, r5
  402166:	d113      	bne.n	402190 <_svfprintf_r+0x428>
  402168:	9807      	ldr	r0, [sp, #28]
  40216a:	7803      	ldrb	r3, [r0, #0]
  40216c:	2b30      	cmp	r3, #48	; 0x30
  40216e:	d10d      	bne.n	40218c <_svfprintf_r+0x424>
  402170:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  402174:	2200      	movs	r2, #0
  402176:	2300      	movs	r3, #0
  402178:	f8cd c018 	str.w	ip, [sp, #24]
  40217c:	f003 fa82 	bl	405684 <__aeabi_dcmpeq>
  402180:	f8dd c018 	ldr.w	ip, [sp, #24]
  402184:	b910      	cbnz	r0, 40218c <_svfprintf_r+0x424>
  402186:	f1c5 0501 	rsb	r5, r5, #1
  40218a:	951f      	str	r5, [sp, #124]	; 0x7c
  40218c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40218e:	449c      	add	ip, r3
  402190:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  402194:	2200      	movs	r2, #0
  402196:	2300      	movs	r3, #0
  402198:	f8cd c018 	str.w	ip, [sp, #24]
  40219c:	f003 fa72 	bl	405684 <__aeabi_dcmpeq>
  4021a0:	f8dd c018 	ldr.w	ip, [sp, #24]
  4021a4:	b108      	cbz	r0, 4021aa <_svfprintf_r+0x442>
  4021a6:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
  4021aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4021ac:	4563      	cmp	r3, ip
  4021ae:	d2ce      	bcs.n	40214e <_svfprintf_r+0x3e6>
  4021b0:	1c5a      	adds	r2, r3, #1
  4021b2:	9223      	str	r2, [sp, #140]	; 0x8c
  4021b4:	2230      	movs	r2, #48	; 0x30
  4021b6:	701a      	strb	r2, [r3, #0]
  4021b8:	e7f7      	b.n	4021aa <_svfprintf_r+0x442>
  4021ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4021bc:	1cdc      	adds	r4, r3, #3
  4021be:	db01      	blt.n	4021c4 <_svfprintf_r+0x45c>
  4021c0:	454b      	cmp	r3, r9
  4021c2:	dd6c      	ble.n	40229e <_svfprintf_r+0x536>
  4021c4:	9c08      	ldr	r4, [sp, #32]
  4021c6:	3c02      	subs	r4, #2
  4021c8:	9408      	str	r4, [sp, #32]
  4021ca:	e00c      	b.n	4021e6 <_svfprintf_r+0x47e>
  4021cc:	00405e4e 	.word	0x00405e4e
  4021d0:	00405e3e 	.word	0x00405e3e
  4021d4:	00405e42 	.word	0x00405e42
  4021d8:	00405e46 	.word	0x00405e46
  4021dc:	00405e4a 	.word	0x00405e4a
  4021e0:	9d08      	ldr	r5, [sp, #32]
  4021e2:	2d65      	cmp	r5, #101	; 0x65
  4021e4:	dc42      	bgt.n	40226c <_svfprintf_r+0x504>
  4021e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4021e8:	9c08      	ldr	r4, [sp, #32]
  4021ea:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
  4021ee:	3b01      	subs	r3, #1
  4021f0:	2b00      	cmp	r3, #0
  4021f2:	931f      	str	r3, [sp, #124]	; 0x7c
  4021f4:	bfba      	itte	lt
  4021f6:	425b      	neglt	r3, r3
  4021f8:	222d      	movlt	r2, #45	; 0x2d
  4021fa:	222b      	movge	r2, #43	; 0x2b
  4021fc:	2b09      	cmp	r3, #9
  4021fe:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  402202:	dd1c      	ble.n	40223e <_svfprintf_r+0x4d6>
  402204:	f10d 0292 	add.w	r2, sp, #146	; 0x92
  402208:	200a      	movs	r0, #10
  40220a:	fb93 f1f0 	sdiv	r1, r3, r0
  40220e:	fb00 3311 	mls	r3, r0, r1, r3
  402212:	3330      	adds	r3, #48	; 0x30
  402214:	2909      	cmp	r1, #9
  402216:	4614      	mov	r4, r2
  402218:	f802 3901 	strb.w	r3, [r2], #-1
  40221c:	460b      	mov	r3, r1
  40221e:	dcf3      	bgt.n	402208 <_svfprintf_r+0x4a0>
  402220:	f101 0330 	add.w	r3, r1, #48	; 0x30
  402224:	f804 3d01 	strb.w	r3, [r4, #-1]!
  402228:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40222c:	f10d 0293 	add.w	r2, sp, #147	; 0x93
  402230:	4294      	cmp	r4, r2
  402232:	d20b      	bcs.n	40224c <_svfprintf_r+0x4e4>
  402234:	f814 2b01 	ldrb.w	r2, [r4], #1
  402238:	f803 2b01 	strb.w	r2, [r3], #1
  40223c:	e7f6      	b.n	40222c <_svfprintf_r+0x4c4>
  40223e:	2230      	movs	r2, #48	; 0x30
  402240:	4413      	add	r3, r2
  402242:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  402246:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40224a:	ab22      	add	r3, sp, #136	; 0x88
  40224c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40224e:	aa21      	add	r2, sp, #132	; 0x84
  402250:	1a9a      	subs	r2, r3, r2
  402252:	4691      	mov	r9, r2
  402254:	2d01      	cmp	r5, #1
  402256:	921a      	str	r2, [sp, #104]	; 0x68
  402258:	44a9      	add	r9, r5
  40225a:	dc03      	bgt.n	402264 <_svfprintf_r+0x4fc>
  40225c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40225e:	f015 0401 	ands.w	r4, r5, #1
  402262:	d037      	beq.n	4022d4 <_svfprintf_r+0x56c>
  402264:	f109 0901 	add.w	r9, r9, #1
  402268:	2400      	movs	r4, #0
  40226a:	e033      	b.n	4022d4 <_svfprintf_r+0x56c>
  40226c:	9c08      	ldr	r4, [sp, #32]
  40226e:	2c66      	cmp	r4, #102	; 0x66
  402270:	d115      	bne.n	40229e <_svfprintf_r+0x536>
  402272:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402274:	2b00      	cmp	r3, #0
  402276:	dd09      	ble.n	40228c <_svfprintf_r+0x524>
  402278:	f1b9 0f00 	cmp.w	r9, #0
  40227c:	d102      	bne.n	402284 <_svfprintf_r+0x51c>
  40227e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  402280:	07e8      	lsls	r0, r5, #31
  402282:	d523      	bpl.n	4022cc <_svfprintf_r+0x564>
  402284:	f109 0901 	add.w	r9, r9, #1
  402288:	444b      	add	r3, r9
  40228a:	e01f      	b.n	4022cc <_svfprintf_r+0x564>
  40228c:	f1b9 0f00 	cmp.w	r9, #0
  402290:	d102      	bne.n	402298 <_svfprintf_r+0x530>
  402292:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  402294:	07e1      	lsls	r1, r4, #31
  402296:	d515      	bpl.n	4022c4 <_svfprintf_r+0x55c>
  402298:	f109 0302 	add.w	r3, r9, #2
  40229c:	e016      	b.n	4022cc <_svfprintf_r+0x564>
  40229e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4022a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4022a2:	42ab      	cmp	r3, r5
  4022a4:	db04      	blt.n	4022b0 <_svfprintf_r+0x548>
  4022a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4022a8:	07e2      	lsls	r2, r4, #31
  4022aa:	d50d      	bpl.n	4022c8 <_svfprintf_r+0x560>
  4022ac:	3301      	adds	r3, #1
  4022ae:	e006      	b.n	4022be <_svfprintf_r+0x556>
  4022b0:	2b00      	cmp	r3, #0
  4022b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4022b4:	bfd4      	ite	le
  4022b6:	f1c3 0302 	rsble	r3, r3, #2
  4022ba:	2301      	movgt	r3, #1
  4022bc:	4423      	add	r3, r4
  4022be:	2567      	movs	r5, #103	; 0x67
  4022c0:	9511      	str	r5, [sp, #68]	; 0x44
  4022c2:	e003      	b.n	4022cc <_svfprintf_r+0x564>
  4022c4:	2301      	movs	r3, #1
  4022c6:	e001      	b.n	4022cc <_svfprintf_r+0x564>
  4022c8:	2467      	movs	r4, #103	; 0x67
  4022ca:	9411      	str	r4, [sp, #68]	; 0x44
  4022cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4022ce:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  4022d0:	9508      	str	r5, [sp, #32]
  4022d2:	4699      	mov	r9, r3
  4022d4:	9d19      	ldr	r5, [sp, #100]	; 0x64
  4022d6:	b115      	cbz	r5, 4022de <_svfprintf_r+0x576>
  4022d8:	232d      	movs	r3, #45	; 0x2d
  4022da:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4022de:	2500      	movs	r5, #0
  4022e0:	e149      	b.n	402576 <_svfprintf_r+0x80e>
  4022e2:	f017 0f20 	tst.w	r7, #32
  4022e6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4022ea:	f108 0104 	add.w	r1, r8, #4
  4022ee:	d008      	beq.n	402302 <_svfprintf_r+0x59a>
  4022f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4022f2:	f8d8 0000 	ldr.w	r0, [r8]
  4022f6:	17e5      	asrs	r5, r4, #31
  4022f8:	4622      	mov	r2, r4
  4022fa:	462b      	mov	r3, r5
  4022fc:	e9c0 2300 	strd	r2, r3, [r0]
  402300:	e00c      	b.n	40231c <_svfprintf_r+0x5b4>
  402302:	06fb      	lsls	r3, r7, #27
  402304:	d406      	bmi.n	402314 <_svfprintf_r+0x5ac>
  402306:	067d      	lsls	r5, r7, #25
  402308:	d504      	bpl.n	402314 <_svfprintf_r+0x5ac>
  40230a:	f8d8 3000 	ldr.w	r3, [r8]
  40230e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  402310:	801c      	strh	r4, [r3, #0]
  402312:	e003      	b.n	40231c <_svfprintf_r+0x5b4>
  402314:	f8d8 3000 	ldr.w	r3, [r8]
  402318:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40231a:	601d      	str	r5, [r3, #0]
  40231c:	4688      	mov	r8, r1
  40231e:	e558      	b.n	401dd2 <_svfprintf_r+0x6a>
  402320:	f047 0710 	orr.w	r7, r7, #16
  402324:	f017 0320 	ands.w	r3, r7, #32
  402328:	d009      	beq.n	40233e <_svfprintf_r+0x5d6>
  40232a:	f108 0807 	add.w	r8, r8, #7
  40232e:	f028 0307 	bic.w	r3, r8, #7
  402332:	e9d3 4500 	ldrd	r4, r5, [r3]
  402336:	f103 0808 	add.w	r8, r3, #8
  40233a:	2300      	movs	r3, #0
  40233c:	e088      	b.n	402450 <_svfprintf_r+0x6e8>
  40233e:	f017 0110 	ands.w	r1, r7, #16
  402342:	f108 0204 	add.w	r2, r8, #4
  402346:	d107      	bne.n	402358 <_svfprintf_r+0x5f0>
  402348:	f017 0340 	ands.w	r3, r7, #64	; 0x40
  40234c:	d004      	beq.n	402358 <_svfprintf_r+0x5f0>
  40234e:	f8b8 4000 	ldrh.w	r4, [r8]
  402352:	2500      	movs	r5, #0
  402354:	4690      	mov	r8, r2
  402356:	e7f0      	b.n	40233a <_svfprintf_r+0x5d2>
  402358:	f8d8 4000 	ldr.w	r4, [r8]
  40235c:	2500      	movs	r5, #0
  40235e:	4690      	mov	r8, r2
  402360:	e076      	b.n	402450 <_svfprintf_r+0x6e8>
  402362:	2330      	movs	r3, #48	; 0x30
  402364:	2278      	movs	r2, #120	; 0x78
  402366:	48a8      	ldr	r0, [pc, #672]	; (402608 <_svfprintf_r+0x8a0>)
  402368:	f8d8 4000 	ldr.w	r4, [r8]
  40236c:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  402370:	2500      	movs	r5, #0
  402372:	f047 0702 	orr.w	r7, r7, #2
  402376:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  40237a:	f108 0804 	add.w	r8, r8, #4
  40237e:	901b      	str	r0, [sp, #108]	; 0x6c
  402380:	2302      	movs	r3, #2
  402382:	9208      	str	r2, [sp, #32]
  402384:	e064      	b.n	402450 <_svfprintf_r+0x6e8>
  402386:	4643      	mov	r3, r8
  402388:	2500      	movs	r5, #0
  40238a:	681b      	ldr	r3, [r3, #0]
  40238c:	9307      	str	r3, [sp, #28]
  40238e:	45a9      	cmp	r9, r5
  402390:	f108 0804 	add.w	r8, r8, #4
  402394:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  402398:	db0d      	blt.n	4023b6 <_svfprintf_r+0x64e>
  40239a:	4618      	mov	r0, r3
  40239c:	4629      	mov	r1, r5
  40239e:	464a      	mov	r2, r9
  4023a0:	f001 fe2e 	bl	404000 <memchr>
  4023a4:	2800      	cmp	r0, #0
  4023a6:	f000 80e4 	beq.w	402572 <_svfprintf_r+0x80a>
  4023aa:	9c07      	ldr	r4, [sp, #28]
  4023ac:	1b00      	subs	r0, r0, r4
  4023ae:	4548      	cmp	r0, r9
  4023b0:	bfb8      	it	lt
  4023b2:	4681      	movlt	r9, r0
  4023b4:	e0de      	b.n	402574 <_svfprintf_r+0x80c>
  4023b6:	9807      	ldr	r0, [sp, #28]
  4023b8:	f7ff fcc0 	bl	401d3c <strlen>
  4023bc:	4681      	mov	r9, r0
  4023be:	e0d9      	b.n	402574 <_svfprintf_r+0x80c>
  4023c0:	f047 0710 	orr.w	r7, r7, #16
  4023c4:	06bc      	lsls	r4, r7, #26
  4023c6:	d508      	bpl.n	4023da <_svfprintf_r+0x672>
  4023c8:	f108 0807 	add.w	r8, r8, #7
  4023cc:	f028 0307 	bic.w	r3, r8, #7
  4023d0:	f103 0808 	add.w	r8, r3, #8
  4023d4:	e9d3 4500 	ldrd	r4, r5, [r3]
  4023d8:	e00d      	b.n	4023f6 <_svfprintf_r+0x68e>
  4023da:	f017 0f10 	tst.w	r7, #16
  4023de:	f108 0304 	add.w	r3, r8, #4
  4023e2:	d104      	bne.n	4023ee <_svfprintf_r+0x686>
  4023e4:	0678      	lsls	r0, r7, #25
  4023e6:	d502      	bpl.n	4023ee <_svfprintf_r+0x686>
  4023e8:	f8b8 4000 	ldrh.w	r4, [r8]
  4023ec:	e001      	b.n	4023f2 <_svfprintf_r+0x68a>
  4023ee:	f8d8 4000 	ldr.w	r4, [r8]
  4023f2:	2500      	movs	r5, #0
  4023f4:	4698      	mov	r8, r3
  4023f6:	2301      	movs	r3, #1
  4023f8:	e02a      	b.n	402450 <_svfprintf_r+0x6e8>
  4023fa:	4d83      	ldr	r5, [pc, #524]	; (402608 <_svfprintf_r+0x8a0>)
  4023fc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402400:	951b      	str	r5, [sp, #108]	; 0x6c
  402402:	06b9      	lsls	r1, r7, #26
  402404:	d508      	bpl.n	402418 <_svfprintf_r+0x6b0>
  402406:	f108 0807 	add.w	r8, r8, #7
  40240a:	f028 0307 	bic.w	r3, r8, #7
  40240e:	f103 0808 	add.w	r8, r3, #8
  402412:	e9d3 4500 	ldrd	r4, r5, [r3]
  402416:	e00d      	b.n	402434 <_svfprintf_r+0x6cc>
  402418:	f017 0f10 	tst.w	r7, #16
  40241c:	f108 0304 	add.w	r3, r8, #4
  402420:	d104      	bne.n	40242c <_svfprintf_r+0x6c4>
  402422:	067a      	lsls	r2, r7, #25
  402424:	d502      	bpl.n	40242c <_svfprintf_r+0x6c4>
  402426:	f8b8 4000 	ldrh.w	r4, [r8]
  40242a:	e001      	b.n	402430 <_svfprintf_r+0x6c8>
  40242c:	f8d8 4000 	ldr.w	r4, [r8]
  402430:	2500      	movs	r5, #0
  402432:	4698      	mov	r8, r3
  402434:	07fb      	lsls	r3, r7, #31
  402436:	d50a      	bpl.n	40244e <_svfprintf_r+0x6e6>
  402438:	ea54 0005 	orrs.w	r0, r4, r5
  40243c:	d007      	beq.n	40244e <_svfprintf_r+0x6e6>
  40243e:	2330      	movs	r3, #48	; 0x30
  402440:	9908      	ldr	r1, [sp, #32]
  402442:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  402446:	f88d 1079 	strb.w	r1, [sp, #121]	; 0x79
  40244a:	f047 0702 	orr.w	r7, r7, #2
  40244e:	2302      	movs	r3, #2
  402450:	2200      	movs	r2, #0
  402452:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
  402456:	e000      	b.n	40245a <_svfprintf_r+0x6f2>
  402458:	2301      	movs	r3, #1
  40245a:	f1b9 0f00 	cmp.w	r9, #0
  40245e:	bfa8      	it	ge
  402460:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
  402464:	ea54 0205 	orrs.w	r2, r4, r5
  402468:	d102      	bne.n	402470 <_svfprintf_r+0x708>
  40246a:	f1b9 0f00 	cmp.w	r9, #0
  40246e:	d05a      	beq.n	402526 <_svfprintf_r+0x7be>
  402470:	2b01      	cmp	r3, #1
  402472:	d01f      	beq.n	4024b4 <_svfprintf_r+0x74c>
  402474:	2b02      	cmp	r3, #2
  402476:	f10d 03c7 	add.w	r3, sp, #199	; 0xc7
  40247a:	d041      	beq.n	402500 <_svfprintf_r+0x798>
  40247c:	08e1      	lsrs	r1, r4, #3
  40247e:	ea41 7045 	orr.w	r0, r1, r5, lsl #29
  402482:	08e9      	lsrs	r1, r5, #3
  402484:	9014      	str	r0, [sp, #80]	; 0x50
  402486:	9115      	str	r1, [sp, #84]	; 0x54
  402488:	f004 0207 	and.w	r2, r4, #7
  40248c:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  402490:	3230      	adds	r2, #48	; 0x30
  402492:	ea54 0005 	orrs.w	r0, r4, r5
  402496:	9307      	str	r3, [sp, #28]
  402498:	701a      	strb	r2, [r3, #0]
  40249a:	f103 33ff 	add.w	r3, r3, #4294967295
  40249e:	d1ed      	bne.n	40247c <_svfprintf_r+0x714>
  4024a0:	07f8      	lsls	r0, r7, #31
  4024a2:	9907      	ldr	r1, [sp, #28]
  4024a4:	d54c      	bpl.n	402540 <_svfprintf_r+0x7d8>
  4024a6:	2a30      	cmp	r2, #48	; 0x30
  4024a8:	d04a      	beq.n	402540 <_svfprintf_r+0x7d8>
  4024aa:	9307      	str	r3, [sp, #28]
  4024ac:	2330      	movs	r3, #48	; 0x30
  4024ae:	f801 3c01 	strb.w	r3, [r1, #-1]
  4024b2:	e045      	b.n	402540 <_svfprintf_r+0x7d8>
  4024b4:	2d00      	cmp	r5, #0
  4024b6:	bf08      	it	eq
  4024b8:	2c0a      	cmpeq	r4, #10
  4024ba:	d205      	bcs.n	4024c8 <_svfprintf_r+0x760>
  4024bc:	3430      	adds	r4, #48	; 0x30
  4024be:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
  4024c2:	f10d 04c7 	add.w	r4, sp, #199	; 0xc7
  4024c6:	e03a      	b.n	40253e <_svfprintf_r+0x7d6>
  4024c8:	f10d 00c7 	add.w	r0, sp, #199	; 0xc7
  4024cc:	900a      	str	r0, [sp, #40]	; 0x28
  4024ce:	990a      	ldr	r1, [sp, #40]	; 0x28
  4024d0:	9107      	str	r1, [sp, #28]
  4024d2:	4620      	mov	r0, r4
  4024d4:	4629      	mov	r1, r5
  4024d6:	220a      	movs	r2, #10
  4024d8:	2300      	movs	r3, #0
  4024da:	f003 f92d 	bl	405738 <__aeabi_uldivmod>
  4024de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4024e0:	3230      	adds	r2, #48	; 0x30
  4024e2:	f803 2901 	strb.w	r2, [r3], #-1
  4024e6:	4620      	mov	r0, r4
  4024e8:	930a      	str	r3, [sp, #40]	; 0x28
  4024ea:	4629      	mov	r1, r5
  4024ec:	220a      	movs	r2, #10
  4024ee:	2300      	movs	r3, #0
  4024f0:	f003 f922 	bl	405738 <__aeabi_uldivmod>
  4024f4:	4604      	mov	r4, r0
  4024f6:	460d      	mov	r5, r1
  4024f8:	ea54 0005 	orrs.w	r0, r4, r5
  4024fc:	d1e7      	bne.n	4024ce <_svfprintf_r+0x766>
  4024fe:	e01f      	b.n	402540 <_svfprintf_r+0x7d8>
  402500:	f004 020f 	and.w	r2, r4, #15
  402504:	991b      	ldr	r1, [sp, #108]	; 0x6c
  402506:	9307      	str	r3, [sp, #28]
  402508:	5c8a      	ldrb	r2, [r1, r2]
  40250a:	f803 2901 	strb.w	r2, [r3], #-1
  40250e:	0922      	lsrs	r2, r4, #4
  402510:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
  402514:	0929      	lsrs	r1, r5, #4
  402516:	9016      	str	r0, [sp, #88]	; 0x58
  402518:	9117      	str	r1, [sp, #92]	; 0x5c
  40251a:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  40251e:	ea54 0205 	orrs.w	r2, r4, r5
  402522:	d1ed      	bne.n	402500 <_svfprintf_r+0x798>
  402524:	e00c      	b.n	402540 <_svfprintf_r+0x7d8>
  402526:	b933      	cbnz	r3, 402536 <_svfprintf_r+0x7ce>
  402528:	07fb      	lsls	r3, r7, #31
  40252a:	d507      	bpl.n	40253c <_svfprintf_r+0x7d4>
  40252c:	ac42      	add	r4, sp, #264	; 0x108
  40252e:	2330      	movs	r3, #48	; 0x30
  402530:	f804 3d41 	strb.w	r3, [r4, #-65]!
  402534:	e003      	b.n	40253e <_svfprintf_r+0x7d6>
  402536:	ad32      	add	r5, sp, #200	; 0xc8
  402538:	9507      	str	r5, [sp, #28]
  40253a:	e001      	b.n	402540 <_svfprintf_r+0x7d8>
  40253c:	ac32      	add	r4, sp, #200	; 0xc8
  40253e:	9407      	str	r4, [sp, #28]
  402540:	9c07      	ldr	r4, [sp, #28]
  402542:	464d      	mov	r5, r9
  402544:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  402548:	ebc4 0909 	rsb	r9, r4, r9
  40254c:	2400      	movs	r4, #0
  40254e:	e012      	b.n	402576 <_svfprintf_r+0x80e>
  402550:	9d08      	ldr	r5, [sp, #32]
  402552:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402556:	2d00      	cmp	r5, #0
  402558:	f000 8388 	beq.w	402c6c <_svfprintf_r+0xf04>
  40255c:	f88d 50a0 	strb.w	r5, [sp, #160]	; 0xa0
  402560:	2500      	movs	r5, #0
  402562:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  402566:	a828      	add	r0, sp, #160	; 0xa0
  402568:	f04f 0901 	mov.w	r9, #1
  40256c:	462c      	mov	r4, r5
  40256e:	9007      	str	r0, [sp, #28]
  402570:	e001      	b.n	402576 <_svfprintf_r+0x80e>
  402572:	4605      	mov	r5, r0
  402574:	462c      	mov	r4, r5
  402576:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
  40257a:	45a9      	cmp	r9, r5
  40257c:	bfac      	ite	ge
  40257e:	4649      	movge	r1, r9
  402580:	4629      	movlt	r1, r5
  402582:	910a      	str	r1, [sp, #40]	; 0x28
  402584:	b10b      	cbz	r3, 40258a <_svfprintf_r+0x822>
  402586:	3101      	adds	r1, #1
  402588:	910a      	str	r1, [sp, #40]	; 0x28
  40258a:	f017 0302 	ands.w	r3, r7, #2
  40258e:	9311      	str	r3, [sp, #68]	; 0x44
  402590:	d002      	beq.n	402598 <_svfprintf_r+0x830>
  402592:	980a      	ldr	r0, [sp, #40]	; 0x28
  402594:	3002      	adds	r0, #2
  402596:	900a      	str	r0, [sp, #40]	; 0x28
  402598:	f017 0384 	ands.w	r3, r7, #132	; 0x84
  40259c:	9319      	str	r3, [sp, #100]	; 0x64
  40259e:	d140      	bne.n	402622 <_svfprintf_r+0x8ba>
  4025a0:	980e      	ldr	r0, [sp, #56]	; 0x38
  4025a2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4025a4:	ebc1 0c00 	rsb	ip, r1, r0
  4025a8:	f1bc 0f00 	cmp.w	ip, #0
  4025ac:	dd39      	ble.n	402622 <_svfprintf_r+0x8ba>
  4025ae:	4b17      	ldr	r3, [pc, #92]	; (40260c <_svfprintf_r+0x8a4>)
  4025b0:	6033      	str	r3, [r6, #0]
  4025b2:	f1bc 0f10 	cmp.w	ip, #16
  4025b6:	dd1b      	ble.n	4025f0 <_svfprintf_r+0x888>
  4025b8:	2310      	movs	r3, #16
  4025ba:	6073      	str	r3, [r6, #4]
  4025bc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4025be:	3310      	adds	r3, #16
  4025c0:	9327      	str	r3, [sp, #156]	; 0x9c
  4025c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4025c4:	3301      	adds	r3, #1
  4025c6:	2b07      	cmp	r3, #7
  4025c8:	9326      	str	r3, [sp, #152]	; 0x98
  4025ca:	dc01      	bgt.n	4025d0 <_svfprintf_r+0x868>
  4025cc:	3608      	adds	r6, #8
  4025ce:	e00c      	b.n	4025ea <_svfprintf_r+0x882>
  4025d0:	4650      	mov	r0, sl
  4025d2:	4659      	mov	r1, fp
  4025d4:	aa25      	add	r2, sp, #148	; 0x94
  4025d6:	f8cd c018 	str.w	ip, [sp, #24]
  4025da:	f002 fb15 	bl	404c08 <__ssprint_r>
  4025de:	f8dd c018 	ldr.w	ip, [sp, #24]
  4025e2:	2800      	cmp	r0, #0
  4025e4:	f040 8349 	bne.w	402c7a <_svfprintf_r+0xf12>
  4025e8:	ae32      	add	r6, sp, #200	; 0xc8
  4025ea:	f1ac 0c10 	sub.w	ip, ip, #16
  4025ee:	e7de      	b.n	4025ae <_svfprintf_r+0x846>
  4025f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4025f2:	f8c6 c004 	str.w	ip, [r6, #4]
  4025f6:	4463      	add	r3, ip
  4025f8:	9327      	str	r3, [sp, #156]	; 0x9c
  4025fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4025fc:	3301      	adds	r3, #1
  4025fe:	2b07      	cmp	r3, #7
  402600:	9326      	str	r3, [sp, #152]	; 0x98
  402602:	dc05      	bgt.n	402610 <_svfprintf_r+0x8a8>
  402604:	3608      	adds	r6, #8
  402606:	e00c      	b.n	402622 <_svfprintf_r+0x8ba>
  402608:	00405e5f 	.word	0x00405e5f
  40260c:	00405e1e 	.word	0x00405e1e
  402610:	4650      	mov	r0, sl
  402612:	4659      	mov	r1, fp
  402614:	aa25      	add	r2, sp, #148	; 0x94
  402616:	f002 faf7 	bl	404c08 <__ssprint_r>
  40261a:	2800      	cmp	r0, #0
  40261c:	f040 832d 	bne.w	402c7a <_svfprintf_r+0xf12>
  402620:	ae32      	add	r6, sp, #200	; 0xc8
  402622:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
  402626:	b1bb      	cbz	r3, 402658 <_svfprintf_r+0x8f0>
  402628:	f10d 0377 	add.w	r3, sp, #119	; 0x77
  40262c:	6033      	str	r3, [r6, #0]
  40262e:	2301      	movs	r3, #1
  402630:	6073      	str	r3, [r6, #4]
  402632:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402634:	3301      	adds	r3, #1
  402636:	9327      	str	r3, [sp, #156]	; 0x9c
  402638:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40263a:	3301      	adds	r3, #1
  40263c:	2b07      	cmp	r3, #7
  40263e:	9326      	str	r3, [sp, #152]	; 0x98
  402640:	dc01      	bgt.n	402646 <_svfprintf_r+0x8de>
  402642:	3608      	adds	r6, #8
  402644:	e008      	b.n	402658 <_svfprintf_r+0x8f0>
  402646:	4650      	mov	r0, sl
  402648:	4659      	mov	r1, fp
  40264a:	aa25      	add	r2, sp, #148	; 0x94
  40264c:	f002 fadc 	bl	404c08 <__ssprint_r>
  402650:	2800      	cmp	r0, #0
  402652:	f040 8312 	bne.w	402c7a <_svfprintf_r+0xf12>
  402656:	ae32      	add	r6, sp, #200	; 0xc8
  402658:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40265a:	b1b3      	cbz	r3, 40268a <_svfprintf_r+0x922>
  40265c:	ab1e      	add	r3, sp, #120	; 0x78
  40265e:	6033      	str	r3, [r6, #0]
  402660:	2302      	movs	r3, #2
  402662:	6073      	str	r3, [r6, #4]
  402664:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402666:	3302      	adds	r3, #2
  402668:	9327      	str	r3, [sp, #156]	; 0x9c
  40266a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40266c:	3301      	adds	r3, #1
  40266e:	2b07      	cmp	r3, #7
  402670:	9326      	str	r3, [sp, #152]	; 0x98
  402672:	dc01      	bgt.n	402678 <_svfprintf_r+0x910>
  402674:	3608      	adds	r6, #8
  402676:	e008      	b.n	40268a <_svfprintf_r+0x922>
  402678:	4650      	mov	r0, sl
  40267a:	4659      	mov	r1, fp
  40267c:	aa25      	add	r2, sp, #148	; 0x94
  40267e:	f002 fac3 	bl	404c08 <__ssprint_r>
  402682:	2800      	cmp	r0, #0
  402684:	f040 82f9 	bne.w	402c7a <_svfprintf_r+0xf12>
  402688:	ae32      	add	r6, sp, #200	; 0xc8
  40268a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40268c:	2b80      	cmp	r3, #128	; 0x80
  40268e:	d13c      	bne.n	40270a <_svfprintf_r+0x9a2>
  402690:	980e      	ldr	r0, [sp, #56]	; 0x38
  402692:	990a      	ldr	r1, [sp, #40]	; 0x28
  402694:	ebc1 0c00 	rsb	ip, r1, r0
  402698:	f1bc 0f00 	cmp.w	ip, #0
  40269c:	dd35      	ble.n	40270a <_svfprintf_r+0x9a2>
  40269e:	4b9c      	ldr	r3, [pc, #624]	; (402910 <_svfprintf_r+0xba8>)
  4026a0:	6033      	str	r3, [r6, #0]
  4026a2:	f1bc 0f10 	cmp.w	ip, #16
  4026a6:	dd1b      	ble.n	4026e0 <_svfprintf_r+0x978>
  4026a8:	2310      	movs	r3, #16
  4026aa:	6073      	str	r3, [r6, #4]
  4026ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4026ae:	3310      	adds	r3, #16
  4026b0:	9327      	str	r3, [sp, #156]	; 0x9c
  4026b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4026b4:	3301      	adds	r3, #1
  4026b6:	2b07      	cmp	r3, #7
  4026b8:	9326      	str	r3, [sp, #152]	; 0x98
  4026ba:	dc01      	bgt.n	4026c0 <_svfprintf_r+0x958>
  4026bc:	3608      	adds	r6, #8
  4026be:	e00c      	b.n	4026da <_svfprintf_r+0x972>
  4026c0:	4650      	mov	r0, sl
  4026c2:	4659      	mov	r1, fp
  4026c4:	aa25      	add	r2, sp, #148	; 0x94
  4026c6:	f8cd c018 	str.w	ip, [sp, #24]
  4026ca:	f002 fa9d 	bl	404c08 <__ssprint_r>
  4026ce:	f8dd c018 	ldr.w	ip, [sp, #24]
  4026d2:	2800      	cmp	r0, #0
  4026d4:	f040 82d1 	bne.w	402c7a <_svfprintf_r+0xf12>
  4026d8:	ae32      	add	r6, sp, #200	; 0xc8
  4026da:	f1ac 0c10 	sub.w	ip, ip, #16
  4026de:	e7de      	b.n	40269e <_svfprintf_r+0x936>
  4026e0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4026e2:	f8c6 c004 	str.w	ip, [r6, #4]
  4026e6:	4463      	add	r3, ip
  4026e8:	9327      	str	r3, [sp, #156]	; 0x9c
  4026ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4026ec:	3301      	adds	r3, #1
  4026ee:	2b07      	cmp	r3, #7
  4026f0:	9326      	str	r3, [sp, #152]	; 0x98
  4026f2:	dc01      	bgt.n	4026f8 <_svfprintf_r+0x990>
  4026f4:	3608      	adds	r6, #8
  4026f6:	e008      	b.n	40270a <_svfprintf_r+0x9a2>
  4026f8:	4650      	mov	r0, sl
  4026fa:	4659      	mov	r1, fp
  4026fc:	aa25      	add	r2, sp, #148	; 0x94
  4026fe:	f002 fa83 	bl	404c08 <__ssprint_r>
  402702:	2800      	cmp	r0, #0
  402704:	f040 82b9 	bne.w	402c7a <_svfprintf_r+0xf12>
  402708:	ae32      	add	r6, sp, #200	; 0xc8
  40270a:	ebc9 0505 	rsb	r5, r9, r5
  40270e:	2d00      	cmp	r5, #0
  402710:	dd2e      	ble.n	402770 <_svfprintf_r+0xa08>
  402712:	4b7f      	ldr	r3, [pc, #508]	; (402910 <_svfprintf_r+0xba8>)
  402714:	6033      	str	r3, [r6, #0]
  402716:	2d10      	cmp	r5, #16
  402718:	dd16      	ble.n	402748 <_svfprintf_r+0x9e0>
  40271a:	2310      	movs	r3, #16
  40271c:	6073      	str	r3, [r6, #4]
  40271e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402720:	3310      	adds	r3, #16
  402722:	9327      	str	r3, [sp, #156]	; 0x9c
  402724:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402726:	3301      	adds	r3, #1
  402728:	2b07      	cmp	r3, #7
  40272a:	9326      	str	r3, [sp, #152]	; 0x98
  40272c:	dc01      	bgt.n	402732 <_svfprintf_r+0x9ca>
  40272e:	3608      	adds	r6, #8
  402730:	e008      	b.n	402744 <_svfprintf_r+0x9dc>
  402732:	4650      	mov	r0, sl
  402734:	4659      	mov	r1, fp
  402736:	aa25      	add	r2, sp, #148	; 0x94
  402738:	f002 fa66 	bl	404c08 <__ssprint_r>
  40273c:	2800      	cmp	r0, #0
  40273e:	f040 829c 	bne.w	402c7a <_svfprintf_r+0xf12>
  402742:	ae32      	add	r6, sp, #200	; 0xc8
  402744:	3d10      	subs	r5, #16
  402746:	e7e4      	b.n	402712 <_svfprintf_r+0x9aa>
  402748:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40274a:	6075      	str	r5, [r6, #4]
  40274c:	441d      	add	r5, r3
  40274e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402750:	9527      	str	r5, [sp, #156]	; 0x9c
  402752:	3301      	adds	r3, #1
  402754:	2b07      	cmp	r3, #7
  402756:	9326      	str	r3, [sp, #152]	; 0x98
  402758:	dc01      	bgt.n	40275e <_svfprintf_r+0x9f6>
  40275a:	3608      	adds	r6, #8
  40275c:	e008      	b.n	402770 <_svfprintf_r+0xa08>
  40275e:	4650      	mov	r0, sl
  402760:	4659      	mov	r1, fp
  402762:	aa25      	add	r2, sp, #148	; 0x94
  402764:	f002 fa50 	bl	404c08 <__ssprint_r>
  402768:	2800      	cmp	r0, #0
  40276a:	f040 8286 	bne.w	402c7a <_svfprintf_r+0xf12>
  40276e:	ae32      	add	r6, sp, #200	; 0xc8
  402770:	05fd      	lsls	r5, r7, #23
  402772:	d405      	bmi.n	402780 <_svfprintf_r+0xa18>
  402774:	9c07      	ldr	r4, [sp, #28]
  402776:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402778:	e886 0210 	stmia.w	r6, {r4, r9}
  40277c:	444b      	add	r3, r9
  40277e:	e0da      	b.n	402936 <_svfprintf_r+0xbce>
  402780:	9d08      	ldr	r5, [sp, #32]
  402782:	2d65      	cmp	r5, #101	; 0x65
  402784:	f340 81a7 	ble.w	402ad6 <_svfprintf_r+0xd6e>
  402788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  40278c:	2200      	movs	r2, #0
  40278e:	2300      	movs	r3, #0
  402790:	f002 ff78 	bl	405684 <__aeabi_dcmpeq>
  402794:	2800      	cmp	r0, #0
  402796:	d059      	beq.n	40284c <_svfprintf_r+0xae4>
  402798:	4b5e      	ldr	r3, [pc, #376]	; (402914 <_svfprintf_r+0xbac>)
  40279a:	6033      	str	r3, [r6, #0]
  40279c:	2301      	movs	r3, #1
  40279e:	6073      	str	r3, [r6, #4]
  4027a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4027a2:	3301      	adds	r3, #1
  4027a4:	9327      	str	r3, [sp, #156]	; 0x9c
  4027a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4027a8:	3301      	adds	r3, #1
  4027aa:	2b07      	cmp	r3, #7
  4027ac:	9326      	str	r3, [sp, #152]	; 0x98
  4027ae:	dc01      	bgt.n	4027b4 <_svfprintf_r+0xa4c>
  4027b0:	3608      	adds	r6, #8
  4027b2:	e008      	b.n	4027c6 <_svfprintf_r+0xa5e>
  4027b4:	4650      	mov	r0, sl
  4027b6:	4659      	mov	r1, fp
  4027b8:	aa25      	add	r2, sp, #148	; 0x94
  4027ba:	f002 fa25 	bl	404c08 <__ssprint_r>
  4027be:	2800      	cmp	r0, #0
  4027c0:	f040 825b 	bne.w	402c7a <_svfprintf_r+0xf12>
  4027c4:	ae32      	add	r6, sp, #200	; 0xc8
  4027c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4027c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4027ca:	42a3      	cmp	r3, r4
  4027cc:	db02      	blt.n	4027d4 <_svfprintf_r+0xa6c>
  4027ce:	07fc      	lsls	r4, r7, #31
  4027d0:	f140 8202 	bpl.w	402bd8 <_svfprintf_r+0xe70>
  4027d4:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4027d6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4027d8:	9d18      	ldr	r5, [sp, #96]	; 0x60
  4027da:	6035      	str	r5, [r6, #0]
  4027dc:	4423      	add	r3, r4
  4027de:	9327      	str	r3, [sp, #156]	; 0x9c
  4027e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4027e2:	6074      	str	r4, [r6, #4]
  4027e4:	3301      	adds	r3, #1
  4027e6:	2b07      	cmp	r3, #7
  4027e8:	9326      	str	r3, [sp, #152]	; 0x98
  4027ea:	dc01      	bgt.n	4027f0 <_svfprintf_r+0xa88>
  4027ec:	3608      	adds	r6, #8
  4027ee:	e008      	b.n	402802 <_svfprintf_r+0xa9a>
  4027f0:	4650      	mov	r0, sl
  4027f2:	4659      	mov	r1, fp
  4027f4:	aa25      	add	r2, sp, #148	; 0x94
  4027f6:	f002 fa07 	bl	404c08 <__ssprint_r>
  4027fa:	2800      	cmp	r0, #0
  4027fc:	f040 823d 	bne.w	402c7a <_svfprintf_r+0xf12>
  402800:	ae32      	add	r6, sp, #200	; 0xc8
  402802:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402804:	1e6c      	subs	r4, r5, #1
  402806:	2c00      	cmp	r4, #0
  402808:	f340 81e6 	ble.w	402bd8 <_svfprintf_r+0xe70>
  40280c:	4b40      	ldr	r3, [pc, #256]	; (402910 <_svfprintf_r+0xba8>)
  40280e:	6033      	str	r3, [r6, #0]
  402810:	2c10      	cmp	r4, #16
  402812:	dd16      	ble.n	402842 <_svfprintf_r+0xada>
  402814:	2310      	movs	r3, #16
  402816:	6073      	str	r3, [r6, #4]
  402818:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40281a:	3310      	adds	r3, #16
  40281c:	9327      	str	r3, [sp, #156]	; 0x9c
  40281e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402820:	3301      	adds	r3, #1
  402822:	2b07      	cmp	r3, #7
  402824:	9326      	str	r3, [sp, #152]	; 0x98
  402826:	dc01      	bgt.n	40282c <_svfprintf_r+0xac4>
  402828:	3608      	adds	r6, #8
  40282a:	e008      	b.n	40283e <_svfprintf_r+0xad6>
  40282c:	4650      	mov	r0, sl
  40282e:	4659      	mov	r1, fp
  402830:	aa25      	add	r2, sp, #148	; 0x94
  402832:	f002 f9e9 	bl	404c08 <__ssprint_r>
  402836:	2800      	cmp	r0, #0
  402838:	f040 821f 	bne.w	402c7a <_svfprintf_r+0xf12>
  40283c:	ae32      	add	r6, sp, #200	; 0xc8
  40283e:	3c10      	subs	r4, #16
  402840:	e7e4      	b.n	40280c <_svfprintf_r+0xaa4>
  402842:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402844:	6074      	str	r4, [r6, #4]
  402846:	441c      	add	r4, r3
  402848:	9427      	str	r4, [sp, #156]	; 0x9c
  40284a:	e134      	b.n	402ab6 <_svfprintf_r+0xd4e>
  40284c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40284e:	2b00      	cmp	r3, #0
  402850:	dc73      	bgt.n	40293a <_svfprintf_r+0xbd2>
  402852:	4b30      	ldr	r3, [pc, #192]	; (402914 <_svfprintf_r+0xbac>)
  402854:	6033      	str	r3, [r6, #0]
  402856:	2301      	movs	r3, #1
  402858:	6073      	str	r3, [r6, #4]
  40285a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40285c:	3301      	adds	r3, #1
  40285e:	9327      	str	r3, [sp, #156]	; 0x9c
  402860:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402862:	3301      	adds	r3, #1
  402864:	2b07      	cmp	r3, #7
  402866:	9326      	str	r3, [sp, #152]	; 0x98
  402868:	dc01      	bgt.n	40286e <_svfprintf_r+0xb06>
  40286a:	3608      	adds	r6, #8
  40286c:	e008      	b.n	402880 <_svfprintf_r+0xb18>
  40286e:	4650      	mov	r0, sl
  402870:	4659      	mov	r1, fp
  402872:	aa25      	add	r2, sp, #148	; 0x94
  402874:	f002 f9c8 	bl	404c08 <__ssprint_r>
  402878:	2800      	cmp	r0, #0
  40287a:	f040 81fe 	bne.w	402c7a <_svfprintf_r+0xf12>
  40287e:	ae32      	add	r6, sp, #200	; 0xc8
  402880:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402882:	b923      	cbnz	r3, 40288e <_svfprintf_r+0xb26>
  402884:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402886:	b914      	cbnz	r4, 40288e <_svfprintf_r+0xb26>
  402888:	07f8      	lsls	r0, r7, #31
  40288a:	f140 81a5 	bpl.w	402bd8 <_svfprintf_r+0xe70>
  40288e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  402890:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402892:	9d18      	ldr	r5, [sp, #96]	; 0x60
  402894:	6035      	str	r5, [r6, #0]
  402896:	4423      	add	r3, r4
  402898:	9327      	str	r3, [sp, #156]	; 0x9c
  40289a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40289c:	6074      	str	r4, [r6, #4]
  40289e:	3301      	adds	r3, #1
  4028a0:	2b07      	cmp	r3, #7
  4028a2:	9326      	str	r3, [sp, #152]	; 0x98
  4028a4:	dc01      	bgt.n	4028aa <_svfprintf_r+0xb42>
  4028a6:	3608      	adds	r6, #8
  4028a8:	e008      	b.n	4028bc <_svfprintf_r+0xb54>
  4028aa:	4650      	mov	r0, sl
  4028ac:	4659      	mov	r1, fp
  4028ae:	aa25      	add	r2, sp, #148	; 0x94
  4028b0:	f002 f9aa 	bl	404c08 <__ssprint_r>
  4028b4:	2800      	cmp	r0, #0
  4028b6:	f040 81e0 	bne.w	402c7a <_svfprintf_r+0xf12>
  4028ba:	ae32      	add	r6, sp, #200	; 0xc8
  4028bc:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  4028be:	4264      	negs	r4, r4
  4028c0:	2c00      	cmp	r4, #0
  4028c2:	dd32      	ble.n	40292a <_svfprintf_r+0xbc2>
  4028c4:	4b12      	ldr	r3, [pc, #72]	; (402910 <_svfprintf_r+0xba8>)
  4028c6:	6033      	str	r3, [r6, #0]
  4028c8:	2c10      	cmp	r4, #16
  4028ca:	dd16      	ble.n	4028fa <_svfprintf_r+0xb92>
  4028cc:	2310      	movs	r3, #16
  4028ce:	6073      	str	r3, [r6, #4]
  4028d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4028d2:	3310      	adds	r3, #16
  4028d4:	9327      	str	r3, [sp, #156]	; 0x9c
  4028d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4028d8:	3301      	adds	r3, #1
  4028da:	2b07      	cmp	r3, #7
  4028dc:	9326      	str	r3, [sp, #152]	; 0x98
  4028de:	dc01      	bgt.n	4028e4 <_svfprintf_r+0xb7c>
  4028e0:	3608      	adds	r6, #8
  4028e2:	e008      	b.n	4028f6 <_svfprintf_r+0xb8e>
  4028e4:	4650      	mov	r0, sl
  4028e6:	4659      	mov	r1, fp
  4028e8:	aa25      	add	r2, sp, #148	; 0x94
  4028ea:	f002 f98d 	bl	404c08 <__ssprint_r>
  4028ee:	2800      	cmp	r0, #0
  4028f0:	f040 81c3 	bne.w	402c7a <_svfprintf_r+0xf12>
  4028f4:	ae32      	add	r6, sp, #200	; 0xc8
  4028f6:	3c10      	subs	r4, #16
  4028f8:	e7e4      	b.n	4028c4 <_svfprintf_r+0xb5c>
  4028fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4028fc:	6074      	str	r4, [r6, #4]
  4028fe:	441c      	add	r4, r3
  402900:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402902:	9427      	str	r4, [sp, #156]	; 0x9c
  402904:	3301      	adds	r3, #1
  402906:	2b07      	cmp	r3, #7
  402908:	9326      	str	r3, [sp, #152]	; 0x98
  40290a:	dc05      	bgt.n	402918 <_svfprintf_r+0xbb0>
  40290c:	3608      	adds	r6, #8
  40290e:	e00c      	b.n	40292a <_svfprintf_r+0xbc2>
  402910:	00405e2e 	.word	0x00405e2e
  402914:	00405e70 	.word	0x00405e70
  402918:	4650      	mov	r0, sl
  40291a:	4659      	mov	r1, fp
  40291c:	aa25      	add	r2, sp, #148	; 0x94
  40291e:	f002 f973 	bl	404c08 <__ssprint_r>
  402922:	2800      	cmp	r0, #0
  402924:	f040 81a9 	bne.w	402c7a <_svfprintf_r+0xf12>
  402928:	ae32      	add	r6, sp, #200	; 0xc8
  40292a:	9d07      	ldr	r5, [sp, #28]
  40292c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40292e:	6035      	str	r5, [r6, #0]
  402930:	6074      	str	r4, [r6, #4]
  402932:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402934:	4423      	add	r3, r4
  402936:	9327      	str	r3, [sp, #156]	; 0x9c
  402938:	e0bd      	b.n	402ab6 <_svfprintf_r+0xd4e>
  40293a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40293c:	9d07      	ldr	r5, [sp, #28]
  40293e:	4681      	mov	r9, r0
  402940:	45a1      	cmp	r9, r4
  402942:	bfa8      	it	ge
  402944:	46a1      	movge	r9, r4
  402946:	f1b9 0f00 	cmp.w	r9, #0
  40294a:	4405      	add	r5, r0
  40294c:	dd15      	ble.n	40297a <_svfprintf_r+0xc12>
  40294e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402950:	9907      	ldr	r1, [sp, #28]
  402952:	444b      	add	r3, r9
  402954:	9327      	str	r3, [sp, #156]	; 0x9c
  402956:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402958:	3301      	adds	r3, #1
  40295a:	2b07      	cmp	r3, #7
  40295c:	e886 0202 	stmia.w	r6, {r1, r9}
  402960:	9326      	str	r3, [sp, #152]	; 0x98
  402962:	dc01      	bgt.n	402968 <_svfprintf_r+0xc00>
  402964:	3608      	adds	r6, #8
  402966:	e008      	b.n	40297a <_svfprintf_r+0xc12>
  402968:	4650      	mov	r0, sl
  40296a:	4659      	mov	r1, fp
  40296c:	aa25      	add	r2, sp, #148	; 0x94
  40296e:	f002 f94b 	bl	404c08 <__ssprint_r>
  402972:	2800      	cmp	r0, #0
  402974:	f040 8181 	bne.w	402c7a <_svfprintf_r+0xf12>
  402978:	ae32      	add	r6, sp, #200	; 0xc8
  40297a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  40297e:	ebc9 0904 	rsb	r9, r9, r4
  402982:	f1b9 0f00 	cmp.w	r9, #0
  402986:	dd31      	ble.n	4029ec <_svfprintf_r+0xc84>
  402988:	4b9a      	ldr	r3, [pc, #616]	; (402bf4 <_svfprintf_r+0xe8c>)
  40298a:	6033      	str	r3, [r6, #0]
  40298c:	f1b9 0f10 	cmp.w	r9, #16
  402990:	dd17      	ble.n	4029c2 <_svfprintf_r+0xc5a>
  402992:	2310      	movs	r3, #16
  402994:	6073      	str	r3, [r6, #4]
  402996:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402998:	3310      	adds	r3, #16
  40299a:	9327      	str	r3, [sp, #156]	; 0x9c
  40299c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40299e:	3301      	adds	r3, #1
  4029a0:	2b07      	cmp	r3, #7
  4029a2:	9326      	str	r3, [sp, #152]	; 0x98
  4029a4:	dc01      	bgt.n	4029aa <_svfprintf_r+0xc42>
  4029a6:	3608      	adds	r6, #8
  4029a8:	e008      	b.n	4029bc <_svfprintf_r+0xc54>
  4029aa:	4650      	mov	r0, sl
  4029ac:	4659      	mov	r1, fp
  4029ae:	aa25      	add	r2, sp, #148	; 0x94
  4029b0:	f002 f92a 	bl	404c08 <__ssprint_r>
  4029b4:	2800      	cmp	r0, #0
  4029b6:	f040 8160 	bne.w	402c7a <_svfprintf_r+0xf12>
  4029ba:	ae32      	add	r6, sp, #200	; 0xc8
  4029bc:	f1a9 0910 	sub.w	r9, r9, #16
  4029c0:	e7e2      	b.n	402988 <_svfprintf_r+0xc20>
  4029c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4029c4:	f8c6 9004 	str.w	r9, [r6, #4]
  4029c8:	444b      	add	r3, r9
  4029ca:	9327      	str	r3, [sp, #156]	; 0x9c
  4029cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4029ce:	3301      	adds	r3, #1
  4029d0:	2b07      	cmp	r3, #7
  4029d2:	9326      	str	r3, [sp, #152]	; 0x98
  4029d4:	dc01      	bgt.n	4029da <_svfprintf_r+0xc72>
  4029d6:	3608      	adds	r6, #8
  4029d8:	e008      	b.n	4029ec <_svfprintf_r+0xc84>
  4029da:	4650      	mov	r0, sl
  4029dc:	4659      	mov	r1, fp
  4029de:	aa25      	add	r2, sp, #148	; 0x94
  4029e0:	f002 f912 	bl	404c08 <__ssprint_r>
  4029e4:	2800      	cmp	r0, #0
  4029e6:	f040 8148 	bne.w	402c7a <_svfprintf_r+0xf12>
  4029ea:	ae32      	add	r6, sp, #200	; 0xc8
  4029ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4029ee:	9809      	ldr	r0, [sp, #36]	; 0x24
  4029f0:	9a07      	ldr	r2, [sp, #28]
  4029f2:	4283      	cmp	r3, r0
  4029f4:	4414      	add	r4, r2
  4029f6:	db01      	blt.n	4029fc <_svfprintf_r+0xc94>
  4029f8:	07f9      	lsls	r1, r7, #31
  4029fa:	d516      	bpl.n	402a2a <_svfprintf_r+0xcc2>
  4029fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4029fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402a00:	9918      	ldr	r1, [sp, #96]	; 0x60
  402a02:	6031      	str	r1, [r6, #0]
  402a04:	4413      	add	r3, r2
  402a06:	9327      	str	r3, [sp, #156]	; 0x9c
  402a08:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402a0a:	6072      	str	r2, [r6, #4]
  402a0c:	3301      	adds	r3, #1
  402a0e:	2b07      	cmp	r3, #7
  402a10:	9326      	str	r3, [sp, #152]	; 0x98
  402a12:	dc01      	bgt.n	402a18 <_svfprintf_r+0xcb0>
  402a14:	3608      	adds	r6, #8
  402a16:	e008      	b.n	402a2a <_svfprintf_r+0xcc2>
  402a18:	4650      	mov	r0, sl
  402a1a:	4659      	mov	r1, fp
  402a1c:	aa25      	add	r2, sp, #148	; 0x94
  402a1e:	f002 f8f3 	bl	404c08 <__ssprint_r>
  402a22:	2800      	cmp	r0, #0
  402a24:	f040 8129 	bne.w	402c7a <_svfprintf_r+0xf12>
  402a28:	ae32      	add	r6, sp, #200	; 0xc8
  402a2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
  402a2e:	1b2d      	subs	r5, r5, r4
  402a30:	1ac3      	subs	r3, r0, r3
  402a32:	429d      	cmp	r5, r3
  402a34:	bfa8      	it	ge
  402a36:	461d      	movge	r5, r3
  402a38:	2d00      	cmp	r5, #0
  402a3a:	dd14      	ble.n	402a66 <_svfprintf_r+0xcfe>
  402a3c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402a3e:	442b      	add	r3, r5
  402a40:	9327      	str	r3, [sp, #156]	; 0x9c
  402a42:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402a44:	3301      	adds	r3, #1
  402a46:	2b07      	cmp	r3, #7
  402a48:	e886 0030 	stmia.w	r6, {r4, r5}
  402a4c:	9326      	str	r3, [sp, #152]	; 0x98
  402a4e:	dc01      	bgt.n	402a54 <_svfprintf_r+0xcec>
  402a50:	3608      	adds	r6, #8
  402a52:	e008      	b.n	402a66 <_svfprintf_r+0xcfe>
  402a54:	4650      	mov	r0, sl
  402a56:	4659      	mov	r1, fp
  402a58:	aa25      	add	r2, sp, #148	; 0x94
  402a5a:	f002 f8d5 	bl	404c08 <__ssprint_r>
  402a5e:	2800      	cmp	r0, #0
  402a60:	f040 810b 	bne.w	402c7a <_svfprintf_r+0xf12>
  402a64:	ae32      	add	r6, sp, #200	; 0xc8
  402a66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402a68:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402a6a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  402a6e:	1ae3      	subs	r3, r4, r3
  402a70:	1b5d      	subs	r5, r3, r5
  402a72:	2d00      	cmp	r5, #0
  402a74:	f340 80b0 	ble.w	402bd8 <_svfprintf_r+0xe70>
  402a78:	4b5e      	ldr	r3, [pc, #376]	; (402bf4 <_svfprintf_r+0xe8c>)
  402a7a:	6033      	str	r3, [r6, #0]
  402a7c:	2d10      	cmp	r5, #16
  402a7e:	dd16      	ble.n	402aae <_svfprintf_r+0xd46>
  402a80:	2310      	movs	r3, #16
  402a82:	6073      	str	r3, [r6, #4]
  402a84:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402a86:	3310      	adds	r3, #16
  402a88:	9327      	str	r3, [sp, #156]	; 0x9c
  402a8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402a8c:	3301      	adds	r3, #1
  402a8e:	2b07      	cmp	r3, #7
  402a90:	9326      	str	r3, [sp, #152]	; 0x98
  402a92:	dc01      	bgt.n	402a98 <_svfprintf_r+0xd30>
  402a94:	3608      	adds	r6, #8
  402a96:	e008      	b.n	402aaa <_svfprintf_r+0xd42>
  402a98:	4650      	mov	r0, sl
  402a9a:	4659      	mov	r1, fp
  402a9c:	aa25      	add	r2, sp, #148	; 0x94
  402a9e:	f002 f8b3 	bl	404c08 <__ssprint_r>
  402aa2:	2800      	cmp	r0, #0
  402aa4:	f040 80e9 	bne.w	402c7a <_svfprintf_r+0xf12>
  402aa8:	ae32      	add	r6, sp, #200	; 0xc8
  402aaa:	3d10      	subs	r5, #16
  402aac:	e7e4      	b.n	402a78 <_svfprintf_r+0xd10>
  402aae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402ab0:	6075      	str	r5, [r6, #4]
  402ab2:	441d      	add	r5, r3
  402ab4:	9527      	str	r5, [sp, #156]	; 0x9c
  402ab6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402ab8:	3301      	adds	r3, #1
  402aba:	2b07      	cmp	r3, #7
  402abc:	9326      	str	r3, [sp, #152]	; 0x98
  402abe:	f340 808a 	ble.w	402bd6 <_svfprintf_r+0xe6e>
  402ac2:	4650      	mov	r0, sl
  402ac4:	4659      	mov	r1, fp
  402ac6:	aa25      	add	r2, sp, #148	; 0x94
  402ac8:	f002 f89e 	bl	404c08 <__ssprint_r>
  402acc:	2800      	cmp	r0, #0
  402ace:	f040 80d4 	bne.w	402c7a <_svfprintf_r+0xf12>
  402ad2:	ae32      	add	r6, sp, #200	; 0xc8
  402ad4:	e080      	b.n	402bd8 <_svfprintf_r+0xe70>
  402ad6:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402ad8:	2d01      	cmp	r5, #1
  402ada:	dc01      	bgt.n	402ae0 <_svfprintf_r+0xd78>
  402adc:	07fa      	lsls	r2, r7, #31
  402ade:	d56d      	bpl.n	402bbc <_svfprintf_r+0xe54>
  402ae0:	2301      	movs	r3, #1
  402ae2:	6073      	str	r3, [r6, #4]
  402ae4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402ae6:	9c07      	ldr	r4, [sp, #28]
  402ae8:	6034      	str	r4, [r6, #0]
  402aea:	3301      	adds	r3, #1
  402aec:	9327      	str	r3, [sp, #156]	; 0x9c
  402aee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402af0:	3301      	adds	r3, #1
  402af2:	2b07      	cmp	r3, #7
  402af4:	9326      	str	r3, [sp, #152]	; 0x98
  402af6:	dc01      	bgt.n	402afc <_svfprintf_r+0xd94>
  402af8:	3608      	adds	r6, #8
  402afa:	e008      	b.n	402b0e <_svfprintf_r+0xda6>
  402afc:	4650      	mov	r0, sl
  402afe:	4659      	mov	r1, fp
  402b00:	aa25      	add	r2, sp, #148	; 0x94
  402b02:	f002 f881 	bl	404c08 <__ssprint_r>
  402b06:	2800      	cmp	r0, #0
  402b08:	f040 80b7 	bne.w	402c7a <_svfprintf_r+0xf12>
  402b0c:	ae32      	add	r6, sp, #200	; 0xc8
  402b0e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  402b10:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402b12:	9d18      	ldr	r5, [sp, #96]	; 0x60
  402b14:	6035      	str	r5, [r6, #0]
  402b16:	4423      	add	r3, r4
  402b18:	9327      	str	r3, [sp, #156]	; 0x9c
  402b1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b1c:	6074      	str	r4, [r6, #4]
  402b1e:	3301      	adds	r3, #1
  402b20:	2b07      	cmp	r3, #7
  402b22:	9326      	str	r3, [sp, #152]	; 0x98
  402b24:	dc01      	bgt.n	402b2a <_svfprintf_r+0xdc2>
  402b26:	3608      	adds	r6, #8
  402b28:	e008      	b.n	402b3c <_svfprintf_r+0xdd4>
  402b2a:	4650      	mov	r0, sl
  402b2c:	4659      	mov	r1, fp
  402b2e:	aa25      	add	r2, sp, #148	; 0x94
  402b30:	f002 f86a 	bl	404c08 <__ssprint_r>
  402b34:	2800      	cmp	r0, #0
  402b36:	f040 80a0 	bne.w	402c7a <_svfprintf_r+0xf12>
  402b3a:	ae32      	add	r6, sp, #200	; 0xc8
  402b3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  402b40:	2200      	movs	r2, #0
  402b42:	2300      	movs	r3, #0
  402b44:	f002 fd9e 	bl	405684 <__aeabi_dcmpeq>
  402b48:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402b4a:	1e6c      	subs	r4, r5, #1
  402b4c:	b940      	cbnz	r0, 402b60 <_svfprintf_r+0xdf8>
  402b4e:	9d07      	ldr	r5, [sp, #28]
  402b50:	1c6b      	adds	r3, r5, #1
  402b52:	e886 0018 	stmia.w	r6, {r3, r4}
  402b56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402b58:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402b5a:	3b01      	subs	r3, #1
  402b5c:	4423      	add	r3, r4
  402b5e:	e033      	b.n	402bc8 <_svfprintf_r+0xe60>
  402b60:	2c00      	cmp	r4, #0
  402b62:	dd34      	ble.n	402bce <_svfprintf_r+0xe66>
  402b64:	4b23      	ldr	r3, [pc, #140]	; (402bf4 <_svfprintf_r+0xe8c>)
  402b66:	6033      	str	r3, [r6, #0]
  402b68:	2c10      	cmp	r4, #16
  402b6a:	dd15      	ble.n	402b98 <_svfprintf_r+0xe30>
  402b6c:	2310      	movs	r3, #16
  402b6e:	6073      	str	r3, [r6, #4]
  402b70:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402b72:	3310      	adds	r3, #16
  402b74:	9327      	str	r3, [sp, #156]	; 0x9c
  402b76:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b78:	3301      	adds	r3, #1
  402b7a:	2b07      	cmp	r3, #7
  402b7c:	9326      	str	r3, [sp, #152]	; 0x98
  402b7e:	dc01      	bgt.n	402b84 <_svfprintf_r+0xe1c>
  402b80:	3608      	adds	r6, #8
  402b82:	e007      	b.n	402b94 <_svfprintf_r+0xe2c>
  402b84:	4650      	mov	r0, sl
  402b86:	4659      	mov	r1, fp
  402b88:	aa25      	add	r2, sp, #148	; 0x94
  402b8a:	f002 f83d 	bl	404c08 <__ssprint_r>
  402b8e:	2800      	cmp	r0, #0
  402b90:	d173      	bne.n	402c7a <_svfprintf_r+0xf12>
  402b92:	ae32      	add	r6, sp, #200	; 0xc8
  402b94:	3c10      	subs	r4, #16
  402b96:	e7e5      	b.n	402b64 <_svfprintf_r+0xdfc>
  402b98:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402b9a:	6074      	str	r4, [r6, #4]
  402b9c:	441c      	add	r4, r3
  402b9e:	9427      	str	r4, [sp, #156]	; 0x9c
  402ba0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402ba2:	3301      	adds	r3, #1
  402ba4:	2b07      	cmp	r3, #7
  402ba6:	9326      	str	r3, [sp, #152]	; 0x98
  402ba8:	dd10      	ble.n	402bcc <_svfprintf_r+0xe64>
  402baa:	4650      	mov	r0, sl
  402bac:	4659      	mov	r1, fp
  402bae:	aa25      	add	r2, sp, #148	; 0x94
  402bb0:	f002 f82a 	bl	404c08 <__ssprint_r>
  402bb4:	2800      	cmp	r0, #0
  402bb6:	d160      	bne.n	402c7a <_svfprintf_r+0xf12>
  402bb8:	ae32      	add	r6, sp, #200	; 0xc8
  402bba:	e008      	b.n	402bce <_svfprintf_r+0xe66>
  402bbc:	2301      	movs	r3, #1
  402bbe:	6073      	str	r3, [r6, #4]
  402bc0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402bc2:	9d07      	ldr	r5, [sp, #28]
  402bc4:	6035      	str	r5, [r6, #0]
  402bc6:	3301      	adds	r3, #1
  402bc8:	9327      	str	r3, [sp, #156]	; 0x9c
  402bca:	e7e9      	b.n	402ba0 <_svfprintf_r+0xe38>
  402bcc:	3608      	adds	r6, #8
  402bce:	ab21      	add	r3, sp, #132	; 0x84
  402bd0:	6033      	str	r3, [r6, #0]
  402bd2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  402bd4:	e6ac      	b.n	402930 <_svfprintf_r+0xbc8>
  402bd6:	3608      	adds	r6, #8
  402bd8:	077b      	lsls	r3, r7, #29
  402bda:	d40d      	bmi.n	402bf8 <_svfprintf_r+0xe90>
  402bdc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402bde:	980a      	ldr	r0, [sp, #40]	; 0x28
  402be0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  402be2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402be4:	42a0      	cmp	r0, r4
  402be6:	bfac      	ite	ge
  402be8:	182d      	addge	r5, r5, r0
  402bea:	192d      	addlt	r5, r5, r4
  402bec:	950f      	str	r5, [sp, #60]	; 0x3c
  402bee:	2b00      	cmp	r3, #0
  402bf0:	d037      	beq.n	402c62 <_svfprintf_r+0xefa>
  402bf2:	e030      	b.n	402c56 <_svfprintf_r+0xeee>
  402bf4:	00405e2e 	.word	0x00405e2e
  402bf8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  402bfa:	980a      	ldr	r0, [sp, #40]	; 0x28
  402bfc:	1a2c      	subs	r4, r5, r0
  402bfe:	2c00      	cmp	r4, #0
  402c00:	ddec      	ble.n	402bdc <_svfprintf_r+0xe74>
  402c02:	4b23      	ldr	r3, [pc, #140]	; (402c90 <_svfprintf_r+0xf28>)
  402c04:	6033      	str	r3, [r6, #0]
  402c06:	2c10      	cmp	r4, #16
  402c08:	dd14      	ble.n	402c34 <_svfprintf_r+0xecc>
  402c0a:	2310      	movs	r3, #16
  402c0c:	6073      	str	r3, [r6, #4]
  402c0e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402c10:	3310      	adds	r3, #16
  402c12:	9327      	str	r3, [sp, #156]	; 0x9c
  402c14:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402c16:	3301      	adds	r3, #1
  402c18:	2b07      	cmp	r3, #7
  402c1a:	9326      	str	r3, [sp, #152]	; 0x98
  402c1c:	dc01      	bgt.n	402c22 <_svfprintf_r+0xeba>
  402c1e:	3608      	adds	r6, #8
  402c20:	e006      	b.n	402c30 <_svfprintf_r+0xec8>
  402c22:	4650      	mov	r0, sl
  402c24:	4659      	mov	r1, fp
  402c26:	aa25      	add	r2, sp, #148	; 0x94
  402c28:	f001 ffee 	bl	404c08 <__ssprint_r>
  402c2c:	bb28      	cbnz	r0, 402c7a <_svfprintf_r+0xf12>
  402c2e:	ae32      	add	r6, sp, #200	; 0xc8
  402c30:	3c10      	subs	r4, #16
  402c32:	e7e6      	b.n	402c02 <_svfprintf_r+0xe9a>
  402c34:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402c36:	6074      	str	r4, [r6, #4]
  402c38:	441c      	add	r4, r3
  402c3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402c3c:	9427      	str	r4, [sp, #156]	; 0x9c
  402c3e:	3301      	adds	r3, #1
  402c40:	2b07      	cmp	r3, #7
  402c42:	9326      	str	r3, [sp, #152]	; 0x98
  402c44:	ddca      	ble.n	402bdc <_svfprintf_r+0xe74>
  402c46:	4650      	mov	r0, sl
  402c48:	4659      	mov	r1, fp
  402c4a:	aa25      	add	r2, sp, #148	; 0x94
  402c4c:	f001 ffdc 	bl	404c08 <__ssprint_r>
  402c50:	2800      	cmp	r0, #0
  402c52:	d0c3      	beq.n	402bdc <_svfprintf_r+0xe74>
  402c54:	e011      	b.n	402c7a <_svfprintf_r+0xf12>
  402c56:	4650      	mov	r0, sl
  402c58:	4659      	mov	r1, fp
  402c5a:	aa25      	add	r2, sp, #148	; 0x94
  402c5c:	f001 ffd4 	bl	404c08 <__ssprint_r>
  402c60:	b958      	cbnz	r0, 402c7a <_svfprintf_r+0xf12>
  402c62:	2300      	movs	r3, #0
  402c64:	9326      	str	r3, [sp, #152]	; 0x98
  402c66:	ae32      	add	r6, sp, #200	; 0xc8
  402c68:	f7ff b8b3 	b.w	401dd2 <_svfprintf_r+0x6a>
  402c6c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402c6e:	b123      	cbz	r3, 402c7a <_svfprintf_r+0xf12>
  402c70:	4650      	mov	r0, sl
  402c72:	4659      	mov	r1, fp
  402c74:	aa25      	add	r2, sp, #148	; 0x94
  402c76:	f001 ffc7 	bl	404c08 <__ssprint_r>
  402c7a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402c7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
  402c80:	f013 0f40 	tst.w	r3, #64	; 0x40
  402c84:	bf18      	it	ne
  402c86:	f04f 30ff 	movne.w	r0, #4294967295
  402c8a:	b043      	add	sp, #268	; 0x10c
  402c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c90:	00405e1e 	.word	0x00405e1e

00402c94 <register_fini>:
  402c94:	4b02      	ldr	r3, [pc, #8]	; (402ca0 <register_fini+0xc>)
  402c96:	b113      	cbz	r3, 402c9e <register_fini+0xa>
  402c98:	4802      	ldr	r0, [pc, #8]	; (402ca4 <register_fini+0x10>)
  402c9a:	f000 b805 	b.w	402ca8 <atexit>
  402c9e:	4770      	bx	lr
  402ca0:	00000000 	.word	0x00000000
  402ca4:	00403931 	.word	0x00403931

00402ca8 <atexit>:
  402ca8:	4601      	mov	r1, r0
  402caa:	2000      	movs	r0, #0
  402cac:	4602      	mov	r2, r0
  402cae:	4603      	mov	r3, r0
  402cb0:	f002 bc18 	b.w	4054e4 <__register_exitproc>
  402cb4:	0000      	movs	r0, r0
	...

00402cb8 <quorem>:
  402cb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402cbc:	6903      	ldr	r3, [r0, #16]
  402cbe:	690c      	ldr	r4, [r1, #16]
  402cc0:	42a3      	cmp	r3, r4
  402cc2:	4680      	mov	r8, r0
  402cc4:	f2c0 8081 	blt.w	402dca <quorem+0x112>
  402cc8:	3c01      	subs	r4, #1
  402cca:	f101 0714 	add.w	r7, r1, #20
  402cce:	00a2      	lsls	r2, r4, #2
  402cd0:	f100 0514 	add.w	r5, r0, #20
  402cd4:	4691      	mov	r9, r2
  402cd6:	9200      	str	r2, [sp, #0]
  402cd8:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
  402cdc:	442a      	add	r2, r5
  402cde:	9201      	str	r2, [sp, #4]
  402ce0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
  402ce4:	3601      	adds	r6, #1
  402ce6:	fbb2 f6f6 	udiv	r6, r2, r6
  402cea:	44b9      	add	r9, r7
  402cec:	2e00      	cmp	r6, #0
  402cee:	d03a      	beq.n	402d66 <quorem+0xae>
  402cf0:	f04f 0e00 	mov.w	lr, #0
  402cf4:	463a      	mov	r2, r7
  402cf6:	4628      	mov	r0, r5
  402cf8:	46f3      	mov	fp, lr
  402cfa:	f852 cb04 	ldr.w	ip, [r2], #4
  402cfe:	6803      	ldr	r3, [r0, #0]
  402d00:	fa1f fa8c 	uxth.w	sl, ip
  402d04:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  402d08:	fb0a ea06 	mla	sl, sl, r6, lr
  402d0c:	fb0c fc06 	mul.w	ip, ip, r6
  402d10:	eb0c 4c1a 	add.w	ip, ip, sl, lsr #16
  402d14:	fa1f fa8a 	uxth.w	sl, sl
  402d18:	ebca 0a0b 	rsb	sl, sl, fp
  402d1c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
  402d20:	fa1f fc8c 	uxth.w	ip, ip
  402d24:	fa1a fa83 	uxtah	sl, sl, r3
  402d28:	ebcc 4c13 	rsb	ip, ip, r3, lsr #16
  402d2c:	eb0c 4c2a 	add.w	ip, ip, sl, asr #16
  402d30:	fa1f fa8a 	uxth.w	sl, sl
  402d34:	ea4a 4a0c 	orr.w	sl, sl, ip, lsl #16
  402d38:	454a      	cmp	r2, r9
  402d3a:	ea4f 4b2c 	mov.w	fp, ip, asr #16
  402d3e:	f840 ab04 	str.w	sl, [r0], #4
  402d42:	d9da      	bls.n	402cfa <quorem+0x42>
  402d44:	9a00      	ldr	r2, [sp, #0]
  402d46:	58ab      	ldr	r3, [r5, r2]
  402d48:	b96b      	cbnz	r3, 402d66 <quorem+0xae>
  402d4a:	9a01      	ldr	r2, [sp, #4]
  402d4c:	1f13      	subs	r3, r2, #4
  402d4e:	42ab      	cmp	r3, r5
  402d50:	461a      	mov	r2, r3
  402d52:	d802      	bhi.n	402d5a <quorem+0xa2>
  402d54:	f8c8 4010 	str.w	r4, [r8, #16]
  402d58:	e005      	b.n	402d66 <quorem+0xae>
  402d5a:	6812      	ldr	r2, [r2, #0]
  402d5c:	3b04      	subs	r3, #4
  402d5e:	2a00      	cmp	r2, #0
  402d60:	d1f8      	bne.n	402d54 <quorem+0x9c>
  402d62:	3c01      	subs	r4, #1
  402d64:	e7f3      	b.n	402d4e <quorem+0x96>
  402d66:	4640      	mov	r0, r8
  402d68:	f001 fbab 	bl	4044c2 <__mcmp>
  402d6c:	2800      	cmp	r0, #0
  402d6e:	db2a      	blt.n	402dc6 <quorem+0x10e>
  402d70:	3601      	adds	r6, #1
  402d72:	462b      	mov	r3, r5
  402d74:	2000      	movs	r0, #0
  402d76:	f857 cb04 	ldr.w	ip, [r7], #4
  402d7a:	681a      	ldr	r2, [r3, #0]
  402d7c:	fa1f f18c 	uxth.w	r1, ip
  402d80:	1a41      	subs	r1, r0, r1
  402d82:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  402d86:	fa11 f182 	uxtah	r1, r1, r2
  402d8a:	ebcc 4212 	rsb	r2, ip, r2, lsr #16
  402d8e:	eb02 4221 	add.w	r2, r2, r1, asr #16
  402d92:	b289      	uxth	r1, r1
  402d94:	1410      	asrs	r0, r2, #16
  402d96:	454f      	cmp	r7, r9
  402d98:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  402d9c:	f843 2b04 	str.w	r2, [r3], #4
  402da0:	d9e9      	bls.n	402d76 <quorem+0xbe>
  402da2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
  402da6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
  402daa:	b962      	cbnz	r2, 402dc6 <quorem+0x10e>
  402dac:	3b04      	subs	r3, #4
  402dae:	42ab      	cmp	r3, r5
  402db0:	461a      	mov	r2, r3
  402db2:	d802      	bhi.n	402dba <quorem+0x102>
  402db4:	f8c8 4010 	str.w	r4, [r8, #16]
  402db8:	e005      	b.n	402dc6 <quorem+0x10e>
  402dba:	6812      	ldr	r2, [r2, #0]
  402dbc:	3b04      	subs	r3, #4
  402dbe:	2a00      	cmp	r2, #0
  402dc0:	d1f8      	bne.n	402db4 <quorem+0xfc>
  402dc2:	3c01      	subs	r4, #1
  402dc4:	e7f3      	b.n	402dae <quorem+0xf6>
  402dc6:	4630      	mov	r0, r6
  402dc8:	e000      	b.n	402dcc <quorem+0x114>
  402dca:	2000      	movs	r0, #0
  402dcc:	b003      	add	sp, #12
  402dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00402dd2 <_dtoa_r>:
  402dd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402dd6:	6c01      	ldr	r1, [r0, #64]	; 0x40
  402dd8:	b09b      	sub	sp, #108	; 0x6c
  402dda:	4682      	mov	sl, r0
  402ddc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402dde:	e9cd 2304 	strd	r2, r3, [sp, #16]
  402de2:	b151      	cbz	r1, 402dfa <_dtoa_r+0x28>
  402de4:	6c43      	ldr	r3, [r0, #68]	; 0x44
  402de6:	604b      	str	r3, [r1, #4]
  402de8:	2201      	movs	r2, #1
  402dea:	fa02 f303 	lsl.w	r3, r2, r3
  402dee:	608b      	str	r3, [r1, #8]
  402df0:	f001 f962 	bl	4040b8 <_Bfree>
  402df4:	2300      	movs	r3, #0
  402df6:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
  402dfa:	9805      	ldr	r0, [sp, #20]
  402dfc:	2800      	cmp	r0, #0
  402dfe:	da05      	bge.n	402e0c <_dtoa_r+0x3a>
  402e00:	2301      	movs	r3, #1
  402e02:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
  402e06:	6023      	str	r3, [r4, #0]
  402e08:	9105      	str	r1, [sp, #20]
  402e0a:	e001      	b.n	402e10 <_dtoa_r+0x3e>
  402e0c:	2300      	movs	r3, #0
  402e0e:	6023      	str	r3, [r4, #0]
  402e10:	9f05      	ldr	r7, [sp, #20]
  402e12:	4a9b      	ldr	r2, [pc, #620]	; (403080 <_dtoa_r+0x2ae>)
  402e14:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
  402e18:	0d1b      	lsrs	r3, r3, #20
  402e1a:	051b      	lsls	r3, r3, #20
  402e1c:	4293      	cmp	r3, r2
  402e1e:	d11d      	bne.n	402e5c <_dtoa_r+0x8a>
  402e20:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402e22:	f242 730f 	movw	r3, #9999	; 0x270f
  402e26:	6013      	str	r3, [r2, #0]
  402e28:	9b04      	ldr	r3, [sp, #16]
  402e2a:	b943      	cbnz	r3, 402e3e <_dtoa_r+0x6c>
  402e2c:	4b95      	ldr	r3, [pc, #596]	; (403084 <_dtoa_r+0x2b2>)
  402e2e:	4a96      	ldr	r2, [pc, #600]	; (403088 <_dtoa_r+0x2b6>)
  402e30:	f3c7 0013 	ubfx	r0, r7, #0, #20
  402e34:	2800      	cmp	r0, #0
  402e36:	bf0c      	ite	eq
  402e38:	4610      	moveq	r0, r2
  402e3a:	4618      	movne	r0, r3
  402e3c:	e000      	b.n	402e40 <_dtoa_r+0x6e>
  402e3e:	4891      	ldr	r0, [pc, #580]	; (403084 <_dtoa_r+0x2b2>)
  402e40:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  402e42:	2f00      	cmp	r7, #0
  402e44:	f000 856d 	beq.w	403922 <_dtoa_r+0xb50>
  402e48:	78c3      	ldrb	r3, [r0, #3]
  402e4a:	b113      	cbz	r3, 402e52 <_dtoa_r+0x80>
  402e4c:	f100 0308 	add.w	r3, r0, #8
  402e50:	e000      	b.n	402e54 <_dtoa_r+0x82>
  402e52:	1cc3      	adds	r3, r0, #3
  402e54:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  402e56:	603b      	str	r3, [r7, #0]
  402e58:	f000 bd63 	b.w	403922 <_dtoa_r+0xb50>
  402e5c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  402e60:	2200      	movs	r2, #0
  402e62:	4620      	mov	r0, r4
  402e64:	4629      	mov	r1, r5
  402e66:	2300      	movs	r3, #0
  402e68:	f002 fc0c 	bl	405684 <__aeabi_dcmpeq>
  402e6c:	4680      	mov	r8, r0
  402e6e:	b158      	cbz	r0, 402e88 <_dtoa_r+0xb6>
  402e70:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402e72:	2301      	movs	r3, #1
  402e74:	603b      	str	r3, [r7, #0]
  402e76:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  402e78:	2f00      	cmp	r7, #0
  402e7a:	f000 854f 	beq.w	40391c <_dtoa_r+0xb4a>
  402e7e:	4883      	ldr	r0, [pc, #524]	; (40308c <_dtoa_r+0x2ba>)
  402e80:	6038      	str	r0, [r7, #0]
  402e82:	3801      	subs	r0, #1
  402e84:	f000 bd4d 	b.w	403922 <_dtoa_r+0xb50>
  402e88:	ab19      	add	r3, sp, #100	; 0x64
  402e8a:	9300      	str	r3, [sp, #0]
  402e8c:	ab18      	add	r3, sp, #96	; 0x60
  402e8e:	9301      	str	r3, [sp, #4]
  402e90:	4650      	mov	r0, sl
  402e92:	4622      	mov	r2, r4
  402e94:	462b      	mov	r3, r5
  402e96:	f001 fc04 	bl	4046a2 <__d2b>
  402e9a:	f3c7 560a 	ubfx	r6, r7, #20, #11
  402e9e:	4683      	mov	fp, r0
  402ea0:	b15e      	cbz	r6, 402eba <_dtoa_r+0xe8>
  402ea2:	f3c5 0313 	ubfx	r3, r5, #0, #20
  402ea6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  402eaa:	4620      	mov	r0, r4
  402eac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  402eb0:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  402eb4:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  402eb8:	e01c      	b.n	402ef4 <_dtoa_r+0x122>
  402eba:	9b19      	ldr	r3, [sp, #100]	; 0x64
  402ebc:	9e18      	ldr	r6, [sp, #96]	; 0x60
  402ebe:	441e      	add	r6, r3
  402ec0:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  402ec4:	429e      	cmp	r6, r3
  402ec6:	db09      	blt.n	402edc <_dtoa_r+0x10a>
  402ec8:	9904      	ldr	r1, [sp, #16]
  402eca:	331f      	adds	r3, #31
  402ecc:	f206 4012 	addw	r0, r6, #1042	; 0x412
  402ed0:	1b9b      	subs	r3, r3, r6
  402ed2:	fa21 f000 	lsr.w	r0, r1, r0
  402ed6:	409f      	lsls	r7, r3
  402ed8:	4338      	orrs	r0, r7
  402eda:	e004      	b.n	402ee6 <_dtoa_r+0x114>
  402edc:	486c      	ldr	r0, [pc, #432]	; (403090 <_dtoa_r+0x2be>)
  402ede:	9a04      	ldr	r2, [sp, #16]
  402ee0:	1b80      	subs	r0, r0, r6
  402ee2:	fa02 f000 	lsl.w	r0, r2, r0
  402ee6:	f7fe fc09 	bl	4016fc <__aeabi_ui2d>
  402eea:	2701      	movs	r7, #1
  402eec:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  402ef0:	3e01      	subs	r6, #1
  402ef2:	9715      	str	r7, [sp, #84]	; 0x54
  402ef4:	2200      	movs	r2, #0
  402ef6:	4b67      	ldr	r3, [pc, #412]	; (403094 <_dtoa_r+0x2c2>)
  402ef8:	f7fe fac2 	bl	401480 <__aeabi_dsub>
  402efc:	a35a      	add	r3, pc, #360	; (adr r3, 403068 <_dtoa_r+0x296>)
  402efe:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f02:	f7fe fc71 	bl	4017e8 <__aeabi_dmul>
  402f06:	a35a      	add	r3, pc, #360	; (adr r3, 403070 <_dtoa_r+0x29e>)
  402f08:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f0c:	f7fe faba 	bl	401484 <__adddf3>
  402f10:	4604      	mov	r4, r0
  402f12:	4630      	mov	r0, r6
  402f14:	460d      	mov	r5, r1
  402f16:	f7fe fc01 	bl	40171c <__aeabi_i2d>
  402f1a:	a357      	add	r3, pc, #348	; (adr r3, 403078 <_dtoa_r+0x2a6>)
  402f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f20:	f7fe fc62 	bl	4017e8 <__aeabi_dmul>
  402f24:	4602      	mov	r2, r0
  402f26:	460b      	mov	r3, r1
  402f28:	4620      	mov	r0, r4
  402f2a:	4629      	mov	r1, r5
  402f2c:	f7fe faaa 	bl	401484 <__adddf3>
  402f30:	4604      	mov	r4, r0
  402f32:	460d      	mov	r5, r1
  402f34:	f002 fbd8 	bl	4056e8 <__aeabi_d2iz>
  402f38:	4629      	mov	r1, r5
  402f3a:	4681      	mov	r9, r0
  402f3c:	2200      	movs	r2, #0
  402f3e:	4620      	mov	r0, r4
  402f40:	2300      	movs	r3, #0
  402f42:	f002 fba9 	bl	405698 <__aeabi_dcmplt>
  402f46:	b158      	cbz	r0, 402f60 <_dtoa_r+0x18e>
  402f48:	4648      	mov	r0, r9
  402f4a:	f7fe fbe7 	bl	40171c <__aeabi_i2d>
  402f4e:	4602      	mov	r2, r0
  402f50:	460b      	mov	r3, r1
  402f52:	4620      	mov	r0, r4
  402f54:	4629      	mov	r1, r5
  402f56:	f002 fb95 	bl	405684 <__aeabi_dcmpeq>
  402f5a:	b908      	cbnz	r0, 402f60 <_dtoa_r+0x18e>
  402f5c:	f109 39ff 	add.w	r9, r9, #4294967295
  402f60:	f1b9 0f16 	cmp.w	r9, #22
  402f64:	d80d      	bhi.n	402f82 <_dtoa_r+0x1b0>
  402f66:	4b4c      	ldr	r3, [pc, #304]	; (403098 <_dtoa_r+0x2c6>)
  402f68:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  402f6c:	e9d3 0100 	ldrd	r0, r1, [r3]
  402f70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402f74:	f002 fbae 	bl	4056d4 <__aeabi_dcmpgt>
  402f78:	b130      	cbz	r0, 402f88 <_dtoa_r+0x1b6>
  402f7a:	f109 39ff 	add.w	r9, r9, #4294967295
  402f7e:	2700      	movs	r7, #0
  402f80:	e000      	b.n	402f84 <_dtoa_r+0x1b2>
  402f82:	2701      	movs	r7, #1
  402f84:	9714      	str	r7, [sp, #80]	; 0x50
  402f86:	e000      	b.n	402f8a <_dtoa_r+0x1b8>
  402f88:	9014      	str	r0, [sp, #80]	; 0x50
  402f8a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402f8c:	1b9e      	subs	r6, r3, r6
  402f8e:	3e01      	subs	r6, #1
  402f90:	960a      	str	r6, [sp, #40]	; 0x28
  402f92:	d504      	bpl.n	402f9e <_dtoa_r+0x1cc>
  402f94:	4277      	negs	r7, r6
  402f96:	9708      	str	r7, [sp, #32]
  402f98:	2700      	movs	r7, #0
  402f9a:	970a      	str	r7, [sp, #40]	; 0x28
  402f9c:	e001      	b.n	402fa2 <_dtoa_r+0x1d0>
  402f9e:	2700      	movs	r7, #0
  402fa0:	9708      	str	r7, [sp, #32]
  402fa2:	f1b9 0f00 	cmp.w	r9, #0
  402fa6:	db07      	blt.n	402fb8 <_dtoa_r+0x1e6>
  402fa8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  402faa:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  402fae:	444f      	add	r7, r9
  402fb0:	970a      	str	r7, [sp, #40]	; 0x28
  402fb2:	2700      	movs	r7, #0
  402fb4:	970e      	str	r7, [sp, #56]	; 0x38
  402fb6:	e008      	b.n	402fca <_dtoa_r+0x1f8>
  402fb8:	9f08      	ldr	r7, [sp, #32]
  402fba:	ebc9 0707 	rsb	r7, r9, r7
  402fbe:	9708      	str	r7, [sp, #32]
  402fc0:	f1c9 0700 	rsb	r7, r9, #0
  402fc4:	970e      	str	r7, [sp, #56]	; 0x38
  402fc6:	2700      	movs	r7, #0
  402fc8:	9711      	str	r7, [sp, #68]	; 0x44
  402fca:	9f24      	ldr	r7, [sp, #144]	; 0x90
  402fcc:	2f09      	cmp	r7, #9
  402fce:	d828      	bhi.n	403022 <_dtoa_r+0x250>
  402fd0:	2f05      	cmp	r7, #5
  402fd2:	bfc4      	itt	gt
  402fd4:	3f04      	subgt	r7, #4
  402fd6:	9724      	strgt	r7, [sp, #144]	; 0x90
  402fd8:	9f24      	ldr	r7, [sp, #144]	; 0x90
  402fda:	f1a7 0302 	sub.w	r3, r7, #2
  402fde:	bfcc      	ite	gt
  402fe0:	2400      	movgt	r4, #0
  402fe2:	2401      	movle	r4, #1
  402fe4:	2b03      	cmp	r3, #3
  402fe6:	d821      	bhi.n	40302c <_dtoa_r+0x25a>
  402fe8:	e8df f003 	tbb	[pc, r3]
  402fec:	04020f06 	.word	0x04020f06
  402ff0:	2701      	movs	r7, #1
  402ff2:	e002      	b.n	402ffa <_dtoa_r+0x228>
  402ff4:	2701      	movs	r7, #1
  402ff6:	e009      	b.n	40300c <_dtoa_r+0x23a>
  402ff8:	2700      	movs	r7, #0
  402ffa:	970f      	str	r7, [sp, #60]	; 0x3c
  402ffc:	9f25      	ldr	r7, [sp, #148]	; 0x94
  402ffe:	2f00      	cmp	r7, #0
  403000:	dd1e      	ble.n	403040 <_dtoa_r+0x26e>
  403002:	970b      	str	r7, [sp, #44]	; 0x2c
  403004:	9707      	str	r7, [sp, #28]
  403006:	463b      	mov	r3, r7
  403008:	e01f      	b.n	40304a <_dtoa_r+0x278>
  40300a:	2700      	movs	r7, #0
  40300c:	970f      	str	r7, [sp, #60]	; 0x3c
  40300e:	9f25      	ldr	r7, [sp, #148]	; 0x94
  403010:	444f      	add	r7, r9
  403012:	970b      	str	r7, [sp, #44]	; 0x2c
  403014:	3701      	adds	r7, #1
  403016:	463b      	mov	r3, r7
  403018:	9707      	str	r7, [sp, #28]
  40301a:	2b01      	cmp	r3, #1
  40301c:	bfb8      	it	lt
  40301e:	2301      	movlt	r3, #1
  403020:	e013      	b.n	40304a <_dtoa_r+0x278>
  403022:	2401      	movs	r4, #1
  403024:	2700      	movs	r7, #0
  403026:	9724      	str	r7, [sp, #144]	; 0x90
  403028:	940f      	str	r4, [sp, #60]	; 0x3c
  40302a:	e001      	b.n	403030 <_dtoa_r+0x25e>
  40302c:	2701      	movs	r7, #1
  40302e:	970f      	str	r7, [sp, #60]	; 0x3c
  403030:	f04f 37ff 	mov.w	r7, #4294967295
  403034:	970b      	str	r7, [sp, #44]	; 0x2c
  403036:	9707      	str	r7, [sp, #28]
  403038:	2700      	movs	r7, #0
  40303a:	2312      	movs	r3, #18
  40303c:	9725      	str	r7, [sp, #148]	; 0x94
  40303e:	e004      	b.n	40304a <_dtoa_r+0x278>
  403040:	2701      	movs	r7, #1
  403042:	970b      	str	r7, [sp, #44]	; 0x2c
  403044:	9707      	str	r7, [sp, #28]
  403046:	463b      	mov	r3, r7
  403048:	9725      	str	r7, [sp, #148]	; 0x94
  40304a:	2200      	movs	r2, #0
  40304c:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
  403050:	2204      	movs	r2, #4
  403052:	f102 0114 	add.w	r1, r2, #20
  403056:	4299      	cmp	r1, r3
  403058:	d820      	bhi.n	40309c <_dtoa_r+0x2ca>
  40305a:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
  40305e:	3101      	adds	r1, #1
  403060:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
  403064:	0052      	lsls	r2, r2, #1
  403066:	e7f4      	b.n	403052 <_dtoa_r+0x280>
  403068:	636f4361 	.word	0x636f4361
  40306c:	3fd287a7 	.word	0x3fd287a7
  403070:	8b60c8b3 	.word	0x8b60c8b3
  403074:	3fc68a28 	.word	0x3fc68a28
  403078:	509f79fb 	.word	0x509f79fb
  40307c:	3fd34413 	.word	0x3fd34413
  403080:	7ff00000 	.word	0x7ff00000
  403084:	00405e7b 	.word	0x00405e7b
  403088:	00405e72 	.word	0x00405e72
  40308c:	00405e71 	.word	0x00405e71
  403090:	fffffbee 	.word	0xfffffbee
  403094:	3ff80000 	.word	0x3ff80000
  403098:	00405e98 	.word	0x00405e98
  40309c:	4650      	mov	r0, sl
  40309e:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
  4030a2:	f000 ffe3 	bl	40406c <_Balloc>
  4030a6:	9f07      	ldr	r7, [sp, #28]
  4030a8:	9009      	str	r0, [sp, #36]	; 0x24
  4030aa:	2f0e      	cmp	r7, #14
  4030ac:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
  4030b0:	f200 816a 	bhi.w	403388 <_dtoa_r+0x5b6>
  4030b4:	2c00      	cmp	r4, #0
  4030b6:	f000 8167 	beq.w	403388 <_dtoa_r+0x5b6>
  4030ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4030be:	f1b9 0f00 	cmp.w	r9, #0
  4030c2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4030c6:	dd31      	ble.n	40312c <_dtoa_r+0x35a>
  4030c8:	4a80      	ldr	r2, [pc, #512]	; (4032cc <_dtoa_r+0x4fa>)
  4030ca:	f009 030f 	and.w	r3, r9, #15
  4030ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4030d2:	e9d3 0100 	ldrd	r0, r1, [r3]
  4030d6:	ea4f 1429 	mov.w	r4, r9, asr #4
  4030da:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4030de:	06e0      	lsls	r0, r4, #27
  4030e0:	d50c      	bpl.n	4030fc <_dtoa_r+0x32a>
  4030e2:	4b7b      	ldr	r3, [pc, #492]	; (4032d0 <_dtoa_r+0x4fe>)
  4030e4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4030e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4030ec:	f7fe fca6 	bl	401a3c <__aeabi_ddiv>
  4030f0:	f004 040f 	and.w	r4, r4, #15
  4030f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4030f8:	2703      	movs	r7, #3
  4030fa:	e000      	b.n	4030fe <_dtoa_r+0x32c>
  4030fc:	2702      	movs	r7, #2
  4030fe:	4d74      	ldr	r5, [pc, #464]	; (4032d0 <_dtoa_r+0x4fe>)
  403100:	b16c      	cbz	r4, 40311e <_dtoa_r+0x34c>
  403102:	07e1      	lsls	r1, r4, #31
  403104:	d508      	bpl.n	403118 <_dtoa_r+0x346>
  403106:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  40310a:	e9d5 2300 	ldrd	r2, r3, [r5]
  40310e:	f7fe fb6b 	bl	4017e8 <__aeabi_dmul>
  403112:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  403116:	3701      	adds	r7, #1
  403118:	1064      	asrs	r4, r4, #1
  40311a:	3508      	adds	r5, #8
  40311c:	e7f0      	b.n	403100 <_dtoa_r+0x32e>
  40311e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403122:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  403126:	f7fe fc89 	bl	401a3c <__aeabi_ddiv>
  40312a:	e01b      	b.n	403164 <_dtoa_r+0x392>
  40312c:	f1c9 0400 	rsb	r4, r9, #0
  403130:	b1dc      	cbz	r4, 40316a <_dtoa_r+0x398>
  403132:	4b66      	ldr	r3, [pc, #408]	; (4032cc <_dtoa_r+0x4fa>)
  403134:	4d66      	ldr	r5, [pc, #408]	; (4032d0 <_dtoa_r+0x4fe>)
  403136:	f004 020f 	and.w	r2, r4, #15
  40313a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40313e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  403142:	e9d3 2300 	ldrd	r2, r3, [r3]
  403146:	f7fe fb4f 	bl	4017e8 <__aeabi_dmul>
  40314a:	1124      	asrs	r4, r4, #4
  40314c:	2702      	movs	r7, #2
  40314e:	b14c      	cbz	r4, 403164 <_dtoa_r+0x392>
  403150:	07e2      	lsls	r2, r4, #31
  403152:	d504      	bpl.n	40315e <_dtoa_r+0x38c>
  403154:	e9d5 2300 	ldrd	r2, r3, [r5]
  403158:	3701      	adds	r7, #1
  40315a:	f7fe fb45 	bl	4017e8 <__aeabi_dmul>
  40315e:	1064      	asrs	r4, r4, #1
  403160:	3508      	adds	r5, #8
  403162:	e7f4      	b.n	40314e <_dtoa_r+0x37c>
  403164:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403168:	e000      	b.n	40316c <_dtoa_r+0x39a>
  40316a:	2702      	movs	r7, #2
  40316c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40316e:	b1e9      	cbz	r1, 4031ac <_dtoa_r+0x3da>
  403170:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  403174:	2200      	movs	r2, #0
  403176:	4620      	mov	r0, r4
  403178:	4629      	mov	r1, r5
  40317a:	4b56      	ldr	r3, [pc, #344]	; (4032d4 <_dtoa_r+0x502>)
  40317c:	f002 fa8c 	bl	405698 <__aeabi_dcmplt>
  403180:	b1c8      	cbz	r0, 4031b6 <_dtoa_r+0x3e4>
  403182:	9a07      	ldr	r2, [sp, #28]
  403184:	b1e2      	cbz	r2, 4031c0 <_dtoa_r+0x3ee>
  403186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403188:	2b00      	cmp	r3, #0
  40318a:	f340 80f9 	ble.w	403380 <_dtoa_r+0x5ae>
  40318e:	f109 30ff 	add.w	r0, r9, #4294967295
  403192:	9010      	str	r0, [sp, #64]	; 0x40
  403194:	4629      	mov	r1, r5
  403196:	4620      	mov	r0, r4
  403198:	2200      	movs	r2, #0
  40319a:	4b4f      	ldr	r3, [pc, #316]	; (4032d8 <_dtoa_r+0x506>)
  40319c:	f7fe fb24 	bl	4017e8 <__aeabi_dmul>
  4031a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4031a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4031a6:	910c      	str	r1, [sp, #48]	; 0x30
  4031a8:	3701      	adds	r7, #1
  4031aa:	e00d      	b.n	4031c8 <_dtoa_r+0x3f6>
  4031ac:	9a07      	ldr	r2, [sp, #28]
  4031ae:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  4031b2:	920c      	str	r2, [sp, #48]	; 0x30
  4031b4:	e008      	b.n	4031c8 <_dtoa_r+0x3f6>
  4031b6:	9b07      	ldr	r3, [sp, #28]
  4031b8:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  4031bc:	930c      	str	r3, [sp, #48]	; 0x30
  4031be:	e003      	b.n	4031c8 <_dtoa_r+0x3f6>
  4031c0:	9807      	ldr	r0, [sp, #28]
  4031c2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  4031c6:	900c      	str	r0, [sp, #48]	; 0x30
  4031c8:	4638      	mov	r0, r7
  4031ca:	f7fe faa7 	bl	40171c <__aeabi_i2d>
  4031ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4031d2:	f7fe fb09 	bl	4017e8 <__aeabi_dmul>
  4031d6:	2200      	movs	r2, #0
  4031d8:	4b40      	ldr	r3, [pc, #256]	; (4032dc <_dtoa_r+0x50a>)
  4031da:	f7fe f953 	bl	401484 <__adddf3>
  4031de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4031e0:	4604      	mov	r4, r0
  4031e2:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  4031e6:	b9cf      	cbnz	r7, 40321c <_dtoa_r+0x44a>
  4031e8:	2200      	movs	r2, #0
  4031ea:	4b3d      	ldr	r3, [pc, #244]	; (4032e0 <_dtoa_r+0x50e>)
  4031ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4031f0:	f7fe f946 	bl	401480 <__aeabi_dsub>
  4031f4:	4622      	mov	r2, r4
  4031f6:	462b      	mov	r3, r5
  4031f8:	4606      	mov	r6, r0
  4031fa:	460f      	mov	r7, r1
  4031fc:	f002 fa6a 	bl	4056d4 <__aeabi_dcmpgt>
  403200:	2800      	cmp	r0, #0
  403202:	f040 8252 	bne.w	4036aa <_dtoa_r+0x8d8>
  403206:	4622      	mov	r2, r4
  403208:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  40320c:	4630      	mov	r0, r6
  40320e:	4639      	mov	r1, r7
  403210:	f002 fa42 	bl	405698 <__aeabi_dcmplt>
  403214:	2800      	cmp	r0, #0
  403216:	f040 823e 	bne.w	403696 <_dtoa_r+0x8c4>
  40321a:	e0b1      	b.n	403380 <_dtoa_r+0x5ae>
  40321c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40321e:	4b2b      	ldr	r3, [pc, #172]	; (4032cc <_dtoa_r+0x4fa>)
  403220:	1e7a      	subs	r2, r7, #1
  403222:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  403224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403228:	2f00      	cmp	r7, #0
  40322a:	d05d      	beq.n	4032e8 <_dtoa_r+0x516>
  40322c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403230:	2000      	movs	r0, #0
  403232:	492c      	ldr	r1, [pc, #176]	; (4032e4 <_dtoa_r+0x512>)
  403234:	f7fe fc02 	bl	401a3c <__aeabi_ddiv>
  403238:	4622      	mov	r2, r4
  40323a:	462b      	mov	r3, r5
  40323c:	f7fe f920 	bl	401480 <__aeabi_dsub>
  403240:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  403244:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  403248:	4604      	mov	r4, r0
  40324a:	460d      	mov	r5, r1
  40324c:	4639      	mov	r1, r7
  40324e:	4630      	mov	r0, r6
  403250:	f002 fa4a 	bl	4056e8 <__aeabi_d2iz>
  403254:	9002      	str	r0, [sp, #8]
  403256:	f7fe fa61 	bl	40171c <__aeabi_i2d>
  40325a:	4602      	mov	r2, r0
  40325c:	460b      	mov	r3, r1
  40325e:	4630      	mov	r0, r6
  403260:	4639      	mov	r1, r7
  403262:	f7fe f90d 	bl	401480 <__aeabi_dsub>
  403266:	f8dd c008 	ldr.w	ip, [sp, #8]
  40326a:	f10c 0330 	add.w	r3, ip, #48	; 0x30
  40326e:	f808 3b01 	strb.w	r3, [r8], #1
  403272:	4622      	mov	r2, r4
  403274:	462b      	mov	r3, r5
  403276:	4606      	mov	r6, r0
  403278:	460f      	mov	r7, r1
  40327a:	f002 fa0d 	bl	405698 <__aeabi_dcmplt>
  40327e:	2800      	cmp	r0, #0
  403280:	f040 833a 	bne.w	4038f8 <_dtoa_r+0xb26>
  403284:	4632      	mov	r2, r6
  403286:	463b      	mov	r3, r7
  403288:	2000      	movs	r0, #0
  40328a:	4912      	ldr	r1, [pc, #72]	; (4032d4 <_dtoa_r+0x502>)
  40328c:	f7fe f8f8 	bl	401480 <__aeabi_dsub>
  403290:	4622      	mov	r2, r4
  403292:	462b      	mov	r3, r5
  403294:	f002 fa00 	bl	405698 <__aeabi_dcmplt>
  403298:	2800      	cmp	r0, #0
  40329a:	f040 80d4 	bne.w	403446 <_dtoa_r+0x674>
  40329e:	9809      	ldr	r0, [sp, #36]	; 0x24
  4032a0:	990c      	ldr	r1, [sp, #48]	; 0x30
  4032a2:	ebc0 0308 	rsb	r3, r0, r8
  4032a6:	428b      	cmp	r3, r1
  4032a8:	da6a      	bge.n	403380 <_dtoa_r+0x5ae>
  4032aa:	4620      	mov	r0, r4
  4032ac:	4629      	mov	r1, r5
  4032ae:	2200      	movs	r2, #0
  4032b0:	4b09      	ldr	r3, [pc, #36]	; (4032d8 <_dtoa_r+0x506>)
  4032b2:	f7fe fa99 	bl	4017e8 <__aeabi_dmul>
  4032b6:	2200      	movs	r2, #0
  4032b8:	4604      	mov	r4, r0
  4032ba:	460d      	mov	r5, r1
  4032bc:	4630      	mov	r0, r6
  4032be:	4639      	mov	r1, r7
  4032c0:	4b05      	ldr	r3, [pc, #20]	; (4032d8 <_dtoa_r+0x506>)
  4032c2:	f7fe fa91 	bl	4017e8 <__aeabi_dmul>
  4032c6:	4606      	mov	r6, r0
  4032c8:	460f      	mov	r7, r1
  4032ca:	e7bf      	b.n	40324c <_dtoa_r+0x47a>
  4032cc:	00405e98 	.word	0x00405e98
  4032d0:	00405f88 	.word	0x00405f88
  4032d4:	3ff00000 	.word	0x3ff00000
  4032d8:	40240000 	.word	0x40240000
  4032dc:	401c0000 	.word	0x401c0000
  4032e0:	40140000 	.word	0x40140000
  4032e4:	3fe00000 	.word	0x3fe00000
  4032e8:	4622      	mov	r2, r4
  4032ea:	e9d3 0100 	ldrd	r0, r1, [r3]
  4032ee:	462b      	mov	r3, r5
  4032f0:	f7fe fa7a 	bl	4017e8 <__aeabi_dmul>
  4032f4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  4032f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4032fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4032fc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  403300:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  403304:	4490      	add	r8, r2
  403306:	4639      	mov	r1, r7
  403308:	4630      	mov	r0, r6
  40330a:	f002 f9ed 	bl	4056e8 <__aeabi_d2iz>
  40330e:	4605      	mov	r5, r0
  403310:	f7fe fa04 	bl	40171c <__aeabi_i2d>
  403314:	3530      	adds	r5, #48	; 0x30
  403316:	4602      	mov	r2, r0
  403318:	460b      	mov	r3, r1
  40331a:	4630      	mov	r0, r6
  40331c:	4639      	mov	r1, r7
  40331e:	f7fe f8af 	bl	401480 <__aeabi_dsub>
  403322:	f804 5b01 	strb.w	r5, [r4], #1
  403326:	4544      	cmp	r4, r8
  403328:	4606      	mov	r6, r0
  40332a:	460f      	mov	r7, r1
  40332c:	d121      	bne.n	403372 <_dtoa_r+0x5a0>
  40332e:	2200      	movs	r2, #0
  403330:	4b87      	ldr	r3, [pc, #540]	; (403550 <_dtoa_r+0x77e>)
  403332:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  403336:	f7fe f8a5 	bl	401484 <__adddf3>
  40333a:	4602      	mov	r2, r0
  40333c:	460b      	mov	r3, r1
  40333e:	4630      	mov	r0, r6
  403340:	4639      	mov	r1, r7
  403342:	f002 f9c7 	bl	4056d4 <__aeabi_dcmpgt>
  403346:	2800      	cmp	r0, #0
  403348:	d17d      	bne.n	403446 <_dtoa_r+0x674>
  40334a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40334e:	2000      	movs	r0, #0
  403350:	497f      	ldr	r1, [pc, #508]	; (403550 <_dtoa_r+0x77e>)
  403352:	f7fe f895 	bl	401480 <__aeabi_dsub>
  403356:	4602      	mov	r2, r0
  403358:	460b      	mov	r3, r1
  40335a:	4630      	mov	r0, r6
  40335c:	4639      	mov	r1, r7
  40335e:	f002 f99b 	bl	405698 <__aeabi_dcmplt>
  403362:	b168      	cbz	r0, 403380 <_dtoa_r+0x5ae>
  403364:	46a0      	mov	r8, r4
  403366:	3c01      	subs	r4, #1
  403368:	f818 3c01 	ldrb.w	r3, [r8, #-1]
  40336c:	2b30      	cmp	r3, #48	; 0x30
  40336e:	d0f9      	beq.n	403364 <_dtoa_r+0x592>
  403370:	e2c2      	b.n	4038f8 <_dtoa_r+0xb26>
  403372:	2200      	movs	r2, #0
  403374:	4b77      	ldr	r3, [pc, #476]	; (403554 <_dtoa_r+0x782>)
  403376:	f7fe fa37 	bl	4017e8 <__aeabi_dmul>
  40337a:	4606      	mov	r6, r0
  40337c:	460f      	mov	r7, r1
  40337e:	e7c2      	b.n	403306 <_dtoa_r+0x534>
  403380:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  403384:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403388:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40338a:	2b00      	cmp	r3, #0
  40338c:	db7c      	blt.n	403488 <_dtoa_r+0x6b6>
  40338e:	f1b9 0f0e 	cmp.w	r9, #14
  403392:	dc79      	bgt.n	403488 <_dtoa_r+0x6b6>
  403394:	4b70      	ldr	r3, [pc, #448]	; (403558 <_dtoa_r+0x786>)
  403396:	9f25      	ldr	r7, [sp, #148]	; 0x94
  403398:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  40339c:	2f00      	cmp	r7, #0
  40339e:	e9d3 4500 	ldrd	r4, r5, [r3]
  4033a2:	da14      	bge.n	4033ce <_dtoa_r+0x5fc>
  4033a4:	9f07      	ldr	r7, [sp, #28]
  4033a6:	2f00      	cmp	r7, #0
  4033a8:	dc11      	bgt.n	4033ce <_dtoa_r+0x5fc>
  4033aa:	f040 8176 	bne.w	40369a <_dtoa_r+0x8c8>
  4033ae:	4620      	mov	r0, r4
  4033b0:	4629      	mov	r1, r5
  4033b2:	2200      	movs	r2, #0
  4033b4:	4b69      	ldr	r3, [pc, #420]	; (40355c <_dtoa_r+0x78a>)
  4033b6:	f7fe fa17 	bl	4017e8 <__aeabi_dmul>
  4033ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4033be:	f002 f97f 	bl	4056c0 <__aeabi_dcmpge>
  4033c2:	9d07      	ldr	r5, [sp, #28]
  4033c4:	462c      	mov	r4, r5
  4033c6:	2800      	cmp	r0, #0
  4033c8:	f040 8169 	bne.w	40369e <_dtoa_r+0x8cc>
  4033cc:	e171      	b.n	4036b2 <_dtoa_r+0x8e0>
  4033ce:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  4033d2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  4033d6:	4622      	mov	r2, r4
  4033d8:	462b      	mov	r3, r5
  4033da:	4630      	mov	r0, r6
  4033dc:	4639      	mov	r1, r7
  4033de:	f7fe fb2d 	bl	401a3c <__aeabi_ddiv>
  4033e2:	f002 f981 	bl	4056e8 <__aeabi_d2iz>
  4033e6:	9004      	str	r0, [sp, #16]
  4033e8:	f7fe f998 	bl	40171c <__aeabi_i2d>
  4033ec:	4622      	mov	r2, r4
  4033ee:	462b      	mov	r3, r5
  4033f0:	f7fe f9fa 	bl	4017e8 <__aeabi_dmul>
  4033f4:	4602      	mov	r2, r0
  4033f6:	460b      	mov	r3, r1
  4033f8:	4630      	mov	r0, r6
  4033fa:	4639      	mov	r1, r7
  4033fc:	f7fe f840 	bl	401480 <__aeabi_dsub>
  403400:	9f04      	ldr	r7, [sp, #16]
  403402:	f107 0630 	add.w	r6, r7, #48	; 0x30
  403406:	f808 6b01 	strb.w	r6, [r8], #1
  40340a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40340c:	ebc7 0608 	rsb	r6, r7, r8
  403410:	9f07      	ldr	r7, [sp, #28]
  403412:	42be      	cmp	r6, r7
  403414:	4602      	mov	r2, r0
  403416:	460b      	mov	r3, r1
  403418:	d129      	bne.n	40346e <_dtoa_r+0x69c>
  40341a:	f7fe f833 	bl	401484 <__adddf3>
  40341e:	4622      	mov	r2, r4
  403420:	462b      	mov	r3, r5
  403422:	4606      	mov	r6, r0
  403424:	460f      	mov	r7, r1
  403426:	f002 f955 	bl	4056d4 <__aeabi_dcmpgt>
  40342a:	b970      	cbnz	r0, 40344a <_dtoa_r+0x678>
  40342c:	4630      	mov	r0, r6
  40342e:	4639      	mov	r1, r7
  403430:	4622      	mov	r2, r4
  403432:	462b      	mov	r3, r5
  403434:	f002 f926 	bl	405684 <__aeabi_dcmpeq>
  403438:	2800      	cmp	r0, #0
  40343a:	f000 825f 	beq.w	4038fc <_dtoa_r+0xb2a>
  40343e:	9f04      	ldr	r7, [sp, #16]
  403440:	07fb      	lsls	r3, r7, #31
  403442:	d402      	bmi.n	40344a <_dtoa_r+0x678>
  403444:	e25a      	b.n	4038fc <_dtoa_r+0xb2a>
  403446:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  40344a:	4643      	mov	r3, r8
  40344c:	4698      	mov	r8, r3
  40344e:	3b01      	subs	r3, #1
  403450:	f818 2c01 	ldrb.w	r2, [r8, #-1]
  403454:	2a39      	cmp	r2, #57	; 0x39
  403456:	d106      	bne.n	403466 <_dtoa_r+0x694>
  403458:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40345a:	429f      	cmp	r7, r3
  40345c:	d1f6      	bne.n	40344c <_dtoa_r+0x67a>
  40345e:	2230      	movs	r2, #48	; 0x30
  403460:	f109 0901 	add.w	r9, r9, #1
  403464:	703a      	strb	r2, [r7, #0]
  403466:	781a      	ldrb	r2, [r3, #0]
  403468:	3201      	adds	r2, #1
  40346a:	701a      	strb	r2, [r3, #0]
  40346c:	e246      	b.n	4038fc <_dtoa_r+0xb2a>
  40346e:	2200      	movs	r2, #0
  403470:	4b38      	ldr	r3, [pc, #224]	; (403554 <_dtoa_r+0x782>)
  403472:	f7fe f9b9 	bl	4017e8 <__aeabi_dmul>
  403476:	2200      	movs	r2, #0
  403478:	2300      	movs	r3, #0
  40347a:	4606      	mov	r6, r0
  40347c:	460f      	mov	r7, r1
  40347e:	f002 f901 	bl	405684 <__aeabi_dcmpeq>
  403482:	2800      	cmp	r0, #0
  403484:	d0a7      	beq.n	4033d6 <_dtoa_r+0x604>
  403486:	e239      	b.n	4038fc <_dtoa_r+0xb2a>
  403488:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40348a:	2f00      	cmp	r7, #0
  40348c:	d030      	beq.n	4034f0 <_dtoa_r+0x71e>
  40348e:	9f24      	ldr	r7, [sp, #144]	; 0x90
  403490:	2f01      	cmp	r7, #1
  403492:	dc0a      	bgt.n	4034aa <_dtoa_r+0x6d8>
  403494:	9f15      	ldr	r7, [sp, #84]	; 0x54
  403496:	b117      	cbz	r7, 40349e <_dtoa_r+0x6cc>
  403498:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40349c:	e002      	b.n	4034a4 <_dtoa_r+0x6d2>
  40349e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4034a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4034a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4034a6:	9e08      	ldr	r6, [sp, #32]
  4034a8:	e016      	b.n	4034d8 <_dtoa_r+0x706>
  4034aa:	9f07      	ldr	r7, [sp, #28]
  4034ac:	1e7d      	subs	r5, r7, #1
  4034ae:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4034b0:	42af      	cmp	r7, r5
  4034b2:	db01      	blt.n	4034b8 <_dtoa_r+0x6e6>
  4034b4:	1b7d      	subs	r5, r7, r5
  4034b6:	e006      	b.n	4034c6 <_dtoa_r+0x6f4>
  4034b8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4034ba:	950e      	str	r5, [sp, #56]	; 0x38
  4034bc:	1beb      	subs	r3, r5, r7
  4034be:	9f11      	ldr	r7, [sp, #68]	; 0x44
  4034c0:	441f      	add	r7, r3
  4034c2:	9711      	str	r7, [sp, #68]	; 0x44
  4034c4:	2500      	movs	r5, #0
  4034c6:	9f07      	ldr	r7, [sp, #28]
  4034c8:	2f00      	cmp	r7, #0
  4034ca:	da03      	bge.n	4034d4 <_dtoa_r+0x702>
  4034cc:	9808      	ldr	r0, [sp, #32]
  4034ce:	2300      	movs	r3, #0
  4034d0:	1bc6      	subs	r6, r0, r7
  4034d2:	e001      	b.n	4034d8 <_dtoa_r+0x706>
  4034d4:	9e08      	ldr	r6, [sp, #32]
  4034d6:	9b07      	ldr	r3, [sp, #28]
  4034d8:	9f08      	ldr	r7, [sp, #32]
  4034da:	441f      	add	r7, r3
  4034dc:	9708      	str	r7, [sp, #32]
  4034de:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4034e0:	4650      	mov	r0, sl
  4034e2:	441f      	add	r7, r3
  4034e4:	2101      	movs	r1, #1
  4034e6:	970a      	str	r7, [sp, #40]	; 0x28
  4034e8:	f000 feb8 	bl	40425c <__i2b>
  4034ec:	4604      	mov	r4, r0
  4034ee:	e002      	b.n	4034f6 <_dtoa_r+0x724>
  4034f0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4034f2:	9e08      	ldr	r6, [sp, #32]
  4034f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4034f6:	b16e      	cbz	r6, 403514 <_dtoa_r+0x742>
  4034f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4034fa:	2f00      	cmp	r7, #0
  4034fc:	dd0a      	ble.n	403514 <_dtoa_r+0x742>
  4034fe:	463b      	mov	r3, r7
  403500:	9f08      	ldr	r7, [sp, #32]
  403502:	42b3      	cmp	r3, r6
  403504:	bfa8      	it	ge
  403506:	4633      	movge	r3, r6
  403508:	1aff      	subs	r7, r7, r3
  40350a:	9708      	str	r7, [sp, #32]
  40350c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40350e:	1aff      	subs	r7, r7, r3
  403510:	1af6      	subs	r6, r6, r3
  403512:	970a      	str	r7, [sp, #40]	; 0x28
  403514:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403516:	2f00      	cmp	r7, #0
  403518:	dd28      	ble.n	40356c <_dtoa_r+0x79a>
  40351a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40351c:	b307      	cbz	r7, 403560 <_dtoa_r+0x78e>
  40351e:	2d00      	cmp	r5, #0
  403520:	dd10      	ble.n	403544 <_dtoa_r+0x772>
  403522:	4621      	mov	r1, r4
  403524:	462a      	mov	r2, r5
  403526:	4650      	mov	r0, sl
  403528:	f000 ff39 	bl	40439e <__pow5mult>
  40352c:	4604      	mov	r4, r0
  40352e:	465a      	mov	r2, fp
  403530:	4621      	mov	r1, r4
  403532:	4650      	mov	r0, sl
  403534:	f000 fe9b 	bl	40426e <__multiply>
  403538:	4659      	mov	r1, fp
  40353a:	4607      	mov	r7, r0
  40353c:	4650      	mov	r0, sl
  40353e:	f000 fdbb 	bl	4040b8 <_Bfree>
  403542:	46bb      	mov	fp, r7
  403544:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403546:	1b7a      	subs	r2, r7, r5
  403548:	d010      	beq.n	40356c <_dtoa_r+0x79a>
  40354a:	4650      	mov	r0, sl
  40354c:	4659      	mov	r1, fp
  40354e:	e00a      	b.n	403566 <_dtoa_r+0x794>
  403550:	3fe00000 	.word	0x3fe00000
  403554:	40240000 	.word	0x40240000
  403558:	00405e98 	.word	0x00405e98
  40355c:	40140000 	.word	0x40140000
  403560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403562:	4650      	mov	r0, sl
  403564:	4659      	mov	r1, fp
  403566:	f000 ff1a 	bl	40439e <__pow5mult>
  40356a:	4683      	mov	fp, r0
  40356c:	4650      	mov	r0, sl
  40356e:	2101      	movs	r1, #1
  403570:	f000 fe74 	bl	40425c <__i2b>
  403574:	9f11      	ldr	r7, [sp, #68]	; 0x44
  403576:	2f00      	cmp	r7, #0
  403578:	4605      	mov	r5, r0
  40357a:	dd05      	ble.n	403588 <_dtoa_r+0x7b6>
  40357c:	4629      	mov	r1, r5
  40357e:	4650      	mov	r0, sl
  403580:	463a      	mov	r2, r7
  403582:	f000 ff0c 	bl	40439e <__pow5mult>
  403586:	4605      	mov	r5, r0
  403588:	9f24      	ldr	r7, [sp, #144]	; 0x90
  40358a:	2f01      	cmp	r7, #1
  40358c:	dc12      	bgt.n	4035b4 <_dtoa_r+0x7e2>
  40358e:	9804      	ldr	r0, [sp, #16]
  403590:	b980      	cbnz	r0, 4035b4 <_dtoa_r+0x7e2>
  403592:	9905      	ldr	r1, [sp, #20]
  403594:	f3c1 0313 	ubfx	r3, r1, #0, #20
  403598:	b973      	cbnz	r3, 4035b8 <_dtoa_r+0x7e6>
  40359a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  40359e:	0d3f      	lsrs	r7, r7, #20
  4035a0:	053f      	lsls	r7, r7, #20
  4035a2:	b157      	cbz	r7, 4035ba <_dtoa_r+0x7e8>
  4035a4:	9f08      	ldr	r7, [sp, #32]
  4035a6:	3701      	adds	r7, #1
  4035a8:	9708      	str	r7, [sp, #32]
  4035aa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4035ac:	3701      	adds	r7, #1
  4035ae:	970a      	str	r7, [sp, #40]	; 0x28
  4035b0:	2701      	movs	r7, #1
  4035b2:	e002      	b.n	4035ba <_dtoa_r+0x7e8>
  4035b4:	2700      	movs	r7, #0
  4035b6:	e000      	b.n	4035ba <_dtoa_r+0x7e8>
  4035b8:	9f04      	ldr	r7, [sp, #16]
  4035ba:	9811      	ldr	r0, [sp, #68]	; 0x44
  4035bc:	b140      	cbz	r0, 4035d0 <_dtoa_r+0x7fe>
  4035be:	692b      	ldr	r3, [r5, #16]
  4035c0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  4035c4:	6918      	ldr	r0, [r3, #16]
  4035c6:	f000 fdfc 	bl	4041c2 <__hi0bits>
  4035ca:	f1c0 0020 	rsb	r0, r0, #32
  4035ce:	e000      	b.n	4035d2 <_dtoa_r+0x800>
  4035d0:	2001      	movs	r0, #1
  4035d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4035d4:	4403      	add	r3, r0
  4035d6:	f013 031f 	ands.w	r3, r3, #31
  4035da:	d00f      	beq.n	4035fc <_dtoa_r+0x82a>
  4035dc:	f1c3 0220 	rsb	r2, r3, #32
  4035e0:	2a04      	cmp	r2, #4
  4035e2:	dd09      	ble.n	4035f8 <_dtoa_r+0x826>
  4035e4:	9908      	ldr	r1, [sp, #32]
  4035e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4035e8:	f1c3 031c 	rsb	r3, r3, #28
  4035ec:	4419      	add	r1, r3
  4035ee:	441a      	add	r2, r3
  4035f0:	9108      	str	r1, [sp, #32]
  4035f2:	441e      	add	r6, r3
  4035f4:	920a      	str	r2, [sp, #40]	; 0x28
  4035f6:	e009      	b.n	40360c <_dtoa_r+0x83a>
  4035f8:	d008      	beq.n	40360c <_dtoa_r+0x83a>
  4035fa:	4613      	mov	r3, r2
  4035fc:	9808      	ldr	r0, [sp, #32]
  4035fe:	990a      	ldr	r1, [sp, #40]	; 0x28
  403600:	331c      	adds	r3, #28
  403602:	4418      	add	r0, r3
  403604:	4419      	add	r1, r3
  403606:	9008      	str	r0, [sp, #32]
  403608:	441e      	add	r6, r3
  40360a:	910a      	str	r1, [sp, #40]	; 0x28
  40360c:	9a08      	ldr	r2, [sp, #32]
  40360e:	2a00      	cmp	r2, #0
  403610:	dd04      	ble.n	40361c <_dtoa_r+0x84a>
  403612:	4659      	mov	r1, fp
  403614:	4650      	mov	r0, sl
  403616:	f000 ff01 	bl	40441c <__lshift>
  40361a:	4683      	mov	fp, r0
  40361c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40361e:	2b00      	cmp	r3, #0
  403620:	dd05      	ble.n	40362e <_dtoa_r+0x85c>
  403622:	4629      	mov	r1, r5
  403624:	4650      	mov	r0, sl
  403626:	461a      	mov	r2, r3
  403628:	f000 fef8 	bl	40441c <__lshift>
  40362c:	4605      	mov	r5, r0
  40362e:	9814      	ldr	r0, [sp, #80]	; 0x50
  403630:	b1e0      	cbz	r0, 40366c <_dtoa_r+0x89a>
  403632:	4658      	mov	r0, fp
  403634:	4629      	mov	r1, r5
  403636:	f000 ff44 	bl	4044c2 <__mcmp>
  40363a:	2800      	cmp	r0, #0
  40363c:	da16      	bge.n	40366c <_dtoa_r+0x89a>
  40363e:	4659      	mov	r1, fp
  403640:	4650      	mov	r0, sl
  403642:	220a      	movs	r2, #10
  403644:	2300      	movs	r3, #0
  403646:	f000 fd40 	bl	4040ca <__multadd>
  40364a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40364c:	f109 39ff 	add.w	r9, r9, #4294967295
  403650:	4683      	mov	fp, r0
  403652:	b149      	cbz	r1, 403668 <_dtoa_r+0x896>
  403654:	4621      	mov	r1, r4
  403656:	220a      	movs	r2, #10
  403658:	4650      	mov	r0, sl
  40365a:	2300      	movs	r3, #0
  40365c:	f000 fd35 	bl	4040ca <__multadd>
  403660:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403662:	9207      	str	r2, [sp, #28]
  403664:	4604      	mov	r4, r0
  403666:	e001      	b.n	40366c <_dtoa_r+0x89a>
  403668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40366a:	9307      	str	r3, [sp, #28]
  40366c:	9807      	ldr	r0, [sp, #28]
  40366e:	2800      	cmp	r0, #0
  403670:	dc29      	bgt.n	4036c6 <_dtoa_r+0x8f4>
  403672:	9924      	ldr	r1, [sp, #144]	; 0x90
  403674:	2902      	cmp	r1, #2
  403676:	dd26      	ble.n	4036c6 <_dtoa_r+0x8f4>
  403678:	b988      	cbnz	r0, 40369e <_dtoa_r+0x8cc>
  40367a:	4629      	mov	r1, r5
  40367c:	2205      	movs	r2, #5
  40367e:	9b07      	ldr	r3, [sp, #28]
  403680:	4650      	mov	r0, sl
  403682:	f000 fd22 	bl	4040ca <__multadd>
  403686:	4605      	mov	r5, r0
  403688:	4629      	mov	r1, r5
  40368a:	4658      	mov	r0, fp
  40368c:	f000 ff19 	bl	4044c2 <__mcmp>
  403690:	2800      	cmp	r0, #0
  403692:	dc0e      	bgt.n	4036b2 <_dtoa_r+0x8e0>
  403694:	e003      	b.n	40369e <_dtoa_r+0x8cc>
  403696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  403698:	e000      	b.n	40369c <_dtoa_r+0x8ca>
  40369a:	2500      	movs	r5, #0
  40369c:	462c      	mov	r4, r5
  40369e:	9f25      	ldr	r7, [sp, #148]	; 0x94
  4036a0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  4036a4:	ea6f 0907 	mvn.w	r9, r7
  4036a8:	e00a      	b.n	4036c0 <_dtoa_r+0x8ee>
  4036aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4036ac:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  4036b0:	462c      	mov	r4, r5
  4036b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4036b4:	2331      	movs	r3, #49	; 0x31
  4036b6:	f107 0801 	add.w	r8, r7, #1
  4036ba:	703b      	strb	r3, [r7, #0]
  4036bc:	f109 0901 	add.w	r9, r9, #1
  4036c0:	4627      	mov	r7, r4
  4036c2:	2400      	movs	r4, #0
  4036c4:	e107      	b.n	4038d6 <_dtoa_r+0xb04>
  4036c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
  4036c8:	2800      	cmp	r0, #0
  4036ca:	f000 80bb 	beq.w	403844 <_dtoa_r+0xa72>
  4036ce:	2e00      	cmp	r6, #0
  4036d0:	dd05      	ble.n	4036de <_dtoa_r+0x90c>
  4036d2:	4621      	mov	r1, r4
  4036d4:	4650      	mov	r0, sl
  4036d6:	4632      	mov	r2, r6
  4036d8:	f000 fea0 	bl	40441c <__lshift>
  4036dc:	4604      	mov	r4, r0
  4036de:	b19f      	cbz	r7, 403708 <_dtoa_r+0x936>
  4036e0:	6861      	ldr	r1, [r4, #4]
  4036e2:	4650      	mov	r0, sl
  4036e4:	f000 fcc2 	bl	40406c <_Balloc>
  4036e8:	6922      	ldr	r2, [r4, #16]
  4036ea:	3202      	adds	r2, #2
  4036ec:	4606      	mov	r6, r0
  4036ee:	f104 010c 	add.w	r1, r4, #12
  4036f2:	0092      	lsls	r2, r2, #2
  4036f4:	300c      	adds	r0, #12
  4036f6:	f000 fc92 	bl	40401e <memcpy>
  4036fa:	4650      	mov	r0, sl
  4036fc:	4631      	mov	r1, r6
  4036fe:	2201      	movs	r2, #1
  403700:	f000 fe8c 	bl	40441c <__lshift>
  403704:	4607      	mov	r7, r0
  403706:	e000      	b.n	40370a <_dtoa_r+0x938>
  403708:	4627      	mov	r7, r4
  40370a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40370c:	4629      	mov	r1, r5
  40370e:	4658      	mov	r0, fp
  403710:	f7ff fad2 	bl	402cb8 <quorem>
  403714:	4621      	mov	r1, r4
  403716:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  40371a:	4680      	mov	r8, r0
  40371c:	4658      	mov	r0, fp
  40371e:	f8cd c008 	str.w	ip, [sp, #8]
  403722:	f000 fece 	bl	4044c2 <__mcmp>
  403726:	463a      	mov	r2, r7
  403728:	9008      	str	r0, [sp, #32]
  40372a:	4629      	mov	r1, r5
  40372c:	4650      	mov	r0, sl
  40372e:	f000 fee5 	bl	4044fc <__mdiff>
  403732:	68c3      	ldr	r3, [r0, #12]
  403734:	f8dd c008 	ldr.w	ip, [sp, #8]
  403738:	4602      	mov	r2, r0
  40373a:	b94b      	cbnz	r3, 403750 <_dtoa_r+0x97e>
  40373c:	4611      	mov	r1, r2
  40373e:	4658      	mov	r0, fp
  403740:	9203      	str	r2, [sp, #12]
  403742:	f000 febe 	bl	4044c2 <__mcmp>
  403746:	9a03      	ldr	r2, [sp, #12]
  403748:	f8dd c008 	ldr.w	ip, [sp, #8]
  40374c:	4603      	mov	r3, r0
  40374e:	e000      	b.n	403752 <_dtoa_r+0x980>
  403750:	2301      	movs	r3, #1
  403752:	4650      	mov	r0, sl
  403754:	4611      	mov	r1, r2
  403756:	9303      	str	r3, [sp, #12]
  403758:	f8cd c008 	str.w	ip, [sp, #8]
  40375c:	f000 fcac 	bl	4040b8 <_Bfree>
  403760:	9b03      	ldr	r3, [sp, #12]
  403762:	f8dd c008 	ldr.w	ip, [sp, #8]
  403766:	b963      	cbnz	r3, 403782 <_dtoa_r+0x9b0>
  403768:	9924      	ldr	r1, [sp, #144]	; 0x90
  40376a:	b951      	cbnz	r1, 403782 <_dtoa_r+0x9b0>
  40376c:	9804      	ldr	r0, [sp, #16]
  40376e:	f000 0201 	and.w	r2, r0, #1
  403772:	b932      	cbnz	r2, 403782 <_dtoa_r+0x9b0>
  403774:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  403778:	d035      	beq.n	4037e6 <_dtoa_r+0xa14>
  40377a:	9b08      	ldr	r3, [sp, #32]
  40377c:	2b00      	cmp	r3, #0
  40377e:	dc24      	bgt.n	4037ca <_dtoa_r+0x9f8>
  403780:	e025      	b.n	4037ce <_dtoa_r+0x9fc>
  403782:	9808      	ldr	r0, [sp, #32]
  403784:	2800      	cmp	r0, #0
  403786:	da02      	bge.n	40378e <_dtoa_r+0x9bc>
  403788:	2b00      	cmp	r3, #0
  40378a:	dc08      	bgt.n	40379e <_dtoa_r+0x9cc>
  40378c:	e01f      	b.n	4037ce <_dtoa_r+0x9fc>
  40378e:	d123      	bne.n	4037d8 <_dtoa_r+0xa06>
  403790:	9924      	ldr	r1, [sp, #144]	; 0x90
  403792:	bb09      	cbnz	r1, 4037d8 <_dtoa_r+0xa06>
  403794:	9804      	ldr	r0, [sp, #16]
  403796:	f000 0201 	and.w	r2, r0, #1
  40379a:	b9ea      	cbnz	r2, 4037d8 <_dtoa_r+0xa06>
  40379c:	e7f4      	b.n	403788 <_dtoa_r+0x9b6>
  40379e:	4659      	mov	r1, fp
  4037a0:	2201      	movs	r2, #1
  4037a2:	4650      	mov	r0, sl
  4037a4:	f8cd c008 	str.w	ip, [sp, #8]
  4037a8:	f000 fe38 	bl	40441c <__lshift>
  4037ac:	4629      	mov	r1, r5
  4037ae:	4683      	mov	fp, r0
  4037b0:	f000 fe87 	bl	4044c2 <__mcmp>
  4037b4:	2800      	cmp	r0, #0
  4037b6:	f8dd c008 	ldr.w	ip, [sp, #8]
  4037ba:	dc03      	bgt.n	4037c4 <_dtoa_r+0x9f2>
  4037bc:	d107      	bne.n	4037ce <_dtoa_r+0x9fc>
  4037be:	f01c 0f01 	tst.w	ip, #1
  4037c2:	d004      	beq.n	4037ce <_dtoa_r+0x9fc>
  4037c4:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  4037c8:	d00d      	beq.n	4037e6 <_dtoa_r+0xa14>
  4037ca:	f108 0c31 	add.w	ip, r8, #49	; 0x31
  4037ce:	f106 0801 	add.w	r8, r6, #1
  4037d2:	f886 c000 	strb.w	ip, [r6]
  4037d6:	e07e      	b.n	4038d6 <_dtoa_r+0xb04>
  4037d8:	2b00      	cmp	r3, #0
  4037da:	f106 0801 	add.w	r8, r6, #1
  4037de:	dd09      	ble.n	4037f4 <_dtoa_r+0xa22>
  4037e0:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  4037e4:	d103      	bne.n	4037ee <_dtoa_r+0xa1c>
  4037e6:	2339      	movs	r3, #57	; 0x39
  4037e8:	7033      	strb	r3, [r6, #0]
  4037ea:	3601      	adds	r6, #1
  4037ec:	e05b      	b.n	4038a6 <_dtoa_r+0xad4>
  4037ee:	f10c 0301 	add.w	r3, ip, #1
  4037f2:	e068      	b.n	4038c6 <_dtoa_r+0xaf4>
  4037f4:	9909      	ldr	r1, [sp, #36]	; 0x24
  4037f6:	9a07      	ldr	r2, [sp, #28]
  4037f8:	4646      	mov	r6, r8
  4037fa:	ebc1 0308 	rsb	r3, r1, r8
  4037fe:	4293      	cmp	r3, r2
  403800:	f806 cc01 	strb.w	ip, [r6, #-1]
  403804:	d03c      	beq.n	403880 <_dtoa_r+0xaae>
  403806:	4659      	mov	r1, fp
  403808:	220a      	movs	r2, #10
  40380a:	2300      	movs	r3, #0
  40380c:	4650      	mov	r0, sl
  40380e:	f000 fc5c 	bl	4040ca <__multadd>
  403812:	42bc      	cmp	r4, r7
  403814:	4683      	mov	fp, r0
  403816:	4621      	mov	r1, r4
  403818:	4650      	mov	r0, sl
  40381a:	f04f 020a 	mov.w	r2, #10
  40381e:	f04f 0300 	mov.w	r3, #0
  403822:	d104      	bne.n	40382e <_dtoa_r+0xa5c>
  403824:	f000 fc51 	bl	4040ca <__multadd>
  403828:	4604      	mov	r4, r0
  40382a:	4607      	mov	r7, r0
  40382c:	e76e      	b.n	40370c <_dtoa_r+0x93a>
  40382e:	f000 fc4c 	bl	4040ca <__multadd>
  403832:	4639      	mov	r1, r7
  403834:	4604      	mov	r4, r0
  403836:	220a      	movs	r2, #10
  403838:	4650      	mov	r0, sl
  40383a:	2300      	movs	r3, #0
  40383c:	f000 fc45 	bl	4040ca <__multadd>
  403840:	4607      	mov	r7, r0
  403842:	e763      	b.n	40370c <_dtoa_r+0x93a>
  403844:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  403846:	4658      	mov	r0, fp
  403848:	4629      	mov	r1, r5
  40384a:	f7ff fa35 	bl	402cb8 <quorem>
  40384e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  403850:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  403854:	f807 c006 	strb.w	ip, [r7, r6]
  403858:	9f07      	ldr	r7, [sp, #28]
  40385a:	3601      	adds	r6, #1
  40385c:	42be      	cmp	r6, r7
  40385e:	db07      	blt.n	403870 <_dtoa_r+0xa9e>
  403860:	9e09      	ldr	r6, [sp, #36]	; 0x24
  403862:	2f01      	cmp	r7, #1
  403864:	bfac      	ite	ge
  403866:	19f6      	addge	r6, r6, r7
  403868:	3601      	addlt	r6, #1
  40386a:	4627      	mov	r7, r4
  40386c:	2400      	movs	r4, #0
  40386e:	e007      	b.n	403880 <_dtoa_r+0xaae>
  403870:	4659      	mov	r1, fp
  403872:	4650      	mov	r0, sl
  403874:	220a      	movs	r2, #10
  403876:	2300      	movs	r3, #0
  403878:	f000 fc27 	bl	4040ca <__multadd>
  40387c:	4683      	mov	fp, r0
  40387e:	e7e2      	b.n	403846 <_dtoa_r+0xa74>
  403880:	4659      	mov	r1, fp
  403882:	2201      	movs	r2, #1
  403884:	4650      	mov	r0, sl
  403886:	f8cd c008 	str.w	ip, [sp, #8]
  40388a:	f000 fdc7 	bl	40441c <__lshift>
  40388e:	4629      	mov	r1, r5
  403890:	4683      	mov	fp, r0
  403892:	f000 fe16 	bl	4044c2 <__mcmp>
  403896:	2800      	cmp	r0, #0
  403898:	f8dd c008 	ldr.w	ip, [sp, #8]
  40389c:	dc03      	bgt.n	4038a6 <_dtoa_r+0xad4>
  40389e:	d114      	bne.n	4038ca <_dtoa_r+0xaf8>
  4038a0:	f01c 0f01 	tst.w	ip, #1
  4038a4:	d011      	beq.n	4038ca <_dtoa_r+0xaf8>
  4038a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  4038aa:	2b39      	cmp	r3, #57	; 0x39
  4038ac:	46b0      	mov	r8, r6
  4038ae:	f106 36ff 	add.w	r6, r6, #4294967295
  4038b2:	d107      	bne.n	4038c4 <_dtoa_r+0xaf2>
  4038b4:	9809      	ldr	r0, [sp, #36]	; 0x24
  4038b6:	42b0      	cmp	r0, r6
  4038b8:	d1f5      	bne.n	4038a6 <_dtoa_r+0xad4>
  4038ba:	2331      	movs	r3, #49	; 0x31
  4038bc:	f109 0901 	add.w	r9, r9, #1
  4038c0:	7003      	strb	r3, [r0, #0]
  4038c2:	e008      	b.n	4038d6 <_dtoa_r+0xb04>
  4038c4:	3301      	adds	r3, #1
  4038c6:	7033      	strb	r3, [r6, #0]
  4038c8:	e005      	b.n	4038d6 <_dtoa_r+0xb04>
  4038ca:	46b0      	mov	r8, r6
  4038cc:	3e01      	subs	r6, #1
  4038ce:	f818 3c01 	ldrb.w	r3, [r8, #-1]
  4038d2:	2b30      	cmp	r3, #48	; 0x30
  4038d4:	d0f9      	beq.n	4038ca <_dtoa_r+0xaf8>
  4038d6:	4650      	mov	r0, sl
  4038d8:	4629      	mov	r1, r5
  4038da:	f000 fbed 	bl	4040b8 <_Bfree>
  4038de:	b16f      	cbz	r7, 4038fc <_dtoa_r+0xb2a>
  4038e0:	b12c      	cbz	r4, 4038ee <_dtoa_r+0xb1c>
  4038e2:	42bc      	cmp	r4, r7
  4038e4:	d003      	beq.n	4038ee <_dtoa_r+0xb1c>
  4038e6:	4650      	mov	r0, sl
  4038e8:	4621      	mov	r1, r4
  4038ea:	f000 fbe5 	bl	4040b8 <_Bfree>
  4038ee:	4650      	mov	r0, sl
  4038f0:	4639      	mov	r1, r7
  4038f2:	f000 fbe1 	bl	4040b8 <_Bfree>
  4038f6:	e001      	b.n	4038fc <_dtoa_r+0xb2a>
  4038f8:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  4038fc:	4650      	mov	r0, sl
  4038fe:	4659      	mov	r1, fp
  403900:	f000 fbda 	bl	4040b8 <_Bfree>
  403904:	2300      	movs	r3, #0
  403906:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403908:	f888 3000 	strb.w	r3, [r8]
  40390c:	f109 0301 	add.w	r3, r9, #1
  403910:	603b      	str	r3, [r7, #0]
  403912:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  403914:	b127      	cbz	r7, 403920 <_dtoa_r+0xb4e>
  403916:	f8c7 8000 	str.w	r8, [r7]
  40391a:	e001      	b.n	403920 <_dtoa_r+0xb4e>
  40391c:	4802      	ldr	r0, [pc, #8]	; (403928 <_dtoa_r+0xb56>)
  40391e:	e000      	b.n	403922 <_dtoa_r+0xb50>
  403920:	9809      	ldr	r0, [sp, #36]	; 0x24
  403922:	b01b      	add	sp, #108	; 0x6c
  403924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403928:	00405e70 	.word	0x00405e70
  40392c:	f3af 8000 	nop.w

00403930 <__libc_fini_array>:
  403930:	b538      	push	{r3, r4, r5, lr}
  403932:	4d08      	ldr	r5, [pc, #32]	; (403954 <__libc_fini_array+0x24>)
  403934:	4c08      	ldr	r4, [pc, #32]	; (403958 <__libc_fini_array+0x28>)
  403936:	1b64      	subs	r4, r4, r5
  403938:	10a4      	asrs	r4, r4, #2
  40393a:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  40393e:	b124      	cbz	r4, 40394a <__libc_fini_array+0x1a>
  403940:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  403944:	3c01      	subs	r4, #1
  403946:	4798      	blx	r3
  403948:	e7f9      	b.n	40393e <__libc_fini_array+0xe>
  40394a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40394e:	f002 bb49 	b.w	405fe4 <_fini>
  403952:	bf00      	nop
  403954:	00405ff0 	.word	0x00405ff0
  403958:	00405ff4 	.word	0x00405ff4

0040395c <_malloc_trim_r>:
  40395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40395e:	4d23      	ldr	r5, [pc, #140]	; (4039ec <_malloc_trim_r+0x90>)
  403960:	460e      	mov	r6, r1
  403962:	4604      	mov	r4, r0
  403964:	f000 fb7f 	bl	404066 <__malloc_lock>
  403968:	68ab      	ldr	r3, [r5, #8]
  40396a:	685f      	ldr	r7, [r3, #4]
  40396c:	f027 0703 	bic.w	r7, r7, #3
  403970:	1bbe      	subs	r6, r7, r6
  403972:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
  403976:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
  40397a:	f026 060f 	bic.w	r6, r6, #15
  40397e:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
  403982:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
  403986:	da04      	bge.n	403992 <_malloc_trim_r+0x36>
  403988:	4620      	mov	r0, r4
  40398a:	f000 fb6d 	bl	404068 <__malloc_unlock>
  40398e:	2000      	movs	r0, #0
  403990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403992:	4620      	mov	r0, r4
  403994:	2100      	movs	r1, #0
  403996:	f001 f91d 	bl	404bd4 <_sbrk_r>
  40399a:	68ab      	ldr	r3, [r5, #8]
  40399c:	443b      	add	r3, r7
  40399e:	4298      	cmp	r0, r3
  4039a0:	d1f2      	bne.n	403988 <_malloc_trim_r+0x2c>
  4039a2:	4620      	mov	r0, r4
  4039a4:	4271      	negs	r1, r6
  4039a6:	f001 f915 	bl	404bd4 <_sbrk_r>
  4039aa:	3001      	adds	r0, #1
  4039ac:	d110      	bne.n	4039d0 <_malloc_trim_r+0x74>
  4039ae:	4620      	mov	r0, r4
  4039b0:	2100      	movs	r1, #0
  4039b2:	f001 f90f 	bl	404bd4 <_sbrk_r>
  4039b6:	68ab      	ldr	r3, [r5, #8]
  4039b8:	1ac2      	subs	r2, r0, r3
  4039ba:	2a0f      	cmp	r2, #15
  4039bc:	dde4      	ble.n	403988 <_malloc_trim_r+0x2c>
  4039be:	490c      	ldr	r1, [pc, #48]	; (4039f0 <_malloc_trim_r+0x94>)
  4039c0:	6809      	ldr	r1, [r1, #0]
  4039c2:	1a40      	subs	r0, r0, r1
  4039c4:	490b      	ldr	r1, [pc, #44]	; (4039f4 <_malloc_trim_r+0x98>)
  4039c6:	f042 0201 	orr.w	r2, r2, #1
  4039ca:	6008      	str	r0, [r1, #0]
  4039cc:	605a      	str	r2, [r3, #4]
  4039ce:	e7db      	b.n	403988 <_malloc_trim_r+0x2c>
  4039d0:	68ab      	ldr	r3, [r5, #8]
  4039d2:	1bbf      	subs	r7, r7, r6
  4039d4:	f047 0701 	orr.w	r7, r7, #1
  4039d8:	605f      	str	r7, [r3, #4]
  4039da:	4b06      	ldr	r3, [pc, #24]	; (4039f4 <_malloc_trim_r+0x98>)
  4039dc:	681a      	ldr	r2, [r3, #0]
  4039de:	4620      	mov	r0, r4
  4039e0:	1b96      	subs	r6, r2, r6
  4039e2:	601e      	str	r6, [r3, #0]
  4039e4:	f000 fb40 	bl	404068 <__malloc_unlock>
  4039e8:	2001      	movs	r0, #1
  4039ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4039ec:	200004c4 	.word	0x200004c4
  4039f0:	200008cc 	.word	0x200008cc
  4039f4:	20000970 	.word	0x20000970

004039f8 <_free_r>:
  4039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4039fa:	4606      	mov	r6, r0
  4039fc:	460d      	mov	r5, r1
  4039fe:	2900      	cmp	r1, #0
  403a00:	f000 80a9 	beq.w	403b56 <_free_r+0x15e>
  403a04:	f000 fb2f 	bl	404066 <__malloc_lock>
  403a08:	f855 cc04 	ldr.w	ip, [r5, #-4]
  403a0c:	4c52      	ldr	r4, [pc, #328]	; (403b58 <_free_r+0x160>)
  403a0e:	f1a5 0308 	sub.w	r3, r5, #8
  403a12:	f02c 0201 	bic.w	r2, ip, #1
  403a16:	1898      	adds	r0, r3, r2
  403a18:	68a1      	ldr	r1, [r4, #8]
  403a1a:	6847      	ldr	r7, [r0, #4]
  403a1c:	4288      	cmp	r0, r1
  403a1e:	f027 0703 	bic.w	r7, r7, #3
  403a22:	f00c 0101 	and.w	r1, ip, #1
  403a26:	d11b      	bne.n	403a60 <_free_r+0x68>
  403a28:	443a      	add	r2, r7
  403a2a:	b939      	cbnz	r1, 403a3c <_free_r+0x44>
  403a2c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403a30:	1a5b      	subs	r3, r3, r1
  403a32:	440a      	add	r2, r1
  403a34:	6898      	ldr	r0, [r3, #8]
  403a36:	68d9      	ldr	r1, [r3, #12]
  403a38:	60c1      	str	r1, [r0, #12]
  403a3a:	6088      	str	r0, [r1, #8]
  403a3c:	f042 0101 	orr.w	r1, r2, #1
  403a40:	6059      	str	r1, [r3, #4]
  403a42:	60a3      	str	r3, [r4, #8]
  403a44:	4b45      	ldr	r3, [pc, #276]	; (403b5c <_free_r+0x164>)
  403a46:	681b      	ldr	r3, [r3, #0]
  403a48:	429a      	cmp	r2, r3
  403a4a:	d304      	bcc.n	403a56 <_free_r+0x5e>
  403a4c:	4b44      	ldr	r3, [pc, #272]	; (403b60 <_free_r+0x168>)
  403a4e:	4630      	mov	r0, r6
  403a50:	6819      	ldr	r1, [r3, #0]
  403a52:	f7ff ff83 	bl	40395c <_malloc_trim_r>
  403a56:	4630      	mov	r0, r6
  403a58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  403a5c:	f000 bb04 	b.w	404068 <__malloc_unlock>
  403a60:	6047      	str	r7, [r0, #4]
  403a62:	b979      	cbnz	r1, 403a84 <_free_r+0x8c>
  403a64:	f855 5c08 	ldr.w	r5, [r5, #-8]
  403a68:	1b5b      	subs	r3, r3, r5
  403a6a:	442a      	add	r2, r5
  403a6c:	689d      	ldr	r5, [r3, #8]
  403a6e:	f104 0c08 	add.w	ip, r4, #8
  403a72:	4565      	cmp	r5, ip
  403a74:	d008      	beq.n	403a88 <_free_r+0x90>
  403a76:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403a7a:	f8c5 c00c 	str.w	ip, [r5, #12]
  403a7e:	f8cc 5008 	str.w	r5, [ip, #8]
  403a82:	e002      	b.n	403a8a <_free_r+0x92>
  403a84:	2100      	movs	r1, #0
  403a86:	e000      	b.n	403a8a <_free_r+0x92>
  403a88:	2101      	movs	r1, #1
  403a8a:	19c5      	adds	r5, r0, r7
  403a8c:	686d      	ldr	r5, [r5, #4]
  403a8e:	07ed      	lsls	r5, r5, #31
  403a90:	d40e      	bmi.n	403ab0 <_free_r+0xb8>
  403a92:	443a      	add	r2, r7
  403a94:	6885      	ldr	r5, [r0, #8]
  403a96:	b941      	cbnz	r1, 403aaa <_free_r+0xb2>
  403a98:	4f32      	ldr	r7, [pc, #200]	; (403b64 <_free_r+0x16c>)
  403a9a:	42bd      	cmp	r5, r7
  403a9c:	d105      	bne.n	403aaa <_free_r+0xb2>
  403a9e:	6163      	str	r3, [r4, #20]
  403aa0:	6123      	str	r3, [r4, #16]
  403aa2:	2101      	movs	r1, #1
  403aa4:	60dd      	str	r5, [r3, #12]
  403aa6:	609d      	str	r5, [r3, #8]
  403aa8:	e002      	b.n	403ab0 <_free_r+0xb8>
  403aaa:	68c0      	ldr	r0, [r0, #12]
  403aac:	60e8      	str	r0, [r5, #12]
  403aae:	6085      	str	r5, [r0, #8]
  403ab0:	f042 0001 	orr.w	r0, r2, #1
  403ab4:	6058      	str	r0, [r3, #4]
  403ab6:	509a      	str	r2, [r3, r2]
  403ab8:	2900      	cmp	r1, #0
  403aba:	d1cc      	bne.n	403a56 <_free_r+0x5e>
  403abc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403ac0:	d20e      	bcs.n	403ae0 <_free_r+0xe8>
  403ac2:	08d2      	lsrs	r2, r2, #3
  403ac4:	1091      	asrs	r1, r2, #2
  403ac6:	2001      	movs	r0, #1
  403ac8:	4088      	lsls	r0, r1
  403aca:	6861      	ldr	r1, [r4, #4]
  403acc:	4301      	orrs	r1, r0
  403ace:	6061      	str	r1, [r4, #4]
  403ad0:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
  403ad4:	68a2      	ldr	r2, [r4, #8]
  403ad6:	609a      	str	r2, [r3, #8]
  403ad8:	60dc      	str	r4, [r3, #12]
  403ada:	60a3      	str	r3, [r4, #8]
  403adc:	60d3      	str	r3, [r2, #12]
  403ade:	e7ba      	b.n	403a56 <_free_r+0x5e>
  403ae0:	0a51      	lsrs	r1, r2, #9
  403ae2:	2904      	cmp	r1, #4
  403ae4:	d802      	bhi.n	403aec <_free_r+0xf4>
  403ae6:	0991      	lsrs	r1, r2, #6
  403ae8:	3138      	adds	r1, #56	; 0x38
  403aea:	e015      	b.n	403b18 <_free_r+0x120>
  403aec:	2914      	cmp	r1, #20
  403aee:	d801      	bhi.n	403af4 <_free_r+0xfc>
  403af0:	315b      	adds	r1, #91	; 0x5b
  403af2:	e011      	b.n	403b18 <_free_r+0x120>
  403af4:	2954      	cmp	r1, #84	; 0x54
  403af6:	d802      	bhi.n	403afe <_free_r+0x106>
  403af8:	0b11      	lsrs	r1, r2, #12
  403afa:	316e      	adds	r1, #110	; 0x6e
  403afc:	e00c      	b.n	403b18 <_free_r+0x120>
  403afe:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  403b02:	d802      	bhi.n	403b0a <_free_r+0x112>
  403b04:	0bd1      	lsrs	r1, r2, #15
  403b06:	3177      	adds	r1, #119	; 0x77
  403b08:	e006      	b.n	403b18 <_free_r+0x120>
  403b0a:	f240 5054 	movw	r0, #1364	; 0x554
  403b0e:	4281      	cmp	r1, r0
  403b10:	bf9a      	itte	ls
  403b12:	0c91      	lsrls	r1, r2, #18
  403b14:	317c      	addls	r1, #124	; 0x7c
  403b16:	217e      	movhi	r1, #126	; 0x7e
  403b18:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
  403b1c:	480e      	ldr	r0, [pc, #56]	; (403b58 <_free_r+0x160>)
  403b1e:	68a5      	ldr	r5, [r4, #8]
  403b20:	42a5      	cmp	r5, r4
  403b22:	d001      	beq.n	403b28 <_free_r+0x130>
  403b24:	4629      	mov	r1, r5
  403b26:	e00b      	b.n	403b40 <_free_r+0x148>
  403b28:	2201      	movs	r2, #1
  403b2a:	1089      	asrs	r1, r1, #2
  403b2c:	fa02 f101 	lsl.w	r1, r2, r1
  403b30:	6842      	ldr	r2, [r0, #4]
  403b32:	430a      	orrs	r2, r1
  403b34:	6042      	str	r2, [r0, #4]
  403b36:	4629      	mov	r1, r5
  403b38:	e008      	b.n	403b4c <_free_r+0x154>
  403b3a:	6889      	ldr	r1, [r1, #8]
  403b3c:	42a1      	cmp	r1, r4
  403b3e:	d004      	beq.n	403b4a <_free_r+0x152>
  403b40:	6848      	ldr	r0, [r1, #4]
  403b42:	f020 0003 	bic.w	r0, r0, #3
  403b46:	4282      	cmp	r2, r0
  403b48:	d3f7      	bcc.n	403b3a <_free_r+0x142>
  403b4a:	68cd      	ldr	r5, [r1, #12]
  403b4c:	60dd      	str	r5, [r3, #12]
  403b4e:	6099      	str	r1, [r3, #8]
  403b50:	60ab      	str	r3, [r5, #8]
  403b52:	60cb      	str	r3, [r1, #12]
  403b54:	e77f      	b.n	403a56 <_free_r+0x5e>
  403b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403b58:	200004c4 	.word	0x200004c4
  403b5c:	200008d0 	.word	0x200008d0
  403b60:	2000096c 	.word	0x2000096c
  403b64:	200004cc 	.word	0x200004cc

00403b68 <_setlocale_r>:
  403b68:	b510      	push	{r4, lr}
  403b6a:	4614      	mov	r4, r2
  403b6c:	b90a      	cbnz	r2, 403b72 <_setlocale_r+0xa>
  403b6e:	480b      	ldr	r0, [pc, #44]	; (403b9c <_setlocale_r+0x34>)
  403b70:	bd10      	pop	{r4, pc}
  403b72:	4610      	mov	r0, r2
  403b74:	490a      	ldr	r1, [pc, #40]	; (403ba0 <_setlocale_r+0x38>)
  403b76:	f001 f83d 	bl	404bf4 <strcmp>
  403b7a:	2800      	cmp	r0, #0
  403b7c:	d0f7      	beq.n	403b6e <_setlocale_r+0x6>
  403b7e:	4620      	mov	r0, r4
  403b80:	4906      	ldr	r1, [pc, #24]	; (403b9c <_setlocale_r+0x34>)
  403b82:	f001 f837 	bl	404bf4 <strcmp>
  403b86:	2800      	cmp	r0, #0
  403b88:	d0f1      	beq.n	403b6e <_setlocale_r+0x6>
  403b8a:	4620      	mov	r0, r4
  403b8c:	4905      	ldr	r1, [pc, #20]	; (403ba4 <_setlocale_r+0x3c>)
  403b8e:	f001 f831 	bl	404bf4 <strcmp>
  403b92:	2800      	cmp	r0, #0
  403b94:	4801      	ldr	r0, [pc, #4]	; (403b9c <_setlocale_r+0x34>)
  403b96:	bf18      	it	ne
  403b98:	2000      	movne	r0, #0
  403b9a:	bd10      	pop	{r4, pc}
  403b9c:	00405e1c 	.word	0x00405e1c
  403ba0:	00405e7f 	.word	0x00405e7f
  403ba4:	00405e86 	.word	0x00405e86

00403ba8 <__locale_charset>:
  403ba8:	4800      	ldr	r0, [pc, #0]	; (403bac <__locale_charset+0x4>)
  403baa:	4770      	bx	lr
  403bac:	20000448 	.word	0x20000448

00403bb0 <__locale_mb_cur_max>:
  403bb0:	4b01      	ldr	r3, [pc, #4]	; (403bb8 <__locale_mb_cur_max+0x8>)
  403bb2:	6a18      	ldr	r0, [r3, #32]
  403bb4:	4770      	bx	lr
  403bb6:	bf00      	nop
  403bb8:	20000448 	.word	0x20000448

00403bbc <__locale_msgcharset>:
  403bbc:	4800      	ldr	r0, [pc, #0]	; (403bc0 <__locale_msgcharset+0x4>)
  403bbe:	4770      	bx	lr
  403bc0:	2000046c 	.word	0x2000046c

00403bc4 <__locale_cjk_lang>:
  403bc4:	2000      	movs	r0, #0
  403bc6:	4770      	bx	lr

00403bc8 <_localeconv_r>:
  403bc8:	4800      	ldr	r0, [pc, #0]	; (403bcc <_localeconv_r+0x4>)
  403bca:	4770      	bx	lr
  403bcc:	2000048c 	.word	0x2000048c

00403bd0 <setlocale>:
  403bd0:	460a      	mov	r2, r1
  403bd2:	4903      	ldr	r1, [pc, #12]	; (403be0 <setlocale+0x10>)
  403bd4:	4603      	mov	r3, r0
  403bd6:	6808      	ldr	r0, [r1, #0]
  403bd8:	4619      	mov	r1, r3
  403bda:	f7ff bfc5 	b.w	403b68 <_setlocale_r>
  403bde:	bf00      	nop
  403be0:	20000018 	.word	0x20000018

00403be4 <localeconv>:
  403be4:	4800      	ldr	r0, [pc, #0]	; (403be8 <localeconv+0x4>)
  403be6:	4770      	bx	lr
  403be8:	2000048c 	.word	0x2000048c

00403bec <_malloc_r>:
  403bec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403bf0:	f101 040b 	add.w	r4, r1, #11
  403bf4:	2c16      	cmp	r4, #22
  403bf6:	4607      	mov	r7, r0
  403bf8:	d903      	bls.n	403c02 <_malloc_r+0x16>
  403bfa:	f034 0407 	bics.w	r4, r4, #7
  403bfe:	d501      	bpl.n	403c04 <_malloc_r+0x18>
  403c00:	e002      	b.n	403c08 <_malloc_r+0x1c>
  403c02:	2410      	movs	r4, #16
  403c04:	428c      	cmp	r4, r1
  403c06:	d202      	bcs.n	403c0e <_malloc_r+0x22>
  403c08:	230c      	movs	r3, #12
  403c0a:	603b      	str	r3, [r7, #0]
  403c0c:	e1e0      	b.n	403fd0 <_malloc_r+0x3e4>
  403c0e:	4638      	mov	r0, r7
  403c10:	f000 fa29 	bl	404066 <__malloc_lock>
  403c14:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  403c18:	4da4      	ldr	r5, [pc, #656]	; (403eac <_malloc_r+0x2c0>)
  403c1a:	d214      	bcs.n	403c46 <_malloc_r+0x5a>
  403c1c:	08e2      	lsrs	r2, r4, #3
  403c1e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
  403c22:	68de      	ldr	r6, [r3, #12]
  403c24:	429e      	cmp	r6, r3
  403c26:	d106      	bne.n	403c36 <_malloc_r+0x4a>
  403c28:	f106 0308 	add.w	r3, r6, #8
  403c2c:	6976      	ldr	r6, [r6, #20]
  403c2e:	429e      	cmp	r6, r3
  403c30:	bf08      	it	eq
  403c32:	3202      	addeq	r2, #2
  403c34:	d043      	beq.n	403cbe <_malloc_r+0xd2>
  403c36:	6873      	ldr	r3, [r6, #4]
  403c38:	68f2      	ldr	r2, [r6, #12]
  403c3a:	68b1      	ldr	r1, [r6, #8]
  403c3c:	f023 0303 	bic.w	r3, r3, #3
  403c40:	60ca      	str	r2, [r1, #12]
  403c42:	6091      	str	r1, [r2, #8]
  403c44:	e05d      	b.n	403d02 <_malloc_r+0x116>
  403c46:	0a62      	lsrs	r2, r4, #9
  403c48:	d01a      	beq.n	403c80 <_malloc_r+0x94>
  403c4a:	2a04      	cmp	r2, #4
  403c4c:	d802      	bhi.n	403c54 <_malloc_r+0x68>
  403c4e:	09a2      	lsrs	r2, r4, #6
  403c50:	3238      	adds	r2, #56	; 0x38
  403c52:	e018      	b.n	403c86 <_malloc_r+0x9a>
  403c54:	2a14      	cmp	r2, #20
  403c56:	d801      	bhi.n	403c5c <_malloc_r+0x70>
  403c58:	325b      	adds	r2, #91	; 0x5b
  403c5a:	e014      	b.n	403c86 <_malloc_r+0x9a>
  403c5c:	2a54      	cmp	r2, #84	; 0x54
  403c5e:	d802      	bhi.n	403c66 <_malloc_r+0x7a>
  403c60:	0b22      	lsrs	r2, r4, #12
  403c62:	326e      	adds	r2, #110	; 0x6e
  403c64:	e00f      	b.n	403c86 <_malloc_r+0x9a>
  403c66:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403c6a:	d802      	bhi.n	403c72 <_malloc_r+0x86>
  403c6c:	0be2      	lsrs	r2, r4, #15
  403c6e:	3277      	adds	r2, #119	; 0x77
  403c70:	e009      	b.n	403c86 <_malloc_r+0x9a>
  403c72:	f240 5354 	movw	r3, #1364	; 0x554
  403c76:	429a      	cmp	r2, r3
  403c78:	d804      	bhi.n	403c84 <_malloc_r+0x98>
  403c7a:	0ca2      	lsrs	r2, r4, #18
  403c7c:	327c      	adds	r2, #124	; 0x7c
  403c7e:	e002      	b.n	403c86 <_malloc_r+0x9a>
  403c80:	223f      	movs	r2, #63	; 0x3f
  403c82:	e000      	b.n	403c86 <_malloc_r+0x9a>
  403c84:	227e      	movs	r2, #126	; 0x7e
  403c86:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
  403c8a:	68de      	ldr	r6, [r3, #12]
  403c8c:	429e      	cmp	r6, r3
  403c8e:	d015      	beq.n	403cbc <_malloc_r+0xd0>
  403c90:	6871      	ldr	r1, [r6, #4]
  403c92:	f021 0103 	bic.w	r1, r1, #3
  403c96:	1b08      	subs	r0, r1, r4
  403c98:	280f      	cmp	r0, #15
  403c9a:	dd01      	ble.n	403ca0 <_malloc_r+0xb4>
  403c9c:	3a01      	subs	r2, #1
  403c9e:	e00d      	b.n	403cbc <_malloc_r+0xd0>
  403ca0:	2800      	cmp	r0, #0
  403ca2:	db09      	blt.n	403cb8 <_malloc_r+0xcc>
  403ca4:	68f3      	ldr	r3, [r6, #12]
  403ca6:	68b2      	ldr	r2, [r6, #8]
  403ca8:	60d3      	str	r3, [r2, #12]
  403caa:	609a      	str	r2, [r3, #8]
  403cac:	1873      	adds	r3, r6, r1
  403cae:	685a      	ldr	r2, [r3, #4]
  403cb0:	f042 0201 	orr.w	r2, r2, #1
  403cb4:	605a      	str	r2, [r3, #4]
  403cb6:	e196      	b.n	403fe6 <_malloc_r+0x3fa>
  403cb8:	68f6      	ldr	r6, [r6, #12]
  403cba:	e7e7      	b.n	403c8c <_malloc_r+0xa0>
  403cbc:	3201      	adds	r2, #1
  403cbe:	497b      	ldr	r1, [pc, #492]	; (403eac <_malloc_r+0x2c0>)
  403cc0:	692e      	ldr	r6, [r5, #16]
  403cc2:	f101 0008 	add.w	r0, r1, #8
  403cc6:	4286      	cmp	r6, r0
  403cc8:	4686      	mov	lr, r0
  403cca:	d06d      	beq.n	403da8 <_malloc_r+0x1bc>
  403ccc:	6873      	ldr	r3, [r6, #4]
  403cce:	f023 0303 	bic.w	r3, r3, #3
  403cd2:	ebc4 0c03 	rsb	ip, r4, r3
  403cd6:	f1bc 0f0f 	cmp.w	ip, #15
  403cda:	dd0d      	ble.n	403cf8 <_malloc_r+0x10c>
  403cdc:	1933      	adds	r3, r6, r4
  403cde:	f04c 0201 	orr.w	r2, ip, #1
  403ce2:	f044 0401 	orr.w	r4, r4, #1
  403ce6:	6074      	str	r4, [r6, #4]
  403ce8:	614b      	str	r3, [r1, #20]
  403cea:	610b      	str	r3, [r1, #16]
  403cec:	60d8      	str	r0, [r3, #12]
  403cee:	6098      	str	r0, [r3, #8]
  403cf0:	605a      	str	r2, [r3, #4]
  403cf2:	f843 c00c 	str.w	ip, [r3, ip]
  403cf6:	e176      	b.n	403fe6 <_malloc_r+0x3fa>
  403cf8:	f1bc 0f00 	cmp.w	ip, #0
  403cfc:	6148      	str	r0, [r1, #20]
  403cfe:	6108      	str	r0, [r1, #16]
  403d00:	db01      	blt.n	403d06 <_malloc_r+0x11a>
  403d02:	4433      	add	r3, r6
  403d04:	e7d3      	b.n	403cae <_malloc_r+0xc2>
  403d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403d0a:	d211      	bcs.n	403d30 <_malloc_r+0x144>
  403d0c:	08db      	lsrs	r3, r3, #3
  403d0e:	1098      	asrs	r0, r3, #2
  403d10:	f04f 0c01 	mov.w	ip, #1
  403d14:	fa0c fc00 	lsl.w	ip, ip, r0
  403d18:	6848      	ldr	r0, [r1, #4]
  403d1a:	ea4c 0000 	orr.w	r0, ip, r0
  403d1e:	6048      	str	r0, [r1, #4]
  403d20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  403d24:	688b      	ldr	r3, [r1, #8]
  403d26:	60b3      	str	r3, [r6, #8]
  403d28:	60f1      	str	r1, [r6, #12]
  403d2a:	608e      	str	r6, [r1, #8]
  403d2c:	60de      	str	r6, [r3, #12]
  403d2e:	e03b      	b.n	403da8 <_malloc_r+0x1bc>
  403d30:	0a58      	lsrs	r0, r3, #9
  403d32:	2804      	cmp	r0, #4
  403d34:	d802      	bhi.n	403d3c <_malloc_r+0x150>
  403d36:	0998      	lsrs	r0, r3, #6
  403d38:	3038      	adds	r0, #56	; 0x38
  403d3a:	e015      	b.n	403d68 <_malloc_r+0x17c>
  403d3c:	2814      	cmp	r0, #20
  403d3e:	d801      	bhi.n	403d44 <_malloc_r+0x158>
  403d40:	305b      	adds	r0, #91	; 0x5b
  403d42:	e011      	b.n	403d68 <_malloc_r+0x17c>
  403d44:	2854      	cmp	r0, #84	; 0x54
  403d46:	d802      	bhi.n	403d4e <_malloc_r+0x162>
  403d48:	0b18      	lsrs	r0, r3, #12
  403d4a:	306e      	adds	r0, #110	; 0x6e
  403d4c:	e00c      	b.n	403d68 <_malloc_r+0x17c>
  403d4e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  403d52:	d802      	bhi.n	403d5a <_malloc_r+0x16e>
  403d54:	0bd8      	lsrs	r0, r3, #15
  403d56:	3077      	adds	r0, #119	; 0x77
  403d58:	e006      	b.n	403d68 <_malloc_r+0x17c>
  403d5a:	f240 5154 	movw	r1, #1364	; 0x554
  403d5e:	4288      	cmp	r0, r1
  403d60:	bf9a      	itte	ls
  403d62:	0c98      	lsrls	r0, r3, #18
  403d64:	307c      	addls	r0, #124	; 0x7c
  403d66:	207e      	movhi	r0, #126	; 0x7e
  403d68:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
  403d6c:	f8df 813c 	ldr.w	r8, [pc, #316]	; 403eac <_malloc_r+0x2c0>
  403d70:	f8dc 1008 	ldr.w	r1, [ip, #8]
  403d74:	4561      	cmp	r1, ip
  403d76:	d10d      	bne.n	403d94 <_malloc_r+0x1a8>
  403d78:	2301      	movs	r3, #1
  403d7a:	1080      	asrs	r0, r0, #2
  403d7c:	fa03 f000 	lsl.w	r0, r3, r0
  403d80:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403d84:	4303      	orrs	r3, r0
  403d86:	f8c8 3004 	str.w	r3, [r8, #4]
  403d8a:	460b      	mov	r3, r1
  403d8c:	e008      	b.n	403da0 <_malloc_r+0x1b4>
  403d8e:	6889      	ldr	r1, [r1, #8]
  403d90:	4561      	cmp	r1, ip
  403d92:	d004      	beq.n	403d9e <_malloc_r+0x1b2>
  403d94:	6848      	ldr	r0, [r1, #4]
  403d96:	f020 0003 	bic.w	r0, r0, #3
  403d9a:	4283      	cmp	r3, r0
  403d9c:	d3f7      	bcc.n	403d8e <_malloc_r+0x1a2>
  403d9e:	68cb      	ldr	r3, [r1, #12]
  403da0:	60f3      	str	r3, [r6, #12]
  403da2:	60b1      	str	r1, [r6, #8]
  403da4:	609e      	str	r6, [r3, #8]
  403da6:	60ce      	str	r6, [r1, #12]
  403da8:	2101      	movs	r1, #1
  403daa:	1093      	asrs	r3, r2, #2
  403dac:	fa01 f303 	lsl.w	r3, r1, r3
  403db0:	6869      	ldr	r1, [r5, #4]
  403db2:	428b      	cmp	r3, r1
  403db4:	d85e      	bhi.n	403e74 <_malloc_r+0x288>
  403db6:	420b      	tst	r3, r1
  403db8:	d106      	bne.n	403dc8 <_malloc_r+0x1dc>
  403dba:	f022 0203 	bic.w	r2, r2, #3
  403dbe:	005b      	lsls	r3, r3, #1
  403dc0:	420b      	tst	r3, r1
  403dc2:	f102 0204 	add.w	r2, r2, #4
  403dc6:	d0fa      	beq.n	403dbe <_malloc_r+0x1d2>
  403dc8:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
  403dcc:	4680      	mov	r8, r0
  403dce:	4694      	mov	ip, r2
  403dd0:	f8d8 600c 	ldr.w	r6, [r8, #12]
  403dd4:	4546      	cmp	r6, r8
  403dd6:	d02d      	beq.n	403e34 <_malloc_r+0x248>
  403dd8:	6871      	ldr	r1, [r6, #4]
  403dda:	f021 0903 	bic.w	r9, r1, #3
  403dde:	ebc4 0109 	rsb	r1, r4, r9
  403de2:	290f      	cmp	r1, #15
  403de4:	dd13      	ble.n	403e0e <_malloc_r+0x222>
  403de6:	1933      	adds	r3, r6, r4
  403de8:	f044 0401 	orr.w	r4, r4, #1
  403dec:	68f2      	ldr	r2, [r6, #12]
  403dee:	6074      	str	r4, [r6, #4]
  403df0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403df4:	60c2      	str	r2, [r0, #12]
  403df6:	6090      	str	r0, [r2, #8]
  403df8:	f041 0201 	orr.w	r2, r1, #1
  403dfc:	616b      	str	r3, [r5, #20]
  403dfe:	612b      	str	r3, [r5, #16]
  403e00:	f8c3 e00c 	str.w	lr, [r3, #12]
  403e04:	f8c3 e008 	str.w	lr, [r3, #8]
  403e08:	605a      	str	r2, [r3, #4]
  403e0a:	5059      	str	r1, [r3, r1]
  403e0c:	e00c      	b.n	403e28 <_malloc_r+0x23c>
  403e0e:	2900      	cmp	r1, #0
  403e10:	db0e      	blt.n	403e30 <_malloc_r+0x244>
  403e12:	eb06 0109 	add.w	r1, r6, r9
  403e16:	684b      	ldr	r3, [r1, #4]
  403e18:	f043 0301 	orr.w	r3, r3, #1
  403e1c:	604b      	str	r3, [r1, #4]
  403e1e:	68f3      	ldr	r3, [r6, #12]
  403e20:	f856 2f08 	ldr.w	r2, [r6, #8]!
  403e24:	60d3      	str	r3, [r2, #12]
  403e26:	609a      	str	r2, [r3, #8]
  403e28:	4638      	mov	r0, r7
  403e2a:	f000 f91d 	bl	404068 <__malloc_unlock>
  403e2e:	e0de      	b.n	403fee <_malloc_r+0x402>
  403e30:	68f6      	ldr	r6, [r6, #12]
  403e32:	e7cf      	b.n	403dd4 <_malloc_r+0x1e8>
  403e34:	f10c 0c01 	add.w	ip, ip, #1
  403e38:	f01c 0f03 	tst.w	ip, #3
  403e3c:	f108 0808 	add.w	r8, r8, #8
  403e40:	d1c6      	bne.n	403dd0 <_malloc_r+0x1e4>
  403e42:	0791      	lsls	r1, r2, #30
  403e44:	d104      	bne.n	403e50 <_malloc_r+0x264>
  403e46:	686a      	ldr	r2, [r5, #4]
  403e48:	ea22 0203 	bic.w	r2, r2, r3
  403e4c:	606a      	str	r2, [r5, #4]
  403e4e:	e006      	b.n	403e5e <_malloc_r+0x272>
  403e50:	f1a0 0108 	sub.w	r1, r0, #8
  403e54:	6800      	ldr	r0, [r0, #0]
  403e56:	4288      	cmp	r0, r1
  403e58:	f102 32ff 	add.w	r2, r2, #4294967295
  403e5c:	d0f1      	beq.n	403e42 <_malloc_r+0x256>
  403e5e:	6869      	ldr	r1, [r5, #4]
  403e60:	005b      	lsls	r3, r3, #1
  403e62:	428b      	cmp	r3, r1
  403e64:	d806      	bhi.n	403e74 <_malloc_r+0x288>
  403e66:	b12b      	cbz	r3, 403e74 <_malloc_r+0x288>
  403e68:	4662      	mov	r2, ip
  403e6a:	420b      	tst	r3, r1
  403e6c:	d1ac      	bne.n	403dc8 <_malloc_r+0x1dc>
  403e6e:	3204      	adds	r2, #4
  403e70:	005b      	lsls	r3, r3, #1
  403e72:	e7fa      	b.n	403e6a <_malloc_r+0x27e>
  403e74:	f8d5 9008 	ldr.w	r9, [r5, #8]
  403e78:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403e7c:	f023 0b03 	bic.w	fp, r3, #3
  403e80:	45a3      	cmp	fp, r4
  403e82:	d304      	bcc.n	403e8e <_malloc_r+0x2a2>
  403e84:	ebc4 030b 	rsb	r3, r4, fp
  403e88:	2b0f      	cmp	r3, #15
  403e8a:	f300 80a3 	bgt.w	403fd4 <_malloc_r+0x3e8>
  403e8e:	4908      	ldr	r1, [pc, #32]	; (403eb0 <_malloc_r+0x2c4>)
  403e90:	680a      	ldr	r2, [r1, #0]
  403e92:	eb04 0a02 	add.w	sl, r4, r2
  403e96:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
  403e9a:	3201      	adds	r2, #1
  403e9c:	eb09 030b 	add.w	r3, r9, fp
  403ea0:	4688      	mov	r8, r1
  403ea2:	d107      	bne.n	403eb4 <_malloc_r+0x2c8>
  403ea4:	f10a 0a10 	add.w	sl, sl, #16
  403ea8:	e00c      	b.n	403ec4 <_malloc_r+0x2d8>
  403eaa:	bf00      	nop
  403eac:	200004c4 	.word	0x200004c4
  403eb0:	2000096c 	.word	0x2000096c
  403eb4:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  403eb8:	f10a 0a0f 	add.w	sl, sl, #15
  403ebc:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  403ec0:	f02a 0a0f 	bic.w	sl, sl, #15
  403ec4:	4638      	mov	r0, r7
  403ec6:	4651      	mov	r1, sl
  403ec8:	9301      	str	r3, [sp, #4]
  403eca:	f000 fe83 	bl	404bd4 <_sbrk_r>
  403ece:	1c42      	adds	r2, r0, #1
  403ed0:	4606      	mov	r6, r0
  403ed2:	9b01      	ldr	r3, [sp, #4]
  403ed4:	d06f      	beq.n	403fb6 <_malloc_r+0x3ca>
  403ed6:	4298      	cmp	r0, r3
  403ed8:	d201      	bcs.n	403ede <_malloc_r+0x2f2>
  403eda:	45a9      	cmp	r9, r5
  403edc:	d16b      	bne.n	403fb6 <_malloc_r+0x3ca>
  403ede:	f8d8 2004 	ldr.w	r2, [r8, #4]
  403ee2:	429e      	cmp	r6, r3
  403ee4:	4452      	add	r2, sl
  403ee6:	f8c8 2004 	str.w	r2, [r8, #4]
  403eea:	d108      	bne.n	403efe <_malloc_r+0x312>
  403eec:	f3c6 010b 	ubfx	r1, r6, #0, #12
  403ef0:	b929      	cbnz	r1, 403efe <_malloc_r+0x312>
  403ef2:	68ab      	ldr	r3, [r5, #8]
  403ef4:	44da      	add	sl, fp
  403ef6:	f04a 0201 	orr.w	r2, sl, #1
  403efa:	605a      	str	r2, [r3, #4]
  403efc:	e04d      	b.n	403f9a <_malloc_r+0x3ae>
  403efe:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
  403f02:	3101      	adds	r1, #1
  403f04:	d103      	bne.n	403f0e <_malloc_r+0x322>
  403f06:	4b3c      	ldr	r3, [pc, #240]	; (403ff8 <_malloc_r+0x40c>)
  403f08:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
  403f0c:	e003      	b.n	403f16 <_malloc_r+0x32a>
  403f0e:	1af3      	subs	r3, r6, r3
  403f10:	441a      	add	r2, r3
  403f12:	f8c8 2004 	str.w	r2, [r8, #4]
  403f16:	f016 0307 	ands.w	r3, r6, #7
  403f1a:	bf1c      	itt	ne
  403f1c:	f1c3 0308 	rsbne	r3, r3, #8
  403f20:	18f6      	addne	r6, r6, r3
  403f22:	44b2      	add	sl, r6
  403f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403f28:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  403f2c:	ebca 0a03 	rsb	sl, sl, r3
  403f30:	4651      	mov	r1, sl
  403f32:	4638      	mov	r0, r7
  403f34:	f000 fe4e 	bl	404bd4 <_sbrk_r>
  403f38:	1c43      	adds	r3, r0, #1
  403f3a:	bf04      	itt	eq
  403f3c:	4630      	moveq	r0, r6
  403f3e:	f04f 0a00 	moveq.w	sl, #0
  403f42:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403f46:	60ae      	str	r6, [r5, #8]
  403f48:	1b80      	subs	r0, r0, r6
  403f4a:	4450      	add	r0, sl
  403f4c:	4453      	add	r3, sl
  403f4e:	f040 0001 	orr.w	r0, r0, #1
  403f52:	45a9      	cmp	r9, r5
  403f54:	f8c8 3004 	str.w	r3, [r8, #4]
  403f58:	6070      	str	r0, [r6, #4]
  403f5a:	d01e      	beq.n	403f9a <_malloc_r+0x3ae>
  403f5c:	f1bb 0f0f 	cmp.w	fp, #15
  403f60:	d802      	bhi.n	403f68 <_malloc_r+0x37c>
  403f62:	2301      	movs	r3, #1
  403f64:	6073      	str	r3, [r6, #4]
  403f66:	e026      	b.n	403fb6 <_malloc_r+0x3ca>
  403f68:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403f6c:	f1ab 0b0c 	sub.w	fp, fp, #12
  403f70:	f02b 0b07 	bic.w	fp, fp, #7
  403f74:	f003 0301 	and.w	r3, r3, #1
  403f78:	ea4b 0303 	orr.w	r3, fp, r3
  403f7c:	f8c9 3004 	str.w	r3, [r9, #4]
  403f80:	eb09 030b 	add.w	r3, r9, fp
  403f84:	2205      	movs	r2, #5
  403f86:	f1bb 0f0f 	cmp.w	fp, #15
  403f8a:	605a      	str	r2, [r3, #4]
  403f8c:	609a      	str	r2, [r3, #8]
  403f8e:	d904      	bls.n	403f9a <_malloc_r+0x3ae>
  403f90:	4638      	mov	r0, r7
  403f92:	f109 0108 	add.w	r1, r9, #8
  403f96:	f7ff fd2f 	bl	4039f8 <_free_r>
  403f9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403f9e:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
  403fa2:	4293      	cmp	r3, r2
  403fa4:	bf84      	itt	hi
  403fa6:	4a15      	ldrhi	r2, [pc, #84]	; (403ffc <_malloc_r+0x410>)
  403fa8:	62d3      	strhi	r3, [r2, #44]	; 0x2c
  403faa:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
  403fae:	4293      	cmp	r3, r2
  403fb0:	bf84      	itt	hi
  403fb2:	4a12      	ldrhi	r2, [pc, #72]	; (403ffc <_malloc_r+0x410>)
  403fb4:	6313      	strhi	r3, [r2, #48]	; 0x30
  403fb6:	68ab      	ldr	r3, [r5, #8]
  403fb8:	685a      	ldr	r2, [r3, #4]
  403fba:	f022 0203 	bic.w	r2, r2, #3
  403fbe:	42a2      	cmp	r2, r4
  403fc0:	ebc4 0302 	rsb	r3, r4, r2
  403fc4:	d301      	bcc.n	403fca <_malloc_r+0x3de>
  403fc6:	2b0f      	cmp	r3, #15
  403fc8:	dc04      	bgt.n	403fd4 <_malloc_r+0x3e8>
  403fca:	4638      	mov	r0, r7
  403fcc:	f000 f84c 	bl	404068 <__malloc_unlock>
  403fd0:	2600      	movs	r6, #0
  403fd2:	e00c      	b.n	403fee <_malloc_r+0x402>
  403fd4:	68ae      	ldr	r6, [r5, #8]
  403fd6:	f044 0201 	orr.w	r2, r4, #1
  403fda:	4434      	add	r4, r6
  403fdc:	f043 0301 	orr.w	r3, r3, #1
  403fe0:	6072      	str	r2, [r6, #4]
  403fe2:	60ac      	str	r4, [r5, #8]
  403fe4:	6063      	str	r3, [r4, #4]
  403fe6:	4638      	mov	r0, r7
  403fe8:	f000 f83e 	bl	404068 <__malloc_unlock>
  403fec:	3608      	adds	r6, #8
  403fee:	4630      	mov	r0, r6
  403ff0:	b003      	add	sp, #12
  403ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ff6:	bf00      	nop
  403ff8:	200004c4 	.word	0x200004c4
  403ffc:	2000096c 	.word	0x2000096c

00404000 <memchr>:
  404000:	b510      	push	{r4, lr}
  404002:	b2c9      	uxtb	r1, r1
  404004:	4402      	add	r2, r0
  404006:	4290      	cmp	r0, r2
  404008:	4603      	mov	r3, r0
  40400a:	d006      	beq.n	40401a <memchr+0x1a>
  40400c:	781c      	ldrb	r4, [r3, #0]
  40400e:	428c      	cmp	r4, r1
  404010:	f100 0001 	add.w	r0, r0, #1
  404014:	d1f7      	bne.n	404006 <memchr+0x6>
  404016:	4618      	mov	r0, r3
  404018:	bd10      	pop	{r4, pc}
  40401a:	2000      	movs	r0, #0
  40401c:	bd10      	pop	{r4, pc}

0040401e <memcpy>:
  40401e:	b510      	push	{r4, lr}
  404020:	2300      	movs	r3, #0
  404022:	4293      	cmp	r3, r2
  404024:	d003      	beq.n	40402e <memcpy+0x10>
  404026:	5ccc      	ldrb	r4, [r1, r3]
  404028:	54c4      	strb	r4, [r0, r3]
  40402a:	3301      	adds	r3, #1
  40402c:	e7f9      	b.n	404022 <memcpy+0x4>
  40402e:	bd10      	pop	{r4, pc}

00404030 <memmove>:
  404030:	4281      	cmp	r1, r0
  404032:	b570      	push	{r4, r5, r6, lr}
  404034:	d301      	bcc.n	40403a <memmove+0xa>
  404036:	2300      	movs	r3, #0
  404038:	e00e      	b.n	404058 <memmove+0x28>
  40403a:	188c      	adds	r4, r1, r2
  40403c:	42a0      	cmp	r0, r4
  40403e:	d2fa      	bcs.n	404036 <memmove+0x6>
  404040:	1885      	adds	r5, r0, r2
  404042:	4613      	mov	r3, r2
  404044:	f113 33ff 	adds.w	r3, r3, #4294967295
  404048:	d305      	bcc.n	404056 <memmove+0x26>
  40404a:	4251      	negs	r1, r2
  40404c:	1866      	adds	r6, r4, r1
  40404e:	4429      	add	r1, r5
  404050:	5cf6      	ldrb	r6, [r6, r3]
  404052:	54ce      	strb	r6, [r1, r3]
  404054:	e7f6      	b.n	404044 <memmove+0x14>
  404056:	bd70      	pop	{r4, r5, r6, pc}
  404058:	4293      	cmp	r3, r2
  40405a:	d003      	beq.n	404064 <memmove+0x34>
  40405c:	5ccc      	ldrb	r4, [r1, r3]
  40405e:	54c4      	strb	r4, [r0, r3]
  404060:	3301      	adds	r3, #1
  404062:	e7f9      	b.n	404058 <memmove+0x28>
  404064:	bd70      	pop	{r4, r5, r6, pc}

00404066 <__malloc_lock>:
  404066:	4770      	bx	lr

00404068 <__malloc_unlock>:
  404068:	4770      	bx	lr
	...

0040406c <_Balloc>:
  40406c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40406e:	b570      	push	{r4, r5, r6, lr}
  404070:	4605      	mov	r5, r0
  404072:	460c      	mov	r4, r1
  404074:	b13b      	cbz	r3, 404086 <_Balloc+0x1a>
  404076:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  404078:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  40407c:	b160      	cbz	r0, 404098 <_Balloc+0x2c>
  40407e:	6801      	ldr	r1, [r0, #0]
  404080:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  404084:	e014      	b.n	4040b0 <_Balloc+0x44>
  404086:	2104      	movs	r1, #4
  404088:	2221      	movs	r2, #33	; 0x21
  40408a:	f001 fa77 	bl	40557c <_calloc_r>
  40408e:	64e8      	str	r0, [r5, #76]	; 0x4c
  404090:	2800      	cmp	r0, #0
  404092:	d1f0      	bne.n	404076 <_Balloc+0xa>
  404094:	2000      	movs	r0, #0
  404096:	bd70      	pop	{r4, r5, r6, pc}
  404098:	2101      	movs	r1, #1
  40409a:	fa01 f604 	lsl.w	r6, r1, r4
  40409e:	1d72      	adds	r2, r6, #5
  4040a0:	4628      	mov	r0, r5
  4040a2:	0092      	lsls	r2, r2, #2
  4040a4:	f001 fa6a 	bl	40557c <_calloc_r>
  4040a8:	2800      	cmp	r0, #0
  4040aa:	d0f3      	beq.n	404094 <_Balloc+0x28>
  4040ac:	6044      	str	r4, [r0, #4]
  4040ae:	6086      	str	r6, [r0, #8]
  4040b0:	2200      	movs	r2, #0
  4040b2:	6102      	str	r2, [r0, #16]
  4040b4:	60c2      	str	r2, [r0, #12]
  4040b6:	bd70      	pop	{r4, r5, r6, pc}

004040b8 <_Bfree>:
  4040b8:	b131      	cbz	r1, 4040c8 <_Bfree+0x10>
  4040ba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4040bc:	684a      	ldr	r2, [r1, #4]
  4040be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4040c2:	6008      	str	r0, [r1, #0]
  4040c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4040c8:	4770      	bx	lr

004040ca <__multadd>:
  4040ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4040ce:	460c      	mov	r4, r1
  4040d0:	461e      	mov	r6, r3
  4040d2:	690d      	ldr	r5, [r1, #16]
  4040d4:	4607      	mov	r7, r0
  4040d6:	3114      	adds	r1, #20
  4040d8:	2300      	movs	r3, #0
  4040da:	6808      	ldr	r0, [r1, #0]
  4040dc:	fa1f fc80 	uxth.w	ip, r0
  4040e0:	0c00      	lsrs	r0, r0, #16
  4040e2:	fb02 6c0c 	mla	ip, r2, ip, r6
  4040e6:	4350      	muls	r0, r2
  4040e8:	eb00 401c 	add.w	r0, r0, ip, lsr #16
  4040ec:	3301      	adds	r3, #1
  4040ee:	fa1f fc8c 	uxth.w	ip, ip
  4040f2:	0c06      	lsrs	r6, r0, #16
  4040f4:	42ab      	cmp	r3, r5
  4040f6:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
  4040fa:	f841 0b04 	str.w	r0, [r1], #4
  4040fe:	dbec      	blt.n	4040da <__multadd+0x10>
  404100:	b1d6      	cbz	r6, 404138 <__multadd+0x6e>
  404102:	68a3      	ldr	r3, [r4, #8]
  404104:	429d      	cmp	r5, r3
  404106:	db12      	blt.n	40412e <__multadd+0x64>
  404108:	6861      	ldr	r1, [r4, #4]
  40410a:	4638      	mov	r0, r7
  40410c:	3101      	adds	r1, #1
  40410e:	f7ff ffad 	bl	40406c <_Balloc>
  404112:	6922      	ldr	r2, [r4, #16]
  404114:	3202      	adds	r2, #2
  404116:	f104 010c 	add.w	r1, r4, #12
  40411a:	4680      	mov	r8, r0
  40411c:	0092      	lsls	r2, r2, #2
  40411e:	300c      	adds	r0, #12
  404120:	f7ff ff7d 	bl	40401e <memcpy>
  404124:	4621      	mov	r1, r4
  404126:	4638      	mov	r0, r7
  404128:	f7ff ffc6 	bl	4040b8 <_Bfree>
  40412c:	4644      	mov	r4, r8
  40412e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  404132:	3501      	adds	r5, #1
  404134:	615e      	str	r6, [r3, #20]
  404136:	6125      	str	r5, [r4, #16]
  404138:	4620      	mov	r0, r4
  40413a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040413e <__s2b>:
  40413e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404142:	4614      	mov	r4, r2
  404144:	4698      	mov	r8, r3
  404146:	f103 0208 	add.w	r2, r3, #8
  40414a:	2309      	movs	r3, #9
  40414c:	460d      	mov	r5, r1
  40414e:	fb92 f2f3 	sdiv	r2, r2, r3
  404152:	4606      	mov	r6, r0
  404154:	2301      	movs	r3, #1
  404156:	2100      	movs	r1, #0
  404158:	429a      	cmp	r2, r3
  40415a:	dd02      	ble.n	404162 <__s2b+0x24>
  40415c:	005b      	lsls	r3, r3, #1
  40415e:	3101      	adds	r1, #1
  404160:	e7fa      	b.n	404158 <__s2b+0x1a>
  404162:	4630      	mov	r0, r6
  404164:	f7ff ff82 	bl	40406c <_Balloc>
  404168:	9b08      	ldr	r3, [sp, #32]
  40416a:	6143      	str	r3, [r0, #20]
  40416c:	2c09      	cmp	r4, #9
  40416e:	f04f 0301 	mov.w	r3, #1
  404172:	4601      	mov	r1, r0
  404174:	6103      	str	r3, [r0, #16]
  404176:	dd11      	ble.n	40419c <__s2b+0x5e>
  404178:	f105 0909 	add.w	r9, r5, #9
  40417c:	464f      	mov	r7, r9
  40417e:	4425      	add	r5, r4
  404180:	f817 3b01 	ldrb.w	r3, [r7], #1
  404184:	4630      	mov	r0, r6
  404186:	220a      	movs	r2, #10
  404188:	3b30      	subs	r3, #48	; 0x30
  40418a:	f7ff ff9e 	bl	4040ca <__multadd>
  40418e:	42af      	cmp	r7, r5
  404190:	4601      	mov	r1, r0
  404192:	d1f5      	bne.n	404180 <__s2b+0x42>
  404194:	eb09 0704 	add.w	r7, r9, r4
  404198:	3f08      	subs	r7, #8
  40419a:	e002      	b.n	4041a2 <__s2b+0x64>
  40419c:	f105 070a 	add.w	r7, r5, #10
  4041a0:	2409      	movs	r4, #9
  4041a2:	4625      	mov	r5, r4
  4041a4:	4545      	cmp	r5, r8
  4041a6:	da09      	bge.n	4041bc <__s2b+0x7e>
  4041a8:	1b3b      	subs	r3, r7, r4
  4041aa:	4630      	mov	r0, r6
  4041ac:	5d5b      	ldrb	r3, [r3, r5]
  4041ae:	220a      	movs	r2, #10
  4041b0:	3b30      	subs	r3, #48	; 0x30
  4041b2:	f7ff ff8a 	bl	4040ca <__multadd>
  4041b6:	3501      	adds	r5, #1
  4041b8:	4601      	mov	r1, r0
  4041ba:	e7f3      	b.n	4041a4 <__s2b+0x66>
  4041bc:	4608      	mov	r0, r1
  4041be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004041c2 <__hi0bits>:
  4041c2:	0c03      	lsrs	r3, r0, #16
  4041c4:	041b      	lsls	r3, r3, #16
  4041c6:	b913      	cbnz	r3, 4041ce <__hi0bits+0xc>
  4041c8:	0400      	lsls	r0, r0, #16
  4041ca:	2310      	movs	r3, #16
  4041cc:	e000      	b.n	4041d0 <__hi0bits+0xe>
  4041ce:	2300      	movs	r3, #0
  4041d0:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4041d4:	bf04      	itt	eq
  4041d6:	0200      	lsleq	r0, r0, #8
  4041d8:	3308      	addeq	r3, #8
  4041da:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  4041de:	bf04      	itt	eq
  4041e0:	0100      	lsleq	r0, r0, #4
  4041e2:	3304      	addeq	r3, #4
  4041e4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  4041e8:	bf04      	itt	eq
  4041ea:	0080      	lsleq	r0, r0, #2
  4041ec:	3302      	addeq	r3, #2
  4041ee:	2800      	cmp	r0, #0
  4041f0:	db03      	blt.n	4041fa <__hi0bits+0x38>
  4041f2:	0042      	lsls	r2, r0, #1
  4041f4:	d503      	bpl.n	4041fe <__hi0bits+0x3c>
  4041f6:	1c58      	adds	r0, r3, #1
  4041f8:	4770      	bx	lr
  4041fa:	4618      	mov	r0, r3
  4041fc:	4770      	bx	lr
  4041fe:	2020      	movs	r0, #32
  404200:	4770      	bx	lr

00404202 <__lo0bits>:
  404202:	6803      	ldr	r3, [r0, #0]
  404204:	f013 0207 	ands.w	r2, r3, #7
  404208:	d00b      	beq.n	404222 <__lo0bits+0x20>
  40420a:	07d9      	lsls	r1, r3, #31
  40420c:	d422      	bmi.n	404254 <__lo0bits+0x52>
  40420e:	079a      	lsls	r2, r3, #30
  404210:	d503      	bpl.n	40421a <__lo0bits+0x18>
  404212:	085b      	lsrs	r3, r3, #1
  404214:	6003      	str	r3, [r0, #0]
  404216:	2001      	movs	r0, #1
  404218:	4770      	bx	lr
  40421a:	089b      	lsrs	r3, r3, #2
  40421c:	6003      	str	r3, [r0, #0]
  40421e:	2002      	movs	r0, #2
  404220:	4770      	bx	lr
  404222:	b299      	uxth	r1, r3
  404224:	b909      	cbnz	r1, 40422a <__lo0bits+0x28>
  404226:	0c1b      	lsrs	r3, r3, #16
  404228:	2210      	movs	r2, #16
  40422a:	f013 0fff 	tst.w	r3, #255	; 0xff
  40422e:	bf04      	itt	eq
  404230:	0a1b      	lsreq	r3, r3, #8
  404232:	3208      	addeq	r2, #8
  404234:	0719      	lsls	r1, r3, #28
  404236:	bf04      	itt	eq
  404238:	091b      	lsreq	r3, r3, #4
  40423a:	3204      	addeq	r2, #4
  40423c:	0799      	lsls	r1, r3, #30
  40423e:	bf04      	itt	eq
  404240:	089b      	lsreq	r3, r3, #2
  404242:	3202      	addeq	r2, #2
  404244:	07d9      	lsls	r1, r3, #31
  404246:	d402      	bmi.n	40424e <__lo0bits+0x4c>
  404248:	085b      	lsrs	r3, r3, #1
  40424a:	d005      	beq.n	404258 <__lo0bits+0x56>
  40424c:	3201      	adds	r2, #1
  40424e:	6003      	str	r3, [r0, #0]
  404250:	4610      	mov	r0, r2
  404252:	4770      	bx	lr
  404254:	2000      	movs	r0, #0
  404256:	4770      	bx	lr
  404258:	2020      	movs	r0, #32
  40425a:	4770      	bx	lr

0040425c <__i2b>:
  40425c:	b510      	push	{r4, lr}
  40425e:	460c      	mov	r4, r1
  404260:	2101      	movs	r1, #1
  404262:	f7ff ff03 	bl	40406c <_Balloc>
  404266:	2201      	movs	r2, #1
  404268:	6144      	str	r4, [r0, #20]
  40426a:	6102      	str	r2, [r0, #16]
  40426c:	bd10      	pop	{r4, pc}

0040426e <__multiply>:
  40426e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404272:	4616      	mov	r6, r2
  404274:	690a      	ldr	r2, [r1, #16]
  404276:	6933      	ldr	r3, [r6, #16]
  404278:	429a      	cmp	r2, r3
  40427a:	b085      	sub	sp, #20
  40427c:	460d      	mov	r5, r1
  40427e:	da01      	bge.n	404284 <__multiply+0x16>
  404280:	4635      	mov	r5, r6
  404282:	460e      	mov	r6, r1
  404284:	f8d5 8010 	ldr.w	r8, [r5, #16]
  404288:	6937      	ldr	r7, [r6, #16]
  40428a:	68ab      	ldr	r3, [r5, #8]
  40428c:	6869      	ldr	r1, [r5, #4]
  40428e:	eb08 0407 	add.w	r4, r8, r7
  404292:	429c      	cmp	r4, r3
  404294:	bfc8      	it	gt
  404296:	3101      	addgt	r1, #1
  404298:	f7ff fee8 	bl	40406c <_Balloc>
  40429c:	f100 0314 	add.w	r3, r0, #20
  4042a0:	eb03 0184 	add.w	r1, r3, r4, lsl #2
  4042a4:	9101      	str	r1, [sp, #4]
  4042a6:	461a      	mov	r2, r3
  4042a8:	f8dd a004 	ldr.w	sl, [sp, #4]
  4042ac:	4552      	cmp	r2, sl
  4042ae:	d203      	bcs.n	4042b8 <__multiply+0x4a>
  4042b0:	2100      	movs	r1, #0
  4042b2:	f842 1b04 	str.w	r1, [r2], #4
  4042b6:	e7f7      	b.n	4042a8 <__multiply+0x3a>
  4042b8:	f105 0114 	add.w	r1, r5, #20
  4042bc:	f106 0214 	add.w	r2, r6, #20
  4042c0:	eb01 0888 	add.w	r8, r1, r8, lsl #2
  4042c4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
  4042c8:	f8cd 8008 	str.w	r8, [sp, #8]
  4042cc:	9703      	str	r7, [sp, #12]
  4042ce:	9e03      	ldr	r6, [sp, #12]
  4042d0:	42b2      	cmp	r2, r6
  4042d2:	4615      	mov	r5, r2
  4042d4:	d256      	bcs.n	404384 <__multiply+0x116>
  4042d6:	f8b5 c000 	ldrh.w	ip, [r5]
  4042da:	3204      	adds	r2, #4
  4042dc:	f1bc 0f00 	cmp.w	ip, #0
  4042e0:	d025      	beq.n	40432e <__multiply+0xc0>
  4042e2:	460f      	mov	r7, r1
  4042e4:	461d      	mov	r5, r3
  4042e6:	2600      	movs	r6, #0
  4042e8:	f857 9b04 	ldr.w	r9, [r7], #4
  4042ec:	f8d5 8000 	ldr.w	r8, [r5]
  4042f0:	fa1f fb89 	uxth.w	fp, r9
  4042f4:	fa1f fa88 	uxth.w	sl, r8
  4042f8:	fb0c aa0b 	mla	sl, ip, fp, sl
  4042fc:	ea4f 4919 	mov.w	r9, r9, lsr #16
  404300:	ea4f 4818 	mov.w	r8, r8, lsr #16
  404304:	44b2      	add	sl, r6
  404306:	fb0c 8809 	mla	r8, ip, r9, r8
  40430a:	eb08 481a 	add.w	r8, r8, sl, lsr #16
  40430e:	fa1f fa8a 	uxth.w	sl, sl
  404312:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
  404316:	ea4f 4618 	mov.w	r6, r8, lsr #16
  40431a:	f8dd 8008 	ldr.w	r8, [sp, #8]
  40431e:	46ab      	mov	fp, r5
  404320:	45b8      	cmp	r8, r7
  404322:	f84b ab04 	str.w	sl, [fp], #4
  404326:	d901      	bls.n	40432c <__multiply+0xbe>
  404328:	465d      	mov	r5, fp
  40432a:	e7dd      	b.n	4042e8 <__multiply+0x7a>
  40432c:	606e      	str	r6, [r5, #4]
  40432e:	f832 8c02 	ldrh.w	r8, [r2, #-2]
  404332:	f1b8 0f00 	cmp.w	r8, #0
  404336:	d023      	beq.n	404380 <__multiply+0x112>
  404338:	681e      	ldr	r6, [r3, #0]
  40433a:	460f      	mov	r7, r1
  40433c:	461d      	mov	r5, r3
  40433e:	f04f 0900 	mov.w	r9, #0
  404342:	f8b7 a000 	ldrh.w	sl, [r7]
  404346:	f8b5 c002 	ldrh.w	ip, [r5, #2]
  40434a:	fb08 cc0a 	mla	ip, r8, sl, ip
  40434e:	44e1      	add	r9, ip
  404350:	b2b6      	uxth	r6, r6
  404352:	46ac      	mov	ip, r5
  404354:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
  404358:	f84c 6b04 	str.w	r6, [ip], #4
  40435c:	f857 6b04 	ldr.w	r6, [r7], #4
  404360:	f8b5 a004 	ldrh.w	sl, [r5, #4]
  404364:	0c36      	lsrs	r6, r6, #16
  404366:	fb08 a606 	mla	r6, r8, r6, sl
  40436a:	f8dd a008 	ldr.w	sl, [sp, #8]
  40436e:	eb06 4619 	add.w	r6, r6, r9, lsr #16
  404372:	4557      	cmp	r7, sl
  404374:	ea4f 4916 	mov.w	r9, r6, lsr #16
  404378:	d201      	bcs.n	40437e <__multiply+0x110>
  40437a:	4665      	mov	r5, ip
  40437c:	e7e1      	b.n	404342 <__multiply+0xd4>
  40437e:	606e      	str	r6, [r5, #4]
  404380:	3304      	adds	r3, #4
  404382:	e7a4      	b.n	4042ce <__multiply+0x60>
  404384:	9b01      	ldr	r3, [sp, #4]
  404386:	2c00      	cmp	r4, #0
  404388:	dc03      	bgt.n	404392 <__multiply+0x124>
  40438a:	6104      	str	r4, [r0, #16]
  40438c:	b005      	add	sp, #20
  40438e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404392:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  404396:	2a00      	cmp	r2, #0
  404398:	d1f7      	bne.n	40438a <__multiply+0x11c>
  40439a:	3c01      	subs	r4, #1
  40439c:	e7f3      	b.n	404386 <__multiply+0x118>

0040439e <__pow5mult>:
  40439e:	f012 0303 	ands.w	r3, r2, #3
  4043a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4043a6:	4605      	mov	r5, r0
  4043a8:	460e      	mov	r6, r1
  4043aa:	4617      	mov	r7, r2
  4043ac:	d007      	beq.n	4043be <__pow5mult+0x20>
  4043ae:	3b01      	subs	r3, #1
  4043b0:	4a19      	ldr	r2, [pc, #100]	; (404418 <__pow5mult+0x7a>)
  4043b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4043b6:	2300      	movs	r3, #0
  4043b8:	f7ff fe87 	bl	4040ca <__multadd>
  4043bc:	4606      	mov	r6, r0
  4043be:	10bf      	asrs	r7, r7, #2
  4043c0:	d027      	beq.n	404412 <__pow5mult+0x74>
  4043c2:	6cac      	ldr	r4, [r5, #72]	; 0x48
  4043c4:	b974      	cbnz	r4, 4043e4 <__pow5mult+0x46>
  4043c6:	4628      	mov	r0, r5
  4043c8:	f240 2171 	movw	r1, #625	; 0x271
  4043cc:	f7ff ff46 	bl	40425c <__i2b>
  4043d0:	2300      	movs	r3, #0
  4043d2:	64a8      	str	r0, [r5, #72]	; 0x48
  4043d4:	4604      	mov	r4, r0
  4043d6:	6003      	str	r3, [r0, #0]
  4043d8:	e004      	b.n	4043e4 <__pow5mult+0x46>
  4043da:	107f      	asrs	r7, r7, #1
  4043dc:	d019      	beq.n	404412 <__pow5mult+0x74>
  4043de:	6820      	ldr	r0, [r4, #0]
  4043e0:	b170      	cbz	r0, 404400 <__pow5mult+0x62>
  4043e2:	4604      	mov	r4, r0
  4043e4:	07fb      	lsls	r3, r7, #31
  4043e6:	d5f8      	bpl.n	4043da <__pow5mult+0x3c>
  4043e8:	4631      	mov	r1, r6
  4043ea:	4622      	mov	r2, r4
  4043ec:	4628      	mov	r0, r5
  4043ee:	f7ff ff3e 	bl	40426e <__multiply>
  4043f2:	4631      	mov	r1, r6
  4043f4:	4680      	mov	r8, r0
  4043f6:	4628      	mov	r0, r5
  4043f8:	f7ff fe5e 	bl	4040b8 <_Bfree>
  4043fc:	4646      	mov	r6, r8
  4043fe:	e7ec      	b.n	4043da <__pow5mult+0x3c>
  404400:	4628      	mov	r0, r5
  404402:	4621      	mov	r1, r4
  404404:	4622      	mov	r2, r4
  404406:	f7ff ff32 	bl	40426e <__multiply>
  40440a:	2300      	movs	r3, #0
  40440c:	6020      	str	r0, [r4, #0]
  40440e:	6003      	str	r3, [r0, #0]
  404410:	e7e7      	b.n	4043e2 <__pow5mult+0x44>
  404412:	4630      	mov	r0, r6
  404414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404418:	00405e88 	.word	0x00405e88

0040441c <__lshift>:
  40441c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404420:	460c      	mov	r4, r1
  404422:	ea4f 1a62 	mov.w	sl, r2, asr #5
  404426:	6923      	ldr	r3, [r4, #16]
  404428:	6849      	ldr	r1, [r1, #4]
  40442a:	eb0a 0903 	add.w	r9, sl, r3
  40442e:	68a3      	ldr	r3, [r4, #8]
  404430:	4680      	mov	r8, r0
  404432:	4615      	mov	r5, r2
  404434:	f109 0701 	add.w	r7, r9, #1
  404438:	429f      	cmp	r7, r3
  40443a:	dd02      	ble.n	404442 <__lshift+0x26>
  40443c:	3101      	adds	r1, #1
  40443e:	005b      	lsls	r3, r3, #1
  404440:	e7fa      	b.n	404438 <__lshift+0x1c>
  404442:	4640      	mov	r0, r8
  404444:	f7ff fe12 	bl	40406c <_Balloc>
  404448:	2300      	movs	r3, #0
  40444a:	4606      	mov	r6, r0
  40444c:	f100 0214 	add.w	r2, r0, #20
  404450:	4553      	cmp	r3, sl
  404452:	da04      	bge.n	40445e <__lshift+0x42>
  404454:	2100      	movs	r1, #0
  404456:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  40445a:	3301      	adds	r3, #1
  40445c:	e7f8      	b.n	404450 <__lshift+0x34>
  40445e:	6920      	ldr	r0, [r4, #16]
  404460:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
  404464:	f104 0314 	add.w	r3, r4, #20
  404468:	f015 0c1f 	ands.w	ip, r5, #31
  40446c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  404470:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
  404474:	d016      	beq.n	4044a4 <__lshift+0x88>
  404476:	f1cc 0a20 	rsb	sl, ip, #32
  40447a:	2500      	movs	r5, #0
  40447c:	6818      	ldr	r0, [r3, #0]
  40447e:	460a      	mov	r2, r1
  404480:	fa00 f00c 	lsl.w	r0, r0, ip
  404484:	4305      	orrs	r5, r0
  404486:	f842 5b04 	str.w	r5, [r2], #4
  40448a:	f853 5b04 	ldr.w	r5, [r3], #4
  40448e:	4573      	cmp	r3, lr
  404490:	fa25 f50a 	lsr.w	r5, r5, sl
  404494:	d201      	bcs.n	40449a <__lshift+0x7e>
  404496:	4611      	mov	r1, r2
  404498:	e7f0      	b.n	40447c <__lshift+0x60>
  40449a:	604d      	str	r5, [r1, #4]
  40449c:	b145      	cbz	r5, 4044b0 <__lshift+0x94>
  40449e:	f109 0702 	add.w	r7, r9, #2
  4044a2:	e005      	b.n	4044b0 <__lshift+0x94>
  4044a4:	f853 2b04 	ldr.w	r2, [r3], #4
  4044a8:	f841 2b04 	str.w	r2, [r1], #4
  4044ac:	4573      	cmp	r3, lr
  4044ae:	d3f9      	bcc.n	4044a4 <__lshift+0x88>
  4044b0:	3f01      	subs	r7, #1
  4044b2:	4640      	mov	r0, r8
  4044b4:	6137      	str	r7, [r6, #16]
  4044b6:	4621      	mov	r1, r4
  4044b8:	f7ff fdfe 	bl	4040b8 <_Bfree>
  4044bc:	4630      	mov	r0, r6
  4044be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004044c2 <__mcmp>:
  4044c2:	6902      	ldr	r2, [r0, #16]
  4044c4:	690b      	ldr	r3, [r1, #16]
  4044c6:	1ad2      	subs	r2, r2, r3
  4044c8:	b510      	push	{r4, lr}
  4044ca:	d113      	bne.n	4044f4 <__mcmp+0x32>
  4044cc:	009c      	lsls	r4, r3, #2
  4044ce:	3014      	adds	r0, #20
  4044d0:	f101 0214 	add.w	r2, r1, #20
  4044d4:	1903      	adds	r3, r0, r4
  4044d6:	4422      	add	r2, r4
  4044d8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4044dc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  4044e0:	428c      	cmp	r4, r1
  4044e2:	d003      	beq.n	4044ec <__mcmp+0x2a>
  4044e4:	d208      	bcs.n	4044f8 <__mcmp+0x36>
  4044e6:	f04f 30ff 	mov.w	r0, #4294967295
  4044ea:	bd10      	pop	{r4, pc}
  4044ec:	4298      	cmp	r0, r3
  4044ee:	d3f3      	bcc.n	4044d8 <__mcmp+0x16>
  4044f0:	2000      	movs	r0, #0
  4044f2:	bd10      	pop	{r4, pc}
  4044f4:	4610      	mov	r0, r2
  4044f6:	bd10      	pop	{r4, pc}
  4044f8:	2001      	movs	r0, #1
  4044fa:	bd10      	pop	{r4, pc}

004044fc <__mdiff>:
  4044fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404500:	4606      	mov	r6, r0
  404502:	460c      	mov	r4, r1
  404504:	4608      	mov	r0, r1
  404506:	4611      	mov	r1, r2
  404508:	4615      	mov	r5, r2
  40450a:	f7ff ffda 	bl	4044c2 <__mcmp>
  40450e:	1e07      	subs	r7, r0, #0
  404510:	d108      	bne.n	404524 <__mdiff+0x28>
  404512:	4630      	mov	r0, r6
  404514:	4639      	mov	r1, r7
  404516:	f7ff fda9 	bl	40406c <_Balloc>
  40451a:	2301      	movs	r3, #1
  40451c:	6103      	str	r3, [r0, #16]
  40451e:	6147      	str	r7, [r0, #20]
  404520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404524:	db01      	blt.n	40452a <__mdiff+0x2e>
  404526:	2700      	movs	r7, #0
  404528:	e003      	b.n	404532 <__mdiff+0x36>
  40452a:	4623      	mov	r3, r4
  40452c:	2701      	movs	r7, #1
  40452e:	462c      	mov	r4, r5
  404530:	461d      	mov	r5, r3
  404532:	6861      	ldr	r1, [r4, #4]
  404534:	4630      	mov	r0, r6
  404536:	f7ff fd99 	bl	40406c <_Balloc>
  40453a:	6922      	ldr	r2, [r4, #16]
  40453c:	692b      	ldr	r3, [r5, #16]
  40453e:	60c7      	str	r7, [r0, #12]
  404540:	3414      	adds	r4, #20
  404542:	f105 0614 	add.w	r6, r5, #20
  404546:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
  40454a:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
  40454e:	f100 0314 	add.w	r3, r0, #20
  404552:	2100      	movs	r1, #0
  404554:	f854 7b04 	ldr.w	r7, [r4], #4
  404558:	f856 9b04 	ldr.w	r9, [r6], #4
  40455c:	fa11 f187 	uxtah	r1, r1, r7
  404560:	fa1f f589 	uxth.w	r5, r9
  404564:	ea4f 4919 	mov.w	r9, r9, lsr #16
  404568:	ebc5 0801 	rsb	r8, r5, r1
  40456c:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
  404570:	eb07 4728 	add.w	r7, r7, r8, asr #16
  404574:	fa1f f888 	uxth.w	r8, r8
  404578:	1439      	asrs	r1, r7, #16
  40457a:	45b2      	cmp	sl, r6
  40457c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  404580:	4625      	mov	r5, r4
  404582:	f843 7b04 	str.w	r7, [r3], #4
  404586:	d8e5      	bhi.n	404554 <__mdiff+0x58>
  404588:	4565      	cmp	r5, ip
  40458a:	d20d      	bcs.n	4045a8 <__mdiff+0xac>
  40458c:	f855 4b04 	ldr.w	r4, [r5], #4
  404590:	fa11 f684 	uxtah	r6, r1, r4
  404594:	0c24      	lsrs	r4, r4, #16
  404596:	eb04 4426 	add.w	r4, r4, r6, asr #16
  40459a:	b2b6      	uxth	r6, r6
  40459c:	1421      	asrs	r1, r4, #16
  40459e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
  4045a2:	f843 4b04 	str.w	r4, [r3], #4
  4045a6:	e7ef      	b.n	404588 <__mdiff+0x8c>
  4045a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  4045ac:	b909      	cbnz	r1, 4045b2 <__mdiff+0xb6>
  4045ae:	3a01      	subs	r2, #1
  4045b0:	e7fa      	b.n	4045a8 <__mdiff+0xac>
  4045b2:	6102      	str	r2, [r0, #16]
  4045b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004045b8 <__ulp>:
  4045b8:	4b0f      	ldr	r3, [pc, #60]	; (4045f8 <__ulp+0x40>)
  4045ba:	400b      	ands	r3, r1
  4045bc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  4045c0:	2b00      	cmp	r3, #0
  4045c2:	dd01      	ble.n	4045c8 <__ulp+0x10>
  4045c4:	4619      	mov	r1, r3
  4045c6:	e009      	b.n	4045dc <__ulp+0x24>
  4045c8:	425b      	negs	r3, r3
  4045ca:	151b      	asrs	r3, r3, #20
  4045cc:	2b13      	cmp	r3, #19
  4045ce:	f04f 0100 	mov.w	r1, #0
  4045d2:	dc05      	bgt.n	4045e0 <__ulp+0x28>
  4045d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4045d8:	fa42 f103 	asr.w	r1, r2, r3
  4045dc:	2000      	movs	r0, #0
  4045de:	4770      	bx	lr
  4045e0:	2b32      	cmp	r3, #50	; 0x32
  4045e2:	f04f 0201 	mov.w	r2, #1
  4045e6:	bfda      	itte	le
  4045e8:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
  4045ec:	fa02 f303 	lslle.w	r3, r2, r3
  4045f0:	4613      	movgt	r3, r2
  4045f2:	4618      	mov	r0, r3
  4045f4:	4770      	bx	lr
  4045f6:	bf00      	nop
  4045f8:	7ff00000 	.word	0x7ff00000

004045fc <__b2d>:
  4045fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404600:	6906      	ldr	r6, [r0, #16]
  404602:	f100 0714 	add.w	r7, r0, #20
  404606:	eb07 0686 	add.w	r6, r7, r6, lsl #2
  40460a:	4688      	mov	r8, r1
  40460c:	f856 4c04 	ldr.w	r4, [r6, #-4]
  404610:	4620      	mov	r0, r4
  404612:	f7ff fdd6 	bl	4041c2 <__hi0bits>
  404616:	f1c0 0320 	rsb	r3, r0, #32
  40461a:	280a      	cmp	r0, #10
  40461c:	f1a6 0504 	sub.w	r5, r6, #4
  404620:	f8c8 3000 	str.w	r3, [r8]
  404624:	dc14      	bgt.n	404650 <__b2d+0x54>
  404626:	42bd      	cmp	r5, r7
  404628:	f1c0 010b 	rsb	r1, r0, #11
  40462c:	bf88      	it	hi
  40462e:	f856 5c08 	ldrhi.w	r5, [r6, #-8]
  404632:	fa24 fc01 	lsr.w	ip, r4, r1
  404636:	bf98      	it	ls
  404638:	2500      	movls	r5, #0
  40463a:	3015      	adds	r0, #21
  40463c:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
  404640:	fa25 f101 	lsr.w	r1, r5, r1
  404644:	4084      	lsls	r4, r0
  404646:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  40464a:	ea41 0204 	orr.w	r2, r1, r4
  40464e:	e024      	b.n	40469a <__b2d+0x9e>
  404650:	42bd      	cmp	r5, r7
  404652:	bf86      	itte	hi
  404654:	f1a6 0508 	subhi.w	r5, r6, #8
  404658:	f856 1c08 	ldrhi.w	r1, [r6, #-8]
  40465c:	2100      	movls	r1, #0
  40465e:	f1b0 060b 	subs.w	r6, r0, #11
  404662:	d015      	beq.n	404690 <__b2d+0x94>
  404664:	40b4      	lsls	r4, r6
  404666:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
  40466a:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
  40466e:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
  404672:	fa21 fc00 	lsr.w	ip, r1, r0
  404676:	42bd      	cmp	r5, r7
  404678:	ea44 030c 	orr.w	r3, r4, ip
  40467c:	bf8c      	ite	hi
  40467e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
  404682:	2400      	movls	r4, #0
  404684:	fa24 f000 	lsr.w	r0, r4, r0
  404688:	40b1      	lsls	r1, r6
  40468a:	ea40 0201 	orr.w	r2, r0, r1
  40468e:	e004      	b.n	40469a <__b2d+0x9e>
  404690:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
  404694:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  404698:	460a      	mov	r2, r1
  40469a:	4610      	mov	r0, r2
  40469c:	4619      	mov	r1, r3
  40469e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004046a2 <__d2b>:
  4046a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4046a6:	2101      	movs	r1, #1
  4046a8:	461d      	mov	r5, r3
  4046aa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  4046ae:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  4046b2:	4614      	mov	r4, r2
  4046b4:	f7ff fcda 	bl	40406c <_Balloc>
  4046b8:	f3c5 570a 	ubfx	r7, r5, #20, #11
  4046bc:	4606      	mov	r6, r0
  4046be:	f3c5 0313 	ubfx	r3, r5, #0, #20
  4046c2:	b10f      	cbz	r7, 4046c8 <__d2b+0x26>
  4046c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4046c8:	9301      	str	r3, [sp, #4]
  4046ca:	b1d4      	cbz	r4, 404702 <__d2b+0x60>
  4046cc:	a802      	add	r0, sp, #8
  4046ce:	f840 4d08 	str.w	r4, [r0, #-8]!
  4046d2:	4668      	mov	r0, sp
  4046d4:	f7ff fd95 	bl	404202 <__lo0bits>
  4046d8:	9b00      	ldr	r3, [sp, #0]
  4046da:	b148      	cbz	r0, 4046f0 <__d2b+0x4e>
  4046dc:	9a01      	ldr	r2, [sp, #4]
  4046de:	f1c0 0120 	rsb	r1, r0, #32
  4046e2:	fa02 f101 	lsl.w	r1, r2, r1
  4046e6:	430b      	orrs	r3, r1
  4046e8:	40c2      	lsrs	r2, r0
  4046ea:	6173      	str	r3, [r6, #20]
  4046ec:	9201      	str	r2, [sp, #4]
  4046ee:	e000      	b.n	4046f2 <__d2b+0x50>
  4046f0:	6173      	str	r3, [r6, #20]
  4046f2:	9b01      	ldr	r3, [sp, #4]
  4046f4:	61b3      	str	r3, [r6, #24]
  4046f6:	2b00      	cmp	r3, #0
  4046f8:	bf0c      	ite	eq
  4046fa:	2401      	moveq	r4, #1
  4046fc:	2402      	movne	r4, #2
  4046fe:	6134      	str	r4, [r6, #16]
  404700:	e007      	b.n	404712 <__d2b+0x70>
  404702:	a801      	add	r0, sp, #4
  404704:	f7ff fd7d 	bl	404202 <__lo0bits>
  404708:	2401      	movs	r4, #1
  40470a:	9b01      	ldr	r3, [sp, #4]
  40470c:	6173      	str	r3, [r6, #20]
  40470e:	6134      	str	r4, [r6, #16]
  404710:	3020      	adds	r0, #32
  404712:	b13f      	cbz	r7, 404724 <__d2b+0x82>
  404714:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  404718:	4407      	add	r7, r0
  40471a:	f8c9 7000 	str.w	r7, [r9]
  40471e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  404722:	e00a      	b.n	40473a <__d2b+0x98>
  404724:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  404728:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40472c:	f8c9 0000 	str.w	r0, [r9]
  404730:	6918      	ldr	r0, [r3, #16]
  404732:	f7ff fd46 	bl	4041c2 <__hi0bits>
  404736:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  40473a:	f8c8 0000 	str.w	r0, [r8]
  40473e:	4630      	mov	r0, r6
  404740:	b003      	add	sp, #12
  404742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00404746 <__ratio>:
  404746:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  40474a:	460e      	mov	r6, r1
  40474c:	4669      	mov	r1, sp
  40474e:	4680      	mov	r8, r0
  404750:	f7ff ff54 	bl	4045fc <__b2d>
  404754:	460d      	mov	r5, r1
  404756:	4604      	mov	r4, r0
  404758:	a901      	add	r1, sp, #4
  40475a:	4630      	mov	r0, r6
  40475c:	f7ff ff4e 	bl	4045fc <__b2d>
  404760:	9f00      	ldr	r7, [sp, #0]
  404762:	460b      	mov	r3, r1
  404764:	9901      	ldr	r1, [sp, #4]
  404766:	4602      	mov	r2, r0
  404768:	1a7f      	subs	r7, r7, r1
  40476a:	f8d8 0010 	ldr.w	r0, [r8, #16]
  40476e:	6931      	ldr	r1, [r6, #16]
  404770:	1a41      	subs	r1, r0, r1
  404772:	eb07 1141 	add.w	r1, r7, r1, lsl #5
  404776:	2900      	cmp	r1, #0
  404778:	bfcc      	ite	gt
  40477a:	eb05 5501 	addgt.w	r5, r5, r1, lsl #20
  40477e:	eba3 5301 	suble.w	r3, r3, r1, lsl #20
  404782:	4620      	mov	r0, r4
  404784:	4629      	mov	r1, r5
  404786:	f7fd f959 	bl	401a3c <__aeabi_ddiv>
  40478a:	b002      	add	sp, #8
  40478c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404790 <_mprec_log10>:
  404790:	2817      	cmp	r0, #23
  404792:	b510      	push	{r4, lr}
  404794:	4604      	mov	r4, r0
  404796:	dc05      	bgt.n	4047a4 <_mprec_log10+0x14>
  404798:	4b07      	ldr	r3, [pc, #28]	; (4047b8 <_mprec_log10+0x28>)
  40479a:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
  40479e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  4047a2:	bd10      	pop	{r4, pc}
  4047a4:	4905      	ldr	r1, [pc, #20]	; (4047bc <_mprec_log10+0x2c>)
  4047a6:	2000      	movs	r0, #0
  4047a8:	2200      	movs	r2, #0
  4047aa:	4b05      	ldr	r3, [pc, #20]	; (4047c0 <_mprec_log10+0x30>)
  4047ac:	f7fd f81c 	bl	4017e8 <__aeabi_dmul>
  4047b0:	3c01      	subs	r4, #1
  4047b2:	d1f9      	bne.n	4047a8 <_mprec_log10+0x18>
  4047b4:	bd10      	pop	{r4, pc}
  4047b6:	bf00      	nop
  4047b8:	00405e88 	.word	0x00405e88
  4047bc:	3ff00000 	.word	0x3ff00000
  4047c0:	40240000 	.word	0x40240000

004047c4 <__copybits>:
  4047c4:	b510      	push	{r4, lr}
  4047c6:	3901      	subs	r1, #1
  4047c8:	f102 0314 	add.w	r3, r2, #20
  4047cc:	1149      	asrs	r1, r1, #5
  4047ce:	6912      	ldr	r2, [r2, #16]
  4047d0:	3101      	adds	r1, #1
  4047d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  4047d6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  4047da:	4293      	cmp	r3, r2
  4047dc:	d204      	bcs.n	4047e8 <__copybits+0x24>
  4047de:	f853 4b04 	ldr.w	r4, [r3], #4
  4047e2:	f840 4b04 	str.w	r4, [r0], #4
  4047e6:	e7f8      	b.n	4047da <__copybits+0x16>
  4047e8:	4288      	cmp	r0, r1
  4047ea:	d203      	bcs.n	4047f4 <__copybits+0x30>
  4047ec:	2300      	movs	r3, #0
  4047ee:	f840 3b04 	str.w	r3, [r0], #4
  4047f2:	e7f9      	b.n	4047e8 <__copybits+0x24>
  4047f4:	bd10      	pop	{r4, pc}

004047f6 <__any_on>:
  4047f6:	f100 0214 	add.w	r2, r0, #20
  4047fa:	6900      	ldr	r0, [r0, #16]
  4047fc:	114b      	asrs	r3, r1, #5
  4047fe:	4283      	cmp	r3, r0
  404800:	b510      	push	{r4, lr}
  404802:	dc0c      	bgt.n	40481e <__any_on+0x28>
  404804:	da0c      	bge.n	404820 <__any_on+0x2a>
  404806:	f011 011f 	ands.w	r1, r1, #31
  40480a:	d009      	beq.n	404820 <__any_on+0x2a>
  40480c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  404810:	fa20 f401 	lsr.w	r4, r0, r1
  404814:	fa04 f101 	lsl.w	r1, r4, r1
  404818:	4281      	cmp	r1, r0
  40481a:	d10e      	bne.n	40483a <__any_on+0x44>
  40481c:	e000      	b.n	404820 <__any_on+0x2a>
  40481e:	4603      	mov	r3, r0
  404820:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  404824:	4293      	cmp	r3, r2
  404826:	4619      	mov	r1, r3
  404828:	d905      	bls.n	404836 <__any_on+0x40>
  40482a:	f851 1c04 	ldr.w	r1, [r1, #-4]
  40482e:	3b04      	subs	r3, #4
  404830:	2900      	cmp	r1, #0
  404832:	d0f7      	beq.n	404824 <__any_on+0x2e>
  404834:	e001      	b.n	40483a <__any_on+0x44>
  404836:	2000      	movs	r0, #0
  404838:	bd10      	pop	{r4, pc}
  40483a:	2001      	movs	r0, #1
  40483c:	bd10      	pop	{r4, pc}
  40483e:	bf00      	nop

00404840 <_realloc_r>:
  404840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404844:	4681      	mov	r9, r0
  404846:	460c      	mov	r4, r1
  404848:	b929      	cbnz	r1, 404856 <_realloc_r+0x16>
  40484a:	4611      	mov	r1, r2
  40484c:	b003      	add	sp, #12
  40484e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404852:	f7ff b9cb 	b.w	403bec <_malloc_r>
  404856:	9201      	str	r2, [sp, #4]
  404858:	f7ff fc05 	bl	404066 <__malloc_lock>
  40485c:	9a01      	ldr	r2, [sp, #4]
  40485e:	f854 5c04 	ldr.w	r5, [r4, #-4]
  404862:	f102 070b 	add.w	r7, r2, #11
  404866:	2f16      	cmp	r7, #22
  404868:	f1a4 0808 	sub.w	r8, r4, #8
  40486c:	f025 0603 	bic.w	r6, r5, #3
  404870:	d903      	bls.n	40487a <_realloc_r+0x3a>
  404872:	f037 0707 	bics.w	r7, r7, #7
  404876:	d501      	bpl.n	40487c <_realloc_r+0x3c>
  404878:	e002      	b.n	404880 <_realloc_r+0x40>
  40487a:	2710      	movs	r7, #16
  40487c:	4297      	cmp	r7, r2
  40487e:	d204      	bcs.n	40488a <_realloc_r+0x4a>
  404880:	230c      	movs	r3, #12
  404882:	f8c9 3000 	str.w	r3, [r9]
  404886:	2000      	movs	r0, #0
  404888:	e17e      	b.n	404b88 <_realloc_r+0x348>
  40488a:	42be      	cmp	r6, r7
  40488c:	f280 8154 	bge.w	404b38 <_realloc_r+0x2f8>
  404890:	49a2      	ldr	r1, [pc, #648]	; (404b1c <_realloc_r+0x2dc>)
  404892:	f8d1 e008 	ldr.w	lr, [r1, #8]
  404896:	eb08 0306 	add.w	r3, r8, r6
  40489a:	4573      	cmp	r3, lr
  40489c:	468b      	mov	fp, r1
  40489e:	6858      	ldr	r0, [r3, #4]
  4048a0:	d005      	beq.n	4048ae <_realloc_r+0x6e>
  4048a2:	f020 0101 	bic.w	r1, r0, #1
  4048a6:	4419      	add	r1, r3
  4048a8:	6849      	ldr	r1, [r1, #4]
  4048aa:	07c9      	lsls	r1, r1, #31
  4048ac:	d425      	bmi.n	4048fa <_realloc_r+0xba>
  4048ae:	f020 0003 	bic.w	r0, r0, #3
  4048b2:	4573      	cmp	r3, lr
  4048b4:	eb00 0106 	add.w	r1, r0, r6
  4048b8:	d117      	bne.n	4048ea <_realloc_r+0xaa>
  4048ba:	f107 0c10 	add.w	ip, r7, #16
  4048be:	4561      	cmp	r1, ip
  4048c0:	db1d      	blt.n	4048fe <_realloc_r+0xbe>
  4048c2:	eb08 0507 	add.w	r5, r8, r7
  4048c6:	1bc9      	subs	r1, r1, r7
  4048c8:	f041 0101 	orr.w	r1, r1, #1
  4048cc:	f8cb 5008 	str.w	r5, [fp, #8]
  4048d0:	6069      	str	r1, [r5, #4]
  4048d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4048d6:	f003 0301 	and.w	r3, r3, #1
  4048da:	431f      	orrs	r7, r3
  4048dc:	4648      	mov	r0, r9
  4048de:	f844 7c04 	str.w	r7, [r4, #-4]
  4048e2:	f7ff fbc1 	bl	404068 <__malloc_unlock>
  4048e6:	4620      	mov	r0, r4
  4048e8:	e14e      	b.n	404b88 <_realloc_r+0x348>
  4048ea:	42b9      	cmp	r1, r7
  4048ec:	db07      	blt.n	4048fe <_realloc_r+0xbe>
  4048ee:	68da      	ldr	r2, [r3, #12]
  4048f0:	689b      	ldr	r3, [r3, #8]
  4048f2:	460e      	mov	r6, r1
  4048f4:	60da      	str	r2, [r3, #12]
  4048f6:	6093      	str	r3, [r2, #8]
  4048f8:	e11e      	b.n	404b38 <_realloc_r+0x2f8>
  4048fa:	2000      	movs	r0, #0
  4048fc:	4603      	mov	r3, r0
  4048fe:	07e9      	lsls	r1, r5, #31
  404900:	f100 80c9 	bmi.w	404a96 <_realloc_r+0x256>
  404904:	f854 5c08 	ldr.w	r5, [r4, #-8]
  404908:	ebc5 0508 	rsb	r5, r5, r8
  40490c:	6869      	ldr	r1, [r5, #4]
  40490e:	f021 0103 	bic.w	r1, r1, #3
  404912:	eb01 0a06 	add.w	sl, r1, r6
  404916:	2b00      	cmp	r3, #0
  404918:	f000 8088 	beq.w	404a2c <_realloc_r+0x1ec>
  40491c:	4573      	cmp	r3, lr
  40491e:	d14b      	bne.n	4049b8 <_realloc_r+0x178>
  404920:	eb0a 0300 	add.w	r3, sl, r0
  404924:	f107 0110 	add.w	r1, r7, #16
  404928:	428b      	cmp	r3, r1
  40492a:	db7f      	blt.n	404a2c <_realloc_r+0x1ec>
  40492c:	46a8      	mov	r8, r5
  40492e:	68ea      	ldr	r2, [r5, #12]
  404930:	f858 1f08 	ldr.w	r1, [r8, #8]!
  404934:	60ca      	str	r2, [r1, #12]
  404936:	6091      	str	r1, [r2, #8]
  404938:	1f32      	subs	r2, r6, #4
  40493a:	2a24      	cmp	r2, #36	; 0x24
  40493c:	d825      	bhi.n	40498a <_realloc_r+0x14a>
  40493e:	2a13      	cmp	r2, #19
  404940:	d91b      	bls.n	40497a <_realloc_r+0x13a>
  404942:	6821      	ldr	r1, [r4, #0]
  404944:	60a9      	str	r1, [r5, #8]
  404946:	6861      	ldr	r1, [r4, #4]
  404948:	60e9      	str	r1, [r5, #12]
  40494a:	2a1b      	cmp	r2, #27
  40494c:	d803      	bhi.n	404956 <_realloc_r+0x116>
  40494e:	f105 0210 	add.w	r2, r5, #16
  404952:	3408      	adds	r4, #8
  404954:	e012      	b.n	40497c <_realloc_r+0x13c>
  404956:	68a1      	ldr	r1, [r4, #8]
  404958:	6129      	str	r1, [r5, #16]
  40495a:	68e1      	ldr	r1, [r4, #12]
  40495c:	6169      	str	r1, [r5, #20]
  40495e:	2a24      	cmp	r2, #36	; 0x24
  404960:	d003      	beq.n	40496a <_realloc_r+0x12a>
  404962:	f105 0218 	add.w	r2, r5, #24
  404966:	3410      	adds	r4, #16
  404968:	e008      	b.n	40497c <_realloc_r+0x13c>
  40496a:	6922      	ldr	r2, [r4, #16]
  40496c:	61aa      	str	r2, [r5, #24]
  40496e:	6961      	ldr	r1, [r4, #20]
  404970:	61e9      	str	r1, [r5, #28]
  404972:	f105 0220 	add.w	r2, r5, #32
  404976:	3418      	adds	r4, #24
  404978:	e000      	b.n	40497c <_realloc_r+0x13c>
  40497a:	4642      	mov	r2, r8
  40497c:	6821      	ldr	r1, [r4, #0]
  40497e:	6011      	str	r1, [r2, #0]
  404980:	6861      	ldr	r1, [r4, #4]
  404982:	6051      	str	r1, [r2, #4]
  404984:	68a1      	ldr	r1, [r4, #8]
  404986:	6091      	str	r1, [r2, #8]
  404988:	e005      	b.n	404996 <_realloc_r+0x156>
  40498a:	4640      	mov	r0, r8
  40498c:	4621      	mov	r1, r4
  40498e:	9301      	str	r3, [sp, #4]
  404990:	f7ff fb4e 	bl	404030 <memmove>
  404994:	9b01      	ldr	r3, [sp, #4]
  404996:	19ea      	adds	r2, r5, r7
  404998:	1bdb      	subs	r3, r3, r7
  40499a:	f043 0301 	orr.w	r3, r3, #1
  40499e:	f8cb 2008 	str.w	r2, [fp, #8]
  4049a2:	6053      	str	r3, [r2, #4]
  4049a4:	686b      	ldr	r3, [r5, #4]
  4049a6:	f003 0301 	and.w	r3, r3, #1
  4049aa:	431f      	orrs	r7, r3
  4049ac:	4648      	mov	r0, r9
  4049ae:	606f      	str	r7, [r5, #4]
  4049b0:	f7ff fb5a 	bl	404068 <__malloc_unlock>
  4049b4:	4640      	mov	r0, r8
  4049b6:	e0e7      	b.n	404b88 <_realloc_r+0x348>
  4049b8:	eb0a 0b00 	add.w	fp, sl, r0
  4049bc:	45bb      	cmp	fp, r7
  4049be:	db35      	blt.n	404a2c <_realloc_r+0x1ec>
  4049c0:	68da      	ldr	r2, [r3, #12]
  4049c2:	689b      	ldr	r3, [r3, #8]
  4049c4:	4628      	mov	r0, r5
  4049c6:	60da      	str	r2, [r3, #12]
  4049c8:	6093      	str	r3, [r2, #8]
  4049ca:	f850 2f08 	ldr.w	r2, [r0, #8]!
  4049ce:	68eb      	ldr	r3, [r5, #12]
  4049d0:	60d3      	str	r3, [r2, #12]
  4049d2:	609a      	str	r2, [r3, #8]
  4049d4:	1f32      	subs	r2, r6, #4
  4049d6:	2a24      	cmp	r2, #36	; 0x24
  4049d8:	d823      	bhi.n	404a22 <_realloc_r+0x1e2>
  4049da:	2a13      	cmp	r2, #19
  4049dc:	d91a      	bls.n	404a14 <_realloc_r+0x1d4>
  4049de:	6823      	ldr	r3, [r4, #0]
  4049e0:	60ab      	str	r3, [r5, #8]
  4049e2:	6863      	ldr	r3, [r4, #4]
  4049e4:	60eb      	str	r3, [r5, #12]
  4049e6:	2a1b      	cmp	r2, #27
  4049e8:	d803      	bhi.n	4049f2 <_realloc_r+0x1b2>
  4049ea:	f105 0010 	add.w	r0, r5, #16
  4049ee:	3408      	adds	r4, #8
  4049f0:	e010      	b.n	404a14 <_realloc_r+0x1d4>
  4049f2:	68a3      	ldr	r3, [r4, #8]
  4049f4:	612b      	str	r3, [r5, #16]
  4049f6:	68e3      	ldr	r3, [r4, #12]
  4049f8:	616b      	str	r3, [r5, #20]
  4049fa:	2a24      	cmp	r2, #36	; 0x24
  4049fc:	d003      	beq.n	404a06 <_realloc_r+0x1c6>
  4049fe:	f105 0018 	add.w	r0, r5, #24
  404a02:	3410      	adds	r4, #16
  404a04:	e006      	b.n	404a14 <_realloc_r+0x1d4>
  404a06:	6923      	ldr	r3, [r4, #16]
  404a08:	61ab      	str	r3, [r5, #24]
  404a0a:	6963      	ldr	r3, [r4, #20]
  404a0c:	61eb      	str	r3, [r5, #28]
  404a0e:	f105 0020 	add.w	r0, r5, #32
  404a12:	3418      	adds	r4, #24
  404a14:	6823      	ldr	r3, [r4, #0]
  404a16:	6003      	str	r3, [r0, #0]
  404a18:	6863      	ldr	r3, [r4, #4]
  404a1a:	6043      	str	r3, [r0, #4]
  404a1c:	68a3      	ldr	r3, [r4, #8]
  404a1e:	6083      	str	r3, [r0, #8]
  404a20:	e002      	b.n	404a28 <_realloc_r+0x1e8>
  404a22:	4621      	mov	r1, r4
  404a24:	f7ff fb04 	bl	404030 <memmove>
  404a28:	465e      	mov	r6, fp
  404a2a:	e02e      	b.n	404a8a <_realloc_r+0x24a>
  404a2c:	45ba      	cmp	sl, r7
  404a2e:	db32      	blt.n	404a96 <_realloc_r+0x256>
  404a30:	4628      	mov	r0, r5
  404a32:	68eb      	ldr	r3, [r5, #12]
  404a34:	f850 2f08 	ldr.w	r2, [r0, #8]!
  404a38:	60d3      	str	r3, [r2, #12]
  404a3a:	609a      	str	r2, [r3, #8]
  404a3c:	1f32      	subs	r2, r6, #4
  404a3e:	2a24      	cmp	r2, #36	; 0x24
  404a40:	d825      	bhi.n	404a8e <_realloc_r+0x24e>
  404a42:	2a13      	cmp	r2, #19
  404a44:	d91a      	bls.n	404a7c <_realloc_r+0x23c>
  404a46:	6823      	ldr	r3, [r4, #0]
  404a48:	60ab      	str	r3, [r5, #8]
  404a4a:	6863      	ldr	r3, [r4, #4]
  404a4c:	60eb      	str	r3, [r5, #12]
  404a4e:	2a1b      	cmp	r2, #27
  404a50:	d803      	bhi.n	404a5a <_realloc_r+0x21a>
  404a52:	f105 0010 	add.w	r0, r5, #16
  404a56:	3408      	adds	r4, #8
  404a58:	e010      	b.n	404a7c <_realloc_r+0x23c>
  404a5a:	68a3      	ldr	r3, [r4, #8]
  404a5c:	612b      	str	r3, [r5, #16]
  404a5e:	68e3      	ldr	r3, [r4, #12]
  404a60:	616b      	str	r3, [r5, #20]
  404a62:	2a24      	cmp	r2, #36	; 0x24
  404a64:	d003      	beq.n	404a6e <_realloc_r+0x22e>
  404a66:	f105 0018 	add.w	r0, r5, #24
  404a6a:	3410      	adds	r4, #16
  404a6c:	e006      	b.n	404a7c <_realloc_r+0x23c>
  404a6e:	6923      	ldr	r3, [r4, #16]
  404a70:	61ab      	str	r3, [r5, #24]
  404a72:	6963      	ldr	r3, [r4, #20]
  404a74:	61eb      	str	r3, [r5, #28]
  404a76:	f105 0020 	add.w	r0, r5, #32
  404a7a:	3418      	adds	r4, #24
  404a7c:	6823      	ldr	r3, [r4, #0]
  404a7e:	6003      	str	r3, [r0, #0]
  404a80:	6863      	ldr	r3, [r4, #4]
  404a82:	6043      	str	r3, [r0, #4]
  404a84:	68a3      	ldr	r3, [r4, #8]
  404a86:	6083      	str	r3, [r0, #8]
  404a88:	4656      	mov	r6, sl
  404a8a:	46a8      	mov	r8, r5
  404a8c:	e054      	b.n	404b38 <_realloc_r+0x2f8>
  404a8e:	4621      	mov	r1, r4
  404a90:	f7ff face 	bl	404030 <memmove>
  404a94:	e7f8      	b.n	404a88 <_realloc_r+0x248>
  404a96:	4648      	mov	r0, r9
  404a98:	4611      	mov	r1, r2
  404a9a:	f7ff f8a7 	bl	403bec <_malloc_r>
  404a9e:	4605      	mov	r5, r0
  404aa0:	2800      	cmp	r0, #0
  404aa2:	d044      	beq.n	404b2e <_realloc_r+0x2ee>
  404aa4:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404aa8:	f023 0301 	bic.w	r3, r3, #1
  404aac:	f1a0 0208 	sub.w	r2, r0, #8
  404ab0:	4443      	add	r3, r8
  404ab2:	429a      	cmp	r2, r3
  404ab4:	d105      	bne.n	404ac2 <_realloc_r+0x282>
  404ab6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404aba:	f023 0303 	bic.w	r3, r3, #3
  404abe:	441e      	add	r6, r3
  404ac0:	e03a      	b.n	404b38 <_realloc_r+0x2f8>
  404ac2:	1f32      	subs	r2, r6, #4
  404ac4:	2a24      	cmp	r2, #36	; 0x24
  404ac6:	d82b      	bhi.n	404b20 <_realloc_r+0x2e0>
  404ac8:	2a13      	cmp	r2, #19
  404aca:	d91e      	bls.n	404b0a <_realloc_r+0x2ca>
  404acc:	6823      	ldr	r3, [r4, #0]
  404ace:	6003      	str	r3, [r0, #0]
  404ad0:	6863      	ldr	r3, [r4, #4]
  404ad2:	6043      	str	r3, [r0, #4]
  404ad4:	2a1b      	cmp	r2, #27
  404ad6:	d804      	bhi.n	404ae2 <_realloc_r+0x2a2>
  404ad8:	f100 0308 	add.w	r3, r0, #8
  404adc:	f104 0208 	add.w	r2, r4, #8
  404ae0:	e015      	b.n	404b0e <_realloc_r+0x2ce>
  404ae2:	68a3      	ldr	r3, [r4, #8]
  404ae4:	6083      	str	r3, [r0, #8]
  404ae6:	68e3      	ldr	r3, [r4, #12]
  404ae8:	60c3      	str	r3, [r0, #12]
  404aea:	2a24      	cmp	r2, #36	; 0x24
  404aec:	d004      	beq.n	404af8 <_realloc_r+0x2b8>
  404aee:	f100 0310 	add.w	r3, r0, #16
  404af2:	f104 0210 	add.w	r2, r4, #16
  404af6:	e00a      	b.n	404b0e <_realloc_r+0x2ce>
  404af8:	6923      	ldr	r3, [r4, #16]
  404afa:	6103      	str	r3, [r0, #16]
  404afc:	6961      	ldr	r1, [r4, #20]
  404afe:	6141      	str	r1, [r0, #20]
  404b00:	f100 0318 	add.w	r3, r0, #24
  404b04:	f104 0218 	add.w	r2, r4, #24
  404b08:	e001      	b.n	404b0e <_realloc_r+0x2ce>
  404b0a:	4603      	mov	r3, r0
  404b0c:	4622      	mov	r2, r4
  404b0e:	6811      	ldr	r1, [r2, #0]
  404b10:	6019      	str	r1, [r3, #0]
  404b12:	6851      	ldr	r1, [r2, #4]
  404b14:	6059      	str	r1, [r3, #4]
  404b16:	6892      	ldr	r2, [r2, #8]
  404b18:	609a      	str	r2, [r3, #8]
  404b1a:	e004      	b.n	404b26 <_realloc_r+0x2e6>
  404b1c:	200004c4 	.word	0x200004c4
  404b20:	4621      	mov	r1, r4
  404b22:	f7ff fa85 	bl	404030 <memmove>
  404b26:	4648      	mov	r0, r9
  404b28:	4621      	mov	r1, r4
  404b2a:	f7fe ff65 	bl	4039f8 <_free_r>
  404b2e:	4648      	mov	r0, r9
  404b30:	f7ff fa9a 	bl	404068 <__malloc_unlock>
  404b34:	4628      	mov	r0, r5
  404b36:	e027      	b.n	404b88 <_realloc_r+0x348>
  404b38:	1bf3      	subs	r3, r6, r7
  404b3a:	2b0f      	cmp	r3, #15
  404b3c:	f8d8 2004 	ldr.w	r2, [r8, #4]
  404b40:	d913      	bls.n	404b6a <_realloc_r+0x32a>
  404b42:	eb08 0107 	add.w	r1, r8, r7
  404b46:	f002 0201 	and.w	r2, r2, #1
  404b4a:	4317      	orrs	r7, r2
  404b4c:	f043 0201 	orr.w	r2, r3, #1
  404b50:	440b      	add	r3, r1
  404b52:	f8c8 7004 	str.w	r7, [r8, #4]
  404b56:	604a      	str	r2, [r1, #4]
  404b58:	685a      	ldr	r2, [r3, #4]
  404b5a:	f042 0201 	orr.w	r2, r2, #1
  404b5e:	605a      	str	r2, [r3, #4]
  404b60:	4648      	mov	r0, r9
  404b62:	3108      	adds	r1, #8
  404b64:	f7fe ff48 	bl	4039f8 <_free_r>
  404b68:	e009      	b.n	404b7e <_realloc_r+0x33e>
  404b6a:	f002 0201 	and.w	r2, r2, #1
  404b6e:	4332      	orrs	r2, r6
  404b70:	4446      	add	r6, r8
  404b72:	f8c8 2004 	str.w	r2, [r8, #4]
  404b76:	6873      	ldr	r3, [r6, #4]
  404b78:	f043 0301 	orr.w	r3, r3, #1
  404b7c:	6073      	str	r3, [r6, #4]
  404b7e:	4648      	mov	r0, r9
  404b80:	f7ff fa72 	bl	404068 <__malloc_unlock>
  404b84:	f108 0008 	add.w	r0, r8, #8
  404b88:	b003      	add	sp, #12
  404b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b8e:	bf00      	nop

00404b90 <__fpclassifyd>:
  404b90:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  404b94:	b510      	push	{r4, lr}
  404b96:	d100      	bne.n	404b9a <__fpclassifyd+0xa>
  404b98:	b178      	cbz	r0, 404bba <__fpclassifyd+0x2a>
  404b9a:	4a0c      	ldr	r2, [pc, #48]	; (404bcc <__fpclassifyd+0x3c>)
  404b9c:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  404ba0:	4294      	cmp	r4, r2
  404ba2:	d90c      	bls.n	404bbe <__fpclassifyd+0x2e>
  404ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  404ba8:	d30b      	bcc.n	404bc2 <__fpclassifyd+0x32>
  404baa:	4a09      	ldr	r2, [pc, #36]	; (404bd0 <__fpclassifyd+0x40>)
  404bac:	4293      	cmp	r3, r2
  404bae:	d10a      	bne.n	404bc6 <__fpclassifyd+0x36>
  404bb0:	f1d0 0001 	rsbs	r0, r0, #1
  404bb4:	bf38      	it	cc
  404bb6:	2000      	movcc	r0, #0
  404bb8:	bd10      	pop	{r4, pc}
  404bba:	2002      	movs	r0, #2
  404bbc:	bd10      	pop	{r4, pc}
  404bbe:	2004      	movs	r0, #4
  404bc0:	bd10      	pop	{r4, pc}
  404bc2:	2003      	movs	r0, #3
  404bc4:	bd10      	pop	{r4, pc}
  404bc6:	2000      	movs	r0, #0
  404bc8:	bd10      	pop	{r4, pc}
  404bca:	bf00      	nop
  404bcc:	7fdfffff 	.word	0x7fdfffff
  404bd0:	7ff00000 	.word	0x7ff00000

00404bd4 <_sbrk_r>:
  404bd4:	b538      	push	{r3, r4, r5, lr}
  404bd6:	4c06      	ldr	r4, [pc, #24]	; (404bf0 <_sbrk_r+0x1c>)
  404bd8:	2300      	movs	r3, #0
  404bda:	4605      	mov	r5, r0
  404bdc:	4608      	mov	r0, r1
  404bde:	6023      	str	r3, [r4, #0]
  404be0:	f7fc f9e4 	bl	400fac <_sbrk>
  404be4:	1c43      	adds	r3, r0, #1
  404be6:	d102      	bne.n	404bee <_sbrk_r+0x1a>
  404be8:	6823      	ldr	r3, [r4, #0]
  404bea:	b103      	cbz	r3, 404bee <_sbrk_r+0x1a>
  404bec:	602b      	str	r3, [r5, #0]
  404bee:	bd38      	pop	{r3, r4, r5, pc}
  404bf0:	200009a4 	.word	0x200009a4

00404bf4 <strcmp>:
  404bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
  404bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
  404bfc:	2a01      	cmp	r2, #1
  404bfe:	bf28      	it	cs
  404c00:	429a      	cmpcs	r2, r3
  404c02:	d0f7      	beq.n	404bf4 <strcmp>
  404c04:	1ad0      	subs	r0, r2, r3
  404c06:	4770      	bx	lr

00404c08 <__ssprint_r>:
  404c08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c0c:	4680      	mov	r8, r0
  404c0e:	6890      	ldr	r0, [r2, #8]
  404c10:	f8d2 9000 	ldr.w	r9, [r2]
  404c14:	460c      	mov	r4, r1
  404c16:	4615      	mov	r5, r2
  404c18:	b118      	cbz	r0, 404c22 <__ssprint_r+0x1a>
  404c1a:	2300      	movs	r3, #0
  404c1c:	9301      	str	r3, [sp, #4]
  404c1e:	461e      	mov	r6, r3
  404c20:	e008      	b.n	404c34 <__ssprint_r+0x2c>
  404c22:	6050      	str	r0, [r2, #4]
  404c24:	e066      	b.n	404cf4 <__ssprint_r+0xec>
  404c26:	f8d9 3000 	ldr.w	r3, [r9]
  404c2a:	f8d9 6004 	ldr.w	r6, [r9, #4]
  404c2e:	9301      	str	r3, [sp, #4]
  404c30:	f109 0908 	add.w	r9, r9, #8
  404c34:	2e00      	cmp	r6, #0
  404c36:	d0f6      	beq.n	404c26 <__ssprint_r+0x1e>
  404c38:	68a7      	ldr	r7, [r4, #8]
  404c3a:	42be      	cmp	r6, r7
  404c3c:	d347      	bcc.n	404cce <__ssprint_r+0xc6>
  404c3e:	89a2      	ldrh	r2, [r4, #12]
  404c40:	f412 6f90 	tst.w	r2, #1152	; 0x480
  404c44:	d041      	beq.n	404cca <__ssprint_r+0xc2>
  404c46:	6823      	ldr	r3, [r4, #0]
  404c48:	6921      	ldr	r1, [r4, #16]
  404c4a:	ebc1 0a03 	rsb	sl, r1, r3
  404c4e:	6963      	ldr	r3, [r4, #20]
  404c50:	2002      	movs	r0, #2
  404c52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  404c56:	fb93 fbf0 	sdiv	fp, r3, r0
  404c5a:	f10a 0001 	add.w	r0, sl, #1
  404c5e:	4430      	add	r0, r6
  404c60:	4583      	cmp	fp, r0
  404c62:	bf38      	it	cc
  404c64:	4683      	movcc	fp, r0
  404c66:	0553      	lsls	r3, r2, #21
  404c68:	4640      	mov	r0, r8
  404c6a:	d50f      	bpl.n	404c8c <__ssprint_r+0x84>
  404c6c:	4659      	mov	r1, fp
  404c6e:	f7fe ffbd 	bl	403bec <_malloc_r>
  404c72:	4607      	mov	r7, r0
  404c74:	b198      	cbz	r0, 404c9e <__ssprint_r+0x96>
  404c76:	4652      	mov	r2, sl
  404c78:	6921      	ldr	r1, [r4, #16]
  404c7a:	f7ff f9d0 	bl	40401e <memcpy>
  404c7e:	89a2      	ldrh	r2, [r4, #12]
  404c80:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  404c84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  404c88:	81a2      	strh	r2, [r4, #12]
  404c8a:	e015      	b.n	404cb8 <__ssprint_r+0xb0>
  404c8c:	465a      	mov	r2, fp
  404c8e:	f7ff fdd7 	bl	404840 <_realloc_r>
  404c92:	4607      	mov	r7, r0
  404c94:	b980      	cbnz	r0, 404cb8 <__ssprint_r+0xb0>
  404c96:	4640      	mov	r0, r8
  404c98:	6921      	ldr	r1, [r4, #16]
  404c9a:	f7fe fead 	bl	4039f8 <_free_r>
  404c9e:	230c      	movs	r3, #12
  404ca0:	f8c8 3000 	str.w	r3, [r8]
  404ca4:	89a3      	ldrh	r3, [r4, #12]
  404ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404caa:	81a3      	strh	r3, [r4, #12]
  404cac:	2300      	movs	r3, #0
  404cae:	60ab      	str	r3, [r5, #8]
  404cb0:	606b      	str	r3, [r5, #4]
  404cb2:	f04f 30ff 	mov.w	r0, #4294967295
  404cb6:	e01d      	b.n	404cf4 <__ssprint_r+0xec>
  404cb8:	6127      	str	r7, [r4, #16]
  404cba:	ebca 030b 	rsb	r3, sl, fp
  404cbe:	4457      	add	r7, sl
  404cc0:	6027      	str	r7, [r4, #0]
  404cc2:	f8c4 b014 	str.w	fp, [r4, #20]
  404cc6:	4637      	mov	r7, r6
  404cc8:	60a3      	str	r3, [r4, #8]
  404cca:	42be      	cmp	r6, r7
  404ccc:	d200      	bcs.n	404cd0 <__ssprint_r+0xc8>
  404cce:	4637      	mov	r7, r6
  404cd0:	463a      	mov	r2, r7
  404cd2:	6820      	ldr	r0, [r4, #0]
  404cd4:	9901      	ldr	r1, [sp, #4]
  404cd6:	f7ff f9ab 	bl	404030 <memmove>
  404cda:	68a3      	ldr	r3, [r4, #8]
  404cdc:	1bdb      	subs	r3, r3, r7
  404cde:	60a3      	str	r3, [r4, #8]
  404ce0:	6823      	ldr	r3, [r4, #0]
  404ce2:	441f      	add	r7, r3
  404ce4:	68ab      	ldr	r3, [r5, #8]
  404ce6:	6027      	str	r7, [r4, #0]
  404ce8:	1b9e      	subs	r6, r3, r6
  404cea:	60ae      	str	r6, [r5, #8]
  404cec:	2e00      	cmp	r6, #0
  404cee:	d19a      	bne.n	404c26 <__ssprint_r+0x1e>
  404cf0:	606e      	str	r6, [r5, #4]
  404cf2:	4630      	mov	r0, r6
  404cf4:	b003      	add	sp, #12
  404cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00404cfa <_svfiprintf_r>:
  404cfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404cfe:	461e      	mov	r6, r3
  404d00:	898b      	ldrh	r3, [r1, #12]
  404d02:	b0ad      	sub	sp, #180	; 0xb4
  404d04:	4688      	mov	r8, r1
  404d06:	0619      	lsls	r1, r3, #24
  404d08:	4683      	mov	fp, r0
  404d0a:	9202      	str	r2, [sp, #8]
  404d0c:	d513      	bpl.n	404d36 <_svfiprintf_r+0x3c>
  404d0e:	f8d8 3010 	ldr.w	r3, [r8, #16]
  404d12:	b983      	cbnz	r3, 404d36 <_svfiprintf_r+0x3c>
  404d14:	2140      	movs	r1, #64	; 0x40
  404d16:	f7fe ff69 	bl	403bec <_malloc_r>
  404d1a:	f8c8 0000 	str.w	r0, [r8]
  404d1e:	f8c8 0010 	str.w	r0, [r8, #16]
  404d22:	b928      	cbnz	r0, 404d30 <_svfiprintf_r+0x36>
  404d24:	230c      	movs	r3, #12
  404d26:	f8cb 3000 	str.w	r3, [fp]
  404d2a:	f04f 30ff 	mov.w	r0, #4294967295
  404d2e:	e3d6      	b.n	4054de <_svfiprintf_r+0x7e4>
  404d30:	2340      	movs	r3, #64	; 0x40
  404d32:	f8c8 3014 	str.w	r3, [r8, #20]
  404d36:	2300      	movs	r3, #0
  404d38:	aa1c      	add	r2, sp, #112	; 0x70
  404d3a:	920f      	str	r2, [sp, #60]	; 0x3c
  404d3c:	9311      	str	r3, [sp, #68]	; 0x44
  404d3e:	9310      	str	r3, [sp, #64]	; 0x40
  404d40:	4694      	mov	ip, r2
  404d42:	930a      	str	r3, [sp, #40]	; 0x28
  404d44:	9305      	str	r3, [sp, #20]
  404d46:	9b02      	ldr	r3, [sp, #8]
  404d48:	461c      	mov	r4, r3
  404d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
  404d4e:	b91a      	cbnz	r2, 404d58 <_svfiprintf_r+0x5e>
  404d50:	9802      	ldr	r0, [sp, #8]
  404d52:	1a25      	subs	r5, r4, r0
  404d54:	d103      	bne.n	404d5e <_svfiprintf_r+0x64>
  404d56:	e01d      	b.n	404d94 <_svfiprintf_r+0x9a>
  404d58:	2a25      	cmp	r2, #37	; 0x25
  404d5a:	d1f5      	bne.n	404d48 <_svfiprintf_r+0x4e>
  404d5c:	e7f8      	b.n	404d50 <_svfiprintf_r+0x56>
  404d5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d60:	9902      	ldr	r1, [sp, #8]
  404d62:	442b      	add	r3, r5
  404d64:	9311      	str	r3, [sp, #68]	; 0x44
  404d66:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404d68:	3301      	adds	r3, #1
  404d6a:	2b07      	cmp	r3, #7
  404d6c:	e88c 0022 	stmia.w	ip, {r1, r5}
  404d70:	9310      	str	r3, [sp, #64]	; 0x40
  404d72:	dc02      	bgt.n	404d7a <_svfiprintf_r+0x80>
  404d74:	f10c 0c08 	add.w	ip, ip, #8
  404d78:	e009      	b.n	404d8e <_svfiprintf_r+0x94>
  404d7a:	4658      	mov	r0, fp
  404d7c:	4641      	mov	r1, r8
  404d7e:	aa0f      	add	r2, sp, #60	; 0x3c
  404d80:	f7ff ff42 	bl	404c08 <__ssprint_r>
  404d84:	2800      	cmp	r0, #0
  404d86:	f040 83a2 	bne.w	4054ce <_svfiprintf_r+0x7d4>
  404d8a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  404d8e:	9a05      	ldr	r2, [sp, #20]
  404d90:	442a      	add	r2, r5
  404d92:	9205      	str	r2, [sp, #20]
  404d94:	7823      	ldrb	r3, [r4, #0]
  404d96:	2b00      	cmp	r3, #0
  404d98:	f000 8392 	beq.w	4054c0 <_svfiprintf_r+0x7c6>
  404d9c:	2200      	movs	r2, #0
  404d9e:	3401      	adds	r4, #1
  404da0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404da4:	f04f 3aff 	mov.w	sl, #4294967295
  404da8:	9204      	str	r2, [sp, #16]
  404daa:	4617      	mov	r7, r2
  404dac:	1c65      	adds	r5, r4, #1
  404dae:	7823      	ldrb	r3, [r4, #0]
  404db0:	9502      	str	r5, [sp, #8]
  404db2:	2b58      	cmp	r3, #88	; 0x58
  404db4:	d065      	beq.n	404e82 <_svfiprintf_r+0x188>
  404db6:	dc2e      	bgt.n	404e16 <_svfiprintf_r+0x11c>
  404db8:	2b2e      	cmp	r3, #46	; 0x2e
  404dba:	d077      	beq.n	404eac <_svfiprintf_r+0x1b2>
  404dbc:	dc12      	bgt.n	404de4 <_svfiprintf_r+0xea>
  404dbe:	2b2a      	cmp	r3, #42	; 0x2a
  404dc0:	d067      	beq.n	404e92 <_svfiprintf_r+0x198>
  404dc2:	dc08      	bgt.n	404dd6 <_svfiprintf_r+0xdc>
  404dc4:	2b20      	cmp	r3, #32
  404dc6:	d060      	beq.n	404e8a <_svfiprintf_r+0x190>
  404dc8:	2b23      	cmp	r3, #35	; 0x23
  404dca:	f040 8203 	bne.w	4051d4 <_svfiprintf_r+0x4da>
  404dce:	f047 0701 	orr.w	r7, r7, #1
  404dd2:	9c02      	ldr	r4, [sp, #8]
  404dd4:	e7ea      	b.n	404dac <_svfiprintf_r+0xb2>
  404dd6:	2b2b      	cmp	r3, #43	; 0x2b
  404dd8:	d101      	bne.n	404dde <_svfiprintf_r+0xe4>
  404dda:	461a      	mov	r2, r3
  404ddc:	e7f9      	b.n	404dd2 <_svfiprintf_r+0xd8>
  404dde:	2b2d      	cmp	r3, #45	; 0x2d
  404de0:	d061      	beq.n	404ea6 <_svfiprintf_r+0x1ac>
  404de2:	e1f7      	b.n	4051d4 <_svfiprintf_r+0x4da>
  404de4:	2b39      	cmp	r3, #57	; 0x39
  404de6:	dc08      	bgt.n	404dfa <_svfiprintf_r+0x100>
  404de8:	2b31      	cmp	r3, #49	; 0x31
  404dea:	f280 8081 	bge.w	404ef0 <_svfiprintf_r+0x1f6>
  404dee:	2b30      	cmp	r3, #48	; 0x30
  404df0:	f040 81f0 	bne.w	4051d4 <_svfiprintf_r+0x4da>
  404df4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  404df8:	e7eb      	b.n	404dd2 <_svfiprintf_r+0xd8>
  404dfa:	2b4f      	cmp	r3, #79	; 0x4f
  404dfc:	f000 80e1 	beq.w	404fc2 <_svfiprintf_r+0x2c8>
  404e00:	2b55      	cmp	r3, #85	; 0x55
  404e02:	f000 8121 	beq.w	405048 <_svfiprintf_r+0x34e>
  404e06:	2b44      	cmp	r3, #68	; 0x44
  404e08:	f040 81e4 	bne.w	4051d4 <_svfiprintf_r+0x4da>
  404e0c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404e10:	f047 0710 	orr.w	r7, r7, #16
  404e14:	e095      	b.n	404f42 <_svfiprintf_r+0x248>
  404e16:	2b6e      	cmp	r3, #110	; 0x6e
  404e18:	f000 80b7 	beq.w	404f8a <_svfiprintf_r+0x290>
  404e1c:	dc0d      	bgt.n	404e3a <_svfiprintf_r+0x140>
  404e1e:	2b68      	cmp	r3, #104	; 0x68
  404e20:	d077      	beq.n	404f12 <_svfiprintf_r+0x218>
  404e22:	dc05      	bgt.n	404e30 <_svfiprintf_r+0x136>
  404e24:	2b63      	cmp	r3, #99	; 0x63
  404e26:	f000 8084 	beq.w	404f32 <_svfiprintf_r+0x238>
  404e2a:	2b64      	cmp	r3, #100	; 0x64
  404e2c:	d026      	beq.n	404e7c <_svfiprintf_r+0x182>
  404e2e:	e1d1      	b.n	4051d4 <_svfiprintf_r+0x4da>
  404e30:	2b69      	cmp	r3, #105	; 0x69
  404e32:	d023      	beq.n	404e7c <_svfiprintf_r+0x182>
  404e34:	2b6c      	cmp	r3, #108	; 0x6c
  404e36:	d06f      	beq.n	404f18 <_svfiprintf_r+0x21e>
  404e38:	e1cc      	b.n	4051d4 <_svfiprintf_r+0x4da>
  404e3a:	2b71      	cmp	r3, #113	; 0x71
  404e3c:	d076      	beq.n	404f2c <_svfiprintf_r+0x232>
  404e3e:	dc13      	bgt.n	404e68 <_svfiprintf_r+0x16e>
  404e40:	2b6f      	cmp	r3, #111	; 0x6f
  404e42:	f000 80c0 	beq.w	404fc6 <_svfiprintf_r+0x2cc>
  404e46:	2b70      	cmp	r3, #112	; 0x70
  404e48:	f040 81c4 	bne.w	4051d4 <_svfiprintf_r+0x4da>
  404e4c:	2330      	movs	r3, #48	; 0x30
  404e4e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  404e52:	48a0      	ldr	r0, [pc, #640]	; (4050d4 <_svfiprintf_r+0x3da>)
  404e54:	6834      	ldr	r4, [r6, #0]
  404e56:	900a      	str	r0, [sp, #40]	; 0x28
  404e58:	2378      	movs	r3, #120	; 0x78
  404e5a:	2500      	movs	r5, #0
  404e5c:	f047 0702 	orr.w	r7, r7, #2
  404e60:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  404e64:	3604      	adds	r6, #4
  404e66:	e12f      	b.n	4050c8 <_svfiprintf_r+0x3ce>
  404e68:	2b75      	cmp	r3, #117	; 0x75
  404e6a:	f000 80ef 	beq.w	40504c <_svfiprintf_r+0x352>
  404e6e:	2b78      	cmp	r3, #120	; 0x78
  404e70:	f000 8104 	beq.w	40507c <_svfiprintf_r+0x382>
  404e74:	2b73      	cmp	r3, #115	; 0x73
  404e76:	f040 81ad 	bne.w	4051d4 <_svfiprintf_r+0x4da>
  404e7a:	e0c0      	b.n	404ffe <_svfiprintf_r+0x304>
  404e7c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404e80:	e05f      	b.n	404f42 <_svfiprintf_r+0x248>
  404e82:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404e86:	4c94      	ldr	r4, [pc, #592]	; (4050d8 <_svfiprintf_r+0x3de>)
  404e88:	e0fb      	b.n	405082 <_svfiprintf_r+0x388>
  404e8a:	2a00      	cmp	r2, #0
  404e8c:	bf08      	it	eq
  404e8e:	2220      	moveq	r2, #32
  404e90:	e79f      	b.n	404dd2 <_svfiprintf_r+0xd8>
  404e92:	1d33      	adds	r3, r6, #4
  404e94:	6836      	ldr	r6, [r6, #0]
  404e96:	9604      	str	r6, [sp, #16]
  404e98:	2e00      	cmp	r6, #0
  404e9a:	db01      	blt.n	404ea0 <_svfiprintf_r+0x1a6>
  404e9c:	461e      	mov	r6, r3
  404e9e:	e798      	b.n	404dd2 <_svfiprintf_r+0xd8>
  404ea0:	4275      	negs	r5, r6
  404ea2:	9504      	str	r5, [sp, #16]
  404ea4:	461e      	mov	r6, r3
  404ea6:	f047 0704 	orr.w	r7, r7, #4
  404eaa:	e792      	b.n	404dd2 <_svfiprintf_r+0xd8>
  404eac:	9c02      	ldr	r4, [sp, #8]
  404eae:	7823      	ldrb	r3, [r4, #0]
  404eb0:	2b2a      	cmp	r3, #42	; 0x2a
  404eb2:	f104 0101 	add.w	r1, r4, #1
  404eb6:	d002      	beq.n	404ebe <_svfiprintf_r+0x1c4>
  404eb8:	f04f 0a00 	mov.w	sl, #0
  404ebc:	e00a      	b.n	404ed4 <_svfiprintf_r+0x1da>
  404ebe:	f8d6 a000 	ldr.w	sl, [r6]
  404ec2:	9102      	str	r1, [sp, #8]
  404ec4:	1d33      	adds	r3, r6, #4
  404ec6:	f1ba 0f00 	cmp.w	sl, #0
  404eca:	461e      	mov	r6, r3
  404ecc:	da81      	bge.n	404dd2 <_svfiprintf_r+0xd8>
  404ece:	f04f 3aff 	mov.w	sl, #4294967295
  404ed2:	e77e      	b.n	404dd2 <_svfiprintf_r+0xd8>
  404ed4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404ed8:	2809      	cmp	r0, #9
  404eda:	d805      	bhi.n	404ee8 <_svfiprintf_r+0x1ee>
  404edc:	230a      	movs	r3, #10
  404ede:	fb03 0a0a 	mla	sl, r3, sl, r0
  404ee2:	f811 3b01 	ldrb.w	r3, [r1], #1
  404ee6:	e7f5      	b.n	404ed4 <_svfiprintf_r+0x1da>
  404ee8:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
  404eec:	9102      	str	r1, [sp, #8]
  404eee:	e760      	b.n	404db2 <_svfiprintf_r+0xb8>
  404ef0:	2500      	movs	r5, #0
  404ef2:	9504      	str	r5, [sp, #16]
  404ef4:	9c04      	ldr	r4, [sp, #16]
  404ef6:	3b30      	subs	r3, #48	; 0x30
  404ef8:	210a      	movs	r1, #10
  404efa:	fb01 3404 	mla	r4, r1, r4, r3
  404efe:	9902      	ldr	r1, [sp, #8]
  404f00:	9404      	str	r4, [sp, #16]
  404f02:	f811 3b01 	ldrb.w	r3, [r1], #1
  404f06:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404f0a:	2809      	cmp	r0, #9
  404f0c:	d8ee      	bhi.n	404eec <_svfiprintf_r+0x1f2>
  404f0e:	9102      	str	r1, [sp, #8]
  404f10:	e7f0      	b.n	404ef4 <_svfiprintf_r+0x1fa>
  404f12:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  404f16:	e75c      	b.n	404dd2 <_svfiprintf_r+0xd8>
  404f18:	9d02      	ldr	r5, [sp, #8]
  404f1a:	782b      	ldrb	r3, [r5, #0]
  404f1c:	2b6c      	cmp	r3, #108	; 0x6c
  404f1e:	d102      	bne.n	404f26 <_svfiprintf_r+0x22c>
  404f20:	3501      	adds	r5, #1
  404f22:	9502      	str	r5, [sp, #8]
  404f24:	e002      	b.n	404f2c <_svfiprintf_r+0x232>
  404f26:	f047 0710 	orr.w	r7, r7, #16
  404f2a:	e752      	b.n	404dd2 <_svfiprintf_r+0xd8>
  404f2c:	f047 0720 	orr.w	r7, r7, #32
  404f30:	e74f      	b.n	404dd2 <_svfiprintf_r+0xd8>
  404f32:	6833      	ldr	r3, [r6, #0]
  404f34:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  404f38:	2500      	movs	r5, #0
  404f3a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f3e:	3604      	adds	r6, #4
  404f40:	e152      	b.n	4051e8 <_svfiprintf_r+0x4ee>
  404f42:	06ba      	lsls	r2, r7, #26
  404f44:	d507      	bpl.n	404f56 <_svfiprintf_r+0x25c>
  404f46:	3607      	adds	r6, #7
  404f48:	f026 0307 	bic.w	r3, r6, #7
  404f4c:	f103 0608 	add.w	r6, r3, #8
  404f50:	e9d3 4500 	ldrd	r4, r5, [r3]
  404f54:	e00d      	b.n	404f72 <_svfiprintf_r+0x278>
  404f56:	f017 0f10 	tst.w	r7, #16
  404f5a:	f106 0304 	add.w	r3, r6, #4
  404f5e:	d001      	beq.n	404f64 <_svfiprintf_r+0x26a>
  404f60:	6834      	ldr	r4, [r6, #0]
  404f62:	e004      	b.n	404f6e <_svfiprintf_r+0x274>
  404f64:	6834      	ldr	r4, [r6, #0]
  404f66:	f017 0f40 	tst.w	r7, #64	; 0x40
  404f6a:	bf18      	it	ne
  404f6c:	b224      	sxthne	r4, r4
  404f6e:	17e5      	asrs	r5, r4, #31
  404f70:	461e      	mov	r6, r3
  404f72:	2c00      	cmp	r4, #0
  404f74:	f175 0000 	sbcs.w	r0, r5, #0
  404f78:	f280 80b0 	bge.w	4050dc <_svfiprintf_r+0x3e2>
  404f7c:	232d      	movs	r3, #45	; 0x2d
  404f7e:	4264      	negs	r4, r4
  404f80:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404f84:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404f88:	e0a8      	b.n	4050dc <_svfiprintf_r+0x3e2>
  404f8a:	f017 0f20 	tst.w	r7, #32
  404f8e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404f92:	f106 0104 	add.w	r1, r6, #4
  404f96:	d007      	beq.n	404fa8 <_svfiprintf_r+0x2ae>
  404f98:	9c05      	ldr	r4, [sp, #20]
  404f9a:	6830      	ldr	r0, [r6, #0]
  404f9c:	17e5      	asrs	r5, r4, #31
  404f9e:	4622      	mov	r2, r4
  404fa0:	462b      	mov	r3, r5
  404fa2:	e9c0 2300 	strd	r2, r3, [r0]
  404fa6:	e00a      	b.n	404fbe <_svfiprintf_r+0x2c4>
  404fa8:	06fb      	lsls	r3, r7, #27
  404faa:	d405      	bmi.n	404fb8 <_svfiprintf_r+0x2be>
  404fac:	067f      	lsls	r7, r7, #25
  404fae:	d503      	bpl.n	404fb8 <_svfiprintf_r+0x2be>
  404fb0:	6833      	ldr	r3, [r6, #0]
  404fb2:	9c05      	ldr	r4, [sp, #20]
  404fb4:	801c      	strh	r4, [r3, #0]
  404fb6:	e002      	b.n	404fbe <_svfiprintf_r+0x2c4>
  404fb8:	6833      	ldr	r3, [r6, #0]
  404fba:	9d05      	ldr	r5, [sp, #20]
  404fbc:	601d      	str	r5, [r3, #0]
  404fbe:	460e      	mov	r6, r1
  404fc0:	e6c1      	b.n	404d46 <_svfiprintf_r+0x4c>
  404fc2:	f047 0710 	orr.w	r7, r7, #16
  404fc6:	f017 0320 	ands.w	r3, r7, #32
  404fca:	d008      	beq.n	404fde <_svfiprintf_r+0x2e4>
  404fcc:	3607      	adds	r6, #7
  404fce:	f026 0307 	bic.w	r3, r6, #7
  404fd2:	e9d3 4500 	ldrd	r4, r5, [r3]
  404fd6:	f103 0608 	add.w	r6, r3, #8
  404fda:	2300      	movs	r3, #0
  404fdc:	e075      	b.n	4050ca <_svfiprintf_r+0x3d0>
  404fde:	f017 0110 	ands.w	r1, r7, #16
  404fe2:	f106 0204 	add.w	r2, r6, #4
  404fe6:	d106      	bne.n	404ff6 <_svfiprintf_r+0x2fc>
  404fe8:	f017 0340 	ands.w	r3, r7, #64	; 0x40
  404fec:	d003      	beq.n	404ff6 <_svfiprintf_r+0x2fc>
  404fee:	8834      	ldrh	r4, [r6, #0]
  404ff0:	2500      	movs	r5, #0
  404ff2:	4616      	mov	r6, r2
  404ff4:	e7f1      	b.n	404fda <_svfiprintf_r+0x2e0>
  404ff6:	6834      	ldr	r4, [r6, #0]
  404ff8:	2500      	movs	r5, #0
  404ffa:	4616      	mov	r6, r2
  404ffc:	e065      	b.n	4050ca <_svfiprintf_r+0x3d0>
  404ffe:	f8d6 9000 	ldr.w	r9, [r6]
  405002:	2300      	movs	r3, #0
  405004:	459a      	cmp	sl, r3
  405006:	f106 0604 	add.w	r6, r6, #4
  40500a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40500e:	4648      	mov	r0, r9
  405010:	db11      	blt.n	405036 <_svfiprintf_r+0x33c>
  405012:	4619      	mov	r1, r3
  405014:	4652      	mov	r2, sl
  405016:	f8cd c004 	str.w	ip, [sp, #4]
  40501a:	f7fe fff1 	bl	404000 <memchr>
  40501e:	f8dd c004 	ldr.w	ip, [sp, #4]
  405022:	2800      	cmp	r0, #0
  405024:	f000 80e5 	beq.w	4051f2 <_svfiprintf_r+0x4f8>
  405028:	ebc9 0000 	rsb	r0, r9, r0
  40502c:	4550      	cmp	r0, sl
  40502e:	bfb8      	it	lt
  405030:	4682      	movlt	sl, r0
  405032:	2500      	movs	r5, #0
  405034:	e0de      	b.n	4051f4 <_svfiprintf_r+0x4fa>
  405036:	f8cd c004 	str.w	ip, [sp, #4]
  40503a:	f7fc fe7f 	bl	401d3c <strlen>
  40503e:	2500      	movs	r5, #0
  405040:	4682      	mov	sl, r0
  405042:	f8dd c004 	ldr.w	ip, [sp, #4]
  405046:	e0d5      	b.n	4051f4 <_svfiprintf_r+0x4fa>
  405048:	f047 0710 	orr.w	r7, r7, #16
  40504c:	06bd      	lsls	r5, r7, #26
  40504e:	d507      	bpl.n	405060 <_svfiprintf_r+0x366>
  405050:	3607      	adds	r6, #7
  405052:	f026 0307 	bic.w	r3, r6, #7
  405056:	f103 0608 	add.w	r6, r3, #8
  40505a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40505e:	e00b      	b.n	405078 <_svfiprintf_r+0x37e>
  405060:	f017 0f10 	tst.w	r7, #16
  405064:	f106 0304 	add.w	r3, r6, #4
  405068:	d103      	bne.n	405072 <_svfiprintf_r+0x378>
  40506a:	067c      	lsls	r4, r7, #25
  40506c:	d501      	bpl.n	405072 <_svfiprintf_r+0x378>
  40506e:	8834      	ldrh	r4, [r6, #0]
  405070:	e000      	b.n	405074 <_svfiprintf_r+0x37a>
  405072:	6834      	ldr	r4, [r6, #0]
  405074:	2500      	movs	r5, #0
  405076:	461e      	mov	r6, r3
  405078:	2301      	movs	r3, #1
  40507a:	e026      	b.n	4050ca <_svfiprintf_r+0x3d0>
  40507c:	4c15      	ldr	r4, [pc, #84]	; (4050d4 <_svfiprintf_r+0x3da>)
  40507e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405082:	06b8      	lsls	r0, r7, #26
  405084:	940a      	str	r4, [sp, #40]	; 0x28
  405086:	d507      	bpl.n	405098 <_svfiprintf_r+0x39e>
  405088:	3607      	adds	r6, #7
  40508a:	f026 0207 	bic.w	r2, r6, #7
  40508e:	f102 0608 	add.w	r6, r2, #8
  405092:	e9d2 4500 	ldrd	r4, r5, [r2]
  405096:	e00b      	b.n	4050b0 <_svfiprintf_r+0x3b6>
  405098:	f017 0f10 	tst.w	r7, #16
  40509c:	f106 0204 	add.w	r2, r6, #4
  4050a0:	d103      	bne.n	4050aa <_svfiprintf_r+0x3b0>
  4050a2:	0679      	lsls	r1, r7, #25
  4050a4:	d501      	bpl.n	4050aa <_svfiprintf_r+0x3b0>
  4050a6:	8834      	ldrh	r4, [r6, #0]
  4050a8:	e000      	b.n	4050ac <_svfiprintf_r+0x3b2>
  4050aa:	6834      	ldr	r4, [r6, #0]
  4050ac:	2500      	movs	r5, #0
  4050ae:	4616      	mov	r6, r2
  4050b0:	07fa      	lsls	r2, r7, #31
  4050b2:	d509      	bpl.n	4050c8 <_svfiprintf_r+0x3ce>
  4050b4:	ea54 0005 	orrs.w	r0, r4, r5
  4050b8:	d006      	beq.n	4050c8 <_svfiprintf_r+0x3ce>
  4050ba:	2230      	movs	r2, #48	; 0x30
  4050bc:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  4050c0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  4050c4:	f047 0702 	orr.w	r7, r7, #2
  4050c8:	2302      	movs	r3, #2
  4050ca:	2200      	movs	r2, #0
  4050cc:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4050d0:	e005      	b.n	4050de <_svfiprintf_r+0x3e4>
  4050d2:	bf00      	nop
  4050d4:	00405e5f 	.word	0x00405e5f
  4050d8:	00405e4e 	.word	0x00405e4e
  4050dc:	2301      	movs	r3, #1
  4050de:	f1ba 0f00 	cmp.w	sl, #0
  4050e2:	bfa8      	it	ge
  4050e4:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
  4050e8:	ea54 0105 	orrs.w	r1, r4, r5
  4050ec:	d102      	bne.n	4050f4 <_svfiprintf_r+0x3fa>
  4050ee:	f1ba 0f00 	cmp.w	sl, #0
  4050f2:	d05e      	beq.n	4051b2 <_svfiprintf_r+0x4b8>
  4050f4:	2b01      	cmp	r3, #1
  4050f6:	d01f      	beq.n	405138 <_svfiprintf_r+0x43e>
  4050f8:	2b02      	cmp	r3, #2
  4050fa:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
  4050fe:	d045      	beq.n	40518c <_svfiprintf_r+0x492>
  405100:	08e0      	lsrs	r0, r4, #3
  405102:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
  405106:	08e8      	lsrs	r0, r5, #3
  405108:	9106      	str	r1, [sp, #24]
  40510a:	9007      	str	r0, [sp, #28]
  40510c:	f004 0207 	and.w	r2, r4, #7
  405110:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  405114:	3230      	adds	r2, #48	; 0x30
  405116:	ea54 0105 	orrs.w	r1, r4, r5
  40511a:	4699      	mov	r9, r3
  40511c:	701a      	strb	r2, [r3, #0]
  40511e:	f103 33ff 	add.w	r3, r3, #4294967295
  405122:	d1ed      	bne.n	405100 <_svfiprintf_r+0x406>
  405124:	07f8      	lsls	r0, r7, #31
  405126:	4649      	mov	r1, r9
  405128:	d54e      	bpl.n	4051c8 <_svfiprintf_r+0x4ce>
  40512a:	2a30      	cmp	r2, #48	; 0x30
  40512c:	d04c      	beq.n	4051c8 <_svfiprintf_r+0x4ce>
  40512e:	4699      	mov	r9, r3
  405130:	2330      	movs	r3, #48	; 0x30
  405132:	f801 3c01 	strb.w	r3, [r1, #-1]
  405136:	e047      	b.n	4051c8 <_svfiprintf_r+0x4ce>
  405138:	2d00      	cmp	r5, #0
  40513a:	bf08      	it	eq
  40513c:	2c0a      	cmpeq	r4, #10
  40513e:	d205      	bcs.n	40514c <_svfiprintf_r+0x452>
  405140:	3430      	adds	r4, #48	; 0x30
  405142:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  405146:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
  40514a:	e03d      	b.n	4051c8 <_svfiprintf_r+0x4ce>
  40514c:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
  405150:	9203      	str	r2, [sp, #12]
  405152:	4620      	mov	r0, r4
  405154:	4629      	mov	r1, r5
  405156:	220a      	movs	r2, #10
  405158:	2300      	movs	r3, #0
  40515a:	f8cd c004 	str.w	ip, [sp, #4]
  40515e:	f000 faeb 	bl	405738 <__aeabi_uldivmod>
  405162:	9b03      	ldr	r3, [sp, #12]
  405164:	f8dd 900c 	ldr.w	r9, [sp, #12]
  405168:	3230      	adds	r2, #48	; 0x30
  40516a:	f803 2901 	strb.w	r2, [r3], #-1
  40516e:	4620      	mov	r0, r4
  405170:	9303      	str	r3, [sp, #12]
  405172:	4629      	mov	r1, r5
  405174:	220a      	movs	r2, #10
  405176:	2300      	movs	r3, #0
  405178:	f000 fade 	bl	405738 <__aeabi_uldivmod>
  40517c:	4604      	mov	r4, r0
  40517e:	460d      	mov	r5, r1
  405180:	ea54 0005 	orrs.w	r0, r4, r5
  405184:	f8dd c004 	ldr.w	ip, [sp, #4]
  405188:	d1e3      	bne.n	405152 <_svfiprintf_r+0x458>
  40518a:	e01d      	b.n	4051c8 <_svfiprintf_r+0x4ce>
  40518c:	f004 020f 	and.w	r2, r4, #15
  405190:	990a      	ldr	r1, [sp, #40]	; 0x28
  405192:	5c8a      	ldrb	r2, [r1, r2]
  405194:	4699      	mov	r9, r3
  405196:	f803 2901 	strb.w	r2, [r3], #-1
  40519a:	0922      	lsrs	r2, r4, #4
  40519c:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
  4051a0:	0929      	lsrs	r1, r5, #4
  4051a2:	9008      	str	r0, [sp, #32]
  4051a4:	9109      	str	r1, [sp, #36]	; 0x24
  4051a6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
  4051aa:	ea54 0205 	orrs.w	r2, r4, r5
  4051ae:	d1ed      	bne.n	40518c <_svfiprintf_r+0x492>
  4051b0:	e00a      	b.n	4051c8 <_svfiprintf_r+0x4ce>
  4051b2:	b93b      	cbnz	r3, 4051c4 <_svfiprintf_r+0x4ca>
  4051b4:	07f9      	lsls	r1, r7, #31
  4051b6:	d505      	bpl.n	4051c4 <_svfiprintf_r+0x4ca>
  4051b8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
  4051bc:	2330      	movs	r3, #48	; 0x30
  4051be:	f809 3d41 	strb.w	r3, [r9, #-65]!
  4051c2:	e001      	b.n	4051c8 <_svfiprintf_r+0x4ce>
  4051c4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4051c8:	4655      	mov	r5, sl
  4051ca:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
  4051ce:	ebc9 0a0a 	rsb	sl, r9, sl
  4051d2:	e00f      	b.n	4051f4 <_svfiprintf_r+0x4fa>
  4051d4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4051d8:	2b00      	cmp	r3, #0
  4051da:	f000 8171 	beq.w	4054c0 <_svfiprintf_r+0x7c6>
  4051de:	2500      	movs	r5, #0
  4051e0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  4051e4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4051e8:	f04f 0a01 	mov.w	sl, #1
  4051ec:	f10d 0948 	add.w	r9, sp, #72	; 0x48
  4051f0:	e000      	b.n	4051f4 <_svfiprintf_r+0x4fa>
  4051f2:	4605      	mov	r5, r0
  4051f4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  4051f8:	45aa      	cmp	sl, r5
  4051fa:	bfac      	ite	ge
  4051fc:	4654      	movge	r4, sl
  4051fe:	462c      	movlt	r4, r5
  405200:	b103      	cbz	r3, 405204 <_svfiprintf_r+0x50a>
  405202:	3401      	adds	r4, #1
  405204:	f017 0302 	ands.w	r3, r7, #2
  405208:	9303      	str	r3, [sp, #12]
  40520a:	bf18      	it	ne
  40520c:	3402      	addne	r4, #2
  40520e:	f017 0384 	ands.w	r3, r7, #132	; 0x84
  405212:	930b      	str	r3, [sp, #44]	; 0x2c
  405214:	d13b      	bne.n	40528e <_svfiprintf_r+0x594>
  405216:	9804      	ldr	r0, [sp, #16]
  405218:	1b03      	subs	r3, r0, r4
  40521a:	2b00      	cmp	r3, #0
  40521c:	dd37      	ble.n	40528e <_svfiprintf_r+0x594>
  40521e:	4aa6      	ldr	r2, [pc, #664]	; (4054b8 <_svfiprintf_r+0x7be>)
  405220:	f8cc 2000 	str.w	r2, [ip]
  405224:	2b10      	cmp	r3, #16
  405226:	dd1b      	ble.n	405260 <_svfiprintf_r+0x566>
  405228:	2210      	movs	r2, #16
  40522a:	f8cc 2004 	str.w	r2, [ip, #4]
  40522e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405230:	3210      	adds	r2, #16
  405232:	9211      	str	r2, [sp, #68]	; 0x44
  405234:	9a10      	ldr	r2, [sp, #64]	; 0x40
  405236:	3201      	adds	r2, #1
  405238:	2a07      	cmp	r2, #7
  40523a:	9210      	str	r2, [sp, #64]	; 0x40
  40523c:	dc02      	bgt.n	405244 <_svfiprintf_r+0x54a>
  40523e:	f10c 0c08 	add.w	ip, ip, #8
  405242:	e00b      	b.n	40525c <_svfiprintf_r+0x562>
  405244:	4658      	mov	r0, fp
  405246:	4641      	mov	r1, r8
  405248:	aa0f      	add	r2, sp, #60	; 0x3c
  40524a:	9301      	str	r3, [sp, #4]
  40524c:	f7ff fcdc 	bl	404c08 <__ssprint_r>
  405250:	9b01      	ldr	r3, [sp, #4]
  405252:	2800      	cmp	r0, #0
  405254:	f040 813b 	bne.w	4054ce <_svfiprintf_r+0x7d4>
  405258:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  40525c:	3b10      	subs	r3, #16
  40525e:	e7de      	b.n	40521e <_svfiprintf_r+0x524>
  405260:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405262:	f8cc 3004 	str.w	r3, [ip, #4]
  405266:	4413      	add	r3, r2
  405268:	9311      	str	r3, [sp, #68]	; 0x44
  40526a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40526c:	3301      	adds	r3, #1
  40526e:	2b07      	cmp	r3, #7
  405270:	9310      	str	r3, [sp, #64]	; 0x40
  405272:	dc02      	bgt.n	40527a <_svfiprintf_r+0x580>
  405274:	f10c 0c08 	add.w	ip, ip, #8
  405278:	e009      	b.n	40528e <_svfiprintf_r+0x594>
  40527a:	4658      	mov	r0, fp
  40527c:	4641      	mov	r1, r8
  40527e:	aa0f      	add	r2, sp, #60	; 0x3c
  405280:	f7ff fcc2 	bl	404c08 <__ssprint_r>
  405284:	2800      	cmp	r0, #0
  405286:	f040 8122 	bne.w	4054ce <_svfiprintf_r+0x7d4>
  40528a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  40528e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  405292:	b1db      	cbz	r3, 4052cc <_svfiprintf_r+0x5d2>
  405294:	f10d 0337 	add.w	r3, sp, #55	; 0x37
  405298:	f8cc 3000 	str.w	r3, [ip]
  40529c:	2301      	movs	r3, #1
  40529e:	f8cc 3004 	str.w	r3, [ip, #4]
  4052a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4052a4:	3301      	adds	r3, #1
  4052a6:	9311      	str	r3, [sp, #68]	; 0x44
  4052a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4052aa:	3301      	adds	r3, #1
  4052ac:	2b07      	cmp	r3, #7
  4052ae:	9310      	str	r3, [sp, #64]	; 0x40
  4052b0:	dc02      	bgt.n	4052b8 <_svfiprintf_r+0x5be>
  4052b2:	f10c 0c08 	add.w	ip, ip, #8
  4052b6:	e009      	b.n	4052cc <_svfiprintf_r+0x5d2>
  4052b8:	4658      	mov	r0, fp
  4052ba:	4641      	mov	r1, r8
  4052bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4052be:	f7ff fca3 	bl	404c08 <__ssprint_r>
  4052c2:	2800      	cmp	r0, #0
  4052c4:	f040 8103 	bne.w	4054ce <_svfiprintf_r+0x7d4>
  4052c8:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4052cc:	9b03      	ldr	r3, [sp, #12]
  4052ce:	b1d3      	cbz	r3, 405306 <_svfiprintf_r+0x60c>
  4052d0:	ab0e      	add	r3, sp, #56	; 0x38
  4052d2:	f8cc 3000 	str.w	r3, [ip]
  4052d6:	2302      	movs	r3, #2
  4052d8:	f8cc 3004 	str.w	r3, [ip, #4]
  4052dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4052de:	3302      	adds	r3, #2
  4052e0:	9311      	str	r3, [sp, #68]	; 0x44
  4052e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4052e4:	3301      	adds	r3, #1
  4052e6:	2b07      	cmp	r3, #7
  4052e8:	9310      	str	r3, [sp, #64]	; 0x40
  4052ea:	dc02      	bgt.n	4052f2 <_svfiprintf_r+0x5f8>
  4052ec:	f10c 0c08 	add.w	ip, ip, #8
  4052f0:	e009      	b.n	405306 <_svfiprintf_r+0x60c>
  4052f2:	4658      	mov	r0, fp
  4052f4:	4641      	mov	r1, r8
  4052f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4052f8:	f7ff fc86 	bl	404c08 <__ssprint_r>
  4052fc:	2800      	cmp	r0, #0
  4052fe:	f040 80e6 	bne.w	4054ce <_svfiprintf_r+0x7d4>
  405302:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  405306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405308:	2b80      	cmp	r3, #128	; 0x80
  40530a:	d13f      	bne.n	40538c <_svfiprintf_r+0x692>
  40530c:	9b04      	ldr	r3, [sp, #16]
  40530e:	1b1b      	subs	r3, r3, r4
  405310:	2b00      	cmp	r3, #0
  405312:	9303      	str	r3, [sp, #12]
  405314:	dd3a      	ble.n	40538c <_svfiprintf_r+0x692>
  405316:	9b03      	ldr	r3, [sp, #12]
  405318:	2b10      	cmp	r3, #16
  40531a:	4b68      	ldr	r3, [pc, #416]	; (4054bc <_svfiprintf_r+0x7c2>)
  40531c:	f8cc 3000 	str.w	r3, [ip]
  405320:	dd1b      	ble.n	40535a <_svfiprintf_r+0x660>
  405322:	2310      	movs	r3, #16
  405324:	f8cc 3004 	str.w	r3, [ip, #4]
  405328:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40532a:	3310      	adds	r3, #16
  40532c:	9311      	str	r3, [sp, #68]	; 0x44
  40532e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405330:	3301      	adds	r3, #1
  405332:	2b07      	cmp	r3, #7
  405334:	9310      	str	r3, [sp, #64]	; 0x40
  405336:	dc02      	bgt.n	40533e <_svfiprintf_r+0x644>
  405338:	f10c 0c08 	add.w	ip, ip, #8
  40533c:	e009      	b.n	405352 <_svfiprintf_r+0x658>
  40533e:	4658      	mov	r0, fp
  405340:	4641      	mov	r1, r8
  405342:	aa0f      	add	r2, sp, #60	; 0x3c
  405344:	f7ff fc60 	bl	404c08 <__ssprint_r>
  405348:	2800      	cmp	r0, #0
  40534a:	f040 80c0 	bne.w	4054ce <_svfiprintf_r+0x7d4>
  40534e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  405352:	9b03      	ldr	r3, [sp, #12]
  405354:	3b10      	subs	r3, #16
  405356:	9303      	str	r3, [sp, #12]
  405358:	e7dd      	b.n	405316 <_svfiprintf_r+0x61c>
  40535a:	9b03      	ldr	r3, [sp, #12]
  40535c:	f8cc 3004 	str.w	r3, [ip, #4]
  405360:	9803      	ldr	r0, [sp, #12]
  405362:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405364:	4403      	add	r3, r0
  405366:	9311      	str	r3, [sp, #68]	; 0x44
  405368:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40536a:	3301      	adds	r3, #1
  40536c:	2b07      	cmp	r3, #7
  40536e:	9310      	str	r3, [sp, #64]	; 0x40
  405370:	dc02      	bgt.n	405378 <_svfiprintf_r+0x67e>
  405372:	f10c 0c08 	add.w	ip, ip, #8
  405376:	e009      	b.n	40538c <_svfiprintf_r+0x692>
  405378:	4658      	mov	r0, fp
  40537a:	4641      	mov	r1, r8
  40537c:	aa0f      	add	r2, sp, #60	; 0x3c
  40537e:	f7ff fc43 	bl	404c08 <__ssprint_r>
  405382:	2800      	cmp	r0, #0
  405384:	f040 80a3 	bne.w	4054ce <_svfiprintf_r+0x7d4>
  405388:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  40538c:	ebca 0505 	rsb	r5, sl, r5
  405390:	2d00      	cmp	r5, #0
  405392:	dd34      	ble.n	4053fe <_svfiprintf_r+0x704>
  405394:	4b49      	ldr	r3, [pc, #292]	; (4054bc <_svfiprintf_r+0x7c2>)
  405396:	f8cc 3000 	str.w	r3, [ip]
  40539a:	2d10      	cmp	r5, #16
  40539c:	dd19      	ble.n	4053d2 <_svfiprintf_r+0x6d8>
  40539e:	2310      	movs	r3, #16
  4053a0:	f8cc 3004 	str.w	r3, [ip, #4]
  4053a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4053a6:	3310      	adds	r3, #16
  4053a8:	9311      	str	r3, [sp, #68]	; 0x44
  4053aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4053ac:	3301      	adds	r3, #1
  4053ae:	2b07      	cmp	r3, #7
  4053b0:	9310      	str	r3, [sp, #64]	; 0x40
  4053b2:	dc02      	bgt.n	4053ba <_svfiprintf_r+0x6c0>
  4053b4:	f10c 0c08 	add.w	ip, ip, #8
  4053b8:	e009      	b.n	4053ce <_svfiprintf_r+0x6d4>
  4053ba:	4658      	mov	r0, fp
  4053bc:	4641      	mov	r1, r8
  4053be:	aa0f      	add	r2, sp, #60	; 0x3c
  4053c0:	f7ff fc22 	bl	404c08 <__ssprint_r>
  4053c4:	2800      	cmp	r0, #0
  4053c6:	f040 8082 	bne.w	4054ce <_svfiprintf_r+0x7d4>
  4053ca:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4053ce:	3d10      	subs	r5, #16
  4053d0:	e7e0      	b.n	405394 <_svfiprintf_r+0x69a>
  4053d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4053d4:	f8cc 5004 	str.w	r5, [ip, #4]
  4053d8:	441d      	add	r5, r3
  4053da:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4053dc:	9511      	str	r5, [sp, #68]	; 0x44
  4053de:	3301      	adds	r3, #1
  4053e0:	2b07      	cmp	r3, #7
  4053e2:	9310      	str	r3, [sp, #64]	; 0x40
  4053e4:	dc02      	bgt.n	4053ec <_svfiprintf_r+0x6f2>
  4053e6:	f10c 0c08 	add.w	ip, ip, #8
  4053ea:	e008      	b.n	4053fe <_svfiprintf_r+0x704>
  4053ec:	4658      	mov	r0, fp
  4053ee:	4641      	mov	r1, r8
  4053f0:	aa0f      	add	r2, sp, #60	; 0x3c
  4053f2:	f7ff fc09 	bl	404c08 <__ssprint_r>
  4053f6:	2800      	cmp	r0, #0
  4053f8:	d169      	bne.n	4054ce <_svfiprintf_r+0x7d4>
  4053fa:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4053fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405400:	4453      	add	r3, sl
  405402:	9311      	str	r3, [sp, #68]	; 0x44
  405404:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405406:	3301      	adds	r3, #1
  405408:	2b07      	cmp	r3, #7
  40540a:	e88c 0600 	stmia.w	ip, {r9, sl}
  40540e:	9310      	str	r3, [sp, #64]	; 0x40
  405410:	dc02      	bgt.n	405418 <_svfiprintf_r+0x71e>
  405412:	f10c 0308 	add.w	r3, ip, #8
  405416:	e007      	b.n	405428 <_svfiprintf_r+0x72e>
  405418:	4658      	mov	r0, fp
  40541a:	4641      	mov	r1, r8
  40541c:	aa0f      	add	r2, sp, #60	; 0x3c
  40541e:	f7ff fbf3 	bl	404c08 <__ssprint_r>
  405422:	2800      	cmp	r0, #0
  405424:	d153      	bne.n	4054ce <_svfiprintf_r+0x7d4>
  405426:	ab1c      	add	r3, sp, #112	; 0x70
  405428:	077a      	lsls	r2, r7, #29
  40542a:	d40a      	bmi.n	405442 <_svfiprintf_r+0x748>
  40542c:	9d05      	ldr	r5, [sp, #20]
  40542e:	9804      	ldr	r0, [sp, #16]
  405430:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405432:	4284      	cmp	r4, r0
  405434:	bfac      	ite	ge
  405436:	192d      	addge	r5, r5, r4
  405438:	182d      	addlt	r5, r5, r0
  40543a:	9505      	str	r5, [sp, #20]
  40543c:	2b00      	cmp	r3, #0
  40543e:	d035      	beq.n	4054ac <_svfiprintf_r+0x7b2>
  405440:	e02e      	b.n	4054a0 <_svfiprintf_r+0x7a6>
  405442:	9904      	ldr	r1, [sp, #16]
  405444:	1b0d      	subs	r5, r1, r4
  405446:	2d00      	cmp	r5, #0
  405448:	ddf0      	ble.n	40542c <_svfiprintf_r+0x732>
  40544a:	4a1b      	ldr	r2, [pc, #108]	; (4054b8 <_svfiprintf_r+0x7be>)
  40544c:	601a      	str	r2, [r3, #0]
  40544e:	2d10      	cmp	r5, #16
  405450:	dd15      	ble.n	40547e <_svfiprintf_r+0x784>
  405452:	2210      	movs	r2, #16
  405454:	605a      	str	r2, [r3, #4]
  405456:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405458:	3210      	adds	r2, #16
  40545a:	9211      	str	r2, [sp, #68]	; 0x44
  40545c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40545e:	3201      	adds	r2, #1
  405460:	2a07      	cmp	r2, #7
  405462:	9210      	str	r2, [sp, #64]	; 0x40
  405464:	dc01      	bgt.n	40546a <_svfiprintf_r+0x770>
  405466:	3308      	adds	r3, #8
  405468:	e007      	b.n	40547a <_svfiprintf_r+0x780>
  40546a:	4658      	mov	r0, fp
  40546c:	4641      	mov	r1, r8
  40546e:	aa0f      	add	r2, sp, #60	; 0x3c
  405470:	f7ff fbca 	bl	404c08 <__ssprint_r>
  405474:	2800      	cmp	r0, #0
  405476:	d12a      	bne.n	4054ce <_svfiprintf_r+0x7d4>
  405478:	ab1c      	add	r3, sp, #112	; 0x70
  40547a:	3d10      	subs	r5, #16
  40547c:	e7e5      	b.n	40544a <_svfiprintf_r+0x750>
  40547e:	605d      	str	r5, [r3, #4]
  405480:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405482:	441d      	add	r5, r3
  405484:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405486:	9511      	str	r5, [sp, #68]	; 0x44
  405488:	3301      	adds	r3, #1
  40548a:	2b07      	cmp	r3, #7
  40548c:	9310      	str	r3, [sp, #64]	; 0x40
  40548e:	ddcd      	ble.n	40542c <_svfiprintf_r+0x732>
  405490:	4658      	mov	r0, fp
  405492:	4641      	mov	r1, r8
  405494:	aa0f      	add	r2, sp, #60	; 0x3c
  405496:	f7ff fbb7 	bl	404c08 <__ssprint_r>
  40549a:	2800      	cmp	r0, #0
  40549c:	d0c6      	beq.n	40542c <_svfiprintf_r+0x732>
  40549e:	e016      	b.n	4054ce <_svfiprintf_r+0x7d4>
  4054a0:	4658      	mov	r0, fp
  4054a2:	4641      	mov	r1, r8
  4054a4:	aa0f      	add	r2, sp, #60	; 0x3c
  4054a6:	f7ff fbaf 	bl	404c08 <__ssprint_r>
  4054aa:	b980      	cbnz	r0, 4054ce <_svfiprintf_r+0x7d4>
  4054ac:	2300      	movs	r3, #0
  4054ae:	9310      	str	r3, [sp, #64]	; 0x40
  4054b0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4054b4:	e447      	b.n	404d46 <_svfiprintf_r+0x4c>
  4054b6:	bf00      	nop
  4054b8:	00405fb0 	.word	0x00405fb0
  4054bc:	00405fc0 	.word	0x00405fc0
  4054c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4054c2:	b123      	cbz	r3, 4054ce <_svfiprintf_r+0x7d4>
  4054c4:	4658      	mov	r0, fp
  4054c6:	4641      	mov	r1, r8
  4054c8:	aa0f      	add	r2, sp, #60	; 0x3c
  4054ca:	f7ff fb9d 	bl	404c08 <__ssprint_r>
  4054ce:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  4054d2:	9805      	ldr	r0, [sp, #20]
  4054d4:	f013 0f40 	tst.w	r3, #64	; 0x40
  4054d8:	bf18      	it	ne
  4054da:	f04f 30ff 	movne.w	r0, #4294967295
  4054de:	b02d      	add	sp, #180	; 0xb4
  4054e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004054e4 <__register_exitproc>:
  4054e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4054e8:	4698      	mov	r8, r3
  4054ea:	4b22      	ldr	r3, [pc, #136]	; (405574 <__register_exitproc+0x90>)
  4054ec:	681c      	ldr	r4, [r3, #0]
  4054ee:	4606      	mov	r6, r0
  4054f0:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
  4054f4:	460f      	mov	r7, r1
  4054f6:	4691      	mov	r9, r2
  4054f8:	b918      	cbnz	r0, 405502 <__register_exitproc+0x1e>
  4054fa:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
  4054fe:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405502:	6843      	ldr	r3, [r0, #4]
  405504:	2b1f      	cmp	r3, #31
  405506:	dd16      	ble.n	405536 <__register_exitproc+0x52>
  405508:	4b1b      	ldr	r3, [pc, #108]	; (405578 <__register_exitproc+0x94>)
  40550a:	b91b      	cbnz	r3, 405514 <__register_exitproc+0x30>
  40550c:	f04f 30ff 	mov.w	r0, #4294967295
  405510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405514:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405518:	f3af 8000 	nop.w
  40551c:	2800      	cmp	r0, #0
  40551e:	d0f5      	beq.n	40550c <__register_exitproc+0x28>
  405520:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  405524:	6001      	str	r1, [r0, #0]
  405526:	2500      	movs	r5, #0
  405528:	6045      	str	r5, [r0, #4]
  40552a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40552e:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
  405532:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
  405536:	6844      	ldr	r4, [r0, #4]
  405538:	b19e      	cbz	r6, 405562 <__register_exitproc+0x7e>
  40553a:	eb00 0584 	add.w	r5, r0, r4, lsl #2
  40553e:	2201      	movs	r2, #1
  405540:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  405544:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
  405548:	40a2      	lsls	r2, r4
  40554a:	4311      	orrs	r1, r2
  40554c:	2e02      	cmp	r6, #2
  40554e:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405552:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
  405556:	d104      	bne.n	405562 <__register_exitproc+0x7e>
  405558:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
  40555c:	431a      	orrs	r2, r3
  40555e:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
  405562:	1c63      	adds	r3, r4, #1
  405564:	3402      	adds	r4, #2
  405566:	6043      	str	r3, [r0, #4]
  405568:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
  40556c:	2000      	movs	r0, #0
  40556e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405572:	bf00      	nop
  405574:	00405e18 	.word	0x00405e18
  405578:	00000000 	.word	0x00000000

0040557c <_calloc_r>:
  40557c:	b510      	push	{r4, lr}
  40557e:	4351      	muls	r1, r2
  405580:	f7fe fb34 	bl	403bec <_malloc_r>
  405584:	4604      	mov	r4, r0
  405586:	b320      	cbz	r0, 4055d2 <_calloc_r+0x56>
  405588:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40558c:	f022 0203 	bic.w	r2, r2, #3
  405590:	3a04      	subs	r2, #4
  405592:	2a24      	cmp	r2, #36	; 0x24
  405594:	d81a      	bhi.n	4055cc <_calloc_r+0x50>
  405596:	2a13      	cmp	r2, #19
  405598:	d912      	bls.n	4055c0 <_calloc_r+0x44>
  40559a:	2100      	movs	r1, #0
  40559c:	2a1b      	cmp	r2, #27
  40559e:	6001      	str	r1, [r0, #0]
  4055a0:	6041      	str	r1, [r0, #4]
  4055a2:	d802      	bhi.n	4055aa <_calloc_r+0x2e>
  4055a4:	f100 0308 	add.w	r3, r0, #8
  4055a8:	e00b      	b.n	4055c2 <_calloc_r+0x46>
  4055aa:	2a24      	cmp	r2, #36	; 0x24
  4055ac:	6081      	str	r1, [r0, #8]
  4055ae:	60c1      	str	r1, [r0, #12]
  4055b0:	bf11      	iteee	ne
  4055b2:	f100 0310 	addne.w	r3, r0, #16
  4055b6:	6101      	streq	r1, [r0, #16]
  4055b8:	f100 0318 	addeq.w	r3, r0, #24
  4055bc:	6141      	streq	r1, [r0, #20]
  4055be:	e000      	b.n	4055c2 <_calloc_r+0x46>
  4055c0:	4603      	mov	r3, r0
  4055c2:	2200      	movs	r2, #0
  4055c4:	601a      	str	r2, [r3, #0]
  4055c6:	605a      	str	r2, [r3, #4]
  4055c8:	609a      	str	r2, [r3, #8]
  4055ca:	e002      	b.n	4055d2 <_calloc_r+0x56>
  4055cc:	2100      	movs	r1, #0
  4055ce:	f7fc fb43 	bl	401c58 <memset>
  4055d2:	4620      	mov	r0, r4
  4055d4:	bd10      	pop	{r4, pc}
	...

004055d8 <__gedf2>:
  4055d8:	f04f 3cff 	mov.w	ip, #4294967295
  4055dc:	e006      	b.n	4055ec <__cmpdf2+0x4>
  4055de:	bf00      	nop

004055e0 <__ledf2>:
  4055e0:	f04f 0c01 	mov.w	ip, #1
  4055e4:	e002      	b.n	4055ec <__cmpdf2+0x4>
  4055e6:	bf00      	nop

004055e8 <__cmpdf2>:
  4055e8:	f04f 0c01 	mov.w	ip, #1
  4055ec:	f84d cd04 	str.w	ip, [sp, #-4]!
  4055f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4055f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4055f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4055fc:	bf18      	it	ne
  4055fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  405602:	d01b      	beq.n	40563c <__cmpdf2+0x54>
  405604:	b001      	add	sp, #4
  405606:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40560a:	bf0c      	ite	eq
  40560c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  405610:	ea91 0f03 	teqne	r1, r3
  405614:	bf02      	ittt	eq
  405616:	ea90 0f02 	teqeq	r0, r2
  40561a:	2000      	moveq	r0, #0
  40561c:	4770      	bxeq	lr
  40561e:	f110 0f00 	cmn.w	r0, #0
  405622:	ea91 0f03 	teq	r1, r3
  405626:	bf58      	it	pl
  405628:	4299      	cmppl	r1, r3
  40562a:	bf08      	it	eq
  40562c:	4290      	cmpeq	r0, r2
  40562e:	bf2c      	ite	cs
  405630:	17d8      	asrcs	r0, r3, #31
  405632:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  405636:	f040 0001 	orr.w	r0, r0, #1
  40563a:	4770      	bx	lr
  40563c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405640:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405644:	d102      	bne.n	40564c <__cmpdf2+0x64>
  405646:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40564a:	d107      	bne.n	40565c <__cmpdf2+0x74>
  40564c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405650:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405654:	d1d6      	bne.n	405604 <__cmpdf2+0x1c>
  405656:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40565a:	d0d3      	beq.n	405604 <__cmpdf2+0x1c>
  40565c:	f85d 0b04 	ldr.w	r0, [sp], #4
  405660:	4770      	bx	lr
  405662:	bf00      	nop

00405664 <__aeabi_cdrcmple>:
  405664:	4684      	mov	ip, r0
  405666:	4610      	mov	r0, r2
  405668:	4662      	mov	r2, ip
  40566a:	468c      	mov	ip, r1
  40566c:	4619      	mov	r1, r3
  40566e:	4663      	mov	r3, ip
  405670:	e000      	b.n	405674 <__aeabi_cdcmpeq>
  405672:	bf00      	nop

00405674 <__aeabi_cdcmpeq>:
  405674:	b501      	push	{r0, lr}
  405676:	f7ff ffb7 	bl	4055e8 <__cmpdf2>
  40567a:	2800      	cmp	r0, #0
  40567c:	bf48      	it	mi
  40567e:	f110 0f00 	cmnmi.w	r0, #0
  405682:	bd01      	pop	{r0, pc}

00405684 <__aeabi_dcmpeq>:
  405684:	f84d ed08 	str.w	lr, [sp, #-8]!
  405688:	f7ff fff4 	bl	405674 <__aeabi_cdcmpeq>
  40568c:	bf0c      	ite	eq
  40568e:	2001      	moveq	r0, #1
  405690:	2000      	movne	r0, #0
  405692:	f85d fb08 	ldr.w	pc, [sp], #8
  405696:	bf00      	nop

00405698 <__aeabi_dcmplt>:
  405698:	f84d ed08 	str.w	lr, [sp, #-8]!
  40569c:	f7ff ffea 	bl	405674 <__aeabi_cdcmpeq>
  4056a0:	bf34      	ite	cc
  4056a2:	2001      	movcc	r0, #1
  4056a4:	2000      	movcs	r0, #0
  4056a6:	f85d fb08 	ldr.w	pc, [sp], #8
  4056aa:	bf00      	nop

004056ac <__aeabi_dcmple>:
  4056ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4056b0:	f7ff ffe0 	bl	405674 <__aeabi_cdcmpeq>
  4056b4:	bf94      	ite	ls
  4056b6:	2001      	movls	r0, #1
  4056b8:	2000      	movhi	r0, #0
  4056ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4056be:	bf00      	nop

004056c0 <__aeabi_dcmpge>:
  4056c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4056c4:	f7ff ffce 	bl	405664 <__aeabi_cdrcmple>
  4056c8:	bf94      	ite	ls
  4056ca:	2001      	movls	r0, #1
  4056cc:	2000      	movhi	r0, #0
  4056ce:	f85d fb08 	ldr.w	pc, [sp], #8
  4056d2:	bf00      	nop

004056d4 <__aeabi_dcmpgt>:
  4056d4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4056d8:	f7ff ffc4 	bl	405664 <__aeabi_cdrcmple>
  4056dc:	bf34      	ite	cc
  4056de:	2001      	movcc	r0, #1
  4056e0:	2000      	movcs	r0, #0
  4056e2:	f85d fb08 	ldr.w	pc, [sp], #8
  4056e6:	bf00      	nop

004056e8 <__aeabi_d2iz>:
  4056e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4056ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4056f0:	d215      	bcs.n	40571e <__aeabi_d2iz+0x36>
  4056f2:	d511      	bpl.n	405718 <__aeabi_d2iz+0x30>
  4056f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4056f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4056fc:	d912      	bls.n	405724 <__aeabi_d2iz+0x3c>
  4056fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405702:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405706:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40570a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40570e:	fa23 f002 	lsr.w	r0, r3, r2
  405712:	bf18      	it	ne
  405714:	4240      	negne	r0, r0
  405716:	4770      	bx	lr
  405718:	f04f 0000 	mov.w	r0, #0
  40571c:	4770      	bx	lr
  40571e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  405722:	d105      	bne.n	405730 <__aeabi_d2iz+0x48>
  405724:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  405728:	bf08      	it	eq
  40572a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40572e:	4770      	bx	lr
  405730:	f04f 0000 	mov.w	r0, #0
  405734:	4770      	bx	lr
  405736:	bf00      	nop

00405738 <__aeabi_uldivmod>:
  405738:	b94b      	cbnz	r3, 40574e <__aeabi_uldivmod+0x16>
  40573a:	b942      	cbnz	r2, 40574e <__aeabi_uldivmod+0x16>
  40573c:	2900      	cmp	r1, #0
  40573e:	bf08      	it	eq
  405740:	2800      	cmpeq	r0, #0
  405742:	d002      	beq.n	40574a <__aeabi_uldivmod+0x12>
  405744:	f04f 31ff 	mov.w	r1, #4294967295
  405748:	4608      	mov	r0, r1
  40574a:	f000 b83b 	b.w	4057c4 <__aeabi_idiv0>
  40574e:	b082      	sub	sp, #8
  405750:	46ec      	mov	ip, sp
  405752:	e92d 5000 	stmdb	sp!, {ip, lr}
  405756:	f000 f81d 	bl	405794 <__gnu_uldivmod_helper>
  40575a:	f8dd e004 	ldr.w	lr, [sp, #4]
  40575e:	b002      	add	sp, #8
  405760:	bc0c      	pop	{r2, r3}
  405762:	4770      	bx	lr

00405764 <__gnu_ldivmod_helper>:
  405764:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  405768:	9e06      	ldr	r6, [sp, #24]
  40576a:	4614      	mov	r4, r2
  40576c:	461d      	mov	r5, r3
  40576e:	4680      	mov	r8, r0
  405770:	4689      	mov	r9, r1
  405772:	f000 f829 	bl	4057c8 <__divdi3>
  405776:	fb04 f301 	mul.w	r3, r4, r1
  40577a:	fb00 3305 	mla	r3, r0, r5, r3
  40577e:	fba4 4500 	umull	r4, r5, r4, r0
  405782:	441d      	add	r5, r3
  405784:	ebb8 0404 	subs.w	r4, r8, r4
  405788:	eb69 0505 	sbc.w	r5, r9, r5
  40578c:	e9c6 4500 	strd	r4, r5, [r6]
  405790:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00405794 <__gnu_uldivmod_helper>:
  405794:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  405798:	9e06      	ldr	r6, [sp, #24]
  40579a:	4614      	mov	r4, r2
  40579c:	4680      	mov	r8, r0
  40579e:	4689      	mov	r9, r1
  4057a0:	461d      	mov	r5, r3
  4057a2:	f000 f95d 	bl	405a60 <__udivdi3>
  4057a6:	fb00 f505 	mul.w	r5, r0, r5
  4057aa:	fb04 5301 	mla	r3, r4, r1, r5
  4057ae:	fba0 4504 	umull	r4, r5, r0, r4
  4057b2:	441d      	add	r5, r3
  4057b4:	ebb8 0404 	subs.w	r4, r8, r4
  4057b8:	eb69 0505 	sbc.w	r5, r9, r5
  4057bc:	e9c6 4500 	strd	r4, r5, [r6]
  4057c0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

004057c4 <__aeabi_idiv0>:
  4057c4:	4770      	bx	lr
  4057c6:	bf00      	nop

004057c8 <__divdi3>:
  4057c8:	2900      	cmp	r1, #0
  4057ca:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4057ce:	f2c0 809f 	blt.w	405910 <__divdi3+0x148>
  4057d2:	2400      	movs	r4, #0
  4057d4:	2b00      	cmp	r3, #0
  4057d6:	f2c0 8096 	blt.w	405906 <__divdi3+0x13e>
  4057da:	4615      	mov	r5, r2
  4057dc:	4606      	mov	r6, r0
  4057de:	460f      	mov	r7, r1
  4057e0:	2b00      	cmp	r3, #0
  4057e2:	d13e      	bne.n	405862 <__divdi3+0x9a>
  4057e4:	428a      	cmp	r2, r1
  4057e6:	d957      	bls.n	405898 <__divdi3+0xd0>
  4057e8:	fab2 f382 	clz	r3, r2
  4057ec:	b14b      	cbz	r3, 405802 <__divdi3+0x3a>
  4057ee:	f1c3 0220 	rsb	r2, r3, #32
  4057f2:	fa01 f703 	lsl.w	r7, r1, r3
  4057f6:	fa20 f202 	lsr.w	r2, r0, r2
  4057fa:	409d      	lsls	r5, r3
  4057fc:	4317      	orrs	r7, r2
  4057fe:	fa00 f603 	lsl.w	r6, r0, r3
  405802:	0c29      	lsrs	r1, r5, #16
  405804:	fbb7 f2f1 	udiv	r2, r7, r1
  405808:	0c33      	lsrs	r3, r6, #16
  40580a:	fb01 7c12 	mls	ip, r1, r2, r7
  40580e:	b2a8      	uxth	r0, r5
  405810:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  405814:	fb00 f302 	mul.w	r3, r0, r2
  405818:	42bb      	cmp	r3, r7
  40581a:	d909      	bls.n	405830 <__divdi3+0x68>
  40581c:	197f      	adds	r7, r7, r5
  40581e:	f102 3cff 	add.w	ip, r2, #4294967295
  405822:	f080 8101 	bcs.w	405a28 <__divdi3+0x260>
  405826:	42bb      	cmp	r3, r7
  405828:	f240 80fe 	bls.w	405a28 <__divdi3+0x260>
  40582c:	3a02      	subs	r2, #2
  40582e:	442f      	add	r7, r5
  405830:	1aff      	subs	r7, r7, r3
  405832:	fbb7 f3f1 	udiv	r3, r7, r1
  405836:	b2b6      	uxth	r6, r6
  405838:	fb01 7113 	mls	r1, r1, r3, r7
  40583c:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  405840:	fb00 f003 	mul.w	r0, r0, r3
  405844:	4288      	cmp	r0, r1
  405846:	d908      	bls.n	40585a <__divdi3+0x92>
  405848:	1949      	adds	r1, r1, r5
  40584a:	f103 37ff 	add.w	r7, r3, #4294967295
  40584e:	f080 80ed 	bcs.w	405a2c <__divdi3+0x264>
  405852:	4288      	cmp	r0, r1
  405854:	f240 80ea 	bls.w	405a2c <__divdi3+0x264>
  405858:	3b02      	subs	r3, #2
  40585a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40585e:	2300      	movs	r3, #0
  405860:	e003      	b.n	40586a <__divdi3+0xa2>
  405862:	428b      	cmp	r3, r1
  405864:	d90a      	bls.n	40587c <__divdi3+0xb4>
  405866:	2300      	movs	r3, #0
  405868:	461a      	mov	r2, r3
  40586a:	4610      	mov	r0, r2
  40586c:	4619      	mov	r1, r3
  40586e:	b114      	cbz	r4, 405876 <__divdi3+0xae>
  405870:	4240      	negs	r0, r0
  405872:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405876:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40587a:	4770      	bx	lr
  40587c:	fab3 f883 	clz	r8, r3
  405880:	f1b8 0f00 	cmp.w	r8, #0
  405884:	f040 8084 	bne.w	405990 <__divdi3+0x1c8>
  405888:	428b      	cmp	r3, r1
  40588a:	d302      	bcc.n	405892 <__divdi3+0xca>
  40588c:	4282      	cmp	r2, r0
  40588e:	f200 80de 	bhi.w	405a4e <__divdi3+0x286>
  405892:	2300      	movs	r3, #0
  405894:	2201      	movs	r2, #1
  405896:	e7e8      	b.n	40586a <__divdi3+0xa2>
  405898:	b912      	cbnz	r2, 4058a0 <__divdi3+0xd8>
  40589a:	2301      	movs	r3, #1
  40589c:	fbb3 f5f2 	udiv	r5, r3, r2
  4058a0:	fab5 f285 	clz	r2, r5
  4058a4:	2a00      	cmp	r2, #0
  4058a6:	d139      	bne.n	40591c <__divdi3+0x154>
  4058a8:	1b7f      	subs	r7, r7, r5
  4058aa:	0c28      	lsrs	r0, r5, #16
  4058ac:	fa1f fc85 	uxth.w	ip, r5
  4058b0:	2301      	movs	r3, #1
  4058b2:	fbb7 f1f0 	udiv	r1, r7, r0
  4058b6:	0c32      	lsrs	r2, r6, #16
  4058b8:	fb00 7711 	mls	r7, r0, r1, r7
  4058bc:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  4058c0:	fb0c f201 	mul.w	r2, ip, r1
  4058c4:	42ba      	cmp	r2, r7
  4058c6:	d907      	bls.n	4058d8 <__divdi3+0x110>
  4058c8:	197f      	adds	r7, r7, r5
  4058ca:	f101 38ff 	add.w	r8, r1, #4294967295
  4058ce:	d202      	bcs.n	4058d6 <__divdi3+0x10e>
  4058d0:	42ba      	cmp	r2, r7
  4058d2:	f200 80c1 	bhi.w	405a58 <__divdi3+0x290>
  4058d6:	4641      	mov	r1, r8
  4058d8:	1abf      	subs	r7, r7, r2
  4058da:	fbb7 f2f0 	udiv	r2, r7, r0
  4058de:	b2b6      	uxth	r6, r6
  4058e0:	fb00 7012 	mls	r0, r0, r2, r7
  4058e4:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  4058e8:	fb0c fc02 	mul.w	ip, ip, r2
  4058ec:	4584      	cmp	ip, r0
  4058ee:	d907      	bls.n	405900 <__divdi3+0x138>
  4058f0:	1940      	adds	r0, r0, r5
  4058f2:	f102 37ff 	add.w	r7, r2, #4294967295
  4058f6:	d202      	bcs.n	4058fe <__divdi3+0x136>
  4058f8:	4584      	cmp	ip, r0
  4058fa:	f200 80ab 	bhi.w	405a54 <__divdi3+0x28c>
  4058fe:	463a      	mov	r2, r7
  405900:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  405904:	e7b1      	b.n	40586a <__divdi3+0xa2>
  405906:	43e4      	mvns	r4, r4
  405908:	4252      	negs	r2, r2
  40590a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40590e:	e764      	b.n	4057da <__divdi3+0x12>
  405910:	4240      	negs	r0, r0
  405912:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405916:	f04f 34ff 	mov.w	r4, #4294967295
  40591a:	e75b      	b.n	4057d4 <__divdi3+0xc>
  40591c:	4095      	lsls	r5, r2
  40591e:	f1c2 0320 	rsb	r3, r2, #32
  405922:	fa27 f103 	lsr.w	r1, r7, r3
  405926:	0c28      	lsrs	r0, r5, #16
  405928:	fa26 f303 	lsr.w	r3, r6, r3
  40592c:	4097      	lsls	r7, r2
  40592e:	fbb1 f8f0 	udiv	r8, r1, r0
  405932:	431f      	orrs	r7, r3
  405934:	0c3b      	lsrs	r3, r7, #16
  405936:	fb00 1118 	mls	r1, r0, r8, r1
  40593a:	fa1f fc85 	uxth.w	ip, r5
  40593e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  405942:	fb0c f308 	mul.w	r3, ip, r8
  405946:	428b      	cmp	r3, r1
  405948:	fa06 f602 	lsl.w	r6, r6, r2
  40594c:	d908      	bls.n	405960 <__divdi3+0x198>
  40594e:	1949      	adds	r1, r1, r5
  405950:	f108 32ff 	add.w	r2, r8, #4294967295
  405954:	d279      	bcs.n	405a4a <__divdi3+0x282>
  405956:	428b      	cmp	r3, r1
  405958:	d977      	bls.n	405a4a <__divdi3+0x282>
  40595a:	f1a8 0802 	sub.w	r8, r8, #2
  40595e:	4429      	add	r1, r5
  405960:	1ac9      	subs	r1, r1, r3
  405962:	fbb1 f3f0 	udiv	r3, r1, r0
  405966:	b2bf      	uxth	r7, r7
  405968:	fb00 1113 	mls	r1, r0, r3, r1
  40596c:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  405970:	fb0c f203 	mul.w	r2, ip, r3
  405974:	42ba      	cmp	r2, r7
  405976:	d907      	bls.n	405988 <__divdi3+0x1c0>
  405978:	197f      	adds	r7, r7, r5
  40597a:	f103 31ff 	add.w	r1, r3, #4294967295
  40597e:	d260      	bcs.n	405a42 <__divdi3+0x27a>
  405980:	42ba      	cmp	r2, r7
  405982:	d95e      	bls.n	405a42 <__divdi3+0x27a>
  405984:	3b02      	subs	r3, #2
  405986:	442f      	add	r7, r5
  405988:	1abf      	subs	r7, r7, r2
  40598a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40598e:	e790      	b.n	4058b2 <__divdi3+0xea>
  405990:	f1c8 0220 	rsb	r2, r8, #32
  405994:	fa03 fc08 	lsl.w	ip, r3, r8
  405998:	fa25 f302 	lsr.w	r3, r5, r2
  40599c:	ea43 0c0c 	orr.w	ip, r3, ip
  4059a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
  4059a4:	fa21 f302 	lsr.w	r3, r1, r2
  4059a8:	fa01 f708 	lsl.w	r7, r1, r8
  4059ac:	fa20 f202 	lsr.w	r2, r0, r2
  4059b0:	fbb3 f1f9 	udiv	r1, r3, r9
  4059b4:	4317      	orrs	r7, r2
  4059b6:	fb09 3311 	mls	r3, r9, r1, r3
  4059ba:	0c3a      	lsrs	r2, r7, #16
  4059bc:	fa1f fb8c 	uxth.w	fp, ip
  4059c0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  4059c4:	fb0b fa01 	mul.w	sl, fp, r1
  4059c8:	459a      	cmp	sl, r3
  4059ca:	fa05 f008 	lsl.w	r0, r5, r8
  4059ce:	d908      	bls.n	4059e2 <__divdi3+0x21a>
  4059d0:	eb13 030c 	adds.w	r3, r3, ip
  4059d4:	f101 32ff 	add.w	r2, r1, #4294967295
  4059d8:	d235      	bcs.n	405a46 <__divdi3+0x27e>
  4059da:	459a      	cmp	sl, r3
  4059dc:	d933      	bls.n	405a46 <__divdi3+0x27e>
  4059de:	3902      	subs	r1, #2
  4059e0:	4463      	add	r3, ip
  4059e2:	ebca 0303 	rsb	r3, sl, r3
  4059e6:	fbb3 f2f9 	udiv	r2, r3, r9
  4059ea:	fb09 3312 	mls	r3, r9, r2, r3
  4059ee:	b2bf      	uxth	r7, r7
  4059f0:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  4059f4:	fb0b f902 	mul.w	r9, fp, r2
  4059f8:	45b9      	cmp	r9, r7
  4059fa:	d908      	bls.n	405a0e <__divdi3+0x246>
  4059fc:	eb17 070c 	adds.w	r7, r7, ip
  405a00:	f102 33ff 	add.w	r3, r2, #4294967295
  405a04:	d21b      	bcs.n	405a3e <__divdi3+0x276>
  405a06:	45b9      	cmp	r9, r7
  405a08:	d919      	bls.n	405a3e <__divdi3+0x276>
  405a0a:	3a02      	subs	r2, #2
  405a0c:	4467      	add	r7, ip
  405a0e:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  405a12:	fba5 0100 	umull	r0, r1, r5, r0
  405a16:	ebc9 0707 	rsb	r7, r9, r7
  405a1a:	428f      	cmp	r7, r1
  405a1c:	f04f 0300 	mov.w	r3, #0
  405a20:	d30a      	bcc.n	405a38 <__divdi3+0x270>
  405a22:	d005      	beq.n	405a30 <__divdi3+0x268>
  405a24:	462a      	mov	r2, r5
  405a26:	e720      	b.n	40586a <__divdi3+0xa2>
  405a28:	4662      	mov	r2, ip
  405a2a:	e701      	b.n	405830 <__divdi3+0x68>
  405a2c:	463b      	mov	r3, r7
  405a2e:	e714      	b.n	40585a <__divdi3+0x92>
  405a30:	fa06 f608 	lsl.w	r6, r6, r8
  405a34:	4286      	cmp	r6, r0
  405a36:	d2f5      	bcs.n	405a24 <__divdi3+0x25c>
  405a38:	1e6a      	subs	r2, r5, #1
  405a3a:	2300      	movs	r3, #0
  405a3c:	e715      	b.n	40586a <__divdi3+0xa2>
  405a3e:	461a      	mov	r2, r3
  405a40:	e7e5      	b.n	405a0e <__divdi3+0x246>
  405a42:	460b      	mov	r3, r1
  405a44:	e7a0      	b.n	405988 <__divdi3+0x1c0>
  405a46:	4611      	mov	r1, r2
  405a48:	e7cb      	b.n	4059e2 <__divdi3+0x21a>
  405a4a:	4690      	mov	r8, r2
  405a4c:	e788      	b.n	405960 <__divdi3+0x198>
  405a4e:	4643      	mov	r3, r8
  405a50:	4642      	mov	r2, r8
  405a52:	e70a      	b.n	40586a <__divdi3+0xa2>
  405a54:	3a02      	subs	r2, #2
  405a56:	e753      	b.n	405900 <__divdi3+0x138>
  405a58:	3902      	subs	r1, #2
  405a5a:	442f      	add	r7, r5
  405a5c:	e73c      	b.n	4058d8 <__divdi3+0x110>
  405a5e:	bf00      	nop

00405a60 <__udivdi3>:
  405a60:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405a64:	4614      	mov	r4, r2
  405a66:	4605      	mov	r5, r0
  405a68:	460e      	mov	r6, r1
  405a6a:	2b00      	cmp	r3, #0
  405a6c:	d143      	bne.n	405af6 <__udivdi3+0x96>
  405a6e:	428a      	cmp	r2, r1
  405a70:	d953      	bls.n	405b1a <__udivdi3+0xba>
  405a72:	fab2 f782 	clz	r7, r2
  405a76:	b157      	cbz	r7, 405a8e <__udivdi3+0x2e>
  405a78:	f1c7 0620 	rsb	r6, r7, #32
  405a7c:	fa20 f606 	lsr.w	r6, r0, r6
  405a80:	fa01 f307 	lsl.w	r3, r1, r7
  405a84:	fa02 f407 	lsl.w	r4, r2, r7
  405a88:	431e      	orrs	r6, r3
  405a8a:	fa00 f507 	lsl.w	r5, r0, r7
  405a8e:	0c21      	lsrs	r1, r4, #16
  405a90:	fbb6 f2f1 	udiv	r2, r6, r1
  405a94:	0c2b      	lsrs	r3, r5, #16
  405a96:	fb01 6712 	mls	r7, r1, r2, r6
  405a9a:	b2a0      	uxth	r0, r4
  405a9c:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  405aa0:	fb00 f302 	mul.w	r3, r0, r2
  405aa4:	42b3      	cmp	r3, r6
  405aa6:	d909      	bls.n	405abc <__udivdi3+0x5c>
  405aa8:	1936      	adds	r6, r6, r4
  405aaa:	f102 37ff 	add.w	r7, r2, #4294967295
  405aae:	f080 80f6 	bcs.w	405c9e <__udivdi3+0x23e>
  405ab2:	42b3      	cmp	r3, r6
  405ab4:	f240 80f3 	bls.w	405c9e <__udivdi3+0x23e>
  405ab8:	3a02      	subs	r2, #2
  405aba:	4426      	add	r6, r4
  405abc:	1af6      	subs	r6, r6, r3
  405abe:	fbb6 f3f1 	udiv	r3, r6, r1
  405ac2:	b2ad      	uxth	r5, r5
  405ac4:	fb01 6113 	mls	r1, r1, r3, r6
  405ac8:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  405acc:	fb00 f003 	mul.w	r0, r0, r3
  405ad0:	4288      	cmp	r0, r1
  405ad2:	d908      	bls.n	405ae6 <__udivdi3+0x86>
  405ad4:	1909      	adds	r1, r1, r4
  405ad6:	f103 36ff 	add.w	r6, r3, #4294967295
  405ada:	f080 80e2 	bcs.w	405ca2 <__udivdi3+0x242>
  405ade:	4288      	cmp	r0, r1
  405ae0:	f240 80df 	bls.w	405ca2 <__udivdi3+0x242>
  405ae4:	3b02      	subs	r3, #2
  405ae6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  405aea:	2300      	movs	r3, #0
  405aec:	4610      	mov	r0, r2
  405aee:	4619      	mov	r1, r3
  405af0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405af4:	4770      	bx	lr
  405af6:	428b      	cmp	r3, r1
  405af8:	d84a      	bhi.n	405b90 <__udivdi3+0x130>
  405afa:	fab3 f683 	clz	r6, r3
  405afe:	2e00      	cmp	r6, #0
  405b00:	d14d      	bne.n	405b9e <__udivdi3+0x13e>
  405b02:	428b      	cmp	r3, r1
  405b04:	d302      	bcc.n	405b0c <__udivdi3+0xac>
  405b06:	4282      	cmp	r2, r0
  405b08:	f200 80d6 	bhi.w	405cb8 <__udivdi3+0x258>
  405b0c:	2300      	movs	r3, #0
  405b0e:	2201      	movs	r2, #1
  405b10:	4610      	mov	r0, r2
  405b12:	4619      	mov	r1, r3
  405b14:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405b18:	4770      	bx	lr
  405b1a:	b912      	cbnz	r2, 405b22 <__udivdi3+0xc2>
  405b1c:	2401      	movs	r4, #1
  405b1e:	fbb4 f4f2 	udiv	r4, r4, r2
  405b22:	fab4 f284 	clz	r2, r4
  405b26:	2a00      	cmp	r2, #0
  405b28:	d17c      	bne.n	405c24 <__udivdi3+0x1c4>
  405b2a:	1b09      	subs	r1, r1, r4
  405b2c:	0c26      	lsrs	r6, r4, #16
  405b2e:	b2a7      	uxth	r7, r4
  405b30:	2301      	movs	r3, #1
  405b32:	fbb1 f0f6 	udiv	r0, r1, r6
  405b36:	0c2a      	lsrs	r2, r5, #16
  405b38:	fb06 1110 	mls	r1, r6, r0, r1
  405b3c:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  405b40:	fb07 f200 	mul.w	r2, r7, r0
  405b44:	428a      	cmp	r2, r1
  405b46:	d907      	bls.n	405b58 <__udivdi3+0xf8>
  405b48:	1909      	adds	r1, r1, r4
  405b4a:	f100 3cff 	add.w	ip, r0, #4294967295
  405b4e:	d202      	bcs.n	405b56 <__udivdi3+0xf6>
  405b50:	428a      	cmp	r2, r1
  405b52:	f200 80c3 	bhi.w	405cdc <__udivdi3+0x27c>
  405b56:	4660      	mov	r0, ip
  405b58:	1a89      	subs	r1, r1, r2
  405b5a:	fbb1 f2f6 	udiv	r2, r1, r6
  405b5e:	b2ad      	uxth	r5, r5
  405b60:	fb06 1112 	mls	r1, r6, r2, r1
  405b64:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  405b68:	fb07 f702 	mul.w	r7, r7, r2
  405b6c:	42af      	cmp	r7, r5
  405b6e:	d908      	bls.n	405b82 <__udivdi3+0x122>
  405b70:	192c      	adds	r4, r5, r4
  405b72:	f102 31ff 	add.w	r1, r2, #4294967295
  405b76:	f080 8096 	bcs.w	405ca6 <__udivdi3+0x246>
  405b7a:	42a7      	cmp	r7, r4
  405b7c:	f240 8093 	bls.w	405ca6 <__udivdi3+0x246>
  405b80:	3a02      	subs	r2, #2
  405b82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  405b86:	4610      	mov	r0, r2
  405b88:	4619      	mov	r1, r3
  405b8a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405b8e:	4770      	bx	lr
  405b90:	2300      	movs	r3, #0
  405b92:	461a      	mov	r2, r3
  405b94:	4610      	mov	r0, r2
  405b96:	4619      	mov	r1, r3
  405b98:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405b9c:	4770      	bx	lr
  405b9e:	f1c6 0520 	rsb	r5, r6, #32
  405ba2:	fa22 f405 	lsr.w	r4, r2, r5
  405ba6:	40b3      	lsls	r3, r6
  405ba8:	431c      	orrs	r4, r3
  405baa:	ea4f 4814 	mov.w	r8, r4, lsr #16
  405bae:	fa21 f305 	lsr.w	r3, r1, r5
  405bb2:	fa01 f706 	lsl.w	r7, r1, r6
  405bb6:	fa20 f505 	lsr.w	r5, r0, r5
  405bba:	fbb3 fcf8 	udiv	ip, r3, r8
  405bbe:	432f      	orrs	r7, r5
  405bc0:	fb08 331c 	mls	r3, r8, ip, r3
  405bc4:	0c3d      	lsrs	r5, r7, #16
  405bc6:	fa1f fa84 	uxth.w	sl, r4
  405bca:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  405bce:	fb0a f90c 	mul.w	r9, sl, ip
  405bd2:	4599      	cmp	r9, r3
  405bd4:	fa02 fb06 	lsl.w	fp, r2, r6
  405bd8:	d904      	bls.n	405be4 <__udivdi3+0x184>
  405bda:	191b      	adds	r3, r3, r4
  405bdc:	f10c 32ff 	add.w	r2, ip, #4294967295
  405be0:	d36d      	bcc.n	405cbe <__udivdi3+0x25e>
  405be2:	4694      	mov	ip, r2
  405be4:	ebc9 0303 	rsb	r3, r9, r3
  405be8:	fbb3 f5f8 	udiv	r5, r3, r8
  405bec:	fb08 3315 	mls	r3, r8, r5, r3
  405bf0:	b2bf      	uxth	r7, r7
  405bf2:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  405bf6:	fb0a f805 	mul.w	r8, sl, r5
  405bfa:	45b8      	cmp	r8, r7
  405bfc:	d904      	bls.n	405c08 <__udivdi3+0x1a8>
  405bfe:	193f      	adds	r7, r7, r4
  405c00:	f105 33ff 	add.w	r3, r5, #4294967295
  405c04:	d361      	bcc.n	405cca <__udivdi3+0x26a>
  405c06:	461d      	mov	r5, r3
  405c08:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  405c0c:	fbac 230b 	umull	r2, r3, ip, fp
  405c10:	ebc8 0707 	rsb	r7, r8, r7
  405c14:	429f      	cmp	r7, r3
  405c16:	f04f 0500 	mov.w	r5, #0
  405c1a:	d349      	bcc.n	405cb0 <__udivdi3+0x250>
  405c1c:	d045      	beq.n	405caa <__udivdi3+0x24a>
  405c1e:	4662      	mov	r2, ip
  405c20:	462b      	mov	r3, r5
  405c22:	e763      	b.n	405aec <__udivdi3+0x8c>
  405c24:	4094      	lsls	r4, r2
  405c26:	f1c2 0320 	rsb	r3, r2, #32
  405c2a:	fa21 fc03 	lsr.w	ip, r1, r3
  405c2e:	0c26      	lsrs	r6, r4, #16
  405c30:	fa20 f303 	lsr.w	r3, r0, r3
  405c34:	fa01 f502 	lsl.w	r5, r1, r2
  405c38:	fbbc f8f6 	udiv	r8, ip, r6
  405c3c:	ea43 0105 	orr.w	r1, r3, r5
  405c40:	0c0b      	lsrs	r3, r1, #16
  405c42:	fb06 cc18 	mls	ip, r6, r8, ip
  405c46:	b2a7      	uxth	r7, r4
  405c48:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  405c4c:	fb07 f308 	mul.w	r3, r7, r8
  405c50:	4563      	cmp	r3, ip
  405c52:	fa00 f502 	lsl.w	r5, r0, r2
  405c56:	d909      	bls.n	405c6c <__udivdi3+0x20c>
  405c58:	eb1c 0c04 	adds.w	ip, ip, r4
  405c5c:	f108 32ff 	add.w	r2, r8, #4294967295
  405c60:	d23a      	bcs.n	405cd8 <__udivdi3+0x278>
  405c62:	4563      	cmp	r3, ip
  405c64:	d938      	bls.n	405cd8 <__udivdi3+0x278>
  405c66:	f1a8 0802 	sub.w	r8, r8, #2
  405c6a:	44a4      	add	ip, r4
  405c6c:	ebc3 0c0c 	rsb	ip, r3, ip
  405c70:	fbbc f3f6 	udiv	r3, ip, r6
  405c74:	b289      	uxth	r1, r1
  405c76:	fb06 cc13 	mls	ip, r6, r3, ip
  405c7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  405c7e:	fb07 f203 	mul.w	r2, r7, r3
  405c82:	428a      	cmp	r2, r1
  405c84:	d907      	bls.n	405c96 <__udivdi3+0x236>
  405c86:	1909      	adds	r1, r1, r4
  405c88:	f103 30ff 	add.w	r0, r3, #4294967295
  405c8c:	d222      	bcs.n	405cd4 <__udivdi3+0x274>
  405c8e:	428a      	cmp	r2, r1
  405c90:	d920      	bls.n	405cd4 <__udivdi3+0x274>
  405c92:	3b02      	subs	r3, #2
  405c94:	4421      	add	r1, r4
  405c96:	1a89      	subs	r1, r1, r2
  405c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  405c9c:	e749      	b.n	405b32 <__udivdi3+0xd2>
  405c9e:	463a      	mov	r2, r7
  405ca0:	e70c      	b.n	405abc <__udivdi3+0x5c>
  405ca2:	4633      	mov	r3, r6
  405ca4:	e71f      	b.n	405ae6 <__udivdi3+0x86>
  405ca6:	460a      	mov	r2, r1
  405ca8:	e76b      	b.n	405b82 <__udivdi3+0x122>
  405caa:	40b0      	lsls	r0, r6
  405cac:	4290      	cmp	r0, r2
  405cae:	d2b6      	bcs.n	405c1e <__udivdi3+0x1be>
  405cb0:	f10c 32ff 	add.w	r2, ip, #4294967295
  405cb4:	2300      	movs	r3, #0
  405cb6:	e719      	b.n	405aec <__udivdi3+0x8c>
  405cb8:	4633      	mov	r3, r6
  405cba:	4632      	mov	r2, r6
  405cbc:	e716      	b.n	405aec <__udivdi3+0x8c>
  405cbe:	4599      	cmp	r9, r3
  405cc0:	d98f      	bls.n	405be2 <__udivdi3+0x182>
  405cc2:	f1ac 0c02 	sub.w	ip, ip, #2
  405cc6:	4423      	add	r3, r4
  405cc8:	e78c      	b.n	405be4 <__udivdi3+0x184>
  405cca:	45b8      	cmp	r8, r7
  405ccc:	d99b      	bls.n	405c06 <__udivdi3+0x1a6>
  405cce:	3d02      	subs	r5, #2
  405cd0:	4427      	add	r7, r4
  405cd2:	e799      	b.n	405c08 <__udivdi3+0x1a8>
  405cd4:	4603      	mov	r3, r0
  405cd6:	e7de      	b.n	405c96 <__udivdi3+0x236>
  405cd8:	4690      	mov	r8, r2
  405cda:	e7c7      	b.n	405c6c <__udivdi3+0x20c>
  405cdc:	3802      	subs	r0, #2
  405cde:	4421      	add	r1, r4
  405ce0:	e73a      	b.n	405b58 <__udivdi3+0xf8>
  405ce2:	bf00      	nop
	...
  405cf8:	00000004 	.word	0x00000004
  405cfc:	00000004 	.word	0x00000004
  405d00:	00000004 	.word	0x00000004
  405d04:	656d6147 	.word	0x656d6147
  405d08:	61745320 	.word	0x61745320
  405d0c:	25206574 	.word	0x25206574
  405d10:	73203a64 	.word	0x73203a64
  405d14:	63656c65 	.word	0x63656c65
  405d18:	20646574 	.word	0x20646574
  405d1c:	726f6f64 	.word	0x726f6f64
  405d20:	20642520 	.word	0x20642520
  405d24:	6e65706f 	.word	0x6e65706f
  405d28:	6f6f6420 	.word	0x6f6f6420
  405d2c:	64252072 	.word	0x64252072
  405d30:	00000000 	.word	0x00000000
  405d34:	3a6e6f57 	.word	0x3a6e6f57
  405d38:	6d614720 	.word	0x6d614720
  405d3c:	74532065 	.word	0x74532065
  405d40:	20657461 	.word	0x20657461
  405d44:	203a6425 	.word	0x203a6425
  405d48:	656c6573 	.word	0x656c6573
  405d4c:	64657463 	.word	0x64657463
  405d50:	6f6f6420 	.word	0x6f6f6420
  405d54:	64252072 	.word	0x64252072
  405d58:	65706f20 	.word	0x65706f20
  405d5c:	6f64206e 	.word	0x6f64206e
  405d60:	2520726f 	.word	0x2520726f
  405d64:	00000064 	.word	0x00000064
  405d68:	74736f4c 	.word	0x74736f4c
  405d6c:	6147203a 	.word	0x6147203a
  405d70:	5320656d 	.word	0x5320656d
  405d74:	65746174 	.word	0x65746174
  405d78:	3a642520 	.word	0x3a642520
  405d7c:	6c657320 	.word	0x6c657320
  405d80:	65746365 	.word	0x65746365
  405d84:	6f642064 	.word	0x6f642064
  405d88:	2520726f 	.word	0x2520726f
  405d8c:	706f2064 	.word	0x706f2064
  405d90:	64206e65 	.word	0x64206e65
  405d94:	20726f6f 	.word	0x20726f6f
  405d98:	00006425 	.word	0x00006425
  405d9c:	73657250 	.word	0x73657250
  405da0:	20612073 	.word	0x20612073
  405da4:	74747562 	.word	0x74747562
  405da8:	74206e6f 	.word	0x74206e6f
  405dac:	6573206f 	.word	0x6573206f
  405db0:	7463656c 	.word	0x7463656c
  405db4:	64206120 	.word	0x64206120
  405db8:	00726f6f 	.word	0x00726f6f
  405dbc:	656d6147 	.word	0x656d6147
  405dc0:	6c502073 	.word	0x6c502073
  405dc4:	64657961 	.word	0x64657961
  405dc8:	6425203a 	.word	0x6425203a
  405dcc:	6147202c 	.word	0x6147202c
  405dd0:	2073656d 	.word	0x2073656d
  405dd4:	206e6f57 	.word	0x206e6f57
  405dd8:	202c6425 	.word	0x202c6425
  405ddc:	74697753 	.word	0x74697753
  405de0:	64656863 	.word	0x64656863
  405de4:	20642520 	.word	0x20642520
  405de8:	74697753 	.word	0x74697753
  405dec:	64656863 	.word	0x64656863
  405df0:	6e6f5720 	.word	0x6e6f5720
  405df4:	00642520 	.word	0x00642520
  405df8:	73657250 	.word	0x73657250
  405dfc:	20612073 	.word	0x20612073
  405e00:	74747562 	.word	0x74747562
  405e04:	74206e6f 	.word	0x74206e6f
  405e08:	6c70206f 	.word	0x6c70206f
  405e0c:	61207961 	.word	0x61207961
  405e10:	6e696167 	.word	0x6e696167
  405e14:	00000000 	.word	0x00000000

00405e18 <_global_impure_ptr>:
  405e18:	20000020 20200043                                 .. C.

00405e1e <blanks.6743>:
  405e1e:	20202020 20202020 20202020 20202020                     

00405e2e <zeroes.6744>:
  405e2e:	30303030 30303030 30303030 30303030     0000000000000000
  405e3e:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  405e4e:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  405e5e:	32313000 36353433 61393837 65646362     .0123456789abcde
  405e6e:	00300066 69666e49 7974696e 4e614e00     f.0.Infinity.NaN
  405e7e:	534f5000 2e005849 00050000                       .POSIX....

00405e88 <p05.5289>:
  405e88:	00000005 00000019 0000007d 00000000     ........}.......

00405e98 <__mprec_tens>:
  405e98:	00000000 3ff00000 00000000 40240000     .......?......$@
  405ea8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  405eb8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  405ec8:	00000000 412e8480 00000000 416312d0     .......A......cA
  405ed8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  405ee8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  405ef8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  405f08:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  405f18:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  405f28:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  405f38:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  405f48:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  405f58:	79d99db4 44ea7843                       ...yCx.D

00405f60 <__mprec_tinytens>:
  405f60:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
  405f70:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
  405f80:	64ac6f43 0ac80628                       Co.d(...

00405f88 <__mprec_bigtens>:
  405f88:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  405f98:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  405fa8:	7f73bf3c 75154fdd                       <.s..O.u

00405fb0 <blanks.6687>:
  405fb0:	20202020 20202020 20202020 20202020                     

00405fc0 <zeroes.6688>:
  405fc0:	30303030 30303030 30303030 30303030     0000000000000000

00405fd0 <_init>:
  405fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405fd2:	bf00      	nop
  405fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405fd6:	bc08      	pop	{r3}
  405fd8:	469e      	mov	lr, r3
  405fda:	4770      	bx	lr

00405fdc <__init_array_start>:
  405fdc:	00402c95 	.word	0x00402c95

00405fe0 <__frame_dummy_init_array_entry>:
  405fe0:	00400145                                E.@.

00405fe4 <_fini>:
  405fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405fe6:	bf00      	nop
  405fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405fea:	bc08      	pop	{r3}
  405fec:	469e      	mov	lr, r3
  405fee:	4770      	bx	lr

00405ff0 <__fini_array_start>:
  405ff0:	0040011d 	.word	0x0040011d

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <g_door_pressed>:
20000010:	0004 0000 0000 0000                         ........

20000018 <_impure_ptr>:
20000018:	0020 2000 0000 0000                          .. ....

20000020 <impure_data>:
20000020:	0000 0000 030c 2000 0374 2000 03dc 2000     ....... t.. ... 
	...
20000054:	5e1c 0040 0000 0000 0000 0000 0000 0000     .^@.............
	...
200000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000448 <lc_ctype_charset>:
20000448:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20000468 <__mb_cur_max>:
20000468:	0001 0000                                   ....

2000046c <lc_message_charset>:
2000046c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2000048c <lconv>:
2000048c:	5e85 0040 5e86 0040 5e86 0040 5e86 0040     .^@..^@..^@..^@.
2000049c:	5e86 0040 5e86 0040 5e86 0040 5e86 0040     .^@..^@..^@..^@.
200004ac:	5e86 0040 5e86 0040 ffff ffff ffff ffff     .^@..^@.........
200004bc:	ffff ffff ffff 0000                         ........

200004c4 <__malloc_av_>:
	...
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 
2000084c:	0844 2000 0844 2000 084c 2000 084c 2000     D.. D.. L.. L.. 
2000085c:	0854 2000 0854 2000 085c 2000 085c 2000     T.. T.. \.. \.. 
2000086c:	0864 2000 0864 2000 086c 2000 086c 2000     d.. d.. l.. l.. 
2000087c:	0874 2000 0874 2000 087c 2000 087c 2000     t.. t.. |.. |.. 
2000088c:	0884 2000 0884 2000 088c 2000 088c 2000     ... ... ... ... 
2000089c:	0894 2000 0894 2000 089c 2000 089c 2000     ... ... ... ... 
200008ac:	08a4 2000 08a4 2000 08ac 2000 08ac 2000     ... ... ... ... 
200008bc:	08b4 2000 08b4 2000 08bc 2000 08bc 2000     ... ... ... ... 

200008cc <__malloc_sbrk_base>:
200008cc:	ffff ffff                                   ....

200008d0 <__malloc_trim_threshold>:
200008d0:	0000 0002                                   ....
