
MontyHallGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ea4  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405ea4  00405ea4  0000dea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008d4  20000000  00405eac  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000d4  200008d4  00406780  000108d4  2**2
                  ALLOC
  4 .stack        00003000  200009a8  00406854  000108d4  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000108d4  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000108fe  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001bb12  00000000  00000000  0001096f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000529d  00000000  00000000  0002c481  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cf35  00000000  00000000  0003171e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c50  00000000  00000000  0003e658  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000958  00000000  00000000  0003f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00006c48  00000000  00000000  0003fc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011791  00000000  00000000  00046848  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00052e14  00000000  00000000  00057fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001ad0  00000000  00000000  000aadf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200039a8 	.word	0x200039a8
  400004:	00400d09 	.word	0x00400d09
  400008:	00400d05 	.word	0x00400d05
  40000c:	00400d05 	.word	0x00400d05
  400010:	00400d05 	.word	0x00400d05
  400014:	00400d05 	.word	0x00400d05
  400018:	00400d05 	.word	0x00400d05
	...
  40002c:	00400d05 	.word	0x00400d05
  400030:	00400d05 	.word	0x00400d05
  400034:	00000000 	.word	0x00000000
  400038:	00400d05 	.word	0x00400d05
  40003c:	00400d05 	.word	0x00400d05
  400040:	00400d05 	.word	0x00400d05
  400044:	00400d05 	.word	0x00400d05
  400048:	00400d05 	.word	0x00400d05
  40004c:	00400d05 	.word	0x00400d05
  400050:	00400d05 	.word	0x00400d05
  400054:	00400d05 	.word	0x00400d05
  400058:	00400d05 	.word	0x00400d05
  40005c:	00400d05 	.word	0x00400d05
  400060:	00400d05 	.word	0x00400d05
  400064:	00400d05 	.word	0x00400d05
  400068:	00000000 	.word	0x00000000
  40006c:	00400941 	.word	0x00400941
  400070:	00400955 	.word	0x00400955
  400074:	00400969 	.word	0x00400969
  400078:	00400d05 	.word	0x00400d05
  40007c:	00400d05 	.word	0x00400d05
	...
  400088:	00400d05 	.word	0x00400d05
  40008c:	00400d05 	.word	0x00400d05
  400090:	00400d05 	.word	0x00400d05
  400094:	00400d05 	.word	0x00400d05
  400098:	00400d05 	.word	0x00400d05
  40009c:	00400d05 	.word	0x00400d05
  4000a0:	00400d05 	.word	0x00400d05
  4000a4:	00400d05 	.word	0x00400d05
  4000a8:	00400d05 	.word	0x00400d05
  4000ac:	00400d05 	.word	0x00400d05
  4000b0:	00400d05 	.word	0x00400d05
  4000b4:	00400d05 	.word	0x00400d05
  4000b8:	00400d05 	.word	0x00400d05
  4000bc:	00400d05 	.word	0x00400d05
  4000c0:	00400d05 	.word	0x00400d05
  4000c4:	00400d05 	.word	0x00400d05
  4000c8:	00400d05 	.word	0x00400d05

004000cc <deregister_tm_clones>:
  4000cc:	b508      	push	{r3, lr}
  4000ce:	4805      	ldr	r0, [pc, #20]	; (4000e4 <deregister_tm_clones+0x18>)
  4000d0:	4b05      	ldr	r3, [pc, #20]	; (4000e8 <deregister_tm_clones+0x1c>)
  4000d2:	1a1b      	subs	r3, r3, r0
  4000d4:	2b06      	cmp	r3, #6
  4000d6:	d800      	bhi.n	4000da <deregister_tm_clones+0xe>
  4000d8:	bd08      	pop	{r3, pc}
  4000da:	4b04      	ldr	r3, [pc, #16]	; (4000ec <deregister_tm_clones+0x20>)
  4000dc:	2b00      	cmp	r3, #0
  4000de:	d0fb      	beq.n	4000d8 <deregister_tm_clones+0xc>
  4000e0:	4798      	blx	r3
  4000e2:	e7f9      	b.n	4000d8 <deregister_tm_clones+0xc>
  4000e4:	00405eac 	.word	0x00405eac
  4000e8:	00405eaf 	.word	0x00405eaf
  4000ec:	00000000 	.word	0x00000000

004000f0 <register_tm_clones>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4807      	ldr	r0, [pc, #28]	; (400110 <register_tm_clones+0x20>)
  4000f4:	4b07      	ldr	r3, [pc, #28]	; (400114 <register_tm_clones+0x24>)
  4000f6:	1a1b      	subs	r3, r3, r0
  4000f8:	109b      	asrs	r3, r3, #2
  4000fa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  4000fe:	1059      	asrs	r1, r3, #1
  400100:	d100      	bne.n	400104 <register_tm_clones+0x14>
  400102:	bd08      	pop	{r3, pc}
  400104:	4a04      	ldr	r2, [pc, #16]	; (400118 <register_tm_clones+0x28>)
  400106:	2a00      	cmp	r2, #0
  400108:	d0fb      	beq.n	400102 <register_tm_clones+0x12>
  40010a:	4790      	blx	r2
  40010c:	e7f9      	b.n	400102 <register_tm_clones+0x12>
  40010e:	bf00      	nop
  400110:	00405eac 	.word	0x00405eac
  400114:	00405eac 	.word	0x00405eac
  400118:	00000000 	.word	0x00000000

0040011c <__do_global_dtors_aux>:
  40011c:	b510      	push	{r4, lr}
  40011e:	4c06      	ldr	r4, [pc, #24]	; (400138 <__do_global_dtors_aux+0x1c>)
  400120:	7823      	ldrb	r3, [r4, #0]
  400122:	b943      	cbnz	r3, 400136 <__do_global_dtors_aux+0x1a>
  400124:	f7ff ffd2 	bl	4000cc <deregister_tm_clones>
  400128:	4b04      	ldr	r3, [pc, #16]	; (40013c <__do_global_dtors_aux+0x20>)
  40012a:	b113      	cbz	r3, 400132 <__do_global_dtors_aux+0x16>
  40012c:	4804      	ldr	r0, [pc, #16]	; (400140 <__do_global_dtors_aux+0x24>)
  40012e:	f3af 8000 	nop.w
  400132:	2301      	movs	r3, #1
  400134:	7023      	strb	r3, [r4, #0]
  400136:	bd10      	pop	{r4, pc}
  400138:	200008d4 	.word	0x200008d4
  40013c:	00000000 	.word	0x00000000
  400140:	00405eac 	.word	0x00405eac

00400144 <frame_dummy>:
  400144:	b508      	push	{r3, lr}
  400146:	4b08      	ldr	r3, [pc, #32]	; (400168 <frame_dummy+0x24>)
  400148:	b11b      	cbz	r3, 400152 <frame_dummy+0xe>
  40014a:	4808      	ldr	r0, [pc, #32]	; (40016c <frame_dummy+0x28>)
  40014c:	4908      	ldr	r1, [pc, #32]	; (400170 <frame_dummy+0x2c>)
  40014e:	f3af 8000 	nop.w
  400152:	4808      	ldr	r0, [pc, #32]	; (400174 <frame_dummy+0x30>)
  400154:	6803      	ldr	r3, [r0, #0]
  400156:	b113      	cbz	r3, 40015e <frame_dummy+0x1a>
  400158:	4b07      	ldr	r3, [pc, #28]	; (400178 <frame_dummy+0x34>)
  40015a:	b103      	cbz	r3, 40015e <frame_dummy+0x1a>
  40015c:	4798      	blx	r3
  40015e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400162:	f7ff bfc5 	b.w	4000f0 <register_tm_clones>
  400166:	bf00      	nop
  400168:	00000000 	.word	0x00000000
  40016c:	00405eac 	.word	0x00405eac
  400170:	200008d8 	.word	0x200008d8
  400174:	00405eac 	.word	0x00405eac
  400178:	00000000 	.word	0x00000000

0040017c <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  40017c:	b570      	push	{r4, r5, r6, lr}
  40017e:	b082      	sub	sp, #8
  400180:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400182:	ac02      	add	r4, sp, #8
  400184:	2302      	movs	r3, #2
  400186:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40018a:	4d09      	ldr	r5, [pc, #36]	; (4001b0 <ssd1306_write_command+0x34>)
  40018c:	4628      	mov	r0, r5
  40018e:	4621      	mov	r1, r4
  400190:	4b08      	ldr	r3, [pc, #32]	; (4001b4 <ssd1306_write_command+0x38>)
  400192:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400194:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400198:	4b07      	ldr	r3, [pc, #28]	; (4001b8 <ssd1306_write_command+0x3c>)
  40019a:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40019c:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  40019e:	2056      	movs	r0, #86	; 0x56
  4001a0:	4b06      	ldr	r3, [pc, #24]	; (4001bc <ssd1306_write_command+0x40>)
  4001a2:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4001a4:	4628      	mov	r0, r5
  4001a6:	4621      	mov	r1, r4
  4001a8:	4b05      	ldr	r3, [pc, #20]	; (4001c0 <ssd1306_write_command+0x44>)
  4001aa:	4798      	blx	r3
#endif
}
  4001ac:	b002      	add	sp, #8
  4001ae:	bd70      	pop	{r4, r5, r6, pc}
  4001b0:	40008000 	.word	0x40008000
  4001b4:	004003e9 	.word	0x004003e9
  4001b8:	400e1200 	.word	0x400e1200
  4001bc:	20000001 	.word	0x20000001
  4001c0:	00400419 	.word	0x00400419

004001c4 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
  4001c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001c6:	b085      	sub	sp, #20
  4001c8:	4d25      	ldr	r5, [pc, #148]	; (400260 <ssd1306_init+0x9c>)
  4001ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  4001ce:	636e      	str	r6, [r5, #52]	; 0x34
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	arch_ioport_set_pin_level(SSD1306_RES_PIN, false);
	delay_us(SSD1306_LATENCY); // At least 3us
  4001d0:	2056      	movs	r0, #86	; 0x56
  4001d2:	4c24      	ldr	r4, [pc, #144]	; (400264 <ssd1306_init+0xa0>)
  4001d4:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001d6:	632e      	str	r6, [r5, #48]	; 0x30
	arch_ioport_set_pin_level(SSD1306_RES_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
  4001d8:	2056      	movs	r0, #86	; 0x56
  4001da:	47a0      	blx	r4
	};
	usart_spi_init(SSD1306_USART_SPI);
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
			SSD1306_CLOCK_SPEED, spi_select_id);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {
  4001dc:	2702      	movs	r7, #2
  4001de:	ae04      	add	r6, sp, #16
  4001e0:	f846 7d04 	str.w	r7, [r6, #-4]!
		.id = SSD1306_CS_PIN,
	};
	spi_master_init(SSD1306_SPI);
  4001e4:	4c20      	ldr	r4, [pc, #128]	; (400268 <ssd1306_init+0xa4>)
  4001e6:	4620      	mov	r0, r4
  4001e8:	4b20      	ldr	r3, [pc, #128]	; (40026c <ssd1306_init+0xa8>)
  4001ea:	4798      	blx	r3
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
  4001ec:	2500      	movs	r5, #0
  4001ee:	9500      	str	r5, [sp, #0]
  4001f0:	4620      	mov	r0, r4
  4001f2:	4631      	mov	r1, r6
  4001f4:	462a      	mov	r2, r5
  4001f6:	4b1e      	ldr	r3, [pc, #120]	; (400270 <ssd1306_init+0xac>)
  4001f8:	4e1e      	ldr	r6, [pc, #120]	; (400274 <ssd1306_init+0xb0>)
  4001fa:	47b0      	blx	r6
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4001fc:	2301      	movs	r3, #1
  4001fe:	6023      	str	r3, [r4, #0]

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400200:	20a8      	movs	r0, #168	; 0xa8
  400202:	4c1d      	ldr	r4, [pc, #116]	; (400278 <ssd1306_init+0xb4>)
  400204:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400206:	201f      	movs	r0, #31
  400208:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  40020a:	20d3      	movs	r0, #211	; 0xd3
  40020c:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  40020e:	4628      	mov	r0, r5
  400210:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
  400212:	2040      	movs	r0, #64	; 0x40
  400214:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400216:	20a1      	movs	r0, #161	; 0xa1
  400218:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  40021a:	20c8      	movs	r0, #200	; 0xc8
  40021c:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  40021e:	20da      	movs	r0, #218	; 0xda
  400220:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400222:	4638      	mov	r0, r7
  400224:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400226:	2081      	movs	r0, #129	; 0x81
  400228:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  40022a:	208f      	movs	r0, #143	; 0x8f
  40022c:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  40022e:	20a4      	movs	r0, #164	; 0xa4
  400230:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400232:	20a6      	movs	r0, #166	; 0xa6
  400234:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400236:	20d5      	movs	r0, #213	; 0xd5
  400238:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  40023a:	2080      	movs	r0, #128	; 0x80
  40023c:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  40023e:	208d      	movs	r0, #141	; 0x8d
  400240:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400242:	2014      	movs	r0, #20
  400244:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400246:	20db      	movs	r0, #219	; 0xdb
  400248:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  40024a:	2040      	movs	r0, #64	; 0x40
  40024c:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  40024e:	20d9      	movs	r0, #217	; 0xd9
  400250:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400252:	20f1      	movs	r0, #241	; 0xf1
  400254:	47a0      	blx	r4
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400256:	20af      	movs	r0, #175	; 0xaf
  400258:	47a0      	blx	r4

	ssd1306_display_on();
}
  40025a:	b005      	add	sp, #20
  40025c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40025e:	bf00      	nop
  400260:	400e1200 	.word	0x400e1200
  400264:	20000001 	.word	0x20000001
  400268:	40008000 	.word	0x40008000
  40026c:	00400319 	.word	0x00400319
  400270:	004c4b40 	.word	0x004c4b40
  400274:	0040036d 	.word	0x0040036d
  400278:	0040017d 	.word	0x0040017d

0040027c <at30tse_init>:

/**
 * \brief Initialize the TWI instance used for AT30TSE75x.
 */
void at30tse_init(void)
{
  40027c:	b500      	push	{lr}
  40027e:	b085      	sub	sp, #20
	twi_options_t opts = {
  400280:	2300      	movs	r3, #0
  400282:	9303      	str	r3, [sp, #12]
  400284:	4b07      	ldr	r3, [pc, #28]	; (4002a4 <at30tse_init+0x28>)
  400286:	9301      	str	r3, [sp, #4]
  400288:	f242 7310 	movw	r3, #10000	; 0x2710
  40028c:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40028e:	2013      	movs	r0, #19
  400290:	4b05      	ldr	r3, [pc, #20]	; (4002a8 <at30tse_init+0x2c>)
  400292:	4798      	blx	r3
		.speed = BOARD_TWI_SPEED,
		.smbus = 0
	};

	sysclk_enable_peripheral_clock(BOARD_AT30TSE_TWI_ID);
	twi_master_init(BOARD_AT30TSE_TWI, &opts);
  400294:	4805      	ldr	r0, [pc, #20]	; (4002ac <at30tse_init+0x30>)
  400296:	a901      	add	r1, sp, #4
  400298:	4b05      	ldr	r3, [pc, #20]	; (4002b0 <at30tse_init+0x34>)
  40029a:	4798      	blx	r3
}
  40029c:	b005      	add	sp, #20
  40029e:	f85d fb04 	ldr.w	pc, [sp], #4
  4002a2:	bf00      	nop
  4002a4:	07270e00 	.word	0x07270e00
  4002a8:	00400af1 	.word	0x00400af1
  4002ac:	40018000 	.word	0x40018000
  4002b0:	00400ca9 	.word	0x00400ca9

004002b4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4002b4:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4002b6:	480e      	ldr	r0, [pc, #56]	; (4002f0 <sysclk_init+0x3c>)
  4002b8:	4b0e      	ldr	r3, [pc, #56]	; (4002f4 <sysclk_init+0x40>)
  4002ba:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4002bc:	2000      	movs	r0, #0
  4002be:	213e      	movs	r1, #62	; 0x3e
  4002c0:	4b0d      	ldr	r3, [pc, #52]	; (4002f8 <sysclk_init+0x44>)
  4002c2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4002c4:	4c0d      	ldr	r4, [pc, #52]	; (4002fc <sysclk_init+0x48>)
  4002c6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4002c8:	2800      	cmp	r0, #0
  4002ca:	d0fc      	beq.n	4002c6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4002cc:	4b0c      	ldr	r3, [pc, #48]	; (400300 <sysclk_init+0x4c>)
  4002ce:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4002d0:	4a0c      	ldr	r2, [pc, #48]	; (400304 <sysclk_init+0x50>)
  4002d2:	4b0d      	ldr	r3, [pc, #52]	; (400308 <sysclk_init+0x54>)
  4002d4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4002d6:	4c0d      	ldr	r4, [pc, #52]	; (40030c <sysclk_init+0x58>)
  4002d8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4002da:	2800      	cmp	r0, #0
  4002dc:	d0fc      	beq.n	4002d8 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4002de:	2010      	movs	r0, #16
  4002e0:	4b0b      	ldr	r3, [pc, #44]	; (400310 <sysclk_init+0x5c>)
  4002e2:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4002e4:	4b0b      	ldr	r3, [pc, #44]	; (400314 <sysclk_init+0x60>)
  4002e6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4002e8:	4801      	ldr	r0, [pc, #4]	; (4002f0 <sysclk_init+0x3c>)
  4002ea:	4b02      	ldr	r3, [pc, #8]	; (4002f4 <sysclk_init+0x40>)
  4002ec:	4798      	blx	r3
  4002ee:	bd10      	pop	{r4, pc}
  4002f0:	07270e00 	.word	0x07270e00
  4002f4:	00400ed1 	.word	0x00400ed1
  4002f8:	00400a6d 	.word	0x00400a6d
  4002fc:	00400ac1 	.word	0x00400ac1
  400300:	00400ad1 	.word	0x00400ad1
  400304:	20133f01 	.word	0x20133f01
  400308:	400e0400 	.word	0x400e0400
  40030c:	00400ae1 	.word	0x00400ae1
  400310:	00400a09 	.word	0x00400a09
  400314:	00400dbd 	.word	0x00400dbd

00400318 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400318:	b510      	push	{r4, lr}
  40031a:	4604      	mov	r4, r0
	spi_enable_clock(p_spi);
  40031c:	4b10      	ldr	r3, [pc, #64]	; (400360 <spi_master_init+0x48>)
  40031e:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  400320:	2380      	movs	r3, #128	; 0x80
  400322:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400324:	6863      	ldr	r3, [r4, #4]
  400326:	f043 0301 	orr.w	r3, r3, #1
  40032a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40032c:	6863      	ldr	r3, [r4, #4]
  40032e:	f043 0310 	orr.w	r3, r3, #16
  400332:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400334:	6863      	ldr	r3, [r4, #4]
  400336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40033a:	6063      	str	r3, [r4, #4]
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  40033c:	4620      	mov	r0, r4
  40033e:	2100      	movs	r1, #0
  400340:	4b08      	ldr	r3, [pc, #32]	; (400364 <spi_master_init+0x4c>)
  400342:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400344:	6863      	ldr	r3, [r4, #4]
  400346:	f023 0302 	bic.w	r3, r3, #2
  40034a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  40034c:	6863      	ldr	r3, [r4, #4]
  40034e:	f023 0304 	bic.w	r3, r3, #4
  400352:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  400354:	4620      	mov	r0, r4
  400356:	2100      	movs	r1, #0
  400358:	4b03      	ldr	r3, [pc, #12]	; (400368 <spi_master_init+0x50>)
  40035a:	4798      	blx	r3
  40035c:	bd10      	pop	{r4, pc}
  40035e:	bf00      	nop
  400360:	00400b49 	.word	0x00400b49
  400364:	00400b59 	.word	0x00400b59
  400368:	00400b71 	.word	0x00400b71

0040036c <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  40036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40036e:	4605      	mov	r5, r0
  400370:	460c      	mov	r4, r1
  400372:	4616      	mov	r6, r2
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
  400374:	4618      	mov	r0, r3
  400376:	4914      	ldr	r1, [pc, #80]	; (4003c8 <spi_master_setup_device+0x5c>)
  400378:	4b14      	ldr	r3, [pc, #80]	; (4003cc <spi_master_setup_device+0x60>)
  40037a:	4798      	blx	r3
  40037c:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  40037e:	4628      	mov	r0, r5
  400380:	6821      	ldr	r1, [r4, #0]
  400382:	2200      	movs	r2, #0
  400384:	4613      	mov	r3, r2
  400386:	f8df c05c 	ldr.w	ip, [pc, #92]	; 4003e4 <spi_master_setup_device+0x78>
  40038a:	47e0      	blx	ip
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  40038c:	4628      	mov	r0, r5
  40038e:	6821      	ldr	r1, [r4, #0]
  400390:	2208      	movs	r2, #8
  400392:	4b0f      	ldr	r3, [pc, #60]	; (4003d0 <spi_master_setup_device+0x64>)
  400394:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400396:	4628      	mov	r0, r5
  400398:	6821      	ldr	r1, [r4, #0]
  40039a:	b2fa      	uxtb	r2, r7
  40039c:	4b0d      	ldr	r3, [pc, #52]	; (4003d4 <spi_master_setup_device+0x68>)
  40039e:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  4003a0:	4628      	mov	r0, r5
  4003a2:	6821      	ldr	r1, [r4, #0]
  4003a4:	2208      	movs	r2, #8
  4003a6:	4b0c      	ldr	r3, [pc, #48]	; (4003d8 <spi_master_setup_device+0x6c>)
  4003a8:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  4003aa:	4628      	mov	r0, r5
  4003ac:	6821      	ldr	r1, [r4, #0]
  4003ae:	0872      	lsrs	r2, r6, #1
  4003b0:	4b0a      	ldr	r3, [pc, #40]	; (4003dc <spi_master_setup_device+0x70>)
  4003b2:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  4003b4:	f086 0201 	eor.w	r2, r6, #1
  4003b8:	4628      	mov	r0, r5
  4003ba:	6821      	ldr	r1, [r4, #0]
  4003bc:	f002 0201 	and.w	r2, r2, #1
  4003c0:	4b07      	ldr	r3, [pc, #28]	; (4003e0 <spi_master_setup_device+0x74>)
  4003c2:	4798      	blx	r3
  4003c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4003c6:	bf00      	nop
  4003c8:	07270e00 	.word	0x07270e00
  4003cc:	00400c1d 	.word	0x00400c1d
  4003d0:	00400c09 	.word	0x00400c09
  4003d4:	00400c35 	.word	0x00400c35
  4003d8:	00400bc5 	.word	0x00400bc5
  4003dc:	00400b85 	.word	0x00400b85
  4003e0:	00400ba5 	.word	0x00400ba5
  4003e4:	00400c4d 	.word	0x00400c4d

004003e8 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  4003e8:	b508      	push	{r3, lr}
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  4003ea:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  4003ec:	f013 0f04 	tst.w	r3, #4
  4003f0:	d005      	beq.n	4003fe <spi_select_device+0x16>
		if (device->id < MAX_NUM_WITH_DECODER) {
  4003f2:	6809      	ldr	r1, [r1, #0]
  4003f4:	290f      	cmp	r1, #15
  4003f6:	d80b      	bhi.n	400410 <spi_select_device+0x28>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  4003f8:	4b06      	ldr	r3, [pc, #24]	; (400414 <spi_select_device+0x2c>)
  4003fa:	4798      	blx	r3
  4003fc:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  4003fe:	680b      	ldr	r3, [r1, #0]
  400400:	2b03      	cmp	r3, #3
  400402:	d805      	bhi.n	400410 <spi_select_device+0x28>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  400404:	2201      	movs	r2, #1
  400406:	fa02 f103 	lsl.w	r1, r2, r3
  40040a:	43c9      	mvns	r1, r1
  40040c:	4b01      	ldr	r3, [pc, #4]	; (400414 <spi_select_device+0x2c>)
  40040e:	4798      	blx	r3
  400410:	bd08      	pop	{r3, pc}
  400412:	bf00      	nop
  400414:	00400b59 	.word	0x00400b59

00400418 <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  400418:	b510      	push	{r4, lr}
  40041a:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40041c:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  40041e:	f413 7f00 	tst.w	r3, #512	; 0x200
  400422:	d0fb      	beq.n	40041c <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  400424:	4620      	mov	r0, r4
  400426:	210f      	movs	r1, #15
  400428:	4b02      	ldr	r3, [pc, #8]	; (400434 <spi_deselect_device+0x1c>)
  40042a:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  40042c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400430:	6023      	str	r3, [r4, #0]
  400432:	bd10      	pop	{r4, pc}
  400434:	00400b59 	.word	0x00400b59

00400438 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  400438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  40043a:	4838      	ldr	r0, [pc, #224]	; (40051c <board_init+0xe4>)
  40043c:	4b38      	ldr	r3, [pc, #224]	; (400520 <board_init+0xe8>)
  40043e:	4798      	blx	r3
  400440:	200b      	movs	r0, #11
  400442:	4c38      	ldr	r4, [pc, #224]	; (400524 <board_init+0xec>)
  400444:	47a0      	blx	r4
  400446:	200c      	movs	r0, #12
  400448:	47a0      	blx	r4
  40044a:	200d      	movs	r0, #13
  40044c:	47a0      	blx	r4
  40044e:	4b36      	ldr	r3, [pc, #216]	; (400528 <board_init+0xf0>)
  400450:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400454:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400456:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400458:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40045c:	4c33      	ldr	r4, [pc, #204]	; (40052c <board_init+0xf4>)
  40045e:	2504      	movs	r5, #4
  400460:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400462:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400466:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400468:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40046c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40046e:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400470:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400474:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400476:	f022 0204 	bic.w	r2, r2, #4
  40047a:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40047c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40047e:	f022 0204 	bic.w	r2, r2, #4
  400482:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400484:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400488:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40048a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40048c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400490:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400494:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400496:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400498:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40049c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4004a0:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004a2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  4004a8:	4821      	ldr	r0, [pc, #132]	; (400530 <board_init+0xf8>)
  4004aa:	210c      	movs	r1, #12
  4004ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4004b0:	4b20      	ldr	r3, [pc, #128]	; (400534 <board_init+0xfc>)
  4004b2:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4004b4:	4f20      	ldr	r7, [pc, #128]	; (400538 <board_init+0x100>)
  4004b6:	2003      	movs	r0, #3
  4004b8:	4639      	mov	r1, r7
  4004ba:	4e20      	ldr	r6, [pc, #128]	; (40053c <board_init+0x104>)
  4004bc:	47b0      	blx	r6
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4004be:	4628      	mov	r0, r5
  4004c0:	4639      	mov	r1, r7
  4004c2:	47b0      	blx	r6
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  4004c4:	200c      	movs	r0, #12
  4004c6:	4639      	mov	r1, r7
  4004c8:	47b0      	blx	r6
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  4004ca:	200d      	movs	r0, #13
  4004cc:	4639      	mov	r1, r7
  4004ce:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  4004d0:	200e      	movs	r0, #14
  4004d2:	4639      	mov	r1, r7
  4004d4:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS1
#if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS1_PA9_GPIO, SPI_NPCS1_PA9_FLAGS);
  4004d6:	2009      	movs	r0, #9
  4004d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4004dc:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS2
#if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS2_PA10_GPIO, SPI_NPCS2_PA10_FLAGS);
  4004de:	200a      	movs	r0, #10
  4004e0:	4917      	ldr	r1, [pc, #92]	; (400540 <board_init+0x108>)
  4004e2:	47b0      	blx	r6
#endif
#endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_OLED_UG_2832HSWEG04
	gpio_configure_pin(UG_2832HSWEG04_DATA_CMD_GPIO, UG_2832HSWEG04_DATA_CMD_FLAGS);
  4004e4:	f107 5740 	add.w	r7, r7, #805306368	; 0x30000000
  4004e8:	2055      	movs	r0, #85	; 0x55
  4004ea:	4639      	mov	r1, r7
  4004ec:	47b0      	blx	r6
	gpio_configure_pin(UG_2832HSWEG04_RESET_GPIO, UG_2832HSWEG04_RESET_FLAGS);
  4004ee:	205f      	movs	r0, #95	; 0x5f
  4004f0:	4639      	mov	r1, r7
  4004f2:	47b0      	blx	r6
#endif

#ifdef CONF_BOARD_SD_MMC_SPI
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  4004f4:	205b      	movs	r0, #91	; 0x5b
  4004f6:	4913      	ldr	r1, [pc, #76]	; (400544 <board_init+0x10c>)
  4004f8:	47b0      	blx	r6
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4004fa:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4004fc:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400500:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400502:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400504:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400508:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40050a:	f023 0304 	bic.w	r3, r3, #4
  40050e:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400510:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400512:	f023 0304 	bic.w	r3, r3, #4
  400516:	6763      	str	r3, [r4, #116]	; 0x74
  400518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40051a:	bf00      	nop
  40051c:	400e1450 	.word	0x400e1450
  400520:	00400cfd 	.word	0x00400cfd
  400524:	00400af1 	.word	0x00400af1
  400528:	400e1200 	.word	0x400e1200
  40052c:	400e0e00 	.word	0x400e0e00
  400530:	400e1000 	.word	0x400e1000
  400534:	004007b9 	.word	0x004007b9
  400538:	08000001 	.word	0x08000001
  40053c:	00400695 	.word	0x00400695
  400540:	10000001 	.word	0x10000001
  400544:	28000001 	.word	0x28000001

00400548 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400548:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  40054c:	0052      	lsls	r2, r2, #1
  40054e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400552:	fbb3 f3f2 	udiv	r3, r3, r2
  400556:	3b01      	subs	r3, #1
  400558:	f3c3 030d 	ubfx	r3, r3, #0, #14
  40055c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  400560:	4770      	bx	lr
  400562:	bf00      	nop

00400564 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400564:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400566:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  400568:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40056c:	d02e      	beq.n	4005cc <pio_set_peripheral+0x68>
  40056e:	d808      	bhi.n	400582 <pio_set_peripheral+0x1e>
  400570:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400574:	d014      	beq.n	4005a0 <pio_set_peripheral+0x3c>
  400576:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40057a:	d01d      	beq.n	4005b8 <pio_set_peripheral+0x54>
  40057c:	2900      	cmp	r1, #0
  40057e:	d135      	bne.n	4005ec <pio_set_peripheral+0x88>
  400580:	e035      	b.n	4005ee <pio_set_peripheral+0x8a>
  400582:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400586:	d032      	beq.n	4005ee <pio_set_peripheral+0x8a>
  400588:	d803      	bhi.n	400592 <pio_set_peripheral+0x2e>
  40058a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40058e:	d027      	beq.n	4005e0 <pio_set_peripheral+0x7c>
  400590:	e02c      	b.n	4005ec <pio_set_peripheral+0x88>
  400592:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400596:	d02a      	beq.n	4005ee <pio_set_peripheral+0x8a>
  400598:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40059c:	d027      	beq.n	4005ee <pio_set_peripheral+0x8a>
  40059e:	e025      	b.n	4005ec <pio_set_peripheral+0x88>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005a0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005a2:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4005a4:	43d3      	mvns	r3, r2
  4005a6:	4021      	ands	r1, r4
  4005a8:	4019      	ands	r1, r3
  4005aa:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005ac:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4005ae:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4005b0:	4021      	ands	r1, r4
  4005b2:	400b      	ands	r3, r1
  4005b4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4005b6:	e019      	b.n	4005ec <pio_set_peripheral+0x88>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4005ba:	4313      	orrs	r3, r2
  4005bc:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005be:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4005c0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4005c2:	400b      	ands	r3, r1
  4005c4:	ea23 0302 	bic.w	r3, r3, r2
  4005c8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4005ca:	e00f      	b.n	4005ec <pio_set_peripheral+0x88>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005cc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005ce:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4005d0:	400b      	ands	r3, r1
  4005d2:	ea23 0302 	bic.w	r3, r3, r2
  4005d6:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005d8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4005da:	4313      	orrs	r3, r2
  4005dc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4005de:	e005      	b.n	4005ec <pio_set_peripheral+0x88>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005e0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4005e2:	4313      	orrs	r3, r2
  4005e4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005e6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4005e8:	4313      	orrs	r3, r2
  4005ea:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4005ec:	6042      	str	r2, [r0, #4]
}
  4005ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005f2:	4770      	bx	lr

004005f4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4005f4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005f6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4005fa:	bf14      	ite	ne
  4005fc:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005fe:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400600:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400604:	bf14      	ite	ne
  400606:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400608:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40060a:	f012 0f02 	tst.w	r2, #2
  40060e:	d002      	beq.n	400616 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400610:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400614:	e004      	b.n	400620 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400616:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40061a:	bf18      	it	ne
  40061c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400620:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400622:	6001      	str	r1, [r0, #0]
  400624:	4770      	bx	lr
  400626:	bf00      	nop

00400628 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400628:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40062a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40062c:	9c01      	ldr	r4, [sp, #4]
  40062e:	b10c      	cbz	r4, 400634 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400630:	6641      	str	r1, [r0, #100]	; 0x64
  400632:	e000      	b.n	400636 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400634:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400636:	b10b      	cbz	r3, 40063c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400638:	6501      	str	r1, [r0, #80]	; 0x50
  40063a:	e000      	b.n	40063e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40063c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40063e:	b10a      	cbz	r2, 400644 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400640:	6301      	str	r1, [r0, #48]	; 0x30
  400642:	e000      	b.n	400646 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400644:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400646:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400648:	6001      	str	r1, [r0, #0]
}
  40064a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40064e:	4770      	bx	lr

00400650 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400650:	f012 0f10 	tst.w	r2, #16
  400654:	d010      	beq.n	400678 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400656:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40065a:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40065e:	bf14      	ite	ne
  400660:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400664:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400668:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40066c:	bf14      	ite	ne
  40066e:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  400672:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400676:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400678:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40067c:	4770      	bx	lr
  40067e:	bf00      	nop

00400680 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  400680:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  400682:	6401      	str	r1, [r0, #64]	; 0x40
  400684:	4770      	bx	lr
  400686:	bf00      	nop

00400688 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400688:	6441      	str	r1, [r0, #68]	; 0x44
  40068a:	4770      	bx	lr

0040068c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40068c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40068e:	4770      	bx	lr

00400690 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400690:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400692:	4770      	bx	lr

00400694 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400694:	b570      	push	{r4, r5, r6, lr}
  400696:	b082      	sub	sp, #8
  400698:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40069a:	0944      	lsrs	r4, r0, #5
  40069c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
  4006a0:	f204 7407 	addw	r4, r4, #1799	; 0x707
  4006a4:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4006a6:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
  4006aa:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  4006ae:	d047      	beq.n	400740 <pio_configure_pin+0xac>
  4006b0:	d809      	bhi.n	4006c6 <pio_configure_pin+0x32>
  4006b2:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  4006b6:	d021      	beq.n	4006fc <pio_configure_pin+0x68>
  4006b8:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  4006bc:	d02f      	beq.n	40071e <pio_configure_pin+0x8a>
  4006be:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  4006c2:	d16f      	bne.n	4007a4 <pio_configure_pin+0x110>
  4006c4:	e009      	b.n	4006da <pio_configure_pin+0x46>
  4006c6:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  4006ca:	d055      	beq.n	400778 <pio_configure_pin+0xe4>
  4006cc:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  4006d0:	d052      	beq.n	400778 <pio_configure_pin+0xe4>
  4006d2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  4006d6:	d044      	beq.n	400762 <pio_configure_pin+0xce>
  4006d8:	e064      	b.n	4007a4 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4006da:	f000 001f 	and.w	r0, r0, #31
  4006de:	2401      	movs	r4, #1
  4006e0:	4084      	lsls	r4, r0
  4006e2:	4630      	mov	r0, r6
  4006e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4006e8:	4622      	mov	r2, r4
  4006ea:	4b30      	ldr	r3, [pc, #192]	; (4007ac <pio_configure_pin+0x118>)
  4006ec:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4006ee:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4006f2:	bf14      	ite	ne
  4006f4:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4006f6:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4006f8:	2001      	movs	r0, #1
  4006fa:	e054      	b.n	4007a6 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4006fc:	f000 001f 	and.w	r0, r0, #31
  400700:	2401      	movs	r4, #1
  400702:	4084      	lsls	r4, r0
  400704:	4630      	mov	r0, r6
  400706:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40070a:	4622      	mov	r2, r4
  40070c:	4b27      	ldr	r3, [pc, #156]	; (4007ac <pio_configure_pin+0x118>)
  40070e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400710:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400714:	bf14      	ite	ne
  400716:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400718:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40071a:	2001      	movs	r0, #1
  40071c:	e043      	b.n	4007a6 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40071e:	f000 001f 	and.w	r0, r0, #31
  400722:	2401      	movs	r4, #1
  400724:	4084      	lsls	r4, r0
  400726:	4630      	mov	r0, r6
  400728:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40072c:	4622      	mov	r2, r4
  40072e:	4b1f      	ldr	r3, [pc, #124]	; (4007ac <pio_configure_pin+0x118>)
  400730:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400732:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400736:	bf14      	ite	ne
  400738:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40073a:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40073c:	2001      	movs	r0, #1
  40073e:	e032      	b.n	4007a6 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400740:	f000 001f 	and.w	r0, r0, #31
  400744:	2401      	movs	r4, #1
  400746:	4084      	lsls	r4, r0
  400748:	4630      	mov	r0, r6
  40074a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40074e:	4622      	mov	r2, r4
  400750:	4b16      	ldr	r3, [pc, #88]	; (4007ac <pio_configure_pin+0x118>)
  400752:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400754:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400758:	bf14      	ite	ne
  40075a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40075c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40075e:	2001      	movs	r0, #1
  400760:	e021      	b.n	4007a6 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400762:	f000 011f 	and.w	r1, r0, #31
  400766:	2401      	movs	r4, #1
  400768:	4630      	mov	r0, r6
  40076a:	fa04 f101 	lsl.w	r1, r4, r1
  40076e:	462a      	mov	r2, r5
  400770:	4b0f      	ldr	r3, [pc, #60]	; (4007b0 <pio_configure_pin+0x11c>)
  400772:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400774:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400776:	e016      	b.n	4007a6 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400778:	f000 011f 	and.w	r1, r0, #31
  40077c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40077e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400782:	ea05 0304 	and.w	r3, r5, r4
  400786:	9300      	str	r3, [sp, #0]
  400788:	4630      	mov	r0, r6
  40078a:	fa04 f101 	lsl.w	r1, r4, r1
  40078e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400792:	bf14      	ite	ne
  400794:	2200      	movne	r2, #0
  400796:	2201      	moveq	r2, #1
  400798:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40079c:	4d05      	ldr	r5, [pc, #20]	; (4007b4 <pio_configure_pin+0x120>)
  40079e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
  4007a0:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4007a2:	e000      	b.n	4007a6 <pio_configure_pin+0x112>

	default:
		return 0;
  4007a4:	2000      	movs	r0, #0
	}

	return 1;
}
  4007a6:	b002      	add	sp, #8
  4007a8:	bd70      	pop	{r4, r5, r6, pc}
  4007aa:	bf00      	nop
  4007ac:	00400565 	.word	0x00400565
  4007b0:	004005f5 	.word	0x004005f5
  4007b4:	00400629 	.word	0x00400629

004007b8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4007ba:	b083      	sub	sp, #12
  4007bc:	4607      	mov	r7, r0
  4007be:	460e      	mov	r6, r1
  4007c0:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4007c2:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
  4007c6:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  4007ca:	d038      	beq.n	40083e <pio_configure_pin_group+0x86>
  4007cc:	d809      	bhi.n	4007e2 <pio_configure_pin_group+0x2a>
  4007ce:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  4007d2:	d01c      	beq.n	40080e <pio_configure_pin_group+0x56>
  4007d4:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  4007d8:	d025      	beq.n	400826 <pio_configure_pin_group+0x6e>
  4007da:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  4007de:	d150      	bne.n	400882 <pio_configure_pin_group+0xca>
  4007e0:	e009      	b.n	4007f6 <pio_configure_pin_group+0x3e>
  4007e2:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  4007e6:	d03a      	beq.n	40085e <pio_configure_pin_group+0xa6>
  4007e8:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  4007ec:	d037      	beq.n	40085e <pio_configure_pin_group+0xa6>
  4007ee:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  4007f2:	d030      	beq.n	400856 <pio_configure_pin_group+0x9e>
  4007f4:	e045      	b.n	400882 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4007f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4007fa:	4632      	mov	r2, r6
  4007fc:	4b22      	ldr	r3, [pc, #136]	; (400888 <pio_configure_pin_group+0xd0>)
  4007fe:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400800:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400804:	bf14      	ite	ne
  400806:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400808:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40080a:	2001      	movs	r0, #1
  40080c:	e03a      	b.n	400884 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40080e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400812:	4632      	mov	r2, r6
  400814:	4b1c      	ldr	r3, [pc, #112]	; (400888 <pio_configure_pin_group+0xd0>)
  400816:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400818:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40081c:	bf14      	ite	ne
  40081e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400820:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400822:	2001      	movs	r0, #1
  400824:	e02e      	b.n	400884 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400826:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40082a:	4632      	mov	r2, r6
  40082c:	4b16      	ldr	r3, [pc, #88]	; (400888 <pio_configure_pin_group+0xd0>)
  40082e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400830:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400834:	bf14      	ite	ne
  400836:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400838:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40083a:	2001      	movs	r0, #1
  40083c:	e022      	b.n	400884 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  40083e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400842:	4632      	mov	r2, r6
  400844:	4b10      	ldr	r3, [pc, #64]	; (400888 <pio_configure_pin_group+0xd0>)
  400846:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400848:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40084c:	bf14      	ite	ne
  40084e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400850:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400852:	2001      	movs	r0, #1
  400854:	e016      	b.n	400884 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  400856:	4b0d      	ldr	r3, [pc, #52]	; (40088c <pio_configure_pin_group+0xd4>)
  400858:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  40085a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  40085c:	e012      	b.n	400884 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40085e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  400862:	f005 0301 	and.w	r3, r5, #1
  400866:	9300      	str	r3, [sp, #0]
  400868:	4638      	mov	r0, r7
  40086a:	4631      	mov	r1, r6
  40086c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400870:	bf14      	ite	ne
  400872:	2200      	movne	r2, #0
  400874:	2201      	moveq	r2, #1
  400876:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40087a:	4c05      	ldr	r4, [pc, #20]	; (400890 <pio_configure_pin_group+0xd8>)
  40087c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  40087e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400880:	e000      	b.n	400884 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  400882:	2000      	movs	r0, #0
	}

	return 1;
}
  400884:	b003      	add	sp, #12
  400886:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400888:	00400565 	.word	0x00400565
  40088c:	004005f5 	.word	0x004005f5
  400890:	00400629 	.word	0x00400629

00400894 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400898:	4681      	mov	r9, r0
  40089a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40089c:	4b14      	ldr	r3, [pc, #80]	; (4008f0 <pio_handler_process+0x5c>)
  40089e:	4798      	blx	r3
  4008a0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4008a2:	4648      	mov	r0, r9
  4008a4:	4b13      	ldr	r3, [pc, #76]	; (4008f4 <pio_handler_process+0x60>)
  4008a6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4008a8:	4005      	ands	r5, r0
  4008aa:	d017      	beq.n	4008dc <pio_handler_process+0x48>
  4008ac:	4f12      	ldr	r7, [pc, #72]	; (4008f8 <pio_handler_process+0x64>)
  4008ae:	f107 040c 	add.w	r4, r7, #12
  4008b2:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4008b4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  4008b8:	42b3      	cmp	r3, r6
  4008ba:	d10a      	bne.n	4008d2 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4008bc:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4008c0:	4229      	tst	r1, r5
  4008c2:	d006      	beq.n	4008d2 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4008c4:	6823      	ldr	r3, [r4, #0]
  4008c6:	4630      	mov	r0, r6
  4008c8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4008ca:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4008ce:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4008d2:	42bc      	cmp	r4, r7
  4008d4:	d002      	beq.n	4008dc <pio_handler_process+0x48>
  4008d6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4008d8:	2d00      	cmp	r5, #0
  4008da:	d1eb      	bne.n	4008b4 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4008dc:	4b07      	ldr	r3, [pc, #28]	; (4008fc <pio_handler_process+0x68>)
  4008de:	681b      	ldr	r3, [r3, #0]
  4008e0:	b123      	cbz	r3, 4008ec <pio_handler_process+0x58>
		if (pio_capture_handler) {
  4008e2:	4b07      	ldr	r3, [pc, #28]	; (400900 <pio_handler_process+0x6c>)
  4008e4:	681b      	ldr	r3, [r3, #0]
  4008e6:	b10b      	cbz	r3, 4008ec <pio_handler_process+0x58>
			pio_capture_handler(p_pio);
  4008e8:	4648      	mov	r0, r9
  4008ea:	4798      	blx	r3
  4008ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008f0:	0040068d 	.word	0x0040068d
  4008f4:	00400691 	.word	0x00400691
  4008f8:	200008f8 	.word	0x200008f8
  4008fc:	200009a0 	.word	0x200009a0
  400900:	200008f4 	.word	0x200008f4

00400904 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400906:	4c0b      	ldr	r4, [pc, #44]	; (400934 <pio_handler_set+0x30>)
  400908:	6824      	ldr	r4, [r4, #0]
  40090a:	2c06      	cmp	r4, #6
  40090c:	d810      	bhi.n	400930 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  40090e:	4f0a      	ldr	r7, [pc, #40]	; (400938 <pio_handler_set+0x34>)
  400910:	0126      	lsls	r6, r4, #4
  400912:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
  400914:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
  400916:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
  400918:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
  40091a:	9906      	ldr	r1, [sp, #24]
  40091c:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
  40091e:	3401      	adds	r4, #1
  400920:	4904      	ldr	r1, [pc, #16]	; (400934 <pio_handler_set+0x30>)
  400922:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400924:	4611      	mov	r1, r2
  400926:	461a      	mov	r2, r3
  400928:	4b04      	ldr	r3, [pc, #16]	; (40093c <pio_handler_set+0x38>)
  40092a:	4798      	blx	r3

	return 0;
  40092c:	2000      	movs	r0, #0
  40092e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  400930:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  400932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400934:	200008f0 	.word	0x200008f0
  400938:	200008f8 	.word	0x200008f8
  40093c:	00400651 	.word	0x00400651

00400940 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400940:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400942:	4802      	ldr	r0, [pc, #8]	; (40094c <PIOA_Handler+0xc>)
  400944:	210b      	movs	r1, #11
  400946:	4b02      	ldr	r3, [pc, #8]	; (400950 <PIOA_Handler+0x10>)
  400948:	4798      	blx	r3
  40094a:	bd08      	pop	{r3, pc}
  40094c:	400e0e00 	.word	0x400e0e00
  400950:	00400895 	.word	0x00400895

00400954 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400954:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400956:	4802      	ldr	r0, [pc, #8]	; (400960 <PIOB_Handler+0xc>)
  400958:	210c      	movs	r1, #12
  40095a:	4b02      	ldr	r3, [pc, #8]	; (400964 <PIOB_Handler+0x10>)
  40095c:	4798      	blx	r3
  40095e:	bd08      	pop	{r3, pc}
  400960:	400e1000 	.word	0x400e1000
  400964:	00400895 	.word	0x00400895

00400968 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400968:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40096a:	4802      	ldr	r0, [pc, #8]	; (400974 <PIOC_Handler+0xc>)
  40096c:	210d      	movs	r1, #13
  40096e:	4b02      	ldr	r3, [pc, #8]	; (400978 <PIOC_Handler+0x10>)
  400970:	4798      	blx	r3
  400972:	bd08      	pop	{r3, pc}
  400974:	400e1200 	.word	0x400e1200
  400978:	00400895 	.word	0x00400895

0040097c <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  40097c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400980:	4605      	mov	r5, r0
  400982:	460c      	mov	r4, r1
  400984:	4691      	mov	r9, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  400986:	4b1b      	ldr	r3, [pc, #108]	; (4009f4 <pio_handler_set_priority+0x78>)
  400988:	4798      	blx	r3
  40098a:	4680      	mov	r8, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40098c:	4628      	mov	r0, r5
  40098e:	f04f 31ff 	mov.w	r1, #4294967295
  400992:	4b19      	ldr	r3, [pc, #100]	; (4009f8 <pio_handler_set_priority+0x7c>)
  400994:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  400996:	4628      	mov	r0, r5
  400998:	4b18      	ldr	r3, [pc, #96]	; (4009fc <pio_handler_set_priority+0x80>)
  40099a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40099c:	b2e7      	uxtb	r7, r4
  40099e:	f007 031f 	and.w	r3, r7, #31
  4009a2:	2601      	movs	r6, #1
  4009a4:	409e      	lsls	r6, r3
  4009a6:	0963      	lsrs	r3, r4, #5
  4009a8:	009b      	lsls	r3, r3, #2
  4009aa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  4009ae:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  4009b2:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4009b6:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  4009ba:	2c00      	cmp	r4, #0
  4009bc:	da09      	bge.n	4009d2 <pio_handler_set_priority+0x56>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4009be:	f007 070f 	and.w	r7, r7, #15
  4009c2:	ea4f 1909 	mov.w	r9, r9, lsl #4
  4009c6:	fa5f f989 	uxtb.w	r9, r9
  4009ca:	4a0d      	ldr	r2, [pc, #52]	; (400a00 <pio_handler_set_priority+0x84>)
  4009cc:	f802 9007 	strb.w	r9, [r2, r7]
  4009d0:	e009      	b.n	4009e6 <pio_handler_set_priority+0x6a>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4009d2:	ea4f 1909 	mov.w	r9, r9, lsl #4
  4009d6:	fa5f f989 	uxtb.w	r9, r9
  4009da:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  4009de:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  4009e2:	f884 9300 	strb.w	r9, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4009e6:	601e      	str	r6, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4009e8:	4628      	mov	r0, r5
  4009ea:	4641      	mov	r1, r8
  4009ec:	4b05      	ldr	r3, [pc, #20]	; (400a04 <pio_handler_set_priority+0x88>)
  4009ee:	4798      	blx	r3
  4009f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4009f4:	00400691 	.word	0x00400691
  4009f8:	00400689 	.word	0x00400689
  4009fc:	0040068d 	.word	0x0040068d
  400a00:	e000ed14 	.word	0xe000ed14
  400a04:	00400681 	.word	0x00400681

00400a08 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400a08:	4b17      	ldr	r3, [pc, #92]	; (400a68 <pmc_switch_mck_to_pllack+0x60>)
  400a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400a0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  400a10:	4310      	orrs	r0, r2
  400a12:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400a16:	f013 0f08 	tst.w	r3, #8
  400a1a:	d109      	bne.n	400a30 <pmc_switch_mck_to_pllack+0x28>
  400a1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400a20:	4911      	ldr	r1, [pc, #68]	; (400a68 <pmc_switch_mck_to_pllack+0x60>)
  400a22:	e001      	b.n	400a28 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400a24:	3b01      	subs	r3, #1
  400a26:	d019      	beq.n	400a5c <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400a28:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400a2a:	f012 0f08 	tst.w	r2, #8
  400a2e:	d0f9      	beq.n	400a24 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400a30:	4b0d      	ldr	r3, [pc, #52]	; (400a68 <pmc_switch_mck_to_pllack+0x60>)
  400a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400a34:	f022 0203 	bic.w	r2, r2, #3
  400a38:	f042 0202 	orr.w	r2, r2, #2
  400a3c:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400a3e:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400a40:	f010 0008 	ands.w	r0, r0, #8
  400a44:	d10c      	bne.n	400a60 <pmc_switch_mck_to_pllack+0x58>
  400a46:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400a4a:	4907      	ldr	r1, [pc, #28]	; (400a68 <pmc_switch_mck_to_pllack+0x60>)
  400a4c:	e001      	b.n	400a52 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400a4e:	3b01      	subs	r3, #1
  400a50:	d008      	beq.n	400a64 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400a52:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400a54:	f012 0f08 	tst.w	r2, #8
  400a58:	d0f9      	beq.n	400a4e <pmc_switch_mck_to_pllack+0x46>
  400a5a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400a5c:	2001      	movs	r0, #1
  400a5e:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400a60:	2000      	movs	r0, #0
  400a62:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400a64:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400a66:	4770      	bx	lr
  400a68:	400e0400 	.word	0x400e0400

00400a6c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400a6c:	b138      	cbz	r0, 400a7e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a6e:	4911      	ldr	r1, [pc, #68]	; (400ab4 <pmc_switch_mainck_to_xtal+0x48>)
  400a70:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400a72:	4a11      	ldr	r2, [pc, #68]	; (400ab8 <pmc_switch_mainck_to_xtal+0x4c>)
  400a74:	401a      	ands	r2, r3
  400a76:	4b11      	ldr	r3, [pc, #68]	; (400abc <pmc_switch_mainck_to_xtal+0x50>)
  400a78:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a7a:	620b      	str	r3, [r1, #32]
  400a7c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a7e:	4a0d      	ldr	r2, [pc, #52]	; (400ab4 <pmc_switch_mainck_to_xtal+0x48>)
  400a80:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a82:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400a86:	f023 0303 	bic.w	r3, r3, #3
  400a8a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400a8e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400a92:	0209      	lsls	r1, r1, #8
  400a94:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400a96:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a98:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400a9a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a9c:	f013 0f01 	tst.w	r3, #1
  400aa0:	d0fb      	beq.n	400a9a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400aa2:	4a04      	ldr	r2, [pc, #16]	; (400ab4 <pmc_switch_mainck_to_xtal+0x48>)
  400aa4:	6a13      	ldr	r3, [r2, #32]
  400aa6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400aae:	6213      	str	r3, [r2, #32]
  400ab0:	4770      	bx	lr
  400ab2:	bf00      	nop
  400ab4:	400e0400 	.word	0x400e0400
  400ab8:	fec8fffc 	.word	0xfec8fffc
  400abc:	01370002 	.word	0x01370002

00400ac0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400ac0:	4b02      	ldr	r3, [pc, #8]	; (400acc <pmc_osc_is_ready_mainck+0xc>)
  400ac2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ac4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400ac8:	4770      	bx	lr
  400aca:	bf00      	nop
  400acc:	400e0400 	.word	0x400e0400

00400ad0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400ad0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ad4:	4b01      	ldr	r3, [pc, #4]	; (400adc <pmc_disable_pllack+0xc>)
  400ad6:	629a      	str	r2, [r3, #40]	; 0x28
  400ad8:	4770      	bx	lr
  400ada:	bf00      	nop
  400adc:	400e0400 	.word	0x400e0400

00400ae0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400ae0:	4b02      	ldr	r3, [pc, #8]	; (400aec <pmc_is_locked_pllack+0xc>)
  400ae2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ae4:	f000 0002 	and.w	r0, r0, #2
  400ae8:	4770      	bx	lr
  400aea:	bf00      	nop
  400aec:	400e0400 	.word	0x400e0400

00400af0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400af0:	2822      	cmp	r0, #34	; 0x22
  400af2:	d820      	bhi.n	400b36 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  400af4:	281f      	cmp	r0, #31
  400af6:	d80d      	bhi.n	400b14 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400af8:	4b12      	ldr	r3, [pc, #72]	; (400b44 <pmc_enable_periph_clk+0x54>)
  400afa:	699a      	ldr	r2, [r3, #24]
  400afc:	2301      	movs	r3, #1
  400afe:	4083      	lsls	r3, r0
  400b00:	401a      	ands	r2, r3
  400b02:	4293      	cmp	r3, r2
  400b04:	d019      	beq.n	400b3a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
  400b06:	2301      	movs	r3, #1
  400b08:	fa03 f000 	lsl.w	r0, r3, r0
  400b0c:	4b0d      	ldr	r3, [pc, #52]	; (400b44 <pmc_enable_periph_clk+0x54>)
  400b0e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400b10:	2000      	movs	r0, #0
  400b12:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400b14:	4b0b      	ldr	r3, [pc, #44]	; (400b44 <pmc_enable_periph_clk+0x54>)
  400b16:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  400b1a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400b1c:	2301      	movs	r3, #1
  400b1e:	4083      	lsls	r3, r0
  400b20:	401a      	ands	r2, r3
  400b22:	4293      	cmp	r3, r2
  400b24:	d00b      	beq.n	400b3e <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
  400b26:	2301      	movs	r3, #1
  400b28:	fa03 f000 	lsl.w	r0, r3, r0
  400b2c:	4b05      	ldr	r3, [pc, #20]	; (400b44 <pmc_enable_periph_clk+0x54>)
  400b2e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400b32:	2000      	movs	r0, #0
  400b34:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400b36:	2001      	movs	r0, #1
  400b38:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400b3a:	2000      	movs	r0, #0
  400b3c:	4770      	bx	lr
  400b3e:	2000      	movs	r0, #0
}
  400b40:	4770      	bx	lr
  400b42:	bf00      	nop
  400b44:	400e0400 	.word	0x400e0400

00400b48 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400b48:	b508      	push	{r3, lr}
  400b4a:	2015      	movs	r0, #21
  400b4c:	4b01      	ldr	r3, [pc, #4]	; (400b54 <spi_enable_clock+0xc>)
  400b4e:	4798      	blx	r3
  400b50:	bd08      	pop	{r3, pc}
  400b52:	bf00      	nop
  400b54:	00400af1 	.word	0x00400af1

00400b58 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400b58:	6843      	ldr	r3, [r0, #4]
  400b5a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400b5e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400b60:	6843      	ldr	r3, [r0, #4]
  400b62:	0409      	lsls	r1, r1, #16
  400b64:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400b68:	430b      	orrs	r3, r1
  400b6a:	6043      	str	r3, [r0, #4]
  400b6c:	4770      	bx	lr
  400b6e:	bf00      	nop

00400b70 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  400b70:	6843      	ldr	r3, [r0, #4]
  400b72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400b76:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  400b78:	6843      	ldr	r3, [r0, #4]
  400b7a:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  400b7e:	6041      	str	r1, [r0, #4]
  400b80:	4770      	bx	lr
  400b82:	bf00      	nop

00400b84 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400b84:	b132      	cbz	r2, 400b94 <spi_set_clock_polarity+0x10>
  400b86:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400b8a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400b8c:	f043 0301 	orr.w	r3, r3, #1
  400b90:	6303      	str	r3, [r0, #48]	; 0x30
  400b92:	4770      	bx	lr
  400b94:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400b98:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400b9a:	f023 0301 	bic.w	r3, r3, #1
  400b9e:	6303      	str	r3, [r0, #48]	; 0x30
  400ba0:	4770      	bx	lr
  400ba2:	bf00      	nop

00400ba4 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400ba4:	b132      	cbz	r2, 400bb4 <spi_set_clock_phase+0x10>
  400ba6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400baa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400bac:	f043 0302 	orr.w	r3, r3, #2
  400bb0:	6303      	str	r3, [r0, #48]	; 0x30
  400bb2:	4770      	bx	lr
  400bb4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400bb8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400bba:	f023 0302 	bic.w	r3, r3, #2
  400bbe:	6303      	str	r3, [r0, #48]	; 0x30
  400bc0:	4770      	bx	lr
  400bc2:	bf00      	nop

00400bc4 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400bc4:	2a04      	cmp	r2, #4
  400bc6:	d10a      	bne.n	400bde <spi_configure_cs_behavior+0x1a>
  400bc8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400bcc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400bce:	f023 0308 	bic.w	r3, r3, #8
  400bd2:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400bd4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400bd6:	f043 0304 	orr.w	r3, r3, #4
  400bda:	6303      	str	r3, [r0, #48]	; 0x30
  400bdc:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400bde:	b952      	cbnz	r2, 400bf6 <spi_configure_cs_behavior+0x32>
  400be0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400be4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400be6:	f023 0308 	bic.w	r3, r3, #8
  400bea:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400bec:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400bee:	f023 0304 	bic.w	r3, r3, #4
  400bf2:	6303      	str	r3, [r0, #48]	; 0x30
  400bf4:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400bf6:	2a08      	cmp	r2, #8
  400bf8:	d105      	bne.n	400c06 <spi_configure_cs_behavior+0x42>
  400bfa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400bfe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c00:	f043 0308 	orr.w	r3, r3, #8
  400c04:	6303      	str	r3, [r0, #48]	; 0x30
  400c06:	4770      	bx	lr

00400c08 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400c08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400c0c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400c0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400c12:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400c14:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400c16:	431a      	orrs	r2, r3
  400c18:	630a      	str	r2, [r1, #48]	; 0x30
  400c1a:	4770      	bx	lr

00400c1c <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400c1c:	1e43      	subs	r3, r0, #1
  400c1e:	4419      	add	r1, r3
  400c20:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400c24:	1e43      	subs	r3, r0, #1
  400c26:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400c28:	bf94      	ite	ls
  400c2a:	b280      	uxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  400c2c:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}

	return baud_div;
}
  400c30:	b200      	sxth	r0, r0
  400c32:	4770      	bx	lr

00400c34 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  400c34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400c38:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400c3e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400c40:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400c42:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  400c46:	630a      	str	r2, [r1, #48]	; 0x30
  400c48:	4770      	bx	lr
  400c4a:	bf00      	nop

00400c4c <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  400c4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  400c50:	6b08      	ldr	r0, [r1, #48]	; 0x30
  400c52:	b280      	uxth	r0, r0
  400c54:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400c56:	6b08      	ldr	r0, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
  400c58:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400c5c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  400c60:	630a      	str	r2, [r1, #48]	; 0x30
  400c62:	4770      	bx	lr

00400c64 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400c64:	4b0f      	ldr	r3, [pc, #60]	; (400ca4 <twi_set_speed+0x40>)
  400c66:	4299      	cmp	r1, r3
  400c68:	d819      	bhi.n	400c9e <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400c6a:	0049      	lsls	r1, r1, #1
  400c6c:	fbb2 f2f1 	udiv	r2, r2, r1
  400c70:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400c72:	2aff      	cmp	r2, #255	; 0xff
  400c74:	d907      	bls.n	400c86 <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400c76:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
  400c78:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  400c7a:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400c7c:	2aff      	cmp	r2, #255	; 0xff
  400c7e:	d903      	bls.n	400c88 <twi_set_speed+0x24>
  400c80:	2b07      	cmp	r3, #7
  400c82:	d1f9      	bne.n	400c78 <twi_set_speed+0x14>
  400c84:	e000      	b.n	400c88 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400c86:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400c88:	0211      	lsls	r1, r2, #8
  400c8a:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
  400c8c:	041b      	lsls	r3, r3, #16
  400c8e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400c92:	430b      	orrs	r3, r1
  400c94:	b2d2      	uxtb	r2, r2
  400c96:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  400c98:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  400c9a:	2000      	movs	r0, #0
  400c9c:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  400c9e:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
  400ca0:	4770      	bx	lr
  400ca2:	bf00      	nop
  400ca4:	00061a80 	.word	0x00061a80

00400ca8 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400ca8:	b538      	push	{r3, r4, r5, lr}
  400caa:	4604      	mov	r4, r0
  400cac:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400cae:	f04f 33ff 	mov.w	r3, #4294967295
  400cb2:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400cb4:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400cb6:	2380      	movs	r3, #128	; 0x80
  400cb8:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400cba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400cbc:	2308      	movs	r3, #8
  400cbe:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400cc0:	2320      	movs	r3, #32
  400cc2:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  400cc4:	2304      	movs	r3, #4
  400cc6:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400cc8:	6849      	ldr	r1, [r1, #4]
  400cca:	682a      	ldr	r2, [r5, #0]
  400ccc:	4b05      	ldr	r3, [pc, #20]	; (400ce4 <twi_master_init+0x3c>)
  400cce:	4798      	blx	r3
  400cd0:	2801      	cmp	r0, #1
  400cd2:	bf14      	ite	ne
  400cd4:	2000      	movne	r0, #0
  400cd6:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  400cd8:	7a6b      	ldrb	r3, [r5, #9]
  400cda:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  400cdc:	bf04      	itt	eq
  400cde:	2340      	moveq	r3, #64	; 0x40
  400ce0:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  400ce2:	bd38      	pop	{r3, r4, r5, pc}
  400ce4:	00400c65 	.word	0x00400c65

00400ce8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400ce8:	6943      	ldr	r3, [r0, #20]
  400cea:	f013 0f02 	tst.w	r3, #2
  400cee:	d002      	beq.n	400cf6 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400cf0:	61c1      	str	r1, [r0, #28]
	return 0;
  400cf2:	2000      	movs	r0, #0
  400cf4:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400cf6:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400cf8:	4770      	bx	lr
  400cfa:	bf00      	nop

00400cfc <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400d00:	6043      	str	r3, [r0, #4]
  400d02:	4770      	bx	lr

00400d04 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400d04:	e7fe      	b.n	400d04 <Dummy_Handler>
  400d06:	bf00      	nop

00400d08 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400d08:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400d0a:	4b20      	ldr	r3, [pc, #128]	; (400d8c <Reset_Handler+0x84>)
  400d0c:	4a20      	ldr	r2, [pc, #128]	; (400d90 <Reset_Handler+0x88>)
  400d0e:	429a      	cmp	r2, r3
  400d10:	d912      	bls.n	400d38 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400d12:	4b20      	ldr	r3, [pc, #128]	; (400d94 <Reset_Handler+0x8c>)
  400d14:	4a1d      	ldr	r2, [pc, #116]	; (400d8c <Reset_Handler+0x84>)
  400d16:	429a      	cmp	r2, r3
  400d18:	d21f      	bcs.n	400d5a <Reset_Handler+0x52>
  400d1a:	1d13      	adds	r3, r2, #4
  400d1c:	4c1e      	ldr	r4, [pc, #120]	; (400d98 <Reset_Handler+0x90>)
  400d1e:	1ae4      	subs	r4, r4, r3
  400d20:	f024 0403 	bic.w	r4, r4, #3
  400d24:	3404      	adds	r4, #4
  400d26:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
  400d28:	4610      	mov	r0, r2
  400d2a:	4919      	ldr	r1, [pc, #100]	; (400d90 <Reset_Handler+0x88>)
  400d2c:	585a      	ldr	r2, [r3, r1]
  400d2e:	501a      	str	r2, [r3, r0]
  400d30:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400d32:	42a3      	cmp	r3, r4
  400d34:	d1fa      	bne.n	400d2c <Reset_Handler+0x24>
  400d36:	e010      	b.n	400d5a <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400d38:	4b14      	ldr	r3, [pc, #80]	; (400d8c <Reset_Handler+0x84>)
  400d3a:	4a15      	ldr	r2, [pc, #84]	; (400d90 <Reset_Handler+0x88>)
  400d3c:	429a      	cmp	r2, r3
  400d3e:	d20c      	bcs.n	400d5a <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400d40:	4a14      	ldr	r2, [pc, #80]	; (400d94 <Reset_Handler+0x8c>)
  400d42:	4619      	mov	r1, r3
  400d44:	1ad3      	subs	r3, r2, r3
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400d46:	4815      	ldr	r0, [pc, #84]	; (400d9c <Reset_Handler+0x94>)
  400d48:	4418      	add	r0, r3
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400d4a:	b133      	cbz	r3, 400d5a <Reset_Handler+0x52>
  400d4c:	4613      	mov	r3, r2
  400d4e:	1a9c      	subs	r4, r3, r2
			*pDest-- = *pSrc--;
  400d50:	5824      	ldr	r4, [r4, r0]
  400d52:	f843 4d04 	str.w	r4, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400d56:	4299      	cmp	r1, r3
  400d58:	d1f9      	bne.n	400d4e <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400d5a:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400d5c:	4b10      	ldr	r3, [pc, #64]	; (400da0 <Reset_Handler+0x98>)
  400d5e:	4a11      	ldr	r2, [pc, #68]	; (400da4 <Reset_Handler+0x9c>)
  400d60:	429a      	cmp	r2, r3
  400d62:	d20b      	bcs.n	400d7c <Reset_Handler+0x74>
  400d64:	1f13      	subs	r3, r2, #4
  400d66:	4910      	ldr	r1, [pc, #64]	; (400da8 <Reset_Handler+0xa0>)
  400d68:	1ac9      	subs	r1, r1, r3
  400d6a:	f021 0103 	bic.w	r1, r1, #3
  400d6e:	1d1a      	adds	r2, r3, #4
  400d70:	4411      	add	r1, r2
		*pDest++ = 0;
  400d72:	2200      	movs	r2, #0
  400d74:	f843 2f04 	str.w	r2, [r3, #4]!
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400d78:	428b      	cmp	r3, r1
  400d7a:	d1fb      	bne.n	400d74 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400d7c:	4b0b      	ldr	r3, [pc, #44]	; (400dac <Reset_Handler+0xa4>)
  400d7e:	4a0c      	ldr	r2, [pc, #48]	; (400db0 <Reset_Handler+0xa8>)
  400d80:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400d82:	4b0c      	ldr	r3, [pc, #48]	; (400db4 <Reset_Handler+0xac>)
  400d84:	4798      	blx	r3

	/* Branch to main function */
	main();
  400d86:	4b0c      	ldr	r3, [pc, #48]	; (400db8 <Reset_Handler+0xb0>)
  400d88:	4798      	blx	r3
  400d8a:	e7fe      	b.n	400d8a <Reset_Handler+0x82>
  400d8c:	20000000 	.word	0x20000000
  400d90:	00405eac 	.word	0x00405eac
  400d94:	200008d4 	.word	0x200008d4
  400d98:	200008d7 	.word	0x200008d7
  400d9c:	00405ea8 	.word	0x00405ea8
  400da0:	200009a8 	.word	0x200009a8
  400da4:	200008d4 	.word	0x200008d4
  400da8:	200009a3 	.word	0x200009a3
  400dac:	e000ed00 	.word	0xe000ed00
  400db0:	00400000 	.word	0x00400000
  400db4:	00401b35 	.word	0x00401b35
  400db8:	0040117d 	.word	0x0040117d

00400dbc <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400dbc:	4b3d      	ldr	r3, [pc, #244]	; (400eb4 <SystemCoreClockUpdate+0xf8>)
  400dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400dc0:	f003 0303 	and.w	r3, r3, #3
  400dc4:	2b03      	cmp	r3, #3
  400dc6:	d85d      	bhi.n	400e84 <SystemCoreClockUpdate+0xc8>
  400dc8:	e8df f003 	tbb	[pc, r3]
  400dcc:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400dd0:	4b39      	ldr	r3, [pc, #228]	; (400eb8 <SystemCoreClockUpdate+0xfc>)
  400dd2:	695b      	ldr	r3, [r3, #20]
  400dd4:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400dd8:	bf14      	ite	ne
  400dda:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400dde:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400de2:	4b36      	ldr	r3, [pc, #216]	; (400ebc <SystemCoreClockUpdate+0x100>)
  400de4:	601a      	str	r2, [r3, #0]
  400de6:	e04d      	b.n	400e84 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400de8:	4b32      	ldr	r3, [pc, #200]	; (400eb4 <SystemCoreClockUpdate+0xf8>)
  400dea:	6a1b      	ldr	r3, [r3, #32]
  400dec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400df0:	d003      	beq.n	400dfa <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400df2:	4a33      	ldr	r2, [pc, #204]	; (400ec0 <SystemCoreClockUpdate+0x104>)
  400df4:	4b31      	ldr	r3, [pc, #196]	; (400ebc <SystemCoreClockUpdate+0x100>)
  400df6:	601a      	str	r2, [r3, #0]
  400df8:	e044      	b.n	400e84 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400dfa:	4a32      	ldr	r2, [pc, #200]	; (400ec4 <SystemCoreClockUpdate+0x108>)
  400dfc:	4b2f      	ldr	r3, [pc, #188]	; (400ebc <SystemCoreClockUpdate+0x100>)
  400dfe:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400e00:	4b2c      	ldr	r3, [pc, #176]	; (400eb4 <SystemCoreClockUpdate+0xf8>)
  400e02:	6a1b      	ldr	r3, [r3, #32]
  400e04:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e08:	2b10      	cmp	r3, #16
  400e0a:	d002      	beq.n	400e12 <SystemCoreClockUpdate+0x56>
  400e0c:	2b20      	cmp	r3, #32
  400e0e:	d004      	beq.n	400e1a <SystemCoreClockUpdate+0x5e>
  400e10:	e038      	b.n	400e84 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400e12:	4a2d      	ldr	r2, [pc, #180]	; (400ec8 <SystemCoreClockUpdate+0x10c>)
  400e14:	4b29      	ldr	r3, [pc, #164]	; (400ebc <SystemCoreClockUpdate+0x100>)
  400e16:	601a      	str	r2, [r3, #0]
			break;
  400e18:	e034      	b.n	400e84 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400e1a:	4a29      	ldr	r2, [pc, #164]	; (400ec0 <SystemCoreClockUpdate+0x104>)
  400e1c:	4b27      	ldr	r3, [pc, #156]	; (400ebc <SystemCoreClockUpdate+0x100>)
  400e1e:	601a      	str	r2, [r3, #0]
			break;
  400e20:	e030      	b.n	400e84 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400e22:	4b24      	ldr	r3, [pc, #144]	; (400eb4 <SystemCoreClockUpdate+0xf8>)
  400e24:	6a1b      	ldr	r3, [r3, #32]
  400e26:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e2a:	d003      	beq.n	400e34 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400e2c:	4a24      	ldr	r2, [pc, #144]	; (400ec0 <SystemCoreClockUpdate+0x104>)
  400e2e:	4b23      	ldr	r3, [pc, #140]	; (400ebc <SystemCoreClockUpdate+0x100>)
  400e30:	601a      	str	r2, [r3, #0]
  400e32:	e012      	b.n	400e5a <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e34:	4a23      	ldr	r2, [pc, #140]	; (400ec4 <SystemCoreClockUpdate+0x108>)
  400e36:	4b21      	ldr	r3, [pc, #132]	; (400ebc <SystemCoreClockUpdate+0x100>)
  400e38:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400e3a:	4b1e      	ldr	r3, [pc, #120]	; (400eb4 <SystemCoreClockUpdate+0xf8>)
  400e3c:	6a1b      	ldr	r3, [r3, #32]
  400e3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e42:	2b10      	cmp	r3, #16
  400e44:	d002      	beq.n	400e4c <SystemCoreClockUpdate+0x90>
  400e46:	2b20      	cmp	r3, #32
  400e48:	d004      	beq.n	400e54 <SystemCoreClockUpdate+0x98>
  400e4a:	e006      	b.n	400e5a <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400e4c:	4a1e      	ldr	r2, [pc, #120]	; (400ec8 <SystemCoreClockUpdate+0x10c>)
  400e4e:	4b1b      	ldr	r3, [pc, #108]	; (400ebc <SystemCoreClockUpdate+0x100>)
  400e50:	601a      	str	r2, [r3, #0]
					break;
  400e52:	e002      	b.n	400e5a <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400e54:	4a1a      	ldr	r2, [pc, #104]	; (400ec0 <SystemCoreClockUpdate+0x104>)
  400e56:	4b19      	ldr	r3, [pc, #100]	; (400ebc <SystemCoreClockUpdate+0x100>)
  400e58:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400e5a:	4b16      	ldr	r3, [pc, #88]	; (400eb4 <SystemCoreClockUpdate+0xf8>)
  400e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e5e:	f003 0303 	and.w	r3, r3, #3
  400e62:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400e64:	4b13      	ldr	r3, [pc, #76]	; (400eb4 <SystemCoreClockUpdate+0xf8>)
  400e66:	bf07      	ittee	eq
  400e68:	6a98      	ldreq	r0, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400e6a:	6a99      	ldreq	r1, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400e6c:	6ad8      	ldrne	r0, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400e6e:	6ad9      	ldrne	r1, [r3, #44]	; 0x2c
  400e70:	4b12      	ldr	r3, [pc, #72]	; (400ebc <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400e72:	f3c0 400a 	ubfx	r0, r0, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400e76:	681a      	ldr	r2, [r3, #0]
  400e78:	fb00 2202 	mla	r2, r0, r2, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  400e7c:	b2c9      	uxtb	r1, r1
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400e7e:	fbb2 f2f1 	udiv	r2, r2, r1
  400e82:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400e84:	4b0b      	ldr	r3, [pc, #44]	; (400eb4 <SystemCoreClockUpdate+0xf8>)
  400e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e88:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e8c:	2b70      	cmp	r3, #112	; 0x70
  400e8e:	d107      	bne.n	400ea0 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400e90:	4b0a      	ldr	r3, [pc, #40]	; (400ebc <SystemCoreClockUpdate+0x100>)
  400e92:	681a      	ldr	r2, [r3, #0]
  400e94:	490d      	ldr	r1, [pc, #52]	; (400ecc <SystemCoreClockUpdate+0x110>)
  400e96:	fba1 0202 	umull	r0, r2, r1, r2
  400e9a:	0852      	lsrs	r2, r2, #1
  400e9c:	601a      	str	r2, [r3, #0]
  400e9e:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400ea0:	4b04      	ldr	r3, [pc, #16]	; (400eb4 <SystemCoreClockUpdate+0xf8>)
  400ea2:	6b19      	ldr	r1, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400ea4:	4b05      	ldr	r3, [pc, #20]	; (400ebc <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400ea6:	f3c1 1102 	ubfx	r1, r1, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400eaa:	681a      	ldr	r2, [r3, #0]
  400eac:	40ca      	lsrs	r2, r1
  400eae:	601a      	str	r2, [r3, #0]
  400eb0:	4770      	bx	lr
  400eb2:	bf00      	nop
  400eb4:	400e0400 	.word	0x400e0400
  400eb8:	400e1410 	.word	0x400e1410
  400ebc:	2000000c 	.word	0x2000000c
  400ec0:	00b71b00 	.word	0x00b71b00
  400ec4:	003d0900 	.word	0x003d0900
  400ec8:	007a1200 	.word	0x007a1200
  400ecc:	aaaaaaab 	.word	0xaaaaaaab

00400ed0 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400ed0:	4b1a      	ldr	r3, [pc, #104]	; (400f3c <system_init_flash+0x6c>)
  400ed2:	4298      	cmp	r0, r3
  400ed4:	d807      	bhi.n	400ee6 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400ed6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400eda:	4a19      	ldr	r2, [pc, #100]	; (400f40 <system_init_flash+0x70>)
  400edc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400ede:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ee2:	6013      	str	r3, [r2, #0]
  400ee4:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400ee6:	4b17      	ldr	r3, [pc, #92]	; (400f44 <system_init_flash+0x74>)
  400ee8:	4298      	cmp	r0, r3
  400eea:	d806      	bhi.n	400efa <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400eec:	4b16      	ldr	r3, [pc, #88]	; (400f48 <system_init_flash+0x78>)
  400eee:	4a14      	ldr	r2, [pc, #80]	; (400f40 <system_init_flash+0x70>)
  400ef0:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ef2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ef6:	6013      	str	r3, [r2, #0]
  400ef8:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400efa:	4b14      	ldr	r3, [pc, #80]	; (400f4c <system_init_flash+0x7c>)
  400efc:	4298      	cmp	r0, r3
  400efe:	d806      	bhi.n	400f0e <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400f00:	4b13      	ldr	r3, [pc, #76]	; (400f50 <system_init_flash+0x80>)
  400f02:	4a0f      	ldr	r2, [pc, #60]	; (400f40 <system_init_flash+0x70>)
  400f04:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400f06:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f0a:	6013      	str	r3, [r2, #0]
  400f0c:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400f0e:	4b11      	ldr	r3, [pc, #68]	; (400f54 <system_init_flash+0x84>)
  400f10:	4298      	cmp	r0, r3
  400f12:	d806      	bhi.n	400f22 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400f14:	4b10      	ldr	r3, [pc, #64]	; (400f58 <system_init_flash+0x88>)
  400f16:	4a0a      	ldr	r2, [pc, #40]	; (400f40 <system_init_flash+0x70>)
  400f18:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400f1a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f1e:	6013      	str	r3, [r2, #0]
  400f20:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400f22:	4b0e      	ldr	r3, [pc, #56]	; (400f5c <system_init_flash+0x8c>)
  400f24:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400f26:	bf94      	ite	ls
  400f28:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400f2c:	4b0c      	ldrhi	r3, [pc, #48]	; (400f60 <system_init_flash+0x90>)
  400f2e:	4a04      	ldr	r2, [pc, #16]	; (400f40 <system_init_flash+0x70>)
  400f30:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400f32:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f36:	6013      	str	r3, [r2, #0]
  400f38:	4770      	bx	lr
  400f3a:	bf00      	nop
  400f3c:	01312cff 	.word	0x01312cff
  400f40:	400e0a00 	.word	0x400e0a00
  400f44:	026259ff 	.word	0x026259ff
  400f48:	04000100 	.word	0x04000100
  400f4c:	039386ff 	.word	0x039386ff
  400f50:	04000200 	.word	0x04000200
  400f54:	04c4b3ff 	.word	0x04c4b3ff
  400f58:	04000300 	.word	0x04000300
  400f5c:	05f5e0ff 	.word	0x05f5e0ff
  400f60:	04000500 	.word	0x04000500

00400f64 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400f64:	4b09      	ldr	r3, [pc, #36]	; (400f8c <_sbrk+0x28>)
  400f66:	681b      	ldr	r3, [r3, #0]
  400f68:	b913      	cbnz	r3, 400f70 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400f6a:	4a09      	ldr	r2, [pc, #36]	; (400f90 <_sbrk+0x2c>)
  400f6c:	4b07      	ldr	r3, [pc, #28]	; (400f8c <_sbrk+0x28>)
  400f6e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400f70:	4b06      	ldr	r3, [pc, #24]	; (400f8c <_sbrk+0x28>)
  400f72:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400f74:	181a      	adds	r2, r3, r0
  400f76:	4907      	ldr	r1, [pc, #28]	; (400f94 <_sbrk+0x30>)
  400f78:	4291      	cmp	r1, r2
  400f7a:	db04      	blt.n	400f86 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400f7c:	4610      	mov	r0, r2
  400f7e:	4a03      	ldr	r2, [pc, #12]	; (400f8c <_sbrk+0x28>)
  400f80:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400f82:	4618      	mov	r0, r3
  400f84:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400f86:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400f8a:	4770      	bx	lr
  400f8c:	20000968 	.word	0x20000968
  400f90:	200039a8 	.word	0x200039a8
  400f94:	20027ffc 	.word	0x20027ffc

00400f98 <Button1_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void Button1_Handler(uint32_t id, uint32_t mask)
{
	if ((PIN_PUSHBUTTON_1_ID == id) && (PIN_PUSHBUTTON_1_MASK == mask))
  400f98:	280b      	cmp	r0, #11
  400f9a:	d104      	bne.n	400fa6 <Button1_Handler+0xe>
  400f9c:	2901      	cmp	r1, #1
  400f9e:	d102      	bne.n	400fa6 <Button1_Handler+0xe>
static void ProcessButtonEvt(uint8_t uc_button)
{
	if ((uc_button >= DOOR_PRESSED_MIN) && 
	    (uc_button <= DOOR_PRESSED_MAX))
	{
		g_door_pressed = uc_button;
  400fa0:	2201      	movs	r2, #1
  400fa2:	4b01      	ldr	r3, [pc, #4]	; (400fa8 <Button1_Handler+0x10>)
  400fa4:	601a      	str	r2, [r3, #0]
  400fa6:	4770      	bx	lr
  400fa8:	20000010 	.word	0x20000010

00400fac <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  400fac:	b570      	push	{r4, r5, r6, lr}
  400fae:	b082      	sub	sp, #8
  400fb0:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400fb2:	ac02      	add	r4, sp, #8
  400fb4:	2302      	movs	r3, #2
  400fb6:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  400fba:	4d09      	ldr	r5, [pc, #36]	; (400fe0 <ssd1306_write_command+0x34>)
  400fbc:	4628      	mov	r0, r5
  400fbe:	4621      	mov	r1, r4
  400fc0:	4b08      	ldr	r3, [pc, #32]	; (400fe4 <ssd1306_write_command+0x38>)
  400fc2:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400fc4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400fc8:	4b07      	ldr	r3, [pc, #28]	; (400fe8 <ssd1306_write_command+0x3c>)
  400fca:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400fcc:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  400fce:	2056      	movs	r0, #86	; 0x56
  400fd0:	4b06      	ldr	r3, [pc, #24]	; (400fec <ssd1306_write_command+0x40>)
  400fd2:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  400fd4:	4628      	mov	r0, r5
  400fd6:	4621      	mov	r1, r4
  400fd8:	4b05      	ldr	r3, [pc, #20]	; (400ff0 <ssd1306_write_command+0x44>)
  400fda:	4798      	blx	r3
#endif
}
  400fdc:	b002      	add	sp, #8
  400fde:	bd70      	pop	{r4, r5, r6, pc}
  400fe0:	40008000 	.word	0x40008000
  400fe4:	004003e9 	.word	0x004003e9
  400fe8:	400e1200 	.word	0x400e1200
  400fec:	20000001 	.word	0x20000001
  400ff0:	00400419 	.word	0x00400419

00400ff4 <Button3_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void Button3_Handler(uint32_t id, uint32_t mask)
{
	if ((PIN_PUSHBUTTON_3_ID == id) && (PIN_PUSHBUTTON_3_MASK == mask))
  400ff4:	280d      	cmp	r0, #13
  400ff6:	d105      	bne.n	401004 <Button3_Handler+0x10>
  400ff8:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  400ffc:	d102      	bne.n	401004 <Button3_Handler+0x10>
static void ProcessButtonEvt(uint8_t uc_button)
{
	if ((uc_button >= DOOR_PRESSED_MIN) && 
	    (uc_button <= DOOR_PRESSED_MAX))
	{
		g_door_pressed = uc_button;
  400ffe:	2203      	movs	r2, #3
  401000:	4b01      	ldr	r3, [pc, #4]	; (401008 <Button3_Handler+0x14>)
  401002:	601a      	str	r2, [r3, #0]
  401004:	4770      	bx	lr
  401006:	bf00      	nop
  401008:	20000010 	.word	0x20000010

0040100c <Button2_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void Button2_Handler(uint32_t id, uint32_t mask)
{
	if ((PIN_PUSHBUTTON_2_ID == id) && (PIN_PUSHBUTTON_2_MASK == mask))
  40100c:	280d      	cmp	r0, #13
  40100e:	d105      	bne.n	40101c <Button2_Handler+0x10>
  401010:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401014:	d102      	bne.n	40101c <Button2_Handler+0x10>
static void ProcessButtonEvt(uint8_t uc_button)
{
	if ((uc_button >= DOOR_PRESSED_MIN) && 
	    (uc_button <= DOOR_PRESSED_MAX))
	{
		g_door_pressed = uc_button;
  401016:	2202      	movs	r2, #2
  401018:	4b01      	ldr	r3, [pc, #4]	; (401020 <Button2_Handler+0x14>)
  40101a:	601a      	str	r2, [r3, #0]
  40101c:	4770      	bx	lr
  40101e:	bf00      	nop
  401020:	20000010 	.word	0x20000010

00401024 <pick_open_door>:
	uint32_t winning_door;
	
} monty_hall_state;
	
uint32_t pick_open_door( uint32_t winning_door, uint32_t first_door )
{
  401024:	b538      	push	{r3, r4, r5, lr}
  401026:	460c      	mov	r4, r1
	uint32_t open_door = DOOR_NOT_PRESSED;
	if( first_door != winning_door )
  401028:	4281      	cmp	r1, r0
  40102a:	d014      	beq.n	401056 <pick_open_door+0x32>
	{
		// Since the winning door is not the selected door,
		//  we need simply pick the opposite unselected door
		//  There is probably a more efficient algorithm for this,
		//  but this will work for now.
		if (first_door == 1)
  40102c:	2901      	cmp	r1, #1
  40102e:	d104      	bne.n	40103a <pick_open_door+0x16>
		{
			if (winning_door == 2)
			{
				open_door = 3;
  401030:	2802      	cmp	r0, #2
  401032:	bf14      	ite	ne
  401034:	2502      	movne	r5, #2
  401036:	2503      	moveq	r5, #3
  401038:	e01c      	b.n	401074 <pick_open_door+0x50>
			else
			{
				open_door = 2;
			}
		}
		else if (first_door == 2)
  40103a:	2902      	cmp	r1, #2
  40103c:	d104      	bne.n	401048 <pick_open_door+0x24>
		{
			if (winning_door == 3)
			{
				open_door = 1;
  40103e:	2803      	cmp	r0, #3
  401040:	bf14      	ite	ne
  401042:	2503      	movne	r5, #3
  401044:	2501      	moveq	r5, #1
  401046:	e015      	b.n	401074 <pick_open_door+0x50>
			else
			{
				open_door = 3;
			}
		}
		else if (first_door == 3)
  401048:	2903      	cmp	r1, #3
  40104a:	d112      	bne.n	401072 <pick_open_door+0x4e>
		{
			if (winning_door == 1)
			{
				open_door = 2;
  40104c:	2801      	cmp	r0, #1
  40104e:	bf14      	ite	ne
  401050:	2501      	movne	r5, #1
  401052:	2502      	moveq	r5, #2
  401054:	e00e      	b.n	401074 <pick_open_door+0x50>
			}
		}
	}
	else
	{
		open_door = 1;
  401056:	2901      	cmp	r1, #1
  401058:	bf0c      	ite	eq
  40105a:	2502      	moveq	r5, #2
  40105c:	2501      	movne	r5, #1
			open_door++;
		}
		
		// Since Monty can open either door, we need to randomly select
		//  a door.
		int random_value = rand();
  40105e:	4b06      	ldr	r3, [pc, #24]	; (401078 <pick_open_door+0x54>)
  401060:	4798      	blx	r3
		if( random_value & 0x1 )
  401062:	f010 0f01 	tst.w	r0, #1
		{
			open_door++;
  401066:	bf18      	it	ne
  401068:	3501      	addne	r5, #1
		}
		if( open_door == winning_door )
  40106a:	42a5      	cmp	r5, r4
  40106c:	d102      	bne.n	401074 <pick_open_door+0x50>
		{
			// we can't pick this door, since it is the winning one
			open_door++;
  40106e:	3501      	adds	r5, #1
  401070:	e000      	b.n	401074 <pick_open_door+0x50>
	
} monty_hall_state;
	
uint32_t pick_open_door( uint32_t winning_door, uint32_t first_door )
{
	uint32_t open_door = DOOR_NOT_PRESSED;
  401072:	2504      	movs	r5, #4
			// we can't pick this door, since it is the winning one
			open_door++;
		}
	}
	return open_door;
}
  401074:	4628      	mov	r0, r5
  401076:	bd38      	pop	{r3, r4, r5, pc}
  401078:	00401ba1 	.word	0x00401ba1

0040107c <handle_door_press>:

int32_t handle_door_press( monty_hall_state *p_game_state, uint32_t new_door_press )
{
  40107c:	b538      	push	{r3, r4, r5, lr}
  40107e:	460d      	mov	r5, r1
	if( p_game_state == NULL )
  401080:	4604      	mov	r4, r0
  401082:	2800      	cmp	r0, #0
  401084:	d03b      	beq.n	4010fe <handle_door_press+0x82>
	{
		return -1;
	}
	
	switch( p_game_state->state )
  401086:	7c03      	ldrb	r3, [r0, #16]
  401088:	b113      	cbz	r3, 401090 <handle_door_press+0x14>
  40108a:	2b01      	cmp	r3, #1
  40108c:	d015      	beq.n	4010ba <handle_door_press+0x3e>
  40108e:	e033      	b.n	4010f8 <handle_door_press+0x7c>
	{
		case MONTY_GAME_STARTED:
		{
			p_game_state->winning_door = (rand() % 3) + 1;
  401090:	4b1e      	ldr	r3, [pc, #120]	; (40110c <handle_door_press+0x90>)
  401092:	4798      	blx	r3
  401094:	4b1e      	ldr	r3, [pc, #120]	; (401110 <handle_door_press+0x94>)
  401096:	fb83 2300 	smull	r2, r3, r3, r0
  40109a:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  40109e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4010a2:	1ac0      	subs	r0, r0, r3
  4010a4:	3001      	adds	r0, #1
  4010a6:	61e0      	str	r0, [r4, #28]
			p_game_state->first_door = new_door_press;
  4010a8:	6165      	str	r5, [r4, #20]
			p_game_state->state = FIRST_DOOR_OPEN;
  4010aa:	2301      	movs	r3, #1
  4010ac:	7423      	strb	r3, [r4, #16]
			p_game_state->open_door = pick_open_door( p_game_state->winning_door, new_door_press );
  4010ae:	4629      	mov	r1, r5
  4010b0:	4b18      	ldr	r3, [pc, #96]	; (401114 <handle_door_press+0x98>)
  4010b2:	4798      	blx	r3
  4010b4:	61a0      	str	r0, [r4, #24]
		{
			p_game_state->state = MONTY_GAME_STARTED;
			break;
		}
	}
	return 0;
  4010b6:	2000      	movs	r0, #0
		{
			p_game_state->winning_door = (rand() % 3) + 1;
			p_game_state->first_door = new_door_press;
			p_game_state->state = FIRST_DOOR_OPEN;
			p_game_state->open_door = pick_open_door( p_game_state->winning_door, new_door_press );
			break;
  4010b8:	bd38      	pop	{r3, r4, r5, pc}
		}
		case FIRST_DOOR_OPEN:
		{
			if( p_game_state->open_door == new_door_press )
  4010ba:	6983      	ldr	r3, [r0, #24]
  4010bc:	428b      	cmp	r3, r1
  4010be:	d021      	beq.n	401104 <handle_door_press+0x88>
			{
				// Invalid button press, stay in this state and wait for another press
				return -1;
			}
			if( p_game_state->winning_door == new_door_press )
  4010c0:	69c3      	ldr	r3, [r0, #28]
  4010c2:	428b      	cmp	r3, r1
  4010c4:	d105      	bne.n	4010d2 <handle_door_press+0x56>
			{
				p_game_state->state = GAME_OVER_WON;
  4010c6:	2302      	movs	r3, #2
  4010c8:	7403      	strb	r3, [r0, #16]
				p_game_state->times_won++;
  4010ca:	68c3      	ldr	r3, [r0, #12]
  4010cc:	3301      	adds	r3, #1
  4010ce:	60c3      	str	r3, [r0, #12]
  4010d0:	e001      	b.n	4010d6 <handle_door_press+0x5a>
			}
			else
			{
				p_game_state->state = GAME_OVER_LOST;
  4010d2:	2303      	movs	r3, #3
  4010d4:	7403      	strb	r3, [r0, #16]
			}
			if( p_game_state->first_door != new_door_press )
  4010d6:	6963      	ldr	r3, [r4, #20]
  4010d8:	42ab      	cmp	r3, r5
  4010da:	d008      	beq.n	4010ee <handle_door_press+0x72>
			{
				p_game_state->times_switched++;
  4010dc:	6863      	ldr	r3, [r4, #4]
  4010de:	3301      	adds	r3, #1
  4010e0:	6063      	str	r3, [r4, #4]
				if( p_game_state->state == GAME_OVER_WON )
  4010e2:	7c23      	ldrb	r3, [r4, #16]
  4010e4:	2b02      	cmp	r3, #2
  4010e6:	d102      	bne.n	4010ee <handle_door_press+0x72>
				{
					p_game_state->times_switched_won++;
  4010e8:	68a3      	ldr	r3, [r4, #8]
  4010ea:	3301      	adds	r3, #1
  4010ec:	60a3      	str	r3, [r4, #8]
				}
			}
			p_game_state->number_of_games++;
  4010ee:	6823      	ldr	r3, [r4, #0]
  4010f0:	3301      	adds	r3, #1
  4010f2:	6023      	str	r3, [r4, #0]
		{
			p_game_state->state = MONTY_GAME_STARTED;
			break;
		}
	}
	return 0;
  4010f4:	2000      	movs	r0, #0
				{
					p_game_state->times_switched_won++;
				}
			}
			p_game_state->number_of_games++;
			break;
  4010f6:	bd38      	pop	{r3, r4, r5, pc}
		}
		default:
		case GAME_OVER_LOST:
		case GAME_OVER_WON:
		{
			p_game_state->state = MONTY_GAME_STARTED;
  4010f8:	2000      	movs	r0, #0
  4010fa:	7420      	strb	r0, [r4, #16]
			break;
  4010fc:	bd38      	pop	{r3, r4, r5, pc}

int32_t handle_door_press( monty_hall_state *p_game_state, uint32_t new_door_press )
{
	if( p_game_state == NULL )
	{
		return -1;
  4010fe:	f04f 30ff 	mov.w	r0, #4294967295
  401102:	bd38      	pop	{r3, r4, r5, pc}
		case FIRST_DOOR_OPEN:
		{
			if( p_game_state->open_door == new_door_press )
			{
				// Invalid button press, stay in this state and wait for another press
				return -1;
  401104:	f04f 30ff 	mov.w	r0, #4294967295
			p_game_state->state = MONTY_GAME_STARTED;
			break;
		}
	}
	return 0;
}
  401108:	bd38      	pop	{r3, r4, r5, pc}
  40110a:	bf00      	nop
  40110c:	00401ba1 	.word	0x00401ba1
  401110:	55555556 	.word	0x55555556
  401114:	00401025 	.word	0x00401025

00401118 <print_uart>:
 * \param p_string - buffer of characters to transmit
 * \param max_len - maximum number of characters that may be in the buffer
 * \param uart_timeout_cnt - number of times to try to write to the UART before timing out
 */
void print_uart( char * p_string, uint32_t max_len, uint32_t uart_timeout_cnt )
{
  401118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40111c:	4607      	mov	r7, r0
  40111e:	4616      	mov	r6, r2
    uint32_t len = strnlen(p_string, max_len);
  401120:	4b13      	ldr	r3, [pc, #76]	; (401170 <print_uart+0x58>)
  401122:	4798      	blx	r3
    for( uint32_t i = 0; i < len; i++ )
  401124:	4682      	mov	sl, r0
  401126:	b198      	cbz	r0, 401150 <print_uart+0x38>
  401128:	2500      	movs	r5, #0
    {
        for( uint32_t count = 0; count < uart_timeout_cnt; count++ )
        {
            if( uart_write(UART1, p_string[i]) == 0 )
  40112a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 401174 <print_uart+0x5c>
  40112e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 401178 <print_uart+0x60>
  401132:	e009      	b.n	401148 <print_uart+0x30>
  401134:	4640      	mov	r0, r8
  401136:	5d79      	ldrb	r1, [r7, r5]
  401138:	47c8      	blx	r9
  40113a:	b110      	cbz	r0, 401142 <print_uart+0x2a>
void print_uart( char * p_string, uint32_t max_len, uint32_t uart_timeout_cnt )
{
    uint32_t len = strnlen(p_string, max_len);
    for( uint32_t i = 0; i < len; i++ )
    {
        for( uint32_t count = 0; count < uart_timeout_cnt; count++ )
  40113c:	3401      	adds	r4, #1
  40113e:	42b4      	cmp	r4, r6
  401140:	d1f8      	bne.n	401134 <print_uart+0x1c>
 * \param uart_timeout_cnt - number of times to try to write to the UART before timing out
 */
void print_uart( char * p_string, uint32_t max_len, uint32_t uart_timeout_cnt )
{
    uint32_t len = strnlen(p_string, max_len);
    for( uint32_t i = 0; i < len; i++ )
  401142:	3501      	adds	r5, #1
  401144:	4555      	cmp	r5, sl
  401146:	d003      	beq.n	401150 <print_uart+0x38>
    {
        for( uint32_t count = 0; count < uart_timeout_cnt; count++ )
  401148:	2e00      	cmp	r6, #0
  40114a:	d0fa      	beq.n	401142 <print_uart+0x2a>
  40114c:	2400      	movs	r4, #0
  40114e:	e7f1      	b.n	401134 <print_uart+0x1c>
            {
                break;
            }
        }
    }
    for( uint32_t count = 0; count < uart_timeout_cnt; count++ )
  401150:	b15e      	cbz	r6, 40116a <print_uart+0x52>
  401152:	2400      	movs	r4, #0
    {
        if( uart_write(UART1, '\n') == 0 )
  401154:	f8df 8020 	ldr.w	r8, [pc, #32]	; 401178 <print_uart+0x60>
  401158:	270a      	movs	r7, #10
  40115a:	4d06      	ldr	r5, [pc, #24]	; (401174 <print_uart+0x5c>)
  40115c:	4640      	mov	r0, r8
  40115e:	4639      	mov	r1, r7
  401160:	47a8      	blx	r5
  401162:	b110      	cbz	r0, 40116a <print_uart+0x52>
            {
                break;
            }
        }
    }
    for( uint32_t count = 0; count < uart_timeout_cnt; count++ )
  401164:	3401      	adds	r4, #1
  401166:	42b4      	cmp	r4, r6
  401168:	d1f8      	bne.n	40115c <print_uart+0x44>
  40116a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40116e:	bf00      	nop
  401170:	00401c75 	.word	0x00401c75
  401174:	00400ce9 	.word	0x00400ce9
  401178:	400e0800 	.word	0x400e0800

0040117c <main>:
    }
}


int main(void)
{
  40117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401180:	b0ab      	sub	sp, #172	; 0xac
	const uint32_t max_disp_string = 120;
    const uint32_t max_uart_tries  = 1000000;
    char result_disp[max_disp_string];

	// Initialize clocks.
	sysclk_init();
  401182:	4b6a      	ldr	r3, [pc, #424]	; (40132c <main+0x1b0>)
  401184:	4798      	blx	r3

	// Initialize GPIO states.
	board_init();
  401186:	4b6a      	ldr	r3, [pc, #424]	; (401330 <main+0x1b4>)
  401188:	4798      	blx	r3

	// Initialize at30tse.
	at30tse_init();
  40118a:	4b6a      	ldr	r3, [pc, #424]	; (401334 <main+0x1b8>)
  40118c:	4798      	blx	r3
 * pressed or released.
 */
static void configure_buttons(void)
{
	/* Configure Pushbutton 1. */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_1_ID);
  40118e:	200b      	movs	r0, #11
  401190:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 40138c <main+0x210>
  401194:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  401196:	4c68      	ldr	r4, [pc, #416]	; (401338 <main+0x1bc>)
  401198:	4620      	mov	r0, r4
  40119a:	2101      	movs	r1, #1
  40119c:	220a      	movs	r2, #10
  40119e:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 401390 <main+0x214>
  4011a2:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  4011a4:	4b65      	ldr	r3, [pc, #404]	; (40133c <main+0x1c0>)
  4011a6:	9300      	str	r3, [sp, #0]
  4011a8:	4620      	mov	r0, r4
  4011aa:	210b      	movs	r1, #11
  4011ac:	2201      	movs	r2, #1
  4011ae:	2379      	movs	r3, #121	; 0x79
  4011b0:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 401394 <main+0x218>
  4011b4:	47c0      	blx	r8
  4011b6:	4f62      	ldr	r7, [pc, #392]	; (401340 <main+0x1c4>)
  4011b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011bc:	603b      	str	r3, [r7, #0]
			PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, Button1_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_1_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO, (IRQn_Type) PIN_PUSHBUTTON_1_ID, IRQ_PRIOR_PIO);
  4011be:	4620      	mov	r0, r4
  4011c0:	210b      	movs	r1, #11
  4011c2:	2200      	movs	r2, #0
  4011c4:	4e5f      	ldr	r6, [pc, #380]	; (401344 <main+0x1c8>)
  4011c6:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  4011c8:	4620      	mov	r0, r4
  4011ca:	2101      	movs	r1, #1
  4011cc:	4d5e      	ldr	r5, [pc, #376]	; (401348 <main+0x1cc>)
  4011ce:	47a8      	blx	r5

	/* Configure Pushbutton 2. */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_2_ID);
  4011d0:	200d      	movs	r0, #13
  4011d2:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK, 10);
  4011d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  4011d8:	4620      	mov	r0, r4
  4011da:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4011de:	220a      	movs	r2, #10
  4011e0:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_ID,
  4011e2:	4b5a      	ldr	r3, [pc, #360]	; (40134c <main+0x1d0>)
  4011e4:	9300      	str	r3, [sp, #0]
  4011e6:	4620      	mov	r0, r4
  4011e8:	210d      	movs	r1, #13
  4011ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4011ee:	2379      	movs	r3, #121	; 0x79
  4011f0:	47c0      	blx	r8
  4011f2:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  4011f6:	f8c7 b000 	str.w	fp, [r7]
			PIN_PUSHBUTTON_2_MASK, PIN_PUSHBUTTON_2_ATTR, Button2_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_2_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_2_PIO, (IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
  4011fa:	4620      	mov	r0, r4
  4011fc:	210d      	movs	r1, #13
  4011fe:	2200      	movs	r2, #0
  401200:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
  401202:	4620      	mov	r0, r4
  401204:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401208:	47a8      	blx	r5

	/* Configure Pushbutton 3. */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_3_ID);
  40120a:	200d      	movs	r0, #13
  40120c:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK, 10);
  40120e:	4620      	mov	r0, r4
  401210:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401214:	220a      	movs	r2, #10
  401216:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_ID,
  401218:	4b4d      	ldr	r3, [pc, #308]	; (401350 <main+0x1d4>)
  40121a:	9300      	str	r3, [sp, #0]
  40121c:	4620      	mov	r0, r4
  40121e:	210d      	movs	r1, #13
  401220:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401224:	2379      	movs	r3, #121	; 0x79
  401226:	47c0      	blx	r8
  401228:	f8c7 b000 	str.w	fp, [r7]
			PIN_PUSHBUTTON_3_MASK, PIN_PUSHBUTTON_3_ATTR, Button3_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_3_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_3_PIO, (IRQn_Type) PIN_PUSHBUTTON_3_ID, IRQ_PRIOR_PIO);
  40122c:	4620      	mov	r0, r4
  40122e:	210d      	movs	r1, #13
  401230:	2200      	movs	r2, #0
  401232:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK);
  401234:	4620      	mov	r0, r4
  401236:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40123a:	47a8      	blx	r5

	// Configure IO1 buttons.
	configure_buttons();

	// Initialize SPI and SSD1306 controller.
	ssd1306_init();
  40123c:	4b45      	ldr	r3, [pc, #276]	; (401354 <main+0x1d8>)
  40123e:	4798      	blx	r3
  401240:	f04f 0a00 	mov.w	sl, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  401244:	f8df b150 	ldr.w	fp, [pc, #336]	; 401398 <main+0x21c>
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  401248:	4f43      	ldr	r7, [pc, #268]	; (401358 <main+0x1dc>)
  40124a:	f8df 9150 	ldr.w	r9, [pc, #336]	; 40139c <main+0x220>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40124e:	46a0      	mov	r8, r4
  401250:	463e      	mov	r6, r7
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  401252:	f00a 0007 	and.w	r0, sl, #7
  401256:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  40125a:	47d8      	blx	fp
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  40125c:	2010      	movs	r0, #16
  40125e:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  401260:	2000      	movs	r0, #0
  401262:	47d8      	blx	fp
  401264:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  401266:	ac2a      	add	r4, sp, #168	; 0xa8
  401268:	2302      	movs	r3, #2
  40126a:	f844 3d9c 	str.w	r3, [r4, #-156]!
	spi_select_device(SSD1306_SPI, &device);
  40126e:	4630      	mov	r0, r6
  401270:	4621      	mov	r1, r4
  401272:	47c8      	blx	r9
  401274:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401278:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  40127c:	2300      	movs	r3, #0
  40127e:	60fb      	str	r3, [r7, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  401280:	2056      	movs	r0, #86	; 0x56
  401282:	4b36      	ldr	r3, [pc, #216]	; (40135c <main+0x1e0>)
  401284:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  401286:	4630      	mov	r0, r6
  401288:	4621      	mov	r1, r4
  40128a:	4b35      	ldr	r3, [pc, #212]	; (401360 <main+0x1e4>)
  40128c:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  40128e:	3d01      	subs	r5, #1
  401290:	d1e9      	bne.n	401266 <main+0xea>
  401292:	f10a 0a01 	add.w	sl, sl, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  401296:	f1ba 0f04 	cmp.w	sl, #4
  40129a:	d1da      	bne.n	401252 <main+0xd6>
	ssd1306_clear();


	monty_hall_state game_state = { 0, 0, 0, 0, MONTY_GAME_STARTED,
  40129c:	ac04      	add	r4, sp, #16
  40129e:	4d31      	ldr	r5, [pc, #196]	; (401364 <main+0x1e8>)
  4012a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4012a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4012a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  4012a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								DOOR_NOT_PRESSED, DOOR_NOT_PRESSED, DOOR_NOT_PRESSED };
	for( ;; )
	{
		int32_t result = 0;
		if( g_door_pressed != DOOR_NOT_PRESSED )
  4012ac:	4c2e      	ldr	r4, [pc, #184]	; (401368 <main+0x1ec>)
		{
			result = handle_door_press( &game_state, g_door_pressed );
  4012ae:	4d2f      	ldr	r5, [pc, #188]	; (40136c <main+0x1f0>)
						 game_state.open_door );
				print_uart( result_disp, max_disp_string, max_uart_tries );
			}
			else if( game_state.state == GAME_OVER_LOST )
			{
				sprintf( result_disp, "Lost: Game State %d: selected door %d open door %d", 
  4012b0:	4e2f      	ldr	r6, [pc, #188]	; (401370 <main+0x1f4>)
	monty_hall_state game_state = { 0, 0, 0, 0, MONTY_GAME_STARTED,
								DOOR_NOT_PRESSED, DOOR_NOT_PRESSED, DOOR_NOT_PRESSED };
	for( ;; )
	{
		int32_t result = 0;
		if( g_door_pressed != DOOR_NOT_PRESSED )
  4012b2:	6823      	ldr	r3, [r4, #0]
  4012b4:	2b04      	cmp	r3, #4
  4012b6:	d035      	beq.n	401324 <main+0x1a8>
		{
			result = handle_door_press( &game_state, g_door_pressed );
  4012b8:	6821      	ldr	r1, [r4, #0]
  4012ba:	a804      	add	r0, sp, #16
  4012bc:	47a8      	blx	r5
			g_door_pressed = DOOR_NOT_PRESSED;
  4012be:	2304      	movs	r3, #4
  4012c0:	6023      	str	r3, [r4, #0]
			if( game_state.state == FIRST_DOOR_OPEN )
  4012c2:	f89d 3020 	ldrb.w	r3, [sp, #32]
  4012c6:	2b01      	cmp	r3, #1
  4012c8:	d10d      	bne.n	4012e6 <main+0x16a>
			{
				sprintf( result_disp, "Game State %d: selected door %d open door %d", 
  4012ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4012cc:	9300      	str	r3, [sp, #0]
  4012ce:	a80c      	add	r0, sp, #48	; 0x30
  4012d0:	4928      	ldr	r1, [pc, #160]	; (401374 <main+0x1f8>)
  4012d2:	2201      	movs	r2, #1
  4012d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4012d6:	4f28      	ldr	r7, [pc, #160]	; (401378 <main+0x1fc>)
  4012d8:	47b8      	blx	r7
				         game_state.state,
						 game_state.first_door,
						 game_state.open_door );
				print_uart( result_disp, max_disp_string, max_uart_tries );
  4012da:	a80c      	add	r0, sp, #48	; 0x30
  4012dc:	2178      	movs	r1, #120	; 0x78
  4012de:	4a27      	ldr	r2, [pc, #156]	; (40137c <main+0x200>)
  4012e0:	4b27      	ldr	r3, [pc, #156]	; (401380 <main+0x204>)
  4012e2:	4798      	blx	r3
  4012e4:	e01e      	b.n	401324 <main+0x1a8>
			}
			else if( game_state.state == GAME_OVER_WON )
  4012e6:	2b02      	cmp	r3, #2
  4012e8:	d10d      	bne.n	401306 <main+0x18a>
			{
				sprintf( result_disp, "Won: Game State %d: selected door %d open door %d", 
  4012ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4012ec:	9300      	str	r3, [sp, #0]
  4012ee:	a80c      	add	r0, sp, #48	; 0x30
  4012f0:	4924      	ldr	r1, [pc, #144]	; (401384 <main+0x208>)
  4012f2:	2202      	movs	r2, #2
  4012f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4012f6:	4f20      	ldr	r7, [pc, #128]	; (401378 <main+0x1fc>)
  4012f8:	47b8      	blx	r7
				         game_state.state,
						 game_state.first_door,
						 game_state.open_door );
				print_uart( result_disp, max_disp_string, max_uart_tries );
  4012fa:	a80c      	add	r0, sp, #48	; 0x30
  4012fc:	2178      	movs	r1, #120	; 0x78
  4012fe:	4a1f      	ldr	r2, [pc, #124]	; (40137c <main+0x200>)
  401300:	4b1f      	ldr	r3, [pc, #124]	; (401380 <main+0x204>)
  401302:	4798      	blx	r3
  401304:	e00e      	b.n	401324 <main+0x1a8>
			}
			else if( game_state.state == GAME_OVER_LOST )
  401306:	2b03      	cmp	r3, #3
  401308:	d10c      	bne.n	401324 <main+0x1a8>
			{
				sprintf( result_disp, "Lost: Game State %d: selected door %d open door %d", 
  40130a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40130c:	9300      	str	r3, [sp, #0]
  40130e:	a80c      	add	r0, sp, #48	; 0x30
  401310:	4631      	mov	r1, r6
  401312:	2203      	movs	r2, #3
  401314:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401316:	4f18      	ldr	r7, [pc, #96]	; (401378 <main+0x1fc>)
  401318:	47b8      	blx	r7
				         game_state.state,
						 game_state.first_door,
						 game_state.open_door );
				print_uart( result_disp, max_disp_string, max_uart_tries );
  40131a:	a80c      	add	r0, sp, #48	; 0x30
  40131c:	2178      	movs	r1, #120	; 0x78
  40131e:	4a17      	ldr	r2, [pc, #92]	; (40137c <main+0x200>)
  401320:	4b17      	ldr	r3, [pc, #92]	; (401380 <main+0x204>)
  401322:	4798      	blx	r3
			ssd1306_draw_graph(0, 1, BUFFER_SIZE, 3, temperature);
		}
#endif

		/* Wait and stop screen flickers. */
		delay_ms(50);
  401324:	4818      	ldr	r0, [pc, #96]	; (401388 <main+0x20c>)
  401326:	4b0d      	ldr	r3, [pc, #52]	; (40135c <main+0x1e0>)
  401328:	4798      	blx	r3
	}
  40132a:	e7c2      	b.n	4012b2 <main+0x136>
  40132c:	004002b5 	.word	0x004002b5
  401330:	00400439 	.word	0x00400439
  401334:	0040027d 	.word	0x0040027d
  401338:	400e0e00 	.word	0x400e0e00
  40133c:	00400f99 	.word	0x00400f99
  401340:	e000e100 	.word	0xe000e100
  401344:	0040097d 	.word	0x0040097d
  401348:	00400681 	.word	0x00400681
  40134c:	0040100d 	.word	0x0040100d
  401350:	00400ff5 	.word	0x00400ff5
  401354:	004001c5 	.word	0x004001c5
  401358:	40008000 	.word	0x40008000
  40135c:	20000001 	.word	0x20000001
  401360:	00400419 	.word	0x00400419
  401364:	00405c0c 	.word	0x00405c0c
  401368:	20000010 	.word	0x20000010
  40136c:	0040107d 	.word	0x0040107d
  401370:	00405c90 	.word	0x00405c90
  401374:	00405c2c 	.word	0x00405c2c
  401378:	00401c1d 	.word	0x00401c1d
  40137c:	000f4240 	.word	0x000f4240
  401380:	00401119 	.word	0x00401119
  401384:	00405c5c 	.word	0x00405c5c
  401388:	00068a1c 	.word	0x00068a1c
  40138c:	00400af1 	.word	0x00400af1
  401390:	00400549 	.word	0x00400549
  401394:	00400905 	.word	0x00400905
  401398:	00400fad 	.word	0x00400fad
  40139c:	004003e9 	.word	0x004003e9

004013a0 <__aeabi_drsub>:
  4013a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4013a4:	e002      	b.n	4013ac <__adddf3>
  4013a6:	bf00      	nop

004013a8 <__aeabi_dsub>:
  4013a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004013ac <__adddf3>:
  4013ac:	b530      	push	{r4, r5, lr}
  4013ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4013b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4013b6:	ea94 0f05 	teq	r4, r5
  4013ba:	bf08      	it	eq
  4013bc:	ea90 0f02 	teqeq	r0, r2
  4013c0:	bf1f      	itttt	ne
  4013c2:	ea54 0c00 	orrsne.w	ip, r4, r0
  4013c6:	ea55 0c02 	orrsne.w	ip, r5, r2
  4013ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4013ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4013d2:	f000 80e2 	beq.w	40159a <__adddf3+0x1ee>
  4013d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4013da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4013de:	bfb8      	it	lt
  4013e0:	426d      	neglt	r5, r5
  4013e2:	dd0c      	ble.n	4013fe <__adddf3+0x52>
  4013e4:	442c      	add	r4, r5
  4013e6:	ea80 0202 	eor.w	r2, r0, r2
  4013ea:	ea81 0303 	eor.w	r3, r1, r3
  4013ee:	ea82 0000 	eor.w	r0, r2, r0
  4013f2:	ea83 0101 	eor.w	r1, r3, r1
  4013f6:	ea80 0202 	eor.w	r2, r0, r2
  4013fa:	ea81 0303 	eor.w	r3, r1, r3
  4013fe:	2d36      	cmp	r5, #54	; 0x36
  401400:	bf88      	it	hi
  401402:	bd30      	pophi	{r4, r5, pc}
  401404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401408:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40140c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401414:	d002      	beq.n	40141c <__adddf3+0x70>
  401416:	4240      	negs	r0, r0
  401418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40141c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401420:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401428:	d002      	beq.n	401430 <__adddf3+0x84>
  40142a:	4252      	negs	r2, r2
  40142c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401430:	ea94 0f05 	teq	r4, r5
  401434:	f000 80a7 	beq.w	401586 <__adddf3+0x1da>
  401438:	f1a4 0401 	sub.w	r4, r4, #1
  40143c:	f1d5 0e20 	rsbs	lr, r5, #32
  401440:	db0d      	blt.n	40145e <__adddf3+0xb2>
  401442:	fa02 fc0e 	lsl.w	ip, r2, lr
  401446:	fa22 f205 	lsr.w	r2, r2, r5
  40144a:	1880      	adds	r0, r0, r2
  40144c:	f141 0100 	adc.w	r1, r1, #0
  401450:	fa03 f20e 	lsl.w	r2, r3, lr
  401454:	1880      	adds	r0, r0, r2
  401456:	fa43 f305 	asr.w	r3, r3, r5
  40145a:	4159      	adcs	r1, r3
  40145c:	e00e      	b.n	40147c <__adddf3+0xd0>
  40145e:	f1a5 0520 	sub.w	r5, r5, #32
  401462:	f10e 0e20 	add.w	lr, lr, #32
  401466:	2a01      	cmp	r2, #1
  401468:	fa03 fc0e 	lsl.w	ip, r3, lr
  40146c:	bf28      	it	cs
  40146e:	f04c 0c02 	orrcs.w	ip, ip, #2
  401472:	fa43 f305 	asr.w	r3, r3, r5
  401476:	18c0      	adds	r0, r0, r3
  401478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40147c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401480:	d507      	bpl.n	401492 <__adddf3+0xe6>
  401482:	f04f 0e00 	mov.w	lr, #0
  401486:	f1dc 0c00 	rsbs	ip, ip, #0
  40148a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40148e:	eb6e 0101 	sbc.w	r1, lr, r1
  401492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  401496:	d31b      	bcc.n	4014d0 <__adddf3+0x124>
  401498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40149c:	d30c      	bcc.n	4014b8 <__adddf3+0x10c>
  40149e:	0849      	lsrs	r1, r1, #1
  4014a0:	ea5f 0030 	movs.w	r0, r0, rrx
  4014a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4014a8:	f104 0401 	add.w	r4, r4, #1
  4014ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4014b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4014b4:	f080 809a 	bcs.w	4015ec <__adddf3+0x240>
  4014b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4014bc:	bf08      	it	eq
  4014be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4014c2:	f150 0000 	adcs.w	r0, r0, #0
  4014c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4014ca:	ea41 0105 	orr.w	r1, r1, r5
  4014ce:	bd30      	pop	{r4, r5, pc}
  4014d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4014d4:	4140      	adcs	r0, r0
  4014d6:	eb41 0101 	adc.w	r1, r1, r1
  4014da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4014de:	f1a4 0401 	sub.w	r4, r4, #1
  4014e2:	d1e9      	bne.n	4014b8 <__adddf3+0x10c>
  4014e4:	f091 0f00 	teq	r1, #0
  4014e8:	bf04      	itt	eq
  4014ea:	4601      	moveq	r1, r0
  4014ec:	2000      	moveq	r0, #0
  4014ee:	fab1 f381 	clz	r3, r1
  4014f2:	bf08      	it	eq
  4014f4:	3320      	addeq	r3, #32
  4014f6:	f1a3 030b 	sub.w	r3, r3, #11
  4014fa:	f1b3 0220 	subs.w	r2, r3, #32
  4014fe:	da0c      	bge.n	40151a <__adddf3+0x16e>
  401500:	320c      	adds	r2, #12
  401502:	dd08      	ble.n	401516 <__adddf3+0x16a>
  401504:	f102 0c14 	add.w	ip, r2, #20
  401508:	f1c2 020c 	rsb	r2, r2, #12
  40150c:	fa01 f00c 	lsl.w	r0, r1, ip
  401510:	fa21 f102 	lsr.w	r1, r1, r2
  401514:	e00c      	b.n	401530 <__adddf3+0x184>
  401516:	f102 0214 	add.w	r2, r2, #20
  40151a:	bfd8      	it	le
  40151c:	f1c2 0c20 	rsble	ip, r2, #32
  401520:	fa01 f102 	lsl.w	r1, r1, r2
  401524:	fa20 fc0c 	lsr.w	ip, r0, ip
  401528:	bfdc      	itt	le
  40152a:	ea41 010c 	orrle.w	r1, r1, ip
  40152e:	4090      	lslle	r0, r2
  401530:	1ae4      	subs	r4, r4, r3
  401532:	bfa2      	ittt	ge
  401534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401538:	4329      	orrge	r1, r5
  40153a:	bd30      	popge	{r4, r5, pc}
  40153c:	ea6f 0404 	mvn.w	r4, r4
  401540:	3c1f      	subs	r4, #31
  401542:	da1c      	bge.n	40157e <__adddf3+0x1d2>
  401544:	340c      	adds	r4, #12
  401546:	dc0e      	bgt.n	401566 <__adddf3+0x1ba>
  401548:	f104 0414 	add.w	r4, r4, #20
  40154c:	f1c4 0220 	rsb	r2, r4, #32
  401550:	fa20 f004 	lsr.w	r0, r0, r4
  401554:	fa01 f302 	lsl.w	r3, r1, r2
  401558:	ea40 0003 	orr.w	r0, r0, r3
  40155c:	fa21 f304 	lsr.w	r3, r1, r4
  401560:	ea45 0103 	orr.w	r1, r5, r3
  401564:	bd30      	pop	{r4, r5, pc}
  401566:	f1c4 040c 	rsb	r4, r4, #12
  40156a:	f1c4 0220 	rsb	r2, r4, #32
  40156e:	fa20 f002 	lsr.w	r0, r0, r2
  401572:	fa01 f304 	lsl.w	r3, r1, r4
  401576:	ea40 0003 	orr.w	r0, r0, r3
  40157a:	4629      	mov	r1, r5
  40157c:	bd30      	pop	{r4, r5, pc}
  40157e:	fa21 f004 	lsr.w	r0, r1, r4
  401582:	4629      	mov	r1, r5
  401584:	bd30      	pop	{r4, r5, pc}
  401586:	f094 0f00 	teq	r4, #0
  40158a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40158e:	bf06      	itte	eq
  401590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401594:	3401      	addeq	r4, #1
  401596:	3d01      	subne	r5, #1
  401598:	e74e      	b.n	401438 <__adddf3+0x8c>
  40159a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40159e:	bf18      	it	ne
  4015a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4015a4:	d029      	beq.n	4015fa <__adddf3+0x24e>
  4015a6:	ea94 0f05 	teq	r4, r5
  4015aa:	bf08      	it	eq
  4015ac:	ea90 0f02 	teqeq	r0, r2
  4015b0:	d005      	beq.n	4015be <__adddf3+0x212>
  4015b2:	ea54 0c00 	orrs.w	ip, r4, r0
  4015b6:	bf04      	itt	eq
  4015b8:	4619      	moveq	r1, r3
  4015ba:	4610      	moveq	r0, r2
  4015bc:	bd30      	pop	{r4, r5, pc}
  4015be:	ea91 0f03 	teq	r1, r3
  4015c2:	bf1e      	ittt	ne
  4015c4:	2100      	movne	r1, #0
  4015c6:	2000      	movne	r0, #0
  4015c8:	bd30      	popne	{r4, r5, pc}
  4015ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4015ce:	d105      	bne.n	4015dc <__adddf3+0x230>
  4015d0:	0040      	lsls	r0, r0, #1
  4015d2:	4149      	adcs	r1, r1
  4015d4:	bf28      	it	cs
  4015d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4015da:	bd30      	pop	{r4, r5, pc}
  4015dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4015e0:	bf3c      	itt	cc
  4015e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4015e6:	bd30      	popcc	{r4, r5, pc}
  4015e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4015ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4015f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4015f4:	f04f 0000 	mov.w	r0, #0
  4015f8:	bd30      	pop	{r4, r5, pc}
  4015fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4015fe:	bf1a      	itte	ne
  401600:	4619      	movne	r1, r3
  401602:	4610      	movne	r0, r2
  401604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401608:	bf1c      	itt	ne
  40160a:	460b      	movne	r3, r1
  40160c:	4602      	movne	r2, r0
  40160e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401612:	bf06      	itte	eq
  401614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401618:	ea91 0f03 	teqeq	r1, r3
  40161c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401620:	bd30      	pop	{r4, r5, pc}
  401622:	bf00      	nop

00401624 <__aeabi_ui2d>:
  401624:	f090 0f00 	teq	r0, #0
  401628:	bf04      	itt	eq
  40162a:	2100      	moveq	r1, #0
  40162c:	4770      	bxeq	lr
  40162e:	b530      	push	{r4, r5, lr}
  401630:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401634:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401638:	f04f 0500 	mov.w	r5, #0
  40163c:	f04f 0100 	mov.w	r1, #0
  401640:	e750      	b.n	4014e4 <__adddf3+0x138>
  401642:	bf00      	nop

00401644 <__aeabi_i2d>:
  401644:	f090 0f00 	teq	r0, #0
  401648:	bf04      	itt	eq
  40164a:	2100      	moveq	r1, #0
  40164c:	4770      	bxeq	lr
  40164e:	b530      	push	{r4, r5, lr}
  401650:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401654:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40165c:	bf48      	it	mi
  40165e:	4240      	negmi	r0, r0
  401660:	f04f 0100 	mov.w	r1, #0
  401664:	e73e      	b.n	4014e4 <__adddf3+0x138>
  401666:	bf00      	nop

00401668 <__aeabi_f2d>:
  401668:	0042      	lsls	r2, r0, #1
  40166a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40166e:	ea4f 0131 	mov.w	r1, r1, rrx
  401672:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401676:	bf1f      	itttt	ne
  401678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40167c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401684:	4770      	bxne	lr
  401686:	f092 0f00 	teq	r2, #0
  40168a:	bf14      	ite	ne
  40168c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401690:	4770      	bxeq	lr
  401692:	b530      	push	{r4, r5, lr}
  401694:	f44f 7460 	mov.w	r4, #896	; 0x380
  401698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40169c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4016a0:	e720      	b.n	4014e4 <__adddf3+0x138>
  4016a2:	bf00      	nop

004016a4 <__aeabi_ul2d>:
  4016a4:	ea50 0201 	orrs.w	r2, r0, r1
  4016a8:	bf08      	it	eq
  4016aa:	4770      	bxeq	lr
  4016ac:	b530      	push	{r4, r5, lr}
  4016ae:	f04f 0500 	mov.w	r5, #0
  4016b2:	e00a      	b.n	4016ca <__aeabi_l2d+0x16>

004016b4 <__aeabi_l2d>:
  4016b4:	ea50 0201 	orrs.w	r2, r0, r1
  4016b8:	bf08      	it	eq
  4016ba:	4770      	bxeq	lr
  4016bc:	b530      	push	{r4, r5, lr}
  4016be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4016c2:	d502      	bpl.n	4016ca <__aeabi_l2d+0x16>
  4016c4:	4240      	negs	r0, r0
  4016c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4016ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4016ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4016d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4016d6:	f43f aedc 	beq.w	401492 <__adddf3+0xe6>
  4016da:	f04f 0203 	mov.w	r2, #3
  4016de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4016e2:	bf18      	it	ne
  4016e4:	3203      	addne	r2, #3
  4016e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4016ea:	bf18      	it	ne
  4016ec:	3203      	addne	r2, #3
  4016ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4016f2:	f1c2 0320 	rsb	r3, r2, #32
  4016f6:	fa00 fc03 	lsl.w	ip, r0, r3
  4016fa:	fa20 f002 	lsr.w	r0, r0, r2
  4016fe:	fa01 fe03 	lsl.w	lr, r1, r3
  401702:	ea40 000e 	orr.w	r0, r0, lr
  401706:	fa21 f102 	lsr.w	r1, r1, r2
  40170a:	4414      	add	r4, r2
  40170c:	e6c1      	b.n	401492 <__adddf3+0xe6>
  40170e:	bf00      	nop

00401710 <__aeabi_dmul>:
  401710:	b570      	push	{r4, r5, r6, lr}
  401712:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40171a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40171e:	bf1d      	ittte	ne
  401720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401724:	ea94 0f0c 	teqne	r4, ip
  401728:	ea95 0f0c 	teqne	r5, ip
  40172c:	f000 f8de 	bleq	4018ec <__aeabi_dmul+0x1dc>
  401730:	442c      	add	r4, r5
  401732:	ea81 0603 	eor.w	r6, r1, r3
  401736:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40173a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40173e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  401742:	bf18      	it	ne
  401744:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  401748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40174c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401750:	d038      	beq.n	4017c4 <__aeabi_dmul+0xb4>
  401752:	fba0 ce02 	umull	ip, lr, r0, r2
  401756:	f04f 0500 	mov.w	r5, #0
  40175a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40175e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  401762:	fbe0 e503 	umlal	lr, r5, r0, r3
  401766:	f04f 0600 	mov.w	r6, #0
  40176a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40176e:	f09c 0f00 	teq	ip, #0
  401772:	bf18      	it	ne
  401774:	f04e 0e01 	orrne.w	lr, lr, #1
  401778:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40177c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  401780:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  401784:	d204      	bcs.n	401790 <__aeabi_dmul+0x80>
  401786:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40178a:	416d      	adcs	r5, r5
  40178c:	eb46 0606 	adc.w	r6, r6, r6
  401790:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  401794:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  401798:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40179c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4017a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4017a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4017a8:	bf88      	it	hi
  4017aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4017ae:	d81e      	bhi.n	4017ee <__aeabi_dmul+0xde>
  4017b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4017b4:	bf08      	it	eq
  4017b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4017ba:	f150 0000 	adcs.w	r0, r0, #0
  4017be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4017c2:	bd70      	pop	{r4, r5, r6, pc}
  4017c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4017c8:	ea46 0101 	orr.w	r1, r6, r1
  4017cc:	ea40 0002 	orr.w	r0, r0, r2
  4017d0:	ea81 0103 	eor.w	r1, r1, r3
  4017d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4017d8:	bfc2      	ittt	gt
  4017da:	ebd4 050c 	rsbsgt	r5, r4, ip
  4017de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4017e2:	bd70      	popgt	{r4, r5, r6, pc}
  4017e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4017e8:	f04f 0e00 	mov.w	lr, #0
  4017ec:	3c01      	subs	r4, #1
  4017ee:	f300 80ab 	bgt.w	401948 <__aeabi_dmul+0x238>
  4017f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4017f6:	bfde      	ittt	le
  4017f8:	2000      	movle	r0, #0
  4017fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4017fe:	bd70      	pople	{r4, r5, r6, pc}
  401800:	f1c4 0400 	rsb	r4, r4, #0
  401804:	3c20      	subs	r4, #32
  401806:	da35      	bge.n	401874 <__aeabi_dmul+0x164>
  401808:	340c      	adds	r4, #12
  40180a:	dc1b      	bgt.n	401844 <__aeabi_dmul+0x134>
  40180c:	f104 0414 	add.w	r4, r4, #20
  401810:	f1c4 0520 	rsb	r5, r4, #32
  401814:	fa00 f305 	lsl.w	r3, r0, r5
  401818:	fa20 f004 	lsr.w	r0, r0, r4
  40181c:	fa01 f205 	lsl.w	r2, r1, r5
  401820:	ea40 0002 	orr.w	r0, r0, r2
  401824:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  401828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40182c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401830:	fa21 f604 	lsr.w	r6, r1, r4
  401834:	eb42 0106 	adc.w	r1, r2, r6
  401838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40183c:	bf08      	it	eq
  40183e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401842:	bd70      	pop	{r4, r5, r6, pc}
  401844:	f1c4 040c 	rsb	r4, r4, #12
  401848:	f1c4 0520 	rsb	r5, r4, #32
  40184c:	fa00 f304 	lsl.w	r3, r0, r4
  401850:	fa20 f005 	lsr.w	r0, r0, r5
  401854:	fa01 f204 	lsl.w	r2, r1, r4
  401858:	ea40 0002 	orr.w	r0, r0, r2
  40185c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401860:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401864:	f141 0100 	adc.w	r1, r1, #0
  401868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40186c:	bf08      	it	eq
  40186e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401872:	bd70      	pop	{r4, r5, r6, pc}
  401874:	f1c4 0520 	rsb	r5, r4, #32
  401878:	fa00 f205 	lsl.w	r2, r0, r5
  40187c:	ea4e 0e02 	orr.w	lr, lr, r2
  401880:	fa20 f304 	lsr.w	r3, r0, r4
  401884:	fa01 f205 	lsl.w	r2, r1, r5
  401888:	ea43 0302 	orr.w	r3, r3, r2
  40188c:	fa21 f004 	lsr.w	r0, r1, r4
  401890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401894:	fa21 f204 	lsr.w	r2, r1, r4
  401898:	ea20 0002 	bic.w	r0, r0, r2
  40189c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4018a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4018a4:	bf08      	it	eq
  4018a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4018aa:	bd70      	pop	{r4, r5, r6, pc}
  4018ac:	f094 0f00 	teq	r4, #0
  4018b0:	d10f      	bne.n	4018d2 <__aeabi_dmul+0x1c2>
  4018b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4018b6:	0040      	lsls	r0, r0, #1
  4018b8:	eb41 0101 	adc.w	r1, r1, r1
  4018bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4018c0:	bf08      	it	eq
  4018c2:	3c01      	subeq	r4, #1
  4018c4:	d0f7      	beq.n	4018b6 <__aeabi_dmul+0x1a6>
  4018c6:	ea41 0106 	orr.w	r1, r1, r6
  4018ca:	f095 0f00 	teq	r5, #0
  4018ce:	bf18      	it	ne
  4018d0:	4770      	bxne	lr
  4018d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4018d6:	0052      	lsls	r2, r2, #1
  4018d8:	eb43 0303 	adc.w	r3, r3, r3
  4018dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4018e0:	bf08      	it	eq
  4018e2:	3d01      	subeq	r5, #1
  4018e4:	d0f7      	beq.n	4018d6 <__aeabi_dmul+0x1c6>
  4018e6:	ea43 0306 	orr.w	r3, r3, r6
  4018ea:	4770      	bx	lr
  4018ec:	ea94 0f0c 	teq	r4, ip
  4018f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4018f4:	bf18      	it	ne
  4018f6:	ea95 0f0c 	teqne	r5, ip
  4018fa:	d00c      	beq.n	401916 <__aeabi_dmul+0x206>
  4018fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401900:	bf18      	it	ne
  401902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401906:	d1d1      	bne.n	4018ac <__aeabi_dmul+0x19c>
  401908:	ea81 0103 	eor.w	r1, r1, r3
  40190c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401910:	f04f 0000 	mov.w	r0, #0
  401914:	bd70      	pop	{r4, r5, r6, pc}
  401916:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40191a:	bf06      	itte	eq
  40191c:	4610      	moveq	r0, r2
  40191e:	4619      	moveq	r1, r3
  401920:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401924:	d019      	beq.n	40195a <__aeabi_dmul+0x24a>
  401926:	ea94 0f0c 	teq	r4, ip
  40192a:	d102      	bne.n	401932 <__aeabi_dmul+0x222>
  40192c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  401930:	d113      	bne.n	40195a <__aeabi_dmul+0x24a>
  401932:	ea95 0f0c 	teq	r5, ip
  401936:	d105      	bne.n	401944 <__aeabi_dmul+0x234>
  401938:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40193c:	bf1c      	itt	ne
  40193e:	4610      	movne	r0, r2
  401940:	4619      	movne	r1, r3
  401942:	d10a      	bne.n	40195a <__aeabi_dmul+0x24a>
  401944:	ea81 0103 	eor.w	r1, r1, r3
  401948:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40194c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401950:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401954:	f04f 0000 	mov.w	r0, #0
  401958:	bd70      	pop	{r4, r5, r6, pc}
  40195a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40195e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  401962:	bd70      	pop	{r4, r5, r6, pc}

00401964 <__aeabi_ddiv>:
  401964:	b570      	push	{r4, r5, r6, lr}
  401966:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40196a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40196e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401972:	bf1d      	ittte	ne
  401974:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401978:	ea94 0f0c 	teqne	r4, ip
  40197c:	ea95 0f0c 	teqne	r5, ip
  401980:	f000 f8a7 	bleq	401ad2 <__aeabi_ddiv+0x16e>
  401984:	eba4 0405 	sub.w	r4, r4, r5
  401988:	ea81 0e03 	eor.w	lr, r1, r3
  40198c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401990:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401994:	f000 8088 	beq.w	401aa8 <__aeabi_ddiv+0x144>
  401998:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40199c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4019a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4019a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4019a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4019ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4019b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4019b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4019b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4019bc:	429d      	cmp	r5, r3
  4019be:	bf08      	it	eq
  4019c0:	4296      	cmpeq	r6, r2
  4019c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4019c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4019ca:	d202      	bcs.n	4019d2 <__aeabi_ddiv+0x6e>
  4019cc:	085b      	lsrs	r3, r3, #1
  4019ce:	ea4f 0232 	mov.w	r2, r2, rrx
  4019d2:	1ab6      	subs	r6, r6, r2
  4019d4:	eb65 0503 	sbc.w	r5, r5, r3
  4019d8:	085b      	lsrs	r3, r3, #1
  4019da:	ea4f 0232 	mov.w	r2, r2, rrx
  4019de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4019e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4019e6:	ebb6 0e02 	subs.w	lr, r6, r2
  4019ea:	eb75 0e03 	sbcs.w	lr, r5, r3
  4019ee:	bf22      	ittt	cs
  4019f0:	1ab6      	subcs	r6, r6, r2
  4019f2:	4675      	movcs	r5, lr
  4019f4:	ea40 000c 	orrcs.w	r0, r0, ip
  4019f8:	085b      	lsrs	r3, r3, #1
  4019fa:	ea4f 0232 	mov.w	r2, r2, rrx
  4019fe:	ebb6 0e02 	subs.w	lr, r6, r2
  401a02:	eb75 0e03 	sbcs.w	lr, r5, r3
  401a06:	bf22      	ittt	cs
  401a08:	1ab6      	subcs	r6, r6, r2
  401a0a:	4675      	movcs	r5, lr
  401a0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  401a10:	085b      	lsrs	r3, r3, #1
  401a12:	ea4f 0232 	mov.w	r2, r2, rrx
  401a16:	ebb6 0e02 	subs.w	lr, r6, r2
  401a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
  401a1e:	bf22      	ittt	cs
  401a20:	1ab6      	subcs	r6, r6, r2
  401a22:	4675      	movcs	r5, lr
  401a24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  401a28:	085b      	lsrs	r3, r3, #1
  401a2a:	ea4f 0232 	mov.w	r2, r2, rrx
  401a2e:	ebb6 0e02 	subs.w	lr, r6, r2
  401a32:	eb75 0e03 	sbcs.w	lr, r5, r3
  401a36:	bf22      	ittt	cs
  401a38:	1ab6      	subcs	r6, r6, r2
  401a3a:	4675      	movcs	r5, lr
  401a3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  401a40:	ea55 0e06 	orrs.w	lr, r5, r6
  401a44:	d018      	beq.n	401a78 <__aeabi_ddiv+0x114>
  401a46:	ea4f 1505 	mov.w	r5, r5, lsl #4
  401a4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  401a4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  401a52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  401a56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  401a5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  401a5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  401a62:	d1c0      	bne.n	4019e6 <__aeabi_ddiv+0x82>
  401a64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401a68:	d10b      	bne.n	401a82 <__aeabi_ddiv+0x11e>
  401a6a:	ea41 0100 	orr.w	r1, r1, r0
  401a6e:	f04f 0000 	mov.w	r0, #0
  401a72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  401a76:	e7b6      	b.n	4019e6 <__aeabi_ddiv+0x82>
  401a78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401a7c:	bf04      	itt	eq
  401a7e:	4301      	orreq	r1, r0
  401a80:	2000      	moveq	r0, #0
  401a82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401a86:	bf88      	it	hi
  401a88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401a8c:	f63f aeaf 	bhi.w	4017ee <__aeabi_dmul+0xde>
  401a90:	ebb5 0c03 	subs.w	ip, r5, r3
  401a94:	bf04      	itt	eq
  401a96:	ebb6 0c02 	subseq.w	ip, r6, r2
  401a9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401a9e:	f150 0000 	adcs.w	r0, r0, #0
  401aa2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401aa6:	bd70      	pop	{r4, r5, r6, pc}
  401aa8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  401aac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  401ab0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  401ab4:	bfc2      	ittt	gt
  401ab6:	ebd4 050c 	rsbsgt	r5, r4, ip
  401aba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401abe:	bd70      	popgt	{r4, r5, r6, pc}
  401ac0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401ac4:	f04f 0e00 	mov.w	lr, #0
  401ac8:	3c01      	subs	r4, #1
  401aca:	e690      	b.n	4017ee <__aeabi_dmul+0xde>
  401acc:	ea45 0e06 	orr.w	lr, r5, r6
  401ad0:	e68d      	b.n	4017ee <__aeabi_dmul+0xde>
  401ad2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401ad6:	ea94 0f0c 	teq	r4, ip
  401ada:	bf08      	it	eq
  401adc:	ea95 0f0c 	teqeq	r5, ip
  401ae0:	f43f af3b 	beq.w	40195a <__aeabi_dmul+0x24a>
  401ae4:	ea94 0f0c 	teq	r4, ip
  401ae8:	d10a      	bne.n	401b00 <__aeabi_ddiv+0x19c>
  401aea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401aee:	f47f af34 	bne.w	40195a <__aeabi_dmul+0x24a>
  401af2:	ea95 0f0c 	teq	r5, ip
  401af6:	f47f af25 	bne.w	401944 <__aeabi_dmul+0x234>
  401afa:	4610      	mov	r0, r2
  401afc:	4619      	mov	r1, r3
  401afe:	e72c      	b.n	40195a <__aeabi_dmul+0x24a>
  401b00:	ea95 0f0c 	teq	r5, ip
  401b04:	d106      	bne.n	401b14 <__aeabi_ddiv+0x1b0>
  401b06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401b0a:	f43f aefd 	beq.w	401908 <__aeabi_dmul+0x1f8>
  401b0e:	4610      	mov	r0, r2
  401b10:	4619      	mov	r1, r3
  401b12:	e722      	b.n	40195a <__aeabi_dmul+0x24a>
  401b14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401b18:	bf18      	it	ne
  401b1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401b1e:	f47f aec5 	bne.w	4018ac <__aeabi_dmul+0x19c>
  401b22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  401b26:	f47f af0d 	bne.w	401944 <__aeabi_dmul+0x234>
  401b2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  401b2e:	f47f aeeb 	bne.w	401908 <__aeabi_dmul+0x1f8>
  401b32:	e712      	b.n	40195a <__aeabi_dmul+0x24a>

00401b34 <__libc_init_array>:
  401b34:	b570      	push	{r4, r5, r6, lr}
  401b36:	4b0e      	ldr	r3, [pc, #56]	; (401b70 <__libc_init_array+0x3c>)
  401b38:	4d0e      	ldr	r5, [pc, #56]	; (401b74 <__libc_init_array+0x40>)
  401b3a:	1aed      	subs	r5, r5, r3
  401b3c:	10ad      	asrs	r5, r5, #2
  401b3e:	2400      	movs	r4, #0
  401b40:	461e      	mov	r6, r3
  401b42:	42ac      	cmp	r4, r5
  401b44:	d004      	beq.n	401b50 <__libc_init_array+0x1c>
  401b46:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  401b4a:	4790      	blx	r2
  401b4c:	3401      	adds	r4, #1
  401b4e:	e7f8      	b.n	401b42 <__libc_init_array+0xe>
  401b50:	f004 f996 	bl	405e80 <_init>
  401b54:	4d08      	ldr	r5, [pc, #32]	; (401b78 <__libc_init_array+0x44>)
  401b56:	4b09      	ldr	r3, [pc, #36]	; (401b7c <__libc_init_array+0x48>)
  401b58:	1aed      	subs	r5, r5, r3
  401b5a:	10ad      	asrs	r5, r5, #2
  401b5c:	2400      	movs	r4, #0
  401b5e:	461e      	mov	r6, r3
  401b60:	42ac      	cmp	r4, r5
  401b62:	d004      	beq.n	401b6e <__libc_init_array+0x3a>
  401b64:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  401b68:	4790      	blx	r2
  401b6a:	3401      	adds	r4, #1
  401b6c:	e7f8      	b.n	401b60 <__libc_init_array+0x2c>
  401b6e:	bd70      	pop	{r4, r5, r6, pc}
  401b70:	00405e8c 	.word	0x00405e8c
  401b74:	00405e8c 	.word	0x00405e8c
  401b78:	00405e94 	.word	0x00405e94
  401b7c:	00405e8c 	.word	0x00405e8c

00401b80 <memset>:
  401b80:	4402      	add	r2, r0
  401b82:	4603      	mov	r3, r0
  401b84:	4293      	cmp	r3, r2
  401b86:	d002      	beq.n	401b8e <memset+0xe>
  401b88:	f803 1b01 	strb.w	r1, [r3], #1
  401b8c:	e7fa      	b.n	401b84 <memset+0x4>
  401b8e:	4770      	bx	lr

00401b90 <srand>:
  401b90:	4b02      	ldr	r3, [pc, #8]	; (401b9c <srand+0xc>)
  401b92:	681b      	ldr	r3, [r3, #0]
  401b94:	2100      	movs	r1, #0
  401b96:	e9c3 012a 	strd	r0, r1, [r3, #168]	; 0xa8
  401b9a:	4770      	bx	lr
  401b9c:	20000018 	.word	0x20000018

00401ba0 <rand>:
  401ba0:	b510      	push	{r4, lr}
  401ba2:	4b0b      	ldr	r3, [pc, #44]	; (401bd0 <rand+0x30>)
  401ba4:	4c0b      	ldr	r4, [pc, #44]	; (401bd4 <rand+0x34>)
  401ba6:	6819      	ldr	r1, [r3, #0]
  401ba8:	4b0b      	ldr	r3, [pc, #44]	; (401bd8 <rand+0x38>)
  401baa:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
  401bae:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
  401bb2:	4354      	muls	r4, r2
  401bb4:	fb03 4000 	mla	r0, r3, r0, r4
  401bb8:	fba2 2303 	umull	r2, r3, r2, r3
  401bbc:	3201      	adds	r2, #1
  401bbe:	4403      	add	r3, r0
  401bc0:	f143 0300 	adc.w	r3, r3, #0
  401bc4:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
  401bc8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
  401bcc:	bd10      	pop	{r4, pc}
  401bce:	bf00      	nop
  401bd0:	20000018 	.word	0x20000018
  401bd4:	5851f42d 	.word	0x5851f42d
  401bd8:	4c957f2d 	.word	0x4c957f2d

00401bdc <_sprintf_r>:
  401bdc:	b40c      	push	{r2, r3}
  401bde:	b510      	push	{r4, lr}
  401be0:	b09c      	sub	sp, #112	; 0x70
  401be2:	ab1e      	add	r3, sp, #120	; 0x78
  401be4:	9102      	str	r1, [sp, #8]
  401be6:	9106      	str	r1, [sp, #24]
  401be8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  401bec:	9104      	str	r1, [sp, #16]
  401bee:	9107      	str	r1, [sp, #28]
  401bf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
  401bf4:	f853 2b04 	ldr.w	r2, [r3], #4
  401bf8:	f8ad 1016 	strh.w	r1, [sp, #22]
  401bfc:	f44f 7402 	mov.w	r4, #520	; 0x208
  401c00:	a902      	add	r1, sp, #8
  401c02:	9301      	str	r3, [sp, #4]
  401c04:	f8ad 4014 	strh.w	r4, [sp, #20]
  401c08:	f000 f842 	bl	401c90 <_svfprintf_r>
  401c0c:	9b02      	ldr	r3, [sp, #8]
  401c0e:	2200      	movs	r2, #0
  401c10:	701a      	strb	r2, [r3, #0]
  401c12:	b01c      	add	sp, #112	; 0x70
  401c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401c18:	b002      	add	sp, #8
  401c1a:	4770      	bx	lr

00401c1c <sprintf>:
  401c1c:	b40e      	push	{r1, r2, r3}
  401c1e:	b500      	push	{lr}
  401c20:	b09c      	sub	sp, #112	; 0x70
  401c22:	f44f 7102 	mov.w	r1, #520	; 0x208
  401c26:	f8ad 1014 	strh.w	r1, [sp, #20]
  401c2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  401c2e:	9104      	str	r1, [sp, #16]
  401c30:	9107      	str	r1, [sp, #28]
  401c32:	f64f 71ff 	movw	r1, #65535	; 0xffff
  401c36:	ab1d      	add	r3, sp, #116	; 0x74
  401c38:	f8ad 1016 	strh.w	r1, [sp, #22]
  401c3c:	4908      	ldr	r1, [pc, #32]	; (401c60 <sprintf+0x44>)
  401c3e:	f853 2b04 	ldr.w	r2, [r3], #4
  401c42:	9002      	str	r0, [sp, #8]
  401c44:	9006      	str	r0, [sp, #24]
  401c46:	6808      	ldr	r0, [r1, #0]
  401c48:	9301      	str	r3, [sp, #4]
  401c4a:	a902      	add	r1, sp, #8
  401c4c:	f000 f820 	bl	401c90 <_svfprintf_r>
  401c50:	9b02      	ldr	r3, [sp, #8]
  401c52:	2200      	movs	r2, #0
  401c54:	701a      	strb	r2, [r3, #0]
  401c56:	b01c      	add	sp, #112	; 0x70
  401c58:	f85d eb04 	ldr.w	lr, [sp], #4
  401c5c:	b003      	add	sp, #12
  401c5e:	4770      	bx	lr
  401c60:	20000018 	.word	0x20000018

00401c64 <strlen>:
  401c64:	4603      	mov	r3, r0
  401c66:	f813 2b01 	ldrb.w	r2, [r3], #1
  401c6a:	2a00      	cmp	r2, #0
  401c6c:	d1fb      	bne.n	401c66 <strlen+0x2>
  401c6e:	1a18      	subs	r0, r3, r0
  401c70:	3801      	subs	r0, #1
  401c72:	4770      	bx	lr

00401c74 <strnlen>:
  401c74:	b510      	push	{r4, lr}
  401c76:	4603      	mov	r3, r0
  401c78:	4401      	add	r1, r0
  401c7a:	428b      	cmp	r3, r1
  401c7c:	461a      	mov	r2, r3
  401c7e:	d101      	bne.n	401c84 <strnlen+0x10>
  401c80:	1a10      	subs	r0, r2, r0
  401c82:	bd10      	pop	{r4, pc}
  401c84:	7814      	ldrb	r4, [r2, #0]
  401c86:	3301      	adds	r3, #1
  401c88:	2c00      	cmp	r4, #0
  401c8a:	d1f6      	bne.n	401c7a <strnlen+0x6>
  401c8c:	e7f8      	b.n	401c80 <strnlen+0xc>
	...

00401c90 <_svfprintf_r>:
  401c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c94:	b0c3      	sub	sp, #268	; 0x10c
  401c96:	468b      	mov	fp, r1
  401c98:	4698      	mov	r8, r3
  401c9a:	920b      	str	r2, [sp, #44]	; 0x2c
  401c9c:	4682      	mov	sl, r0
  401c9e:	f001 ff27 	bl	403af0 <_localeconv_r>
  401ca2:	6800      	ldr	r0, [r0, #0]
  401ca4:	9018      	str	r0, [sp, #96]	; 0x60
  401ca6:	f7ff ffdd 	bl	401c64 <strlen>
  401caa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401cae:	9010      	str	r0, [sp, #64]	; 0x40
  401cb0:	0619      	lsls	r1, r3, #24
  401cb2:	d515      	bpl.n	401ce0 <_svfprintf_r+0x50>
  401cb4:	f8db 3010 	ldr.w	r3, [fp, #16]
  401cb8:	b993      	cbnz	r3, 401ce0 <_svfprintf_r+0x50>
  401cba:	4650      	mov	r0, sl
  401cbc:	2140      	movs	r1, #64	; 0x40
  401cbe:	f001 ff29 	bl	403b14 <_malloc_r>
  401cc2:	f8cb 0000 	str.w	r0, [fp]
  401cc6:	f8cb 0010 	str.w	r0, [fp, #16]
  401cca:	b930      	cbnz	r0, 401cda <_svfprintf_r+0x4a>
  401ccc:	230c      	movs	r3, #12
  401cce:	f8ca 3000 	str.w	r3, [sl]
  401cd2:	f04f 30ff 	mov.w	r0, #4294967295
  401cd6:	f000 bf6c 	b.w	402bb2 <_svfprintf_r+0xf22>
  401cda:	2340      	movs	r3, #64	; 0x40
  401cdc:	f8cb 3014 	str.w	r3, [fp, #20]
  401ce0:	2400      	movs	r4, #0
  401ce2:	2500      	movs	r5, #0
  401ce4:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  401ce8:	2300      	movs	r3, #0
  401cea:	ae32      	add	r6, sp, #200	; 0xc8
  401cec:	9625      	str	r6, [sp, #148]	; 0x94
  401cee:	9327      	str	r3, [sp, #156]	; 0x9c
  401cf0:	9326      	str	r3, [sp, #152]	; 0x98
  401cf2:	9309      	str	r3, [sp, #36]	; 0x24
  401cf4:	931b      	str	r3, [sp, #108]	; 0x6c
  401cf6:	931a      	str	r3, [sp, #104]	; 0x68
  401cf8:	930f      	str	r3, [sp, #60]	; 0x3c
  401cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401cfc:	461c      	mov	r4, r3
  401cfe:	f813 2b01 	ldrb.w	r2, [r3], #1
  401d02:	b91a      	cbnz	r2, 401d0c <_svfprintf_r+0x7c>
  401d04:	980b      	ldr	r0, [sp, #44]	; 0x2c
  401d06:	1a25      	subs	r5, r4, r0
  401d08:	d103      	bne.n	401d12 <_svfprintf_r+0x82>
  401d0a:	e01b      	b.n	401d44 <_svfprintf_r+0xb4>
  401d0c:	2a25      	cmp	r2, #37	; 0x25
  401d0e:	d1f5      	bne.n	401cfc <_svfprintf_r+0x6c>
  401d10:	e7f8      	b.n	401d04 <_svfprintf_r+0x74>
  401d12:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  401d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401d16:	442b      	add	r3, r5
  401d18:	9327      	str	r3, [sp, #156]	; 0x9c
  401d1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  401d1c:	3301      	adds	r3, #1
  401d1e:	2b07      	cmp	r3, #7
  401d20:	e886 0022 	stmia.w	r6, {r1, r5}
  401d24:	9326      	str	r3, [sp, #152]	; 0x98
  401d26:	dc01      	bgt.n	401d2c <_svfprintf_r+0x9c>
  401d28:	3608      	adds	r6, #8
  401d2a:	e008      	b.n	401d3e <_svfprintf_r+0xae>
  401d2c:	4650      	mov	r0, sl
  401d2e:	4659      	mov	r1, fp
  401d30:	aa25      	add	r2, sp, #148	; 0x94
  401d32:	f002 fefd 	bl	404b30 <__ssprint_r>
  401d36:	2800      	cmp	r0, #0
  401d38:	f040 8733 	bne.w	402ba2 <_svfprintf_r+0xf12>
  401d3c:	ae32      	add	r6, sp, #200	; 0xc8
  401d3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401d40:	442a      	add	r2, r5
  401d42:	920f      	str	r2, [sp, #60]	; 0x3c
  401d44:	7823      	ldrb	r3, [r4, #0]
  401d46:	2b00      	cmp	r3, #0
  401d48:	f000 8724 	beq.w	402b94 <_svfprintf_r+0xf04>
  401d4c:	2300      	movs	r3, #0
  401d4e:	3401      	adds	r4, #1
  401d50:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  401d54:	f04f 39ff 	mov.w	r9, #4294967295
  401d58:	930e      	str	r3, [sp, #56]	; 0x38
  401d5a:	461f      	mov	r7, r3
  401d5c:	1c65      	adds	r5, r4, #1
  401d5e:	7824      	ldrb	r4, [r4, #0]
  401d60:	950b      	str	r5, [sp, #44]	; 0x2c
  401d62:	9408      	str	r4, [sp, #32]
  401d64:	9c08      	ldr	r4, [sp, #32]
  401d66:	f1a4 0220 	sub.w	r2, r4, #32
  401d6a:	2a58      	cmp	r2, #88	; 0x58
  401d6c:	f200 8384 	bhi.w	402478 <_svfprintf_r+0x7e8>
  401d70:	e8df f012 	tbh	[pc, r2, lsl #1]
  401d74:	0382006d 	.word	0x0382006d
  401d78:	00710382 	.word	0x00710382
  401d7c:	03820382 	.word	0x03820382
  401d80:	03820382 	.word	0x03820382
  401d84:	03820382 	.word	0x03820382
  401d88:	0059005b 	.word	0x0059005b
  401d8c:	00770382 	.word	0x00770382
  401d90:	0382007a 	.word	0x0382007a
  401d94:	00a300a0 	.word	0x00a300a0
  401d98:	00a300a3 	.word	0x00a300a3
  401d9c:	00a300a3 	.word	0x00a300a3
  401da0:	00a300a3 	.word	0x00a300a3
  401da4:	00a300a3 	.word	0x00a300a3
  401da8:	03820382 	.word	0x03820382
  401dac:	03820382 	.word	0x03820382
  401db0:	03820382 	.word	0x03820382
  401db4:	03820382 	.word	0x03820382
  401db8:	03820382 	.word	0x03820382
  401dbc:	00ff00d4 	.word	0x00ff00d4
  401dc0:	00ff0382 	.word	0x00ff0382
  401dc4:	03820382 	.word	0x03820382
  401dc8:	03820382 	.word	0x03820382
  401dcc:	038200b7 	.word	0x038200b7
  401dd0:	026a0382 	.word	0x026a0382
  401dd4:	03820382 	.word	0x03820382
  401dd8:	03820382 	.word	0x03820382
  401ddc:	02ba0382 	.word	0x02ba0382
  401de0:	03820382 	.word	0x03820382
  401de4:	03820068 	.word	0x03820068
  401de8:	03820382 	.word	0x03820382
  401dec:	03820382 	.word	0x03820382
  401df0:	03820382 	.word	0x03820382
  401df4:	03820382 	.word	0x03820382
  401df8:	00ca0382 	.word	0x00ca0382
  401dfc:	00ff0065 	.word	0x00ff0065
  401e00:	00ff00ff 	.word	0x00ff00ff
  401e04:	006500ba 	.word	0x006500ba
  401e08:	03820382 	.word	0x03820382
  401e0c:	038200bd 	.word	0x038200bd
  401e10:	026c024b 	.word	0x026c024b
  401e14:	00c7028b 	.word	0x00c7028b
  401e18:	029d0382 	.word	0x029d0382
  401e1c:	02bc0382 	.word	0x02bc0382
  401e20:	03820382 	.word	0x03820382
  401e24:	02d7      	.short	0x02d7
  401e26:	232b      	movs	r3, #43	; 0x2b
  401e28:	e007      	b.n	401e3a <_svfprintf_r+0x1aa>
  401e2a:	f8d8 5000 	ldr.w	r5, [r8]
  401e2e:	950e      	str	r5, [sp, #56]	; 0x38
  401e30:	2d00      	cmp	r5, #0
  401e32:	f108 0204 	add.w	r2, r8, #4
  401e36:	db11      	blt.n	401e5c <_svfprintf_r+0x1cc>
  401e38:	4690      	mov	r8, r2
  401e3a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  401e3c:	e78e      	b.n	401d5c <_svfprintf_r+0xcc>
  401e3e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  401e42:	e06f      	b.n	401f24 <_svfprintf_r+0x294>
  401e44:	4cab      	ldr	r4, [pc, #684]	; (4020f4 <_svfprintf_r+0x464>)
  401e46:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  401e4a:	941b      	str	r4, [sp, #108]	; 0x6c
  401e4c:	e26d      	b.n	40232a <_svfprintf_r+0x69a>
  401e4e:	2b00      	cmp	r3, #0
  401e50:	bf08      	it	eq
  401e52:	2320      	moveq	r3, #32
  401e54:	e7f1      	b.n	401e3a <_svfprintf_r+0x1aa>
  401e56:	f047 0701 	orr.w	r7, r7, #1
  401e5a:	e7ee      	b.n	401e3a <_svfprintf_r+0x1aa>
  401e5c:	426d      	negs	r5, r5
  401e5e:	950e      	str	r5, [sp, #56]	; 0x38
  401e60:	4690      	mov	r8, r2
  401e62:	f047 0704 	orr.w	r7, r7, #4
  401e66:	e7e8      	b.n	401e3a <_svfprintf_r+0x1aa>
  401e68:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  401e6a:	7825      	ldrb	r5, [r4, #0]
  401e6c:	9508      	str	r5, [sp, #32]
  401e6e:	2d2a      	cmp	r5, #42	; 0x2a
  401e70:	f104 0201 	add.w	r2, r4, #1
  401e74:	d002      	beq.n	401e7c <_svfprintf_r+0x1ec>
  401e76:	f04f 0900 	mov.w	r9, #0
  401e7a:	e00b      	b.n	401e94 <_svfprintf_r+0x204>
  401e7c:	f8d8 9000 	ldr.w	r9, [r8]
  401e80:	920b      	str	r2, [sp, #44]	; 0x2c
  401e82:	f108 0104 	add.w	r1, r8, #4
  401e86:	f1b9 0f00 	cmp.w	r9, #0
  401e8a:	4688      	mov	r8, r1
  401e8c:	dad5      	bge.n	401e3a <_svfprintf_r+0x1aa>
  401e8e:	f04f 39ff 	mov.w	r9, #4294967295
  401e92:	e7d2      	b.n	401e3a <_svfprintf_r+0x1aa>
  401e94:	9d08      	ldr	r5, [sp, #32]
  401e96:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
  401e9a:	2909      	cmp	r1, #9
  401e9c:	d806      	bhi.n	401eac <_svfprintf_r+0x21c>
  401e9e:	200a      	movs	r0, #10
  401ea0:	f812 4b01 	ldrb.w	r4, [r2], #1
  401ea4:	9408      	str	r4, [sp, #32]
  401ea6:	fb00 1909 	mla	r9, r0, r9, r1
  401eaa:	e7f3      	b.n	401e94 <_svfprintf_r+0x204>
  401eac:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
  401eb0:	920b      	str	r2, [sp, #44]	; 0x2c
  401eb2:	e757      	b.n	401d64 <_svfprintf_r+0xd4>
  401eb4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  401eb8:	e7bf      	b.n	401e3a <_svfprintf_r+0x1aa>
  401eba:	2400      	movs	r4, #0
  401ebc:	940e      	str	r4, [sp, #56]	; 0x38
  401ebe:	9d08      	ldr	r5, [sp, #32]
  401ec0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  401ec2:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
  401ec6:	210a      	movs	r1, #10
  401ec8:	fb01 2404 	mla	r4, r1, r4, r2
  401ecc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401ece:	940e      	str	r4, [sp, #56]	; 0x38
  401ed0:	f812 5b01 	ldrb.w	r5, [r2], #1
  401ed4:	9508      	str	r5, [sp, #32]
  401ed6:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
  401eda:	2909      	cmp	r1, #9
  401edc:	d8e8      	bhi.n	401eb0 <_svfprintf_r+0x220>
  401ede:	920b      	str	r2, [sp, #44]	; 0x2c
  401ee0:	e7ed      	b.n	401ebe <_svfprintf_r+0x22e>
  401ee2:	f047 0708 	orr.w	r7, r7, #8
  401ee6:	e7a8      	b.n	401e3a <_svfprintf_r+0x1aa>
  401ee8:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  401eec:	e7a5      	b.n	401e3a <_svfprintf_r+0x1aa>
  401eee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  401ef0:	7822      	ldrb	r2, [r4, #0]
  401ef2:	2a6c      	cmp	r2, #108	; 0x6c
  401ef4:	d102      	bne.n	401efc <_svfprintf_r+0x26c>
  401ef6:	3401      	adds	r4, #1
  401ef8:	940b      	str	r4, [sp, #44]	; 0x2c
  401efa:	e002      	b.n	401f02 <_svfprintf_r+0x272>
  401efc:	f047 0710 	orr.w	r7, r7, #16
  401f00:	e79b      	b.n	401e3a <_svfprintf_r+0x1aa>
  401f02:	f047 0720 	orr.w	r7, r7, #32
  401f06:	e798      	b.n	401e3a <_svfprintf_r+0x1aa>
  401f08:	f8d8 3000 	ldr.w	r3, [r8]
  401f0c:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  401f10:	2500      	movs	r5, #0
  401f12:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  401f16:	f108 0804 	add.w	r8, r8, #4
  401f1a:	e2b8      	b.n	40248e <_svfprintf_r+0x7fe>
  401f1c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  401f20:	f047 0710 	orr.w	r7, r7, #16
  401f24:	06ba      	lsls	r2, r7, #26
  401f26:	d508      	bpl.n	401f3a <_svfprintf_r+0x2aa>
  401f28:	f108 0807 	add.w	r8, r8, #7
  401f2c:	f028 0307 	bic.w	r3, r8, #7
  401f30:	f103 0808 	add.w	r8, r3, #8
  401f34:	e9d3 4500 	ldrd	r4, r5, [r3]
  401f38:	e00f      	b.n	401f5a <_svfprintf_r+0x2ca>
  401f3a:	f017 0f10 	tst.w	r7, #16
  401f3e:	f108 0304 	add.w	r3, r8, #4
  401f42:	d002      	beq.n	401f4a <_svfprintf_r+0x2ba>
  401f44:	f8d8 4000 	ldr.w	r4, [r8]
  401f48:	e005      	b.n	401f56 <_svfprintf_r+0x2c6>
  401f4a:	f8d8 4000 	ldr.w	r4, [r8]
  401f4e:	f017 0f40 	tst.w	r7, #64	; 0x40
  401f52:	bf18      	it	ne
  401f54:	b224      	sxthne	r4, r4
  401f56:	17e5      	asrs	r5, r4, #31
  401f58:	4698      	mov	r8, r3
  401f5a:	2c00      	cmp	r4, #0
  401f5c:	f175 0100 	sbcs.w	r1, r5, #0
  401f60:	f280 820e 	bge.w	402380 <_svfprintf_r+0x6f0>
  401f64:	232d      	movs	r3, #45	; 0x2d
  401f66:	4264      	negs	r4, r4
  401f68:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  401f6c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  401f70:	e206      	b.n	402380 <_svfprintf_r+0x6f0>
  401f72:	9c08      	ldr	r4, [sp, #32]
  401f74:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  401f78:	f108 0807 	add.w	r8, r8, #7
  401f7c:	f028 0307 	bic.w	r3, r8, #7
  401f80:	970a      	str	r7, [sp, #40]	; 0x28
  401f82:	9411      	str	r4, [sp, #68]	; 0x44
  401f84:	e9d3 4500 	ldrd	r4, r5, [r3]
  401f88:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  401f8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  401f90:	f103 0808 	add.w	r8, r3, #8
  401f94:	f002 fd90 	bl	404ab8 <__fpclassifyd>
  401f98:	2801      	cmp	r0, #1
  401f9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  401f9e:	d114      	bne.n	401fca <_svfprintf_r+0x33a>
  401fa0:	2200      	movs	r2, #0
  401fa2:	2300      	movs	r3, #0
  401fa4:	f003 fb0c 	bl	4055c0 <__aeabi_dcmplt>
  401fa8:	b110      	cbz	r0, 401fb0 <_svfprintf_r+0x320>
  401faa:	232d      	movs	r3, #45	; 0x2d
  401fac:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  401fb0:	9d08      	ldr	r5, [sp, #32]
  401fb2:	4b51      	ldr	r3, [pc, #324]	; (4020f8 <_svfprintf_r+0x468>)
  401fb4:	4a51      	ldr	r2, [pc, #324]	; (4020fc <_svfprintf_r+0x46c>)
  401fb6:	2d47      	cmp	r5, #71	; 0x47
  401fb8:	bfd8      	it	le
  401fba:	461a      	movle	r2, r3
  401fbc:	9207      	str	r2, [sp, #28]
  401fbe:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  401fc2:	f04f 0903 	mov.w	r9, #3
  401fc6:	2500      	movs	r5, #0
  401fc8:	e268      	b.n	40249c <_svfprintf_r+0x80c>
  401fca:	f002 fd75 	bl	404ab8 <__fpclassifyd>
  401fce:	b958      	cbnz	r0, 401fe8 <_svfprintf_r+0x358>
  401fd0:	4b4b      	ldr	r3, [pc, #300]	; (402100 <_svfprintf_r+0x470>)
  401fd2:	4a4c      	ldr	r2, [pc, #304]	; (402104 <_svfprintf_r+0x474>)
  401fd4:	9c08      	ldr	r4, [sp, #32]
  401fd6:	2c47      	cmp	r4, #71	; 0x47
  401fd8:	bfd8      	it	le
  401fda:	461a      	movle	r2, r3
  401fdc:	9207      	str	r2, [sp, #28]
  401fde:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  401fe2:	f04f 0903 	mov.w	r9, #3
  401fe6:	e258      	b.n	40249a <_svfprintf_r+0x80a>
  401fe8:	f1b9 3fff 	cmp.w	r9, #4294967295
  401fec:	d00a      	beq.n	402004 <_svfprintf_r+0x374>
  401fee:	9d08      	ldr	r5, [sp, #32]
  401ff0:	f025 0320 	bic.w	r3, r5, #32
  401ff4:	2b47      	cmp	r3, #71	; 0x47
  401ff6:	d107      	bne.n	402008 <_svfprintf_r+0x378>
  401ff8:	f1b9 0f00 	cmp.w	r9, #0
  401ffc:	bf08      	it	eq
  401ffe:	f04f 0901 	moveq.w	r9, #1
  402002:	e001      	b.n	402008 <_svfprintf_r+0x378>
  402004:	f04f 0906 	mov.w	r9, #6
  402008:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40200c:	2b00      	cmp	r3, #0
  40200e:	f447 7780 	orr.w	r7, r7, #256	; 0x100
  402012:	da08      	bge.n	402026 <_svfprintf_r+0x396>
  402014:	990d      	ldr	r1, [sp, #52]	; 0x34
  402016:	980c      	ldr	r0, [sp, #48]	; 0x30
  402018:	9012      	str	r0, [sp, #72]	; 0x48
  40201a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40201e:	242d      	movs	r4, #45	; 0x2d
  402020:	9113      	str	r1, [sp, #76]	; 0x4c
  402022:	9419      	str	r4, [sp, #100]	; 0x64
  402024:	e005      	b.n	402032 <_svfprintf_r+0x3a2>
  402026:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
  40202a:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  40202e:	2500      	movs	r5, #0
  402030:	9519      	str	r5, [sp, #100]	; 0x64
  402032:	9d08      	ldr	r5, [sp, #32]
  402034:	f025 0420 	bic.w	r4, r5, #32
  402038:	2c46      	cmp	r4, #70	; 0x46
  40203a:	d004      	beq.n	402046 <_svfprintf_r+0x3b6>
  40203c:	2c45      	cmp	r4, #69	; 0x45
  40203e:	d105      	bne.n	40204c <_svfprintf_r+0x3bc>
  402040:	f109 0501 	add.w	r5, r9, #1
  402044:	e003      	b.n	40204e <_svfprintf_r+0x3be>
  402046:	464d      	mov	r5, r9
  402048:	2303      	movs	r3, #3
  40204a:	e001      	b.n	402050 <_svfprintf_r+0x3c0>
  40204c:	464d      	mov	r5, r9
  40204e:	2302      	movs	r3, #2
  402050:	e88d 0028 	stmia.w	sp, {r3, r5}
  402054:	ab1f      	add	r3, sp, #124	; 0x7c
  402056:	9302      	str	r3, [sp, #8]
  402058:	ab20      	add	r3, sp, #128	; 0x80
  40205a:	9303      	str	r3, [sp, #12]
  40205c:	ab23      	add	r3, sp, #140	; 0x8c
  40205e:	9304      	str	r3, [sp, #16]
  402060:	4650      	mov	r0, sl
  402062:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  402066:	f000 fe48 	bl	402cfa <_dtoa_r>
  40206a:	2c47      	cmp	r4, #71	; 0x47
  40206c:	9007      	str	r0, [sp, #28]
  40206e:	d10a      	bne.n	402086 <_svfprintf_r+0x3f6>
  402070:	980a      	ldr	r0, [sp, #40]	; 0x28
  402072:	07c3      	lsls	r3, r0, #31
  402074:	d407      	bmi.n	402086 <_svfprintf_r+0x3f6>
  402076:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402078:	9d07      	ldr	r5, [sp, #28]
  40207a:	2c47      	cmp	r4, #71	; 0x47
  40207c:	ebc5 0303 	rsb	r3, r5, r3
  402080:	9309      	str	r3, [sp, #36]	; 0x24
  402082:	d141      	bne.n	402108 <_svfprintf_r+0x478>
  402084:	e02d      	b.n	4020e2 <_svfprintf_r+0x452>
  402086:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40208a:	2c46      	cmp	r4, #70	; 0x46
  40208c:	44ac      	add	ip, r5
  40208e:	d113      	bne.n	4020b8 <_svfprintf_r+0x428>
  402090:	9807      	ldr	r0, [sp, #28]
  402092:	7803      	ldrb	r3, [r0, #0]
  402094:	2b30      	cmp	r3, #48	; 0x30
  402096:	d10d      	bne.n	4020b4 <_svfprintf_r+0x424>
  402098:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40209c:	2200      	movs	r2, #0
  40209e:	2300      	movs	r3, #0
  4020a0:	f8cd c018 	str.w	ip, [sp, #24]
  4020a4:	f003 fa82 	bl	4055ac <__aeabi_dcmpeq>
  4020a8:	f8dd c018 	ldr.w	ip, [sp, #24]
  4020ac:	b910      	cbnz	r0, 4020b4 <_svfprintf_r+0x424>
  4020ae:	f1c5 0501 	rsb	r5, r5, #1
  4020b2:	951f      	str	r5, [sp, #124]	; 0x7c
  4020b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4020b6:	449c      	add	ip, r3
  4020b8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4020bc:	2200      	movs	r2, #0
  4020be:	2300      	movs	r3, #0
  4020c0:	f8cd c018 	str.w	ip, [sp, #24]
  4020c4:	f003 fa72 	bl	4055ac <__aeabi_dcmpeq>
  4020c8:	f8dd c018 	ldr.w	ip, [sp, #24]
  4020cc:	b108      	cbz	r0, 4020d2 <_svfprintf_r+0x442>
  4020ce:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
  4020d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4020d4:	4563      	cmp	r3, ip
  4020d6:	d2ce      	bcs.n	402076 <_svfprintf_r+0x3e6>
  4020d8:	1c5a      	adds	r2, r3, #1
  4020da:	9223      	str	r2, [sp, #140]	; 0x8c
  4020dc:	2230      	movs	r2, #48	; 0x30
  4020de:	701a      	strb	r2, [r3, #0]
  4020e0:	e7f7      	b.n	4020d2 <_svfprintf_r+0x442>
  4020e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4020e4:	1cdc      	adds	r4, r3, #3
  4020e6:	db01      	blt.n	4020ec <_svfprintf_r+0x45c>
  4020e8:	454b      	cmp	r3, r9
  4020ea:	dd6c      	ble.n	4021c6 <_svfprintf_r+0x536>
  4020ec:	9c08      	ldr	r4, [sp, #32]
  4020ee:	3c02      	subs	r4, #2
  4020f0:	9408      	str	r4, [sp, #32]
  4020f2:	e00c      	b.n	40210e <_svfprintf_r+0x47e>
  4020f4:	00405cfa 	.word	0x00405cfa
  4020f8:	00405cea 	.word	0x00405cea
  4020fc:	00405cee 	.word	0x00405cee
  402100:	00405cf2 	.word	0x00405cf2
  402104:	00405cf6 	.word	0x00405cf6
  402108:	9d08      	ldr	r5, [sp, #32]
  40210a:	2d65      	cmp	r5, #101	; 0x65
  40210c:	dc42      	bgt.n	402194 <_svfprintf_r+0x504>
  40210e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402110:	9c08      	ldr	r4, [sp, #32]
  402112:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
  402116:	3b01      	subs	r3, #1
  402118:	2b00      	cmp	r3, #0
  40211a:	931f      	str	r3, [sp, #124]	; 0x7c
  40211c:	bfba      	itte	lt
  40211e:	425b      	neglt	r3, r3
  402120:	222d      	movlt	r2, #45	; 0x2d
  402122:	222b      	movge	r2, #43	; 0x2b
  402124:	2b09      	cmp	r3, #9
  402126:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40212a:	dd1c      	ble.n	402166 <_svfprintf_r+0x4d6>
  40212c:	f10d 0292 	add.w	r2, sp, #146	; 0x92
  402130:	200a      	movs	r0, #10
  402132:	fb93 f1f0 	sdiv	r1, r3, r0
  402136:	fb00 3311 	mls	r3, r0, r1, r3
  40213a:	3330      	adds	r3, #48	; 0x30
  40213c:	2909      	cmp	r1, #9
  40213e:	4614      	mov	r4, r2
  402140:	f802 3901 	strb.w	r3, [r2], #-1
  402144:	460b      	mov	r3, r1
  402146:	dcf3      	bgt.n	402130 <_svfprintf_r+0x4a0>
  402148:	f101 0330 	add.w	r3, r1, #48	; 0x30
  40214c:	f804 3d01 	strb.w	r3, [r4, #-1]!
  402150:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  402154:	f10d 0293 	add.w	r2, sp, #147	; 0x93
  402158:	4294      	cmp	r4, r2
  40215a:	d20b      	bcs.n	402174 <_svfprintf_r+0x4e4>
  40215c:	f814 2b01 	ldrb.w	r2, [r4], #1
  402160:	f803 2b01 	strb.w	r2, [r3], #1
  402164:	e7f6      	b.n	402154 <_svfprintf_r+0x4c4>
  402166:	2230      	movs	r2, #48	; 0x30
  402168:	4413      	add	r3, r2
  40216a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40216e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  402172:	ab22      	add	r3, sp, #136	; 0x88
  402174:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402176:	aa21      	add	r2, sp, #132	; 0x84
  402178:	1a9a      	subs	r2, r3, r2
  40217a:	4691      	mov	r9, r2
  40217c:	2d01      	cmp	r5, #1
  40217e:	921a      	str	r2, [sp, #104]	; 0x68
  402180:	44a9      	add	r9, r5
  402182:	dc03      	bgt.n	40218c <_svfprintf_r+0x4fc>
  402184:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  402186:	f015 0401 	ands.w	r4, r5, #1
  40218a:	d037      	beq.n	4021fc <_svfprintf_r+0x56c>
  40218c:	f109 0901 	add.w	r9, r9, #1
  402190:	2400      	movs	r4, #0
  402192:	e033      	b.n	4021fc <_svfprintf_r+0x56c>
  402194:	9c08      	ldr	r4, [sp, #32]
  402196:	2c66      	cmp	r4, #102	; 0x66
  402198:	d115      	bne.n	4021c6 <_svfprintf_r+0x536>
  40219a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40219c:	2b00      	cmp	r3, #0
  40219e:	dd09      	ble.n	4021b4 <_svfprintf_r+0x524>
  4021a0:	f1b9 0f00 	cmp.w	r9, #0
  4021a4:	d102      	bne.n	4021ac <_svfprintf_r+0x51c>
  4021a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4021a8:	07e8      	lsls	r0, r5, #31
  4021aa:	d523      	bpl.n	4021f4 <_svfprintf_r+0x564>
  4021ac:	f109 0901 	add.w	r9, r9, #1
  4021b0:	444b      	add	r3, r9
  4021b2:	e01f      	b.n	4021f4 <_svfprintf_r+0x564>
  4021b4:	f1b9 0f00 	cmp.w	r9, #0
  4021b8:	d102      	bne.n	4021c0 <_svfprintf_r+0x530>
  4021ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4021bc:	07e1      	lsls	r1, r4, #31
  4021be:	d515      	bpl.n	4021ec <_svfprintf_r+0x55c>
  4021c0:	f109 0302 	add.w	r3, r9, #2
  4021c4:	e016      	b.n	4021f4 <_svfprintf_r+0x564>
  4021c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4021c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4021ca:	42ab      	cmp	r3, r5
  4021cc:	db04      	blt.n	4021d8 <_svfprintf_r+0x548>
  4021ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4021d0:	07e2      	lsls	r2, r4, #31
  4021d2:	d50d      	bpl.n	4021f0 <_svfprintf_r+0x560>
  4021d4:	3301      	adds	r3, #1
  4021d6:	e006      	b.n	4021e6 <_svfprintf_r+0x556>
  4021d8:	2b00      	cmp	r3, #0
  4021da:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4021dc:	bfd4      	ite	le
  4021de:	f1c3 0302 	rsble	r3, r3, #2
  4021e2:	2301      	movgt	r3, #1
  4021e4:	4423      	add	r3, r4
  4021e6:	2567      	movs	r5, #103	; 0x67
  4021e8:	9511      	str	r5, [sp, #68]	; 0x44
  4021ea:	e003      	b.n	4021f4 <_svfprintf_r+0x564>
  4021ec:	2301      	movs	r3, #1
  4021ee:	e001      	b.n	4021f4 <_svfprintf_r+0x564>
  4021f0:	2467      	movs	r4, #103	; 0x67
  4021f2:	9411      	str	r4, [sp, #68]	; 0x44
  4021f4:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4021f6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  4021f8:	9508      	str	r5, [sp, #32]
  4021fa:	4699      	mov	r9, r3
  4021fc:	9d19      	ldr	r5, [sp, #100]	; 0x64
  4021fe:	b115      	cbz	r5, 402206 <_svfprintf_r+0x576>
  402200:	232d      	movs	r3, #45	; 0x2d
  402202:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402206:	2500      	movs	r5, #0
  402208:	e149      	b.n	40249e <_svfprintf_r+0x80e>
  40220a:	f017 0f20 	tst.w	r7, #32
  40220e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402212:	f108 0104 	add.w	r1, r8, #4
  402216:	d008      	beq.n	40222a <_svfprintf_r+0x59a>
  402218:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40221a:	f8d8 0000 	ldr.w	r0, [r8]
  40221e:	17e5      	asrs	r5, r4, #31
  402220:	4622      	mov	r2, r4
  402222:	462b      	mov	r3, r5
  402224:	e9c0 2300 	strd	r2, r3, [r0]
  402228:	e00c      	b.n	402244 <_svfprintf_r+0x5b4>
  40222a:	06fb      	lsls	r3, r7, #27
  40222c:	d406      	bmi.n	40223c <_svfprintf_r+0x5ac>
  40222e:	067d      	lsls	r5, r7, #25
  402230:	d504      	bpl.n	40223c <_svfprintf_r+0x5ac>
  402232:	f8d8 3000 	ldr.w	r3, [r8]
  402236:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  402238:	801c      	strh	r4, [r3, #0]
  40223a:	e003      	b.n	402244 <_svfprintf_r+0x5b4>
  40223c:	f8d8 3000 	ldr.w	r3, [r8]
  402240:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402242:	601d      	str	r5, [r3, #0]
  402244:	4688      	mov	r8, r1
  402246:	e558      	b.n	401cfa <_svfprintf_r+0x6a>
  402248:	f047 0710 	orr.w	r7, r7, #16
  40224c:	f017 0320 	ands.w	r3, r7, #32
  402250:	d009      	beq.n	402266 <_svfprintf_r+0x5d6>
  402252:	f108 0807 	add.w	r8, r8, #7
  402256:	f028 0307 	bic.w	r3, r8, #7
  40225a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40225e:	f103 0808 	add.w	r8, r3, #8
  402262:	2300      	movs	r3, #0
  402264:	e088      	b.n	402378 <_svfprintf_r+0x6e8>
  402266:	f017 0110 	ands.w	r1, r7, #16
  40226a:	f108 0204 	add.w	r2, r8, #4
  40226e:	d107      	bne.n	402280 <_svfprintf_r+0x5f0>
  402270:	f017 0340 	ands.w	r3, r7, #64	; 0x40
  402274:	d004      	beq.n	402280 <_svfprintf_r+0x5f0>
  402276:	f8b8 4000 	ldrh.w	r4, [r8]
  40227a:	2500      	movs	r5, #0
  40227c:	4690      	mov	r8, r2
  40227e:	e7f0      	b.n	402262 <_svfprintf_r+0x5d2>
  402280:	f8d8 4000 	ldr.w	r4, [r8]
  402284:	2500      	movs	r5, #0
  402286:	4690      	mov	r8, r2
  402288:	e076      	b.n	402378 <_svfprintf_r+0x6e8>
  40228a:	2330      	movs	r3, #48	; 0x30
  40228c:	2278      	movs	r2, #120	; 0x78
  40228e:	48a8      	ldr	r0, [pc, #672]	; (402530 <_svfprintf_r+0x8a0>)
  402290:	f8d8 4000 	ldr.w	r4, [r8]
  402294:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  402298:	2500      	movs	r5, #0
  40229a:	f047 0702 	orr.w	r7, r7, #2
  40229e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4022a2:	f108 0804 	add.w	r8, r8, #4
  4022a6:	901b      	str	r0, [sp, #108]	; 0x6c
  4022a8:	2302      	movs	r3, #2
  4022aa:	9208      	str	r2, [sp, #32]
  4022ac:	e064      	b.n	402378 <_svfprintf_r+0x6e8>
  4022ae:	4643      	mov	r3, r8
  4022b0:	2500      	movs	r5, #0
  4022b2:	681b      	ldr	r3, [r3, #0]
  4022b4:	9307      	str	r3, [sp, #28]
  4022b6:	45a9      	cmp	r9, r5
  4022b8:	f108 0804 	add.w	r8, r8, #4
  4022bc:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  4022c0:	db0d      	blt.n	4022de <_svfprintf_r+0x64e>
  4022c2:	4618      	mov	r0, r3
  4022c4:	4629      	mov	r1, r5
  4022c6:	464a      	mov	r2, r9
  4022c8:	f001 fe2e 	bl	403f28 <memchr>
  4022cc:	2800      	cmp	r0, #0
  4022ce:	f000 80e4 	beq.w	40249a <_svfprintf_r+0x80a>
  4022d2:	9c07      	ldr	r4, [sp, #28]
  4022d4:	1b00      	subs	r0, r0, r4
  4022d6:	4548      	cmp	r0, r9
  4022d8:	bfb8      	it	lt
  4022da:	4681      	movlt	r9, r0
  4022dc:	e0de      	b.n	40249c <_svfprintf_r+0x80c>
  4022de:	9807      	ldr	r0, [sp, #28]
  4022e0:	f7ff fcc0 	bl	401c64 <strlen>
  4022e4:	4681      	mov	r9, r0
  4022e6:	e0d9      	b.n	40249c <_svfprintf_r+0x80c>
  4022e8:	f047 0710 	orr.w	r7, r7, #16
  4022ec:	06bc      	lsls	r4, r7, #26
  4022ee:	d508      	bpl.n	402302 <_svfprintf_r+0x672>
  4022f0:	f108 0807 	add.w	r8, r8, #7
  4022f4:	f028 0307 	bic.w	r3, r8, #7
  4022f8:	f103 0808 	add.w	r8, r3, #8
  4022fc:	e9d3 4500 	ldrd	r4, r5, [r3]
  402300:	e00d      	b.n	40231e <_svfprintf_r+0x68e>
  402302:	f017 0f10 	tst.w	r7, #16
  402306:	f108 0304 	add.w	r3, r8, #4
  40230a:	d104      	bne.n	402316 <_svfprintf_r+0x686>
  40230c:	0678      	lsls	r0, r7, #25
  40230e:	d502      	bpl.n	402316 <_svfprintf_r+0x686>
  402310:	f8b8 4000 	ldrh.w	r4, [r8]
  402314:	e001      	b.n	40231a <_svfprintf_r+0x68a>
  402316:	f8d8 4000 	ldr.w	r4, [r8]
  40231a:	2500      	movs	r5, #0
  40231c:	4698      	mov	r8, r3
  40231e:	2301      	movs	r3, #1
  402320:	e02a      	b.n	402378 <_svfprintf_r+0x6e8>
  402322:	4d83      	ldr	r5, [pc, #524]	; (402530 <_svfprintf_r+0x8a0>)
  402324:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402328:	951b      	str	r5, [sp, #108]	; 0x6c
  40232a:	06b9      	lsls	r1, r7, #26
  40232c:	d508      	bpl.n	402340 <_svfprintf_r+0x6b0>
  40232e:	f108 0807 	add.w	r8, r8, #7
  402332:	f028 0307 	bic.w	r3, r8, #7
  402336:	f103 0808 	add.w	r8, r3, #8
  40233a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40233e:	e00d      	b.n	40235c <_svfprintf_r+0x6cc>
  402340:	f017 0f10 	tst.w	r7, #16
  402344:	f108 0304 	add.w	r3, r8, #4
  402348:	d104      	bne.n	402354 <_svfprintf_r+0x6c4>
  40234a:	067a      	lsls	r2, r7, #25
  40234c:	d502      	bpl.n	402354 <_svfprintf_r+0x6c4>
  40234e:	f8b8 4000 	ldrh.w	r4, [r8]
  402352:	e001      	b.n	402358 <_svfprintf_r+0x6c8>
  402354:	f8d8 4000 	ldr.w	r4, [r8]
  402358:	2500      	movs	r5, #0
  40235a:	4698      	mov	r8, r3
  40235c:	07fb      	lsls	r3, r7, #31
  40235e:	d50a      	bpl.n	402376 <_svfprintf_r+0x6e6>
  402360:	ea54 0005 	orrs.w	r0, r4, r5
  402364:	d007      	beq.n	402376 <_svfprintf_r+0x6e6>
  402366:	2330      	movs	r3, #48	; 0x30
  402368:	9908      	ldr	r1, [sp, #32]
  40236a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40236e:	f88d 1079 	strb.w	r1, [sp, #121]	; 0x79
  402372:	f047 0702 	orr.w	r7, r7, #2
  402376:	2302      	movs	r3, #2
  402378:	2200      	movs	r2, #0
  40237a:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
  40237e:	e000      	b.n	402382 <_svfprintf_r+0x6f2>
  402380:	2301      	movs	r3, #1
  402382:	f1b9 0f00 	cmp.w	r9, #0
  402386:	bfa8      	it	ge
  402388:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
  40238c:	ea54 0205 	orrs.w	r2, r4, r5
  402390:	d102      	bne.n	402398 <_svfprintf_r+0x708>
  402392:	f1b9 0f00 	cmp.w	r9, #0
  402396:	d05a      	beq.n	40244e <_svfprintf_r+0x7be>
  402398:	2b01      	cmp	r3, #1
  40239a:	d01f      	beq.n	4023dc <_svfprintf_r+0x74c>
  40239c:	2b02      	cmp	r3, #2
  40239e:	f10d 03c7 	add.w	r3, sp, #199	; 0xc7
  4023a2:	d041      	beq.n	402428 <_svfprintf_r+0x798>
  4023a4:	08e1      	lsrs	r1, r4, #3
  4023a6:	ea41 7045 	orr.w	r0, r1, r5, lsl #29
  4023aa:	08e9      	lsrs	r1, r5, #3
  4023ac:	9014      	str	r0, [sp, #80]	; 0x50
  4023ae:	9115      	str	r1, [sp, #84]	; 0x54
  4023b0:	f004 0207 	and.w	r2, r4, #7
  4023b4:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  4023b8:	3230      	adds	r2, #48	; 0x30
  4023ba:	ea54 0005 	orrs.w	r0, r4, r5
  4023be:	9307      	str	r3, [sp, #28]
  4023c0:	701a      	strb	r2, [r3, #0]
  4023c2:	f103 33ff 	add.w	r3, r3, #4294967295
  4023c6:	d1ed      	bne.n	4023a4 <_svfprintf_r+0x714>
  4023c8:	07f8      	lsls	r0, r7, #31
  4023ca:	9907      	ldr	r1, [sp, #28]
  4023cc:	d54c      	bpl.n	402468 <_svfprintf_r+0x7d8>
  4023ce:	2a30      	cmp	r2, #48	; 0x30
  4023d0:	d04a      	beq.n	402468 <_svfprintf_r+0x7d8>
  4023d2:	9307      	str	r3, [sp, #28]
  4023d4:	2330      	movs	r3, #48	; 0x30
  4023d6:	f801 3c01 	strb.w	r3, [r1, #-1]
  4023da:	e045      	b.n	402468 <_svfprintf_r+0x7d8>
  4023dc:	2d00      	cmp	r5, #0
  4023de:	bf08      	it	eq
  4023e0:	2c0a      	cmpeq	r4, #10
  4023e2:	d205      	bcs.n	4023f0 <_svfprintf_r+0x760>
  4023e4:	3430      	adds	r4, #48	; 0x30
  4023e6:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
  4023ea:	f10d 04c7 	add.w	r4, sp, #199	; 0xc7
  4023ee:	e03a      	b.n	402466 <_svfprintf_r+0x7d6>
  4023f0:	f10d 00c7 	add.w	r0, sp, #199	; 0xc7
  4023f4:	900a      	str	r0, [sp, #40]	; 0x28
  4023f6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4023f8:	9107      	str	r1, [sp, #28]
  4023fa:	4620      	mov	r0, r4
  4023fc:	4629      	mov	r1, r5
  4023fe:	220a      	movs	r2, #10
  402400:	2300      	movs	r3, #0
  402402:	f003 f92d 	bl	405660 <__aeabi_uldivmod>
  402406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402408:	3230      	adds	r2, #48	; 0x30
  40240a:	f803 2901 	strb.w	r2, [r3], #-1
  40240e:	4620      	mov	r0, r4
  402410:	930a      	str	r3, [sp, #40]	; 0x28
  402412:	4629      	mov	r1, r5
  402414:	220a      	movs	r2, #10
  402416:	2300      	movs	r3, #0
  402418:	f003 f922 	bl	405660 <__aeabi_uldivmod>
  40241c:	4604      	mov	r4, r0
  40241e:	460d      	mov	r5, r1
  402420:	ea54 0005 	orrs.w	r0, r4, r5
  402424:	d1e7      	bne.n	4023f6 <_svfprintf_r+0x766>
  402426:	e01f      	b.n	402468 <_svfprintf_r+0x7d8>
  402428:	f004 020f 	and.w	r2, r4, #15
  40242c:	991b      	ldr	r1, [sp, #108]	; 0x6c
  40242e:	9307      	str	r3, [sp, #28]
  402430:	5c8a      	ldrb	r2, [r1, r2]
  402432:	f803 2901 	strb.w	r2, [r3], #-1
  402436:	0922      	lsrs	r2, r4, #4
  402438:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
  40243c:	0929      	lsrs	r1, r5, #4
  40243e:	9016      	str	r0, [sp, #88]	; 0x58
  402440:	9117      	str	r1, [sp, #92]	; 0x5c
  402442:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  402446:	ea54 0205 	orrs.w	r2, r4, r5
  40244a:	d1ed      	bne.n	402428 <_svfprintf_r+0x798>
  40244c:	e00c      	b.n	402468 <_svfprintf_r+0x7d8>
  40244e:	b933      	cbnz	r3, 40245e <_svfprintf_r+0x7ce>
  402450:	07fb      	lsls	r3, r7, #31
  402452:	d507      	bpl.n	402464 <_svfprintf_r+0x7d4>
  402454:	ac42      	add	r4, sp, #264	; 0x108
  402456:	2330      	movs	r3, #48	; 0x30
  402458:	f804 3d41 	strb.w	r3, [r4, #-65]!
  40245c:	e003      	b.n	402466 <_svfprintf_r+0x7d6>
  40245e:	ad32      	add	r5, sp, #200	; 0xc8
  402460:	9507      	str	r5, [sp, #28]
  402462:	e001      	b.n	402468 <_svfprintf_r+0x7d8>
  402464:	ac32      	add	r4, sp, #200	; 0xc8
  402466:	9407      	str	r4, [sp, #28]
  402468:	9c07      	ldr	r4, [sp, #28]
  40246a:	464d      	mov	r5, r9
  40246c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  402470:	ebc4 0909 	rsb	r9, r4, r9
  402474:	2400      	movs	r4, #0
  402476:	e012      	b.n	40249e <_svfprintf_r+0x80e>
  402478:	9d08      	ldr	r5, [sp, #32]
  40247a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40247e:	2d00      	cmp	r5, #0
  402480:	f000 8388 	beq.w	402b94 <_svfprintf_r+0xf04>
  402484:	f88d 50a0 	strb.w	r5, [sp, #160]	; 0xa0
  402488:	2500      	movs	r5, #0
  40248a:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  40248e:	a828      	add	r0, sp, #160	; 0xa0
  402490:	f04f 0901 	mov.w	r9, #1
  402494:	462c      	mov	r4, r5
  402496:	9007      	str	r0, [sp, #28]
  402498:	e001      	b.n	40249e <_svfprintf_r+0x80e>
  40249a:	4605      	mov	r5, r0
  40249c:	462c      	mov	r4, r5
  40249e:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
  4024a2:	45a9      	cmp	r9, r5
  4024a4:	bfac      	ite	ge
  4024a6:	4649      	movge	r1, r9
  4024a8:	4629      	movlt	r1, r5
  4024aa:	910a      	str	r1, [sp, #40]	; 0x28
  4024ac:	b10b      	cbz	r3, 4024b2 <_svfprintf_r+0x822>
  4024ae:	3101      	adds	r1, #1
  4024b0:	910a      	str	r1, [sp, #40]	; 0x28
  4024b2:	f017 0302 	ands.w	r3, r7, #2
  4024b6:	9311      	str	r3, [sp, #68]	; 0x44
  4024b8:	d002      	beq.n	4024c0 <_svfprintf_r+0x830>
  4024ba:	980a      	ldr	r0, [sp, #40]	; 0x28
  4024bc:	3002      	adds	r0, #2
  4024be:	900a      	str	r0, [sp, #40]	; 0x28
  4024c0:	f017 0384 	ands.w	r3, r7, #132	; 0x84
  4024c4:	9319      	str	r3, [sp, #100]	; 0x64
  4024c6:	d140      	bne.n	40254a <_svfprintf_r+0x8ba>
  4024c8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4024ca:	990a      	ldr	r1, [sp, #40]	; 0x28
  4024cc:	ebc1 0c00 	rsb	ip, r1, r0
  4024d0:	f1bc 0f00 	cmp.w	ip, #0
  4024d4:	dd39      	ble.n	40254a <_svfprintf_r+0x8ba>
  4024d6:	4b17      	ldr	r3, [pc, #92]	; (402534 <_svfprintf_r+0x8a4>)
  4024d8:	6033      	str	r3, [r6, #0]
  4024da:	f1bc 0f10 	cmp.w	ip, #16
  4024de:	dd1b      	ble.n	402518 <_svfprintf_r+0x888>
  4024e0:	2310      	movs	r3, #16
  4024e2:	6073      	str	r3, [r6, #4]
  4024e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4024e6:	3310      	adds	r3, #16
  4024e8:	9327      	str	r3, [sp, #156]	; 0x9c
  4024ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4024ec:	3301      	adds	r3, #1
  4024ee:	2b07      	cmp	r3, #7
  4024f0:	9326      	str	r3, [sp, #152]	; 0x98
  4024f2:	dc01      	bgt.n	4024f8 <_svfprintf_r+0x868>
  4024f4:	3608      	adds	r6, #8
  4024f6:	e00c      	b.n	402512 <_svfprintf_r+0x882>
  4024f8:	4650      	mov	r0, sl
  4024fa:	4659      	mov	r1, fp
  4024fc:	aa25      	add	r2, sp, #148	; 0x94
  4024fe:	f8cd c018 	str.w	ip, [sp, #24]
  402502:	f002 fb15 	bl	404b30 <__ssprint_r>
  402506:	f8dd c018 	ldr.w	ip, [sp, #24]
  40250a:	2800      	cmp	r0, #0
  40250c:	f040 8349 	bne.w	402ba2 <_svfprintf_r+0xf12>
  402510:	ae32      	add	r6, sp, #200	; 0xc8
  402512:	f1ac 0c10 	sub.w	ip, ip, #16
  402516:	e7de      	b.n	4024d6 <_svfprintf_r+0x846>
  402518:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40251a:	f8c6 c004 	str.w	ip, [r6, #4]
  40251e:	4463      	add	r3, ip
  402520:	9327      	str	r3, [sp, #156]	; 0x9c
  402522:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402524:	3301      	adds	r3, #1
  402526:	2b07      	cmp	r3, #7
  402528:	9326      	str	r3, [sp, #152]	; 0x98
  40252a:	dc05      	bgt.n	402538 <_svfprintf_r+0x8a8>
  40252c:	3608      	adds	r6, #8
  40252e:	e00c      	b.n	40254a <_svfprintf_r+0x8ba>
  402530:	00405d0b 	.word	0x00405d0b
  402534:	00405cca 	.word	0x00405cca
  402538:	4650      	mov	r0, sl
  40253a:	4659      	mov	r1, fp
  40253c:	aa25      	add	r2, sp, #148	; 0x94
  40253e:	f002 faf7 	bl	404b30 <__ssprint_r>
  402542:	2800      	cmp	r0, #0
  402544:	f040 832d 	bne.w	402ba2 <_svfprintf_r+0xf12>
  402548:	ae32      	add	r6, sp, #200	; 0xc8
  40254a:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
  40254e:	b1bb      	cbz	r3, 402580 <_svfprintf_r+0x8f0>
  402550:	f10d 0377 	add.w	r3, sp, #119	; 0x77
  402554:	6033      	str	r3, [r6, #0]
  402556:	2301      	movs	r3, #1
  402558:	6073      	str	r3, [r6, #4]
  40255a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40255c:	3301      	adds	r3, #1
  40255e:	9327      	str	r3, [sp, #156]	; 0x9c
  402560:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402562:	3301      	adds	r3, #1
  402564:	2b07      	cmp	r3, #7
  402566:	9326      	str	r3, [sp, #152]	; 0x98
  402568:	dc01      	bgt.n	40256e <_svfprintf_r+0x8de>
  40256a:	3608      	adds	r6, #8
  40256c:	e008      	b.n	402580 <_svfprintf_r+0x8f0>
  40256e:	4650      	mov	r0, sl
  402570:	4659      	mov	r1, fp
  402572:	aa25      	add	r2, sp, #148	; 0x94
  402574:	f002 fadc 	bl	404b30 <__ssprint_r>
  402578:	2800      	cmp	r0, #0
  40257a:	f040 8312 	bne.w	402ba2 <_svfprintf_r+0xf12>
  40257e:	ae32      	add	r6, sp, #200	; 0xc8
  402580:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402582:	b1b3      	cbz	r3, 4025b2 <_svfprintf_r+0x922>
  402584:	ab1e      	add	r3, sp, #120	; 0x78
  402586:	6033      	str	r3, [r6, #0]
  402588:	2302      	movs	r3, #2
  40258a:	6073      	str	r3, [r6, #4]
  40258c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40258e:	3302      	adds	r3, #2
  402590:	9327      	str	r3, [sp, #156]	; 0x9c
  402592:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402594:	3301      	adds	r3, #1
  402596:	2b07      	cmp	r3, #7
  402598:	9326      	str	r3, [sp, #152]	; 0x98
  40259a:	dc01      	bgt.n	4025a0 <_svfprintf_r+0x910>
  40259c:	3608      	adds	r6, #8
  40259e:	e008      	b.n	4025b2 <_svfprintf_r+0x922>
  4025a0:	4650      	mov	r0, sl
  4025a2:	4659      	mov	r1, fp
  4025a4:	aa25      	add	r2, sp, #148	; 0x94
  4025a6:	f002 fac3 	bl	404b30 <__ssprint_r>
  4025aa:	2800      	cmp	r0, #0
  4025ac:	f040 82f9 	bne.w	402ba2 <_svfprintf_r+0xf12>
  4025b0:	ae32      	add	r6, sp, #200	; 0xc8
  4025b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4025b4:	2b80      	cmp	r3, #128	; 0x80
  4025b6:	d13c      	bne.n	402632 <_svfprintf_r+0x9a2>
  4025b8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4025ba:	990a      	ldr	r1, [sp, #40]	; 0x28
  4025bc:	ebc1 0c00 	rsb	ip, r1, r0
  4025c0:	f1bc 0f00 	cmp.w	ip, #0
  4025c4:	dd35      	ble.n	402632 <_svfprintf_r+0x9a2>
  4025c6:	4b9c      	ldr	r3, [pc, #624]	; (402838 <_svfprintf_r+0xba8>)
  4025c8:	6033      	str	r3, [r6, #0]
  4025ca:	f1bc 0f10 	cmp.w	ip, #16
  4025ce:	dd1b      	ble.n	402608 <_svfprintf_r+0x978>
  4025d0:	2310      	movs	r3, #16
  4025d2:	6073      	str	r3, [r6, #4]
  4025d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4025d6:	3310      	adds	r3, #16
  4025d8:	9327      	str	r3, [sp, #156]	; 0x9c
  4025da:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4025dc:	3301      	adds	r3, #1
  4025de:	2b07      	cmp	r3, #7
  4025e0:	9326      	str	r3, [sp, #152]	; 0x98
  4025e2:	dc01      	bgt.n	4025e8 <_svfprintf_r+0x958>
  4025e4:	3608      	adds	r6, #8
  4025e6:	e00c      	b.n	402602 <_svfprintf_r+0x972>
  4025e8:	4650      	mov	r0, sl
  4025ea:	4659      	mov	r1, fp
  4025ec:	aa25      	add	r2, sp, #148	; 0x94
  4025ee:	f8cd c018 	str.w	ip, [sp, #24]
  4025f2:	f002 fa9d 	bl	404b30 <__ssprint_r>
  4025f6:	f8dd c018 	ldr.w	ip, [sp, #24]
  4025fa:	2800      	cmp	r0, #0
  4025fc:	f040 82d1 	bne.w	402ba2 <_svfprintf_r+0xf12>
  402600:	ae32      	add	r6, sp, #200	; 0xc8
  402602:	f1ac 0c10 	sub.w	ip, ip, #16
  402606:	e7de      	b.n	4025c6 <_svfprintf_r+0x936>
  402608:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40260a:	f8c6 c004 	str.w	ip, [r6, #4]
  40260e:	4463      	add	r3, ip
  402610:	9327      	str	r3, [sp, #156]	; 0x9c
  402612:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402614:	3301      	adds	r3, #1
  402616:	2b07      	cmp	r3, #7
  402618:	9326      	str	r3, [sp, #152]	; 0x98
  40261a:	dc01      	bgt.n	402620 <_svfprintf_r+0x990>
  40261c:	3608      	adds	r6, #8
  40261e:	e008      	b.n	402632 <_svfprintf_r+0x9a2>
  402620:	4650      	mov	r0, sl
  402622:	4659      	mov	r1, fp
  402624:	aa25      	add	r2, sp, #148	; 0x94
  402626:	f002 fa83 	bl	404b30 <__ssprint_r>
  40262a:	2800      	cmp	r0, #0
  40262c:	f040 82b9 	bne.w	402ba2 <_svfprintf_r+0xf12>
  402630:	ae32      	add	r6, sp, #200	; 0xc8
  402632:	ebc9 0505 	rsb	r5, r9, r5
  402636:	2d00      	cmp	r5, #0
  402638:	dd2e      	ble.n	402698 <_svfprintf_r+0xa08>
  40263a:	4b7f      	ldr	r3, [pc, #508]	; (402838 <_svfprintf_r+0xba8>)
  40263c:	6033      	str	r3, [r6, #0]
  40263e:	2d10      	cmp	r5, #16
  402640:	dd16      	ble.n	402670 <_svfprintf_r+0x9e0>
  402642:	2310      	movs	r3, #16
  402644:	6073      	str	r3, [r6, #4]
  402646:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402648:	3310      	adds	r3, #16
  40264a:	9327      	str	r3, [sp, #156]	; 0x9c
  40264c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40264e:	3301      	adds	r3, #1
  402650:	2b07      	cmp	r3, #7
  402652:	9326      	str	r3, [sp, #152]	; 0x98
  402654:	dc01      	bgt.n	40265a <_svfprintf_r+0x9ca>
  402656:	3608      	adds	r6, #8
  402658:	e008      	b.n	40266c <_svfprintf_r+0x9dc>
  40265a:	4650      	mov	r0, sl
  40265c:	4659      	mov	r1, fp
  40265e:	aa25      	add	r2, sp, #148	; 0x94
  402660:	f002 fa66 	bl	404b30 <__ssprint_r>
  402664:	2800      	cmp	r0, #0
  402666:	f040 829c 	bne.w	402ba2 <_svfprintf_r+0xf12>
  40266a:	ae32      	add	r6, sp, #200	; 0xc8
  40266c:	3d10      	subs	r5, #16
  40266e:	e7e4      	b.n	40263a <_svfprintf_r+0x9aa>
  402670:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402672:	6075      	str	r5, [r6, #4]
  402674:	441d      	add	r5, r3
  402676:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402678:	9527      	str	r5, [sp, #156]	; 0x9c
  40267a:	3301      	adds	r3, #1
  40267c:	2b07      	cmp	r3, #7
  40267e:	9326      	str	r3, [sp, #152]	; 0x98
  402680:	dc01      	bgt.n	402686 <_svfprintf_r+0x9f6>
  402682:	3608      	adds	r6, #8
  402684:	e008      	b.n	402698 <_svfprintf_r+0xa08>
  402686:	4650      	mov	r0, sl
  402688:	4659      	mov	r1, fp
  40268a:	aa25      	add	r2, sp, #148	; 0x94
  40268c:	f002 fa50 	bl	404b30 <__ssprint_r>
  402690:	2800      	cmp	r0, #0
  402692:	f040 8286 	bne.w	402ba2 <_svfprintf_r+0xf12>
  402696:	ae32      	add	r6, sp, #200	; 0xc8
  402698:	05fd      	lsls	r5, r7, #23
  40269a:	d405      	bmi.n	4026a8 <_svfprintf_r+0xa18>
  40269c:	9c07      	ldr	r4, [sp, #28]
  40269e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4026a0:	e886 0210 	stmia.w	r6, {r4, r9}
  4026a4:	444b      	add	r3, r9
  4026a6:	e0da      	b.n	40285e <_svfprintf_r+0xbce>
  4026a8:	9d08      	ldr	r5, [sp, #32]
  4026aa:	2d65      	cmp	r5, #101	; 0x65
  4026ac:	f340 81a7 	ble.w	4029fe <_svfprintf_r+0xd6e>
  4026b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4026b4:	2200      	movs	r2, #0
  4026b6:	2300      	movs	r3, #0
  4026b8:	f002 ff78 	bl	4055ac <__aeabi_dcmpeq>
  4026bc:	2800      	cmp	r0, #0
  4026be:	d059      	beq.n	402774 <_svfprintf_r+0xae4>
  4026c0:	4b5e      	ldr	r3, [pc, #376]	; (40283c <_svfprintf_r+0xbac>)
  4026c2:	6033      	str	r3, [r6, #0]
  4026c4:	2301      	movs	r3, #1
  4026c6:	6073      	str	r3, [r6, #4]
  4026c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4026ca:	3301      	adds	r3, #1
  4026cc:	9327      	str	r3, [sp, #156]	; 0x9c
  4026ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4026d0:	3301      	adds	r3, #1
  4026d2:	2b07      	cmp	r3, #7
  4026d4:	9326      	str	r3, [sp, #152]	; 0x98
  4026d6:	dc01      	bgt.n	4026dc <_svfprintf_r+0xa4c>
  4026d8:	3608      	adds	r6, #8
  4026da:	e008      	b.n	4026ee <_svfprintf_r+0xa5e>
  4026dc:	4650      	mov	r0, sl
  4026de:	4659      	mov	r1, fp
  4026e0:	aa25      	add	r2, sp, #148	; 0x94
  4026e2:	f002 fa25 	bl	404b30 <__ssprint_r>
  4026e6:	2800      	cmp	r0, #0
  4026e8:	f040 825b 	bne.w	402ba2 <_svfprintf_r+0xf12>
  4026ec:	ae32      	add	r6, sp, #200	; 0xc8
  4026ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4026f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4026f2:	42a3      	cmp	r3, r4
  4026f4:	db02      	blt.n	4026fc <_svfprintf_r+0xa6c>
  4026f6:	07fc      	lsls	r4, r7, #31
  4026f8:	f140 8202 	bpl.w	402b00 <_svfprintf_r+0xe70>
  4026fc:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4026fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402700:	9d18      	ldr	r5, [sp, #96]	; 0x60
  402702:	6035      	str	r5, [r6, #0]
  402704:	4423      	add	r3, r4
  402706:	9327      	str	r3, [sp, #156]	; 0x9c
  402708:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40270a:	6074      	str	r4, [r6, #4]
  40270c:	3301      	adds	r3, #1
  40270e:	2b07      	cmp	r3, #7
  402710:	9326      	str	r3, [sp, #152]	; 0x98
  402712:	dc01      	bgt.n	402718 <_svfprintf_r+0xa88>
  402714:	3608      	adds	r6, #8
  402716:	e008      	b.n	40272a <_svfprintf_r+0xa9a>
  402718:	4650      	mov	r0, sl
  40271a:	4659      	mov	r1, fp
  40271c:	aa25      	add	r2, sp, #148	; 0x94
  40271e:	f002 fa07 	bl	404b30 <__ssprint_r>
  402722:	2800      	cmp	r0, #0
  402724:	f040 823d 	bne.w	402ba2 <_svfprintf_r+0xf12>
  402728:	ae32      	add	r6, sp, #200	; 0xc8
  40272a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40272c:	1e6c      	subs	r4, r5, #1
  40272e:	2c00      	cmp	r4, #0
  402730:	f340 81e6 	ble.w	402b00 <_svfprintf_r+0xe70>
  402734:	4b40      	ldr	r3, [pc, #256]	; (402838 <_svfprintf_r+0xba8>)
  402736:	6033      	str	r3, [r6, #0]
  402738:	2c10      	cmp	r4, #16
  40273a:	dd16      	ble.n	40276a <_svfprintf_r+0xada>
  40273c:	2310      	movs	r3, #16
  40273e:	6073      	str	r3, [r6, #4]
  402740:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402742:	3310      	adds	r3, #16
  402744:	9327      	str	r3, [sp, #156]	; 0x9c
  402746:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402748:	3301      	adds	r3, #1
  40274a:	2b07      	cmp	r3, #7
  40274c:	9326      	str	r3, [sp, #152]	; 0x98
  40274e:	dc01      	bgt.n	402754 <_svfprintf_r+0xac4>
  402750:	3608      	adds	r6, #8
  402752:	e008      	b.n	402766 <_svfprintf_r+0xad6>
  402754:	4650      	mov	r0, sl
  402756:	4659      	mov	r1, fp
  402758:	aa25      	add	r2, sp, #148	; 0x94
  40275a:	f002 f9e9 	bl	404b30 <__ssprint_r>
  40275e:	2800      	cmp	r0, #0
  402760:	f040 821f 	bne.w	402ba2 <_svfprintf_r+0xf12>
  402764:	ae32      	add	r6, sp, #200	; 0xc8
  402766:	3c10      	subs	r4, #16
  402768:	e7e4      	b.n	402734 <_svfprintf_r+0xaa4>
  40276a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40276c:	6074      	str	r4, [r6, #4]
  40276e:	441c      	add	r4, r3
  402770:	9427      	str	r4, [sp, #156]	; 0x9c
  402772:	e134      	b.n	4029de <_svfprintf_r+0xd4e>
  402774:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402776:	2b00      	cmp	r3, #0
  402778:	dc73      	bgt.n	402862 <_svfprintf_r+0xbd2>
  40277a:	4b30      	ldr	r3, [pc, #192]	; (40283c <_svfprintf_r+0xbac>)
  40277c:	6033      	str	r3, [r6, #0]
  40277e:	2301      	movs	r3, #1
  402780:	6073      	str	r3, [r6, #4]
  402782:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402784:	3301      	adds	r3, #1
  402786:	9327      	str	r3, [sp, #156]	; 0x9c
  402788:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40278a:	3301      	adds	r3, #1
  40278c:	2b07      	cmp	r3, #7
  40278e:	9326      	str	r3, [sp, #152]	; 0x98
  402790:	dc01      	bgt.n	402796 <_svfprintf_r+0xb06>
  402792:	3608      	adds	r6, #8
  402794:	e008      	b.n	4027a8 <_svfprintf_r+0xb18>
  402796:	4650      	mov	r0, sl
  402798:	4659      	mov	r1, fp
  40279a:	aa25      	add	r2, sp, #148	; 0x94
  40279c:	f002 f9c8 	bl	404b30 <__ssprint_r>
  4027a0:	2800      	cmp	r0, #0
  4027a2:	f040 81fe 	bne.w	402ba2 <_svfprintf_r+0xf12>
  4027a6:	ae32      	add	r6, sp, #200	; 0xc8
  4027a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4027aa:	b923      	cbnz	r3, 4027b6 <_svfprintf_r+0xb26>
  4027ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4027ae:	b914      	cbnz	r4, 4027b6 <_svfprintf_r+0xb26>
  4027b0:	07f8      	lsls	r0, r7, #31
  4027b2:	f140 81a5 	bpl.w	402b00 <_svfprintf_r+0xe70>
  4027b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4027b8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4027ba:	9d18      	ldr	r5, [sp, #96]	; 0x60
  4027bc:	6035      	str	r5, [r6, #0]
  4027be:	4423      	add	r3, r4
  4027c0:	9327      	str	r3, [sp, #156]	; 0x9c
  4027c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4027c4:	6074      	str	r4, [r6, #4]
  4027c6:	3301      	adds	r3, #1
  4027c8:	2b07      	cmp	r3, #7
  4027ca:	9326      	str	r3, [sp, #152]	; 0x98
  4027cc:	dc01      	bgt.n	4027d2 <_svfprintf_r+0xb42>
  4027ce:	3608      	adds	r6, #8
  4027d0:	e008      	b.n	4027e4 <_svfprintf_r+0xb54>
  4027d2:	4650      	mov	r0, sl
  4027d4:	4659      	mov	r1, fp
  4027d6:	aa25      	add	r2, sp, #148	; 0x94
  4027d8:	f002 f9aa 	bl	404b30 <__ssprint_r>
  4027dc:	2800      	cmp	r0, #0
  4027de:	f040 81e0 	bne.w	402ba2 <_svfprintf_r+0xf12>
  4027e2:	ae32      	add	r6, sp, #200	; 0xc8
  4027e4:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  4027e6:	4264      	negs	r4, r4
  4027e8:	2c00      	cmp	r4, #0
  4027ea:	dd32      	ble.n	402852 <_svfprintf_r+0xbc2>
  4027ec:	4b12      	ldr	r3, [pc, #72]	; (402838 <_svfprintf_r+0xba8>)
  4027ee:	6033      	str	r3, [r6, #0]
  4027f0:	2c10      	cmp	r4, #16
  4027f2:	dd16      	ble.n	402822 <_svfprintf_r+0xb92>
  4027f4:	2310      	movs	r3, #16
  4027f6:	6073      	str	r3, [r6, #4]
  4027f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4027fa:	3310      	adds	r3, #16
  4027fc:	9327      	str	r3, [sp, #156]	; 0x9c
  4027fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402800:	3301      	adds	r3, #1
  402802:	2b07      	cmp	r3, #7
  402804:	9326      	str	r3, [sp, #152]	; 0x98
  402806:	dc01      	bgt.n	40280c <_svfprintf_r+0xb7c>
  402808:	3608      	adds	r6, #8
  40280a:	e008      	b.n	40281e <_svfprintf_r+0xb8e>
  40280c:	4650      	mov	r0, sl
  40280e:	4659      	mov	r1, fp
  402810:	aa25      	add	r2, sp, #148	; 0x94
  402812:	f002 f98d 	bl	404b30 <__ssprint_r>
  402816:	2800      	cmp	r0, #0
  402818:	f040 81c3 	bne.w	402ba2 <_svfprintf_r+0xf12>
  40281c:	ae32      	add	r6, sp, #200	; 0xc8
  40281e:	3c10      	subs	r4, #16
  402820:	e7e4      	b.n	4027ec <_svfprintf_r+0xb5c>
  402822:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402824:	6074      	str	r4, [r6, #4]
  402826:	441c      	add	r4, r3
  402828:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40282a:	9427      	str	r4, [sp, #156]	; 0x9c
  40282c:	3301      	adds	r3, #1
  40282e:	2b07      	cmp	r3, #7
  402830:	9326      	str	r3, [sp, #152]	; 0x98
  402832:	dc05      	bgt.n	402840 <_svfprintf_r+0xbb0>
  402834:	3608      	adds	r6, #8
  402836:	e00c      	b.n	402852 <_svfprintf_r+0xbc2>
  402838:	00405cda 	.word	0x00405cda
  40283c:	00405d1c 	.word	0x00405d1c
  402840:	4650      	mov	r0, sl
  402842:	4659      	mov	r1, fp
  402844:	aa25      	add	r2, sp, #148	; 0x94
  402846:	f002 f973 	bl	404b30 <__ssprint_r>
  40284a:	2800      	cmp	r0, #0
  40284c:	f040 81a9 	bne.w	402ba2 <_svfprintf_r+0xf12>
  402850:	ae32      	add	r6, sp, #200	; 0xc8
  402852:	9d07      	ldr	r5, [sp, #28]
  402854:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402856:	6035      	str	r5, [r6, #0]
  402858:	6074      	str	r4, [r6, #4]
  40285a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40285c:	4423      	add	r3, r4
  40285e:	9327      	str	r3, [sp, #156]	; 0x9c
  402860:	e0bd      	b.n	4029de <_svfprintf_r+0xd4e>
  402862:	9809      	ldr	r0, [sp, #36]	; 0x24
  402864:	9d07      	ldr	r5, [sp, #28]
  402866:	4681      	mov	r9, r0
  402868:	45a1      	cmp	r9, r4
  40286a:	bfa8      	it	ge
  40286c:	46a1      	movge	r9, r4
  40286e:	f1b9 0f00 	cmp.w	r9, #0
  402872:	4405      	add	r5, r0
  402874:	dd15      	ble.n	4028a2 <_svfprintf_r+0xc12>
  402876:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402878:	9907      	ldr	r1, [sp, #28]
  40287a:	444b      	add	r3, r9
  40287c:	9327      	str	r3, [sp, #156]	; 0x9c
  40287e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402880:	3301      	adds	r3, #1
  402882:	2b07      	cmp	r3, #7
  402884:	e886 0202 	stmia.w	r6, {r1, r9}
  402888:	9326      	str	r3, [sp, #152]	; 0x98
  40288a:	dc01      	bgt.n	402890 <_svfprintf_r+0xc00>
  40288c:	3608      	adds	r6, #8
  40288e:	e008      	b.n	4028a2 <_svfprintf_r+0xc12>
  402890:	4650      	mov	r0, sl
  402892:	4659      	mov	r1, fp
  402894:	aa25      	add	r2, sp, #148	; 0x94
  402896:	f002 f94b 	bl	404b30 <__ssprint_r>
  40289a:	2800      	cmp	r0, #0
  40289c:	f040 8181 	bne.w	402ba2 <_svfprintf_r+0xf12>
  4028a0:	ae32      	add	r6, sp, #200	; 0xc8
  4028a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  4028a6:	ebc9 0904 	rsb	r9, r9, r4
  4028aa:	f1b9 0f00 	cmp.w	r9, #0
  4028ae:	dd31      	ble.n	402914 <_svfprintf_r+0xc84>
  4028b0:	4b9a      	ldr	r3, [pc, #616]	; (402b1c <_svfprintf_r+0xe8c>)
  4028b2:	6033      	str	r3, [r6, #0]
  4028b4:	f1b9 0f10 	cmp.w	r9, #16
  4028b8:	dd17      	ble.n	4028ea <_svfprintf_r+0xc5a>
  4028ba:	2310      	movs	r3, #16
  4028bc:	6073      	str	r3, [r6, #4]
  4028be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4028c0:	3310      	adds	r3, #16
  4028c2:	9327      	str	r3, [sp, #156]	; 0x9c
  4028c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4028c6:	3301      	adds	r3, #1
  4028c8:	2b07      	cmp	r3, #7
  4028ca:	9326      	str	r3, [sp, #152]	; 0x98
  4028cc:	dc01      	bgt.n	4028d2 <_svfprintf_r+0xc42>
  4028ce:	3608      	adds	r6, #8
  4028d0:	e008      	b.n	4028e4 <_svfprintf_r+0xc54>
  4028d2:	4650      	mov	r0, sl
  4028d4:	4659      	mov	r1, fp
  4028d6:	aa25      	add	r2, sp, #148	; 0x94
  4028d8:	f002 f92a 	bl	404b30 <__ssprint_r>
  4028dc:	2800      	cmp	r0, #0
  4028de:	f040 8160 	bne.w	402ba2 <_svfprintf_r+0xf12>
  4028e2:	ae32      	add	r6, sp, #200	; 0xc8
  4028e4:	f1a9 0910 	sub.w	r9, r9, #16
  4028e8:	e7e2      	b.n	4028b0 <_svfprintf_r+0xc20>
  4028ea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4028ec:	f8c6 9004 	str.w	r9, [r6, #4]
  4028f0:	444b      	add	r3, r9
  4028f2:	9327      	str	r3, [sp, #156]	; 0x9c
  4028f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4028f6:	3301      	adds	r3, #1
  4028f8:	2b07      	cmp	r3, #7
  4028fa:	9326      	str	r3, [sp, #152]	; 0x98
  4028fc:	dc01      	bgt.n	402902 <_svfprintf_r+0xc72>
  4028fe:	3608      	adds	r6, #8
  402900:	e008      	b.n	402914 <_svfprintf_r+0xc84>
  402902:	4650      	mov	r0, sl
  402904:	4659      	mov	r1, fp
  402906:	aa25      	add	r2, sp, #148	; 0x94
  402908:	f002 f912 	bl	404b30 <__ssprint_r>
  40290c:	2800      	cmp	r0, #0
  40290e:	f040 8148 	bne.w	402ba2 <_svfprintf_r+0xf12>
  402912:	ae32      	add	r6, sp, #200	; 0xc8
  402914:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402916:	9809      	ldr	r0, [sp, #36]	; 0x24
  402918:	9a07      	ldr	r2, [sp, #28]
  40291a:	4283      	cmp	r3, r0
  40291c:	4414      	add	r4, r2
  40291e:	db01      	blt.n	402924 <_svfprintf_r+0xc94>
  402920:	07f9      	lsls	r1, r7, #31
  402922:	d516      	bpl.n	402952 <_svfprintf_r+0xcc2>
  402924:	9a10      	ldr	r2, [sp, #64]	; 0x40
  402926:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402928:	9918      	ldr	r1, [sp, #96]	; 0x60
  40292a:	6031      	str	r1, [r6, #0]
  40292c:	4413      	add	r3, r2
  40292e:	9327      	str	r3, [sp, #156]	; 0x9c
  402930:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402932:	6072      	str	r2, [r6, #4]
  402934:	3301      	adds	r3, #1
  402936:	2b07      	cmp	r3, #7
  402938:	9326      	str	r3, [sp, #152]	; 0x98
  40293a:	dc01      	bgt.n	402940 <_svfprintf_r+0xcb0>
  40293c:	3608      	adds	r6, #8
  40293e:	e008      	b.n	402952 <_svfprintf_r+0xcc2>
  402940:	4650      	mov	r0, sl
  402942:	4659      	mov	r1, fp
  402944:	aa25      	add	r2, sp, #148	; 0x94
  402946:	f002 f8f3 	bl	404b30 <__ssprint_r>
  40294a:	2800      	cmp	r0, #0
  40294c:	f040 8129 	bne.w	402ba2 <_svfprintf_r+0xf12>
  402950:	ae32      	add	r6, sp, #200	; 0xc8
  402952:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402954:	9809      	ldr	r0, [sp, #36]	; 0x24
  402956:	1b2d      	subs	r5, r5, r4
  402958:	1ac3      	subs	r3, r0, r3
  40295a:	429d      	cmp	r5, r3
  40295c:	bfa8      	it	ge
  40295e:	461d      	movge	r5, r3
  402960:	2d00      	cmp	r5, #0
  402962:	dd14      	ble.n	40298e <_svfprintf_r+0xcfe>
  402964:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402966:	442b      	add	r3, r5
  402968:	9327      	str	r3, [sp, #156]	; 0x9c
  40296a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40296c:	3301      	adds	r3, #1
  40296e:	2b07      	cmp	r3, #7
  402970:	e886 0030 	stmia.w	r6, {r4, r5}
  402974:	9326      	str	r3, [sp, #152]	; 0x98
  402976:	dc01      	bgt.n	40297c <_svfprintf_r+0xcec>
  402978:	3608      	adds	r6, #8
  40297a:	e008      	b.n	40298e <_svfprintf_r+0xcfe>
  40297c:	4650      	mov	r0, sl
  40297e:	4659      	mov	r1, fp
  402980:	aa25      	add	r2, sp, #148	; 0x94
  402982:	f002 f8d5 	bl	404b30 <__ssprint_r>
  402986:	2800      	cmp	r0, #0
  402988:	f040 810b 	bne.w	402ba2 <_svfprintf_r+0xf12>
  40298c:	ae32      	add	r6, sp, #200	; 0xc8
  40298e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402990:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402992:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  402996:	1ae3      	subs	r3, r4, r3
  402998:	1b5d      	subs	r5, r3, r5
  40299a:	2d00      	cmp	r5, #0
  40299c:	f340 80b0 	ble.w	402b00 <_svfprintf_r+0xe70>
  4029a0:	4b5e      	ldr	r3, [pc, #376]	; (402b1c <_svfprintf_r+0xe8c>)
  4029a2:	6033      	str	r3, [r6, #0]
  4029a4:	2d10      	cmp	r5, #16
  4029a6:	dd16      	ble.n	4029d6 <_svfprintf_r+0xd46>
  4029a8:	2310      	movs	r3, #16
  4029aa:	6073      	str	r3, [r6, #4]
  4029ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4029ae:	3310      	adds	r3, #16
  4029b0:	9327      	str	r3, [sp, #156]	; 0x9c
  4029b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4029b4:	3301      	adds	r3, #1
  4029b6:	2b07      	cmp	r3, #7
  4029b8:	9326      	str	r3, [sp, #152]	; 0x98
  4029ba:	dc01      	bgt.n	4029c0 <_svfprintf_r+0xd30>
  4029bc:	3608      	adds	r6, #8
  4029be:	e008      	b.n	4029d2 <_svfprintf_r+0xd42>
  4029c0:	4650      	mov	r0, sl
  4029c2:	4659      	mov	r1, fp
  4029c4:	aa25      	add	r2, sp, #148	; 0x94
  4029c6:	f002 f8b3 	bl	404b30 <__ssprint_r>
  4029ca:	2800      	cmp	r0, #0
  4029cc:	f040 80e9 	bne.w	402ba2 <_svfprintf_r+0xf12>
  4029d0:	ae32      	add	r6, sp, #200	; 0xc8
  4029d2:	3d10      	subs	r5, #16
  4029d4:	e7e4      	b.n	4029a0 <_svfprintf_r+0xd10>
  4029d6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4029d8:	6075      	str	r5, [r6, #4]
  4029da:	441d      	add	r5, r3
  4029dc:	9527      	str	r5, [sp, #156]	; 0x9c
  4029de:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4029e0:	3301      	adds	r3, #1
  4029e2:	2b07      	cmp	r3, #7
  4029e4:	9326      	str	r3, [sp, #152]	; 0x98
  4029e6:	f340 808a 	ble.w	402afe <_svfprintf_r+0xe6e>
  4029ea:	4650      	mov	r0, sl
  4029ec:	4659      	mov	r1, fp
  4029ee:	aa25      	add	r2, sp, #148	; 0x94
  4029f0:	f002 f89e 	bl	404b30 <__ssprint_r>
  4029f4:	2800      	cmp	r0, #0
  4029f6:	f040 80d4 	bne.w	402ba2 <_svfprintf_r+0xf12>
  4029fa:	ae32      	add	r6, sp, #200	; 0xc8
  4029fc:	e080      	b.n	402b00 <_svfprintf_r+0xe70>
  4029fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402a00:	2d01      	cmp	r5, #1
  402a02:	dc01      	bgt.n	402a08 <_svfprintf_r+0xd78>
  402a04:	07fa      	lsls	r2, r7, #31
  402a06:	d56d      	bpl.n	402ae4 <_svfprintf_r+0xe54>
  402a08:	2301      	movs	r3, #1
  402a0a:	6073      	str	r3, [r6, #4]
  402a0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402a0e:	9c07      	ldr	r4, [sp, #28]
  402a10:	6034      	str	r4, [r6, #0]
  402a12:	3301      	adds	r3, #1
  402a14:	9327      	str	r3, [sp, #156]	; 0x9c
  402a16:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402a18:	3301      	adds	r3, #1
  402a1a:	2b07      	cmp	r3, #7
  402a1c:	9326      	str	r3, [sp, #152]	; 0x98
  402a1e:	dc01      	bgt.n	402a24 <_svfprintf_r+0xd94>
  402a20:	3608      	adds	r6, #8
  402a22:	e008      	b.n	402a36 <_svfprintf_r+0xda6>
  402a24:	4650      	mov	r0, sl
  402a26:	4659      	mov	r1, fp
  402a28:	aa25      	add	r2, sp, #148	; 0x94
  402a2a:	f002 f881 	bl	404b30 <__ssprint_r>
  402a2e:	2800      	cmp	r0, #0
  402a30:	f040 80b7 	bne.w	402ba2 <_svfprintf_r+0xf12>
  402a34:	ae32      	add	r6, sp, #200	; 0xc8
  402a36:	9c10      	ldr	r4, [sp, #64]	; 0x40
  402a38:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402a3a:	9d18      	ldr	r5, [sp, #96]	; 0x60
  402a3c:	6035      	str	r5, [r6, #0]
  402a3e:	4423      	add	r3, r4
  402a40:	9327      	str	r3, [sp, #156]	; 0x9c
  402a42:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402a44:	6074      	str	r4, [r6, #4]
  402a46:	3301      	adds	r3, #1
  402a48:	2b07      	cmp	r3, #7
  402a4a:	9326      	str	r3, [sp, #152]	; 0x98
  402a4c:	dc01      	bgt.n	402a52 <_svfprintf_r+0xdc2>
  402a4e:	3608      	adds	r6, #8
  402a50:	e008      	b.n	402a64 <_svfprintf_r+0xdd4>
  402a52:	4650      	mov	r0, sl
  402a54:	4659      	mov	r1, fp
  402a56:	aa25      	add	r2, sp, #148	; 0x94
  402a58:	f002 f86a 	bl	404b30 <__ssprint_r>
  402a5c:	2800      	cmp	r0, #0
  402a5e:	f040 80a0 	bne.w	402ba2 <_svfprintf_r+0xf12>
  402a62:	ae32      	add	r6, sp, #200	; 0xc8
  402a64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  402a68:	2200      	movs	r2, #0
  402a6a:	2300      	movs	r3, #0
  402a6c:	f002 fd9e 	bl	4055ac <__aeabi_dcmpeq>
  402a70:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402a72:	1e6c      	subs	r4, r5, #1
  402a74:	b940      	cbnz	r0, 402a88 <_svfprintf_r+0xdf8>
  402a76:	9d07      	ldr	r5, [sp, #28]
  402a78:	1c6b      	adds	r3, r5, #1
  402a7a:	e886 0018 	stmia.w	r6, {r3, r4}
  402a7e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402a80:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402a82:	3b01      	subs	r3, #1
  402a84:	4423      	add	r3, r4
  402a86:	e033      	b.n	402af0 <_svfprintf_r+0xe60>
  402a88:	2c00      	cmp	r4, #0
  402a8a:	dd34      	ble.n	402af6 <_svfprintf_r+0xe66>
  402a8c:	4b23      	ldr	r3, [pc, #140]	; (402b1c <_svfprintf_r+0xe8c>)
  402a8e:	6033      	str	r3, [r6, #0]
  402a90:	2c10      	cmp	r4, #16
  402a92:	dd15      	ble.n	402ac0 <_svfprintf_r+0xe30>
  402a94:	2310      	movs	r3, #16
  402a96:	6073      	str	r3, [r6, #4]
  402a98:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402a9a:	3310      	adds	r3, #16
  402a9c:	9327      	str	r3, [sp, #156]	; 0x9c
  402a9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402aa0:	3301      	adds	r3, #1
  402aa2:	2b07      	cmp	r3, #7
  402aa4:	9326      	str	r3, [sp, #152]	; 0x98
  402aa6:	dc01      	bgt.n	402aac <_svfprintf_r+0xe1c>
  402aa8:	3608      	adds	r6, #8
  402aaa:	e007      	b.n	402abc <_svfprintf_r+0xe2c>
  402aac:	4650      	mov	r0, sl
  402aae:	4659      	mov	r1, fp
  402ab0:	aa25      	add	r2, sp, #148	; 0x94
  402ab2:	f002 f83d 	bl	404b30 <__ssprint_r>
  402ab6:	2800      	cmp	r0, #0
  402ab8:	d173      	bne.n	402ba2 <_svfprintf_r+0xf12>
  402aba:	ae32      	add	r6, sp, #200	; 0xc8
  402abc:	3c10      	subs	r4, #16
  402abe:	e7e5      	b.n	402a8c <_svfprintf_r+0xdfc>
  402ac0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402ac2:	6074      	str	r4, [r6, #4]
  402ac4:	441c      	add	r4, r3
  402ac6:	9427      	str	r4, [sp, #156]	; 0x9c
  402ac8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402aca:	3301      	adds	r3, #1
  402acc:	2b07      	cmp	r3, #7
  402ace:	9326      	str	r3, [sp, #152]	; 0x98
  402ad0:	dd10      	ble.n	402af4 <_svfprintf_r+0xe64>
  402ad2:	4650      	mov	r0, sl
  402ad4:	4659      	mov	r1, fp
  402ad6:	aa25      	add	r2, sp, #148	; 0x94
  402ad8:	f002 f82a 	bl	404b30 <__ssprint_r>
  402adc:	2800      	cmp	r0, #0
  402ade:	d160      	bne.n	402ba2 <_svfprintf_r+0xf12>
  402ae0:	ae32      	add	r6, sp, #200	; 0xc8
  402ae2:	e008      	b.n	402af6 <_svfprintf_r+0xe66>
  402ae4:	2301      	movs	r3, #1
  402ae6:	6073      	str	r3, [r6, #4]
  402ae8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402aea:	9d07      	ldr	r5, [sp, #28]
  402aec:	6035      	str	r5, [r6, #0]
  402aee:	3301      	adds	r3, #1
  402af0:	9327      	str	r3, [sp, #156]	; 0x9c
  402af2:	e7e9      	b.n	402ac8 <_svfprintf_r+0xe38>
  402af4:	3608      	adds	r6, #8
  402af6:	ab21      	add	r3, sp, #132	; 0x84
  402af8:	6033      	str	r3, [r6, #0]
  402afa:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  402afc:	e6ac      	b.n	402858 <_svfprintf_r+0xbc8>
  402afe:	3608      	adds	r6, #8
  402b00:	077b      	lsls	r3, r7, #29
  402b02:	d40d      	bmi.n	402b20 <_svfprintf_r+0xe90>
  402b04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402b06:	980a      	ldr	r0, [sp, #40]	; 0x28
  402b08:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  402b0a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402b0c:	42a0      	cmp	r0, r4
  402b0e:	bfac      	ite	ge
  402b10:	182d      	addge	r5, r5, r0
  402b12:	192d      	addlt	r5, r5, r4
  402b14:	950f      	str	r5, [sp, #60]	; 0x3c
  402b16:	2b00      	cmp	r3, #0
  402b18:	d037      	beq.n	402b8a <_svfprintf_r+0xefa>
  402b1a:	e030      	b.n	402b7e <_svfprintf_r+0xeee>
  402b1c:	00405cda 	.word	0x00405cda
  402b20:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  402b22:	980a      	ldr	r0, [sp, #40]	; 0x28
  402b24:	1a2c      	subs	r4, r5, r0
  402b26:	2c00      	cmp	r4, #0
  402b28:	ddec      	ble.n	402b04 <_svfprintf_r+0xe74>
  402b2a:	4b23      	ldr	r3, [pc, #140]	; (402bb8 <_svfprintf_r+0xf28>)
  402b2c:	6033      	str	r3, [r6, #0]
  402b2e:	2c10      	cmp	r4, #16
  402b30:	dd14      	ble.n	402b5c <_svfprintf_r+0xecc>
  402b32:	2310      	movs	r3, #16
  402b34:	6073      	str	r3, [r6, #4]
  402b36:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402b38:	3310      	adds	r3, #16
  402b3a:	9327      	str	r3, [sp, #156]	; 0x9c
  402b3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b3e:	3301      	adds	r3, #1
  402b40:	2b07      	cmp	r3, #7
  402b42:	9326      	str	r3, [sp, #152]	; 0x98
  402b44:	dc01      	bgt.n	402b4a <_svfprintf_r+0xeba>
  402b46:	3608      	adds	r6, #8
  402b48:	e006      	b.n	402b58 <_svfprintf_r+0xec8>
  402b4a:	4650      	mov	r0, sl
  402b4c:	4659      	mov	r1, fp
  402b4e:	aa25      	add	r2, sp, #148	; 0x94
  402b50:	f001 ffee 	bl	404b30 <__ssprint_r>
  402b54:	bb28      	cbnz	r0, 402ba2 <_svfprintf_r+0xf12>
  402b56:	ae32      	add	r6, sp, #200	; 0xc8
  402b58:	3c10      	subs	r4, #16
  402b5a:	e7e6      	b.n	402b2a <_svfprintf_r+0xe9a>
  402b5c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402b5e:	6074      	str	r4, [r6, #4]
  402b60:	441c      	add	r4, r3
  402b62:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b64:	9427      	str	r4, [sp, #156]	; 0x9c
  402b66:	3301      	adds	r3, #1
  402b68:	2b07      	cmp	r3, #7
  402b6a:	9326      	str	r3, [sp, #152]	; 0x98
  402b6c:	ddca      	ble.n	402b04 <_svfprintf_r+0xe74>
  402b6e:	4650      	mov	r0, sl
  402b70:	4659      	mov	r1, fp
  402b72:	aa25      	add	r2, sp, #148	; 0x94
  402b74:	f001 ffdc 	bl	404b30 <__ssprint_r>
  402b78:	2800      	cmp	r0, #0
  402b7a:	d0c3      	beq.n	402b04 <_svfprintf_r+0xe74>
  402b7c:	e011      	b.n	402ba2 <_svfprintf_r+0xf12>
  402b7e:	4650      	mov	r0, sl
  402b80:	4659      	mov	r1, fp
  402b82:	aa25      	add	r2, sp, #148	; 0x94
  402b84:	f001 ffd4 	bl	404b30 <__ssprint_r>
  402b88:	b958      	cbnz	r0, 402ba2 <_svfprintf_r+0xf12>
  402b8a:	2300      	movs	r3, #0
  402b8c:	9326      	str	r3, [sp, #152]	; 0x98
  402b8e:	ae32      	add	r6, sp, #200	; 0xc8
  402b90:	f7ff b8b3 	b.w	401cfa <_svfprintf_r+0x6a>
  402b94:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402b96:	b123      	cbz	r3, 402ba2 <_svfprintf_r+0xf12>
  402b98:	4650      	mov	r0, sl
  402b9a:	4659      	mov	r1, fp
  402b9c:	aa25      	add	r2, sp, #148	; 0x94
  402b9e:	f001 ffc7 	bl	404b30 <__ssprint_r>
  402ba2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402ba6:	980f      	ldr	r0, [sp, #60]	; 0x3c
  402ba8:	f013 0f40 	tst.w	r3, #64	; 0x40
  402bac:	bf18      	it	ne
  402bae:	f04f 30ff 	movne.w	r0, #4294967295
  402bb2:	b043      	add	sp, #268	; 0x10c
  402bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bb8:	00405cca 	.word	0x00405cca

00402bbc <register_fini>:
  402bbc:	4b02      	ldr	r3, [pc, #8]	; (402bc8 <register_fini+0xc>)
  402bbe:	b113      	cbz	r3, 402bc6 <register_fini+0xa>
  402bc0:	4802      	ldr	r0, [pc, #8]	; (402bcc <register_fini+0x10>)
  402bc2:	f000 b805 	b.w	402bd0 <atexit>
  402bc6:	4770      	bx	lr
  402bc8:	00000000 	.word	0x00000000
  402bcc:	00403859 	.word	0x00403859

00402bd0 <atexit>:
  402bd0:	4601      	mov	r1, r0
  402bd2:	2000      	movs	r0, #0
  402bd4:	4602      	mov	r2, r0
  402bd6:	4603      	mov	r3, r0
  402bd8:	f002 bc18 	b.w	40540c <__register_exitproc>
  402bdc:	0000      	movs	r0, r0
	...

00402be0 <quorem>:
  402be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402be4:	6903      	ldr	r3, [r0, #16]
  402be6:	690c      	ldr	r4, [r1, #16]
  402be8:	42a3      	cmp	r3, r4
  402bea:	4680      	mov	r8, r0
  402bec:	f2c0 8081 	blt.w	402cf2 <quorem+0x112>
  402bf0:	3c01      	subs	r4, #1
  402bf2:	f101 0714 	add.w	r7, r1, #20
  402bf6:	00a2      	lsls	r2, r4, #2
  402bf8:	f100 0514 	add.w	r5, r0, #20
  402bfc:	4691      	mov	r9, r2
  402bfe:	9200      	str	r2, [sp, #0]
  402c00:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
  402c04:	442a      	add	r2, r5
  402c06:	9201      	str	r2, [sp, #4]
  402c08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
  402c0c:	3601      	adds	r6, #1
  402c0e:	fbb2 f6f6 	udiv	r6, r2, r6
  402c12:	44b9      	add	r9, r7
  402c14:	2e00      	cmp	r6, #0
  402c16:	d03a      	beq.n	402c8e <quorem+0xae>
  402c18:	f04f 0e00 	mov.w	lr, #0
  402c1c:	463a      	mov	r2, r7
  402c1e:	4628      	mov	r0, r5
  402c20:	46f3      	mov	fp, lr
  402c22:	f852 cb04 	ldr.w	ip, [r2], #4
  402c26:	6803      	ldr	r3, [r0, #0]
  402c28:	fa1f fa8c 	uxth.w	sl, ip
  402c2c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  402c30:	fb0a ea06 	mla	sl, sl, r6, lr
  402c34:	fb0c fc06 	mul.w	ip, ip, r6
  402c38:	eb0c 4c1a 	add.w	ip, ip, sl, lsr #16
  402c3c:	fa1f fa8a 	uxth.w	sl, sl
  402c40:	ebca 0a0b 	rsb	sl, sl, fp
  402c44:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
  402c48:	fa1f fc8c 	uxth.w	ip, ip
  402c4c:	fa1a fa83 	uxtah	sl, sl, r3
  402c50:	ebcc 4c13 	rsb	ip, ip, r3, lsr #16
  402c54:	eb0c 4c2a 	add.w	ip, ip, sl, asr #16
  402c58:	fa1f fa8a 	uxth.w	sl, sl
  402c5c:	ea4a 4a0c 	orr.w	sl, sl, ip, lsl #16
  402c60:	454a      	cmp	r2, r9
  402c62:	ea4f 4b2c 	mov.w	fp, ip, asr #16
  402c66:	f840 ab04 	str.w	sl, [r0], #4
  402c6a:	d9da      	bls.n	402c22 <quorem+0x42>
  402c6c:	9a00      	ldr	r2, [sp, #0]
  402c6e:	58ab      	ldr	r3, [r5, r2]
  402c70:	b96b      	cbnz	r3, 402c8e <quorem+0xae>
  402c72:	9a01      	ldr	r2, [sp, #4]
  402c74:	1f13      	subs	r3, r2, #4
  402c76:	42ab      	cmp	r3, r5
  402c78:	461a      	mov	r2, r3
  402c7a:	d802      	bhi.n	402c82 <quorem+0xa2>
  402c7c:	f8c8 4010 	str.w	r4, [r8, #16]
  402c80:	e005      	b.n	402c8e <quorem+0xae>
  402c82:	6812      	ldr	r2, [r2, #0]
  402c84:	3b04      	subs	r3, #4
  402c86:	2a00      	cmp	r2, #0
  402c88:	d1f8      	bne.n	402c7c <quorem+0x9c>
  402c8a:	3c01      	subs	r4, #1
  402c8c:	e7f3      	b.n	402c76 <quorem+0x96>
  402c8e:	4640      	mov	r0, r8
  402c90:	f001 fbab 	bl	4043ea <__mcmp>
  402c94:	2800      	cmp	r0, #0
  402c96:	db2a      	blt.n	402cee <quorem+0x10e>
  402c98:	3601      	adds	r6, #1
  402c9a:	462b      	mov	r3, r5
  402c9c:	2000      	movs	r0, #0
  402c9e:	f857 cb04 	ldr.w	ip, [r7], #4
  402ca2:	681a      	ldr	r2, [r3, #0]
  402ca4:	fa1f f18c 	uxth.w	r1, ip
  402ca8:	1a41      	subs	r1, r0, r1
  402caa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  402cae:	fa11 f182 	uxtah	r1, r1, r2
  402cb2:	ebcc 4212 	rsb	r2, ip, r2, lsr #16
  402cb6:	eb02 4221 	add.w	r2, r2, r1, asr #16
  402cba:	b289      	uxth	r1, r1
  402cbc:	1410      	asrs	r0, r2, #16
  402cbe:	454f      	cmp	r7, r9
  402cc0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  402cc4:	f843 2b04 	str.w	r2, [r3], #4
  402cc8:	d9e9      	bls.n	402c9e <quorem+0xbe>
  402cca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
  402cce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
  402cd2:	b962      	cbnz	r2, 402cee <quorem+0x10e>
  402cd4:	3b04      	subs	r3, #4
  402cd6:	42ab      	cmp	r3, r5
  402cd8:	461a      	mov	r2, r3
  402cda:	d802      	bhi.n	402ce2 <quorem+0x102>
  402cdc:	f8c8 4010 	str.w	r4, [r8, #16]
  402ce0:	e005      	b.n	402cee <quorem+0x10e>
  402ce2:	6812      	ldr	r2, [r2, #0]
  402ce4:	3b04      	subs	r3, #4
  402ce6:	2a00      	cmp	r2, #0
  402ce8:	d1f8      	bne.n	402cdc <quorem+0xfc>
  402cea:	3c01      	subs	r4, #1
  402cec:	e7f3      	b.n	402cd6 <quorem+0xf6>
  402cee:	4630      	mov	r0, r6
  402cf0:	e000      	b.n	402cf4 <quorem+0x114>
  402cf2:	2000      	movs	r0, #0
  402cf4:	b003      	add	sp, #12
  402cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00402cfa <_dtoa_r>:
  402cfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402cfe:	6c01      	ldr	r1, [r0, #64]	; 0x40
  402d00:	b09b      	sub	sp, #108	; 0x6c
  402d02:	4682      	mov	sl, r0
  402d04:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402d06:	e9cd 2304 	strd	r2, r3, [sp, #16]
  402d0a:	b151      	cbz	r1, 402d22 <_dtoa_r+0x28>
  402d0c:	6c43      	ldr	r3, [r0, #68]	; 0x44
  402d0e:	604b      	str	r3, [r1, #4]
  402d10:	2201      	movs	r2, #1
  402d12:	fa02 f303 	lsl.w	r3, r2, r3
  402d16:	608b      	str	r3, [r1, #8]
  402d18:	f001 f962 	bl	403fe0 <_Bfree>
  402d1c:	2300      	movs	r3, #0
  402d1e:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
  402d22:	9805      	ldr	r0, [sp, #20]
  402d24:	2800      	cmp	r0, #0
  402d26:	da05      	bge.n	402d34 <_dtoa_r+0x3a>
  402d28:	2301      	movs	r3, #1
  402d2a:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
  402d2e:	6023      	str	r3, [r4, #0]
  402d30:	9105      	str	r1, [sp, #20]
  402d32:	e001      	b.n	402d38 <_dtoa_r+0x3e>
  402d34:	2300      	movs	r3, #0
  402d36:	6023      	str	r3, [r4, #0]
  402d38:	9f05      	ldr	r7, [sp, #20]
  402d3a:	4a9b      	ldr	r2, [pc, #620]	; (402fa8 <_dtoa_r+0x2ae>)
  402d3c:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
  402d40:	0d1b      	lsrs	r3, r3, #20
  402d42:	051b      	lsls	r3, r3, #20
  402d44:	4293      	cmp	r3, r2
  402d46:	d11d      	bne.n	402d84 <_dtoa_r+0x8a>
  402d48:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402d4a:	f242 730f 	movw	r3, #9999	; 0x270f
  402d4e:	6013      	str	r3, [r2, #0]
  402d50:	9b04      	ldr	r3, [sp, #16]
  402d52:	b943      	cbnz	r3, 402d66 <_dtoa_r+0x6c>
  402d54:	4b95      	ldr	r3, [pc, #596]	; (402fac <_dtoa_r+0x2b2>)
  402d56:	4a96      	ldr	r2, [pc, #600]	; (402fb0 <_dtoa_r+0x2b6>)
  402d58:	f3c7 0013 	ubfx	r0, r7, #0, #20
  402d5c:	2800      	cmp	r0, #0
  402d5e:	bf0c      	ite	eq
  402d60:	4610      	moveq	r0, r2
  402d62:	4618      	movne	r0, r3
  402d64:	e000      	b.n	402d68 <_dtoa_r+0x6e>
  402d66:	4891      	ldr	r0, [pc, #580]	; (402fac <_dtoa_r+0x2b2>)
  402d68:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  402d6a:	2f00      	cmp	r7, #0
  402d6c:	f000 856d 	beq.w	40384a <_dtoa_r+0xb50>
  402d70:	78c3      	ldrb	r3, [r0, #3]
  402d72:	b113      	cbz	r3, 402d7a <_dtoa_r+0x80>
  402d74:	f100 0308 	add.w	r3, r0, #8
  402d78:	e000      	b.n	402d7c <_dtoa_r+0x82>
  402d7a:	1cc3      	adds	r3, r0, #3
  402d7c:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  402d7e:	603b      	str	r3, [r7, #0]
  402d80:	f000 bd63 	b.w	40384a <_dtoa_r+0xb50>
  402d84:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  402d88:	2200      	movs	r2, #0
  402d8a:	4620      	mov	r0, r4
  402d8c:	4629      	mov	r1, r5
  402d8e:	2300      	movs	r3, #0
  402d90:	f002 fc0c 	bl	4055ac <__aeabi_dcmpeq>
  402d94:	4680      	mov	r8, r0
  402d96:	b158      	cbz	r0, 402db0 <_dtoa_r+0xb6>
  402d98:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402d9a:	2301      	movs	r3, #1
  402d9c:	603b      	str	r3, [r7, #0]
  402d9e:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  402da0:	2f00      	cmp	r7, #0
  402da2:	f000 854f 	beq.w	403844 <_dtoa_r+0xb4a>
  402da6:	4883      	ldr	r0, [pc, #524]	; (402fb4 <_dtoa_r+0x2ba>)
  402da8:	6038      	str	r0, [r7, #0]
  402daa:	3801      	subs	r0, #1
  402dac:	f000 bd4d 	b.w	40384a <_dtoa_r+0xb50>
  402db0:	ab19      	add	r3, sp, #100	; 0x64
  402db2:	9300      	str	r3, [sp, #0]
  402db4:	ab18      	add	r3, sp, #96	; 0x60
  402db6:	9301      	str	r3, [sp, #4]
  402db8:	4650      	mov	r0, sl
  402dba:	4622      	mov	r2, r4
  402dbc:	462b      	mov	r3, r5
  402dbe:	f001 fc04 	bl	4045ca <__d2b>
  402dc2:	f3c7 560a 	ubfx	r6, r7, #20, #11
  402dc6:	4683      	mov	fp, r0
  402dc8:	b15e      	cbz	r6, 402de2 <_dtoa_r+0xe8>
  402dca:	f3c5 0313 	ubfx	r3, r5, #0, #20
  402dce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  402dd2:	4620      	mov	r0, r4
  402dd4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  402dd8:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  402ddc:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  402de0:	e01c      	b.n	402e1c <_dtoa_r+0x122>
  402de2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  402de4:	9e18      	ldr	r6, [sp, #96]	; 0x60
  402de6:	441e      	add	r6, r3
  402de8:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  402dec:	429e      	cmp	r6, r3
  402dee:	db09      	blt.n	402e04 <_dtoa_r+0x10a>
  402df0:	9904      	ldr	r1, [sp, #16]
  402df2:	331f      	adds	r3, #31
  402df4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  402df8:	1b9b      	subs	r3, r3, r6
  402dfa:	fa21 f000 	lsr.w	r0, r1, r0
  402dfe:	409f      	lsls	r7, r3
  402e00:	4338      	orrs	r0, r7
  402e02:	e004      	b.n	402e0e <_dtoa_r+0x114>
  402e04:	486c      	ldr	r0, [pc, #432]	; (402fb8 <_dtoa_r+0x2be>)
  402e06:	9a04      	ldr	r2, [sp, #16]
  402e08:	1b80      	subs	r0, r0, r6
  402e0a:	fa02 f000 	lsl.w	r0, r2, r0
  402e0e:	f7fe fc09 	bl	401624 <__aeabi_ui2d>
  402e12:	2701      	movs	r7, #1
  402e14:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  402e18:	3e01      	subs	r6, #1
  402e1a:	9715      	str	r7, [sp, #84]	; 0x54
  402e1c:	2200      	movs	r2, #0
  402e1e:	4b67      	ldr	r3, [pc, #412]	; (402fbc <_dtoa_r+0x2c2>)
  402e20:	f7fe fac2 	bl	4013a8 <__aeabi_dsub>
  402e24:	a35a      	add	r3, pc, #360	; (adr r3, 402f90 <_dtoa_r+0x296>)
  402e26:	e9d3 2300 	ldrd	r2, r3, [r3]
  402e2a:	f7fe fc71 	bl	401710 <__aeabi_dmul>
  402e2e:	a35a      	add	r3, pc, #360	; (adr r3, 402f98 <_dtoa_r+0x29e>)
  402e30:	e9d3 2300 	ldrd	r2, r3, [r3]
  402e34:	f7fe faba 	bl	4013ac <__adddf3>
  402e38:	4604      	mov	r4, r0
  402e3a:	4630      	mov	r0, r6
  402e3c:	460d      	mov	r5, r1
  402e3e:	f7fe fc01 	bl	401644 <__aeabi_i2d>
  402e42:	a357      	add	r3, pc, #348	; (adr r3, 402fa0 <_dtoa_r+0x2a6>)
  402e44:	e9d3 2300 	ldrd	r2, r3, [r3]
  402e48:	f7fe fc62 	bl	401710 <__aeabi_dmul>
  402e4c:	4602      	mov	r2, r0
  402e4e:	460b      	mov	r3, r1
  402e50:	4620      	mov	r0, r4
  402e52:	4629      	mov	r1, r5
  402e54:	f7fe faaa 	bl	4013ac <__adddf3>
  402e58:	4604      	mov	r4, r0
  402e5a:	460d      	mov	r5, r1
  402e5c:	f002 fbd8 	bl	405610 <__aeabi_d2iz>
  402e60:	4629      	mov	r1, r5
  402e62:	4681      	mov	r9, r0
  402e64:	2200      	movs	r2, #0
  402e66:	4620      	mov	r0, r4
  402e68:	2300      	movs	r3, #0
  402e6a:	f002 fba9 	bl	4055c0 <__aeabi_dcmplt>
  402e6e:	b158      	cbz	r0, 402e88 <_dtoa_r+0x18e>
  402e70:	4648      	mov	r0, r9
  402e72:	f7fe fbe7 	bl	401644 <__aeabi_i2d>
  402e76:	4602      	mov	r2, r0
  402e78:	460b      	mov	r3, r1
  402e7a:	4620      	mov	r0, r4
  402e7c:	4629      	mov	r1, r5
  402e7e:	f002 fb95 	bl	4055ac <__aeabi_dcmpeq>
  402e82:	b908      	cbnz	r0, 402e88 <_dtoa_r+0x18e>
  402e84:	f109 39ff 	add.w	r9, r9, #4294967295
  402e88:	f1b9 0f16 	cmp.w	r9, #22
  402e8c:	d80d      	bhi.n	402eaa <_dtoa_r+0x1b0>
  402e8e:	4b4c      	ldr	r3, [pc, #304]	; (402fc0 <_dtoa_r+0x2c6>)
  402e90:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  402e94:	e9d3 0100 	ldrd	r0, r1, [r3]
  402e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  402e9c:	f002 fbae 	bl	4055fc <__aeabi_dcmpgt>
  402ea0:	b130      	cbz	r0, 402eb0 <_dtoa_r+0x1b6>
  402ea2:	f109 39ff 	add.w	r9, r9, #4294967295
  402ea6:	2700      	movs	r7, #0
  402ea8:	e000      	b.n	402eac <_dtoa_r+0x1b2>
  402eaa:	2701      	movs	r7, #1
  402eac:	9714      	str	r7, [sp, #80]	; 0x50
  402eae:	e000      	b.n	402eb2 <_dtoa_r+0x1b8>
  402eb0:	9014      	str	r0, [sp, #80]	; 0x50
  402eb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402eb4:	1b9e      	subs	r6, r3, r6
  402eb6:	3e01      	subs	r6, #1
  402eb8:	960a      	str	r6, [sp, #40]	; 0x28
  402eba:	d504      	bpl.n	402ec6 <_dtoa_r+0x1cc>
  402ebc:	4277      	negs	r7, r6
  402ebe:	9708      	str	r7, [sp, #32]
  402ec0:	2700      	movs	r7, #0
  402ec2:	970a      	str	r7, [sp, #40]	; 0x28
  402ec4:	e001      	b.n	402eca <_dtoa_r+0x1d0>
  402ec6:	2700      	movs	r7, #0
  402ec8:	9708      	str	r7, [sp, #32]
  402eca:	f1b9 0f00 	cmp.w	r9, #0
  402ece:	db07      	blt.n	402ee0 <_dtoa_r+0x1e6>
  402ed0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  402ed2:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  402ed6:	444f      	add	r7, r9
  402ed8:	970a      	str	r7, [sp, #40]	; 0x28
  402eda:	2700      	movs	r7, #0
  402edc:	970e      	str	r7, [sp, #56]	; 0x38
  402ede:	e008      	b.n	402ef2 <_dtoa_r+0x1f8>
  402ee0:	9f08      	ldr	r7, [sp, #32]
  402ee2:	ebc9 0707 	rsb	r7, r9, r7
  402ee6:	9708      	str	r7, [sp, #32]
  402ee8:	f1c9 0700 	rsb	r7, r9, #0
  402eec:	970e      	str	r7, [sp, #56]	; 0x38
  402eee:	2700      	movs	r7, #0
  402ef0:	9711      	str	r7, [sp, #68]	; 0x44
  402ef2:	9f24      	ldr	r7, [sp, #144]	; 0x90
  402ef4:	2f09      	cmp	r7, #9
  402ef6:	d828      	bhi.n	402f4a <_dtoa_r+0x250>
  402ef8:	2f05      	cmp	r7, #5
  402efa:	bfc4      	itt	gt
  402efc:	3f04      	subgt	r7, #4
  402efe:	9724      	strgt	r7, [sp, #144]	; 0x90
  402f00:	9f24      	ldr	r7, [sp, #144]	; 0x90
  402f02:	f1a7 0302 	sub.w	r3, r7, #2
  402f06:	bfcc      	ite	gt
  402f08:	2400      	movgt	r4, #0
  402f0a:	2401      	movle	r4, #1
  402f0c:	2b03      	cmp	r3, #3
  402f0e:	d821      	bhi.n	402f54 <_dtoa_r+0x25a>
  402f10:	e8df f003 	tbb	[pc, r3]
  402f14:	04020f06 	.word	0x04020f06
  402f18:	2701      	movs	r7, #1
  402f1a:	e002      	b.n	402f22 <_dtoa_r+0x228>
  402f1c:	2701      	movs	r7, #1
  402f1e:	e009      	b.n	402f34 <_dtoa_r+0x23a>
  402f20:	2700      	movs	r7, #0
  402f22:	970f      	str	r7, [sp, #60]	; 0x3c
  402f24:	9f25      	ldr	r7, [sp, #148]	; 0x94
  402f26:	2f00      	cmp	r7, #0
  402f28:	dd1e      	ble.n	402f68 <_dtoa_r+0x26e>
  402f2a:	970b      	str	r7, [sp, #44]	; 0x2c
  402f2c:	9707      	str	r7, [sp, #28]
  402f2e:	463b      	mov	r3, r7
  402f30:	e01f      	b.n	402f72 <_dtoa_r+0x278>
  402f32:	2700      	movs	r7, #0
  402f34:	970f      	str	r7, [sp, #60]	; 0x3c
  402f36:	9f25      	ldr	r7, [sp, #148]	; 0x94
  402f38:	444f      	add	r7, r9
  402f3a:	970b      	str	r7, [sp, #44]	; 0x2c
  402f3c:	3701      	adds	r7, #1
  402f3e:	463b      	mov	r3, r7
  402f40:	9707      	str	r7, [sp, #28]
  402f42:	2b01      	cmp	r3, #1
  402f44:	bfb8      	it	lt
  402f46:	2301      	movlt	r3, #1
  402f48:	e013      	b.n	402f72 <_dtoa_r+0x278>
  402f4a:	2401      	movs	r4, #1
  402f4c:	2700      	movs	r7, #0
  402f4e:	9724      	str	r7, [sp, #144]	; 0x90
  402f50:	940f      	str	r4, [sp, #60]	; 0x3c
  402f52:	e001      	b.n	402f58 <_dtoa_r+0x25e>
  402f54:	2701      	movs	r7, #1
  402f56:	970f      	str	r7, [sp, #60]	; 0x3c
  402f58:	f04f 37ff 	mov.w	r7, #4294967295
  402f5c:	970b      	str	r7, [sp, #44]	; 0x2c
  402f5e:	9707      	str	r7, [sp, #28]
  402f60:	2700      	movs	r7, #0
  402f62:	2312      	movs	r3, #18
  402f64:	9725      	str	r7, [sp, #148]	; 0x94
  402f66:	e004      	b.n	402f72 <_dtoa_r+0x278>
  402f68:	2701      	movs	r7, #1
  402f6a:	970b      	str	r7, [sp, #44]	; 0x2c
  402f6c:	9707      	str	r7, [sp, #28]
  402f6e:	463b      	mov	r3, r7
  402f70:	9725      	str	r7, [sp, #148]	; 0x94
  402f72:	2200      	movs	r2, #0
  402f74:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
  402f78:	2204      	movs	r2, #4
  402f7a:	f102 0114 	add.w	r1, r2, #20
  402f7e:	4299      	cmp	r1, r3
  402f80:	d820      	bhi.n	402fc4 <_dtoa_r+0x2ca>
  402f82:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
  402f86:	3101      	adds	r1, #1
  402f88:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
  402f8c:	0052      	lsls	r2, r2, #1
  402f8e:	e7f4      	b.n	402f7a <_dtoa_r+0x280>
  402f90:	636f4361 	.word	0x636f4361
  402f94:	3fd287a7 	.word	0x3fd287a7
  402f98:	8b60c8b3 	.word	0x8b60c8b3
  402f9c:	3fc68a28 	.word	0x3fc68a28
  402fa0:	509f79fb 	.word	0x509f79fb
  402fa4:	3fd34413 	.word	0x3fd34413
  402fa8:	7ff00000 	.word	0x7ff00000
  402fac:	00405d27 	.word	0x00405d27
  402fb0:	00405d1e 	.word	0x00405d1e
  402fb4:	00405d1d 	.word	0x00405d1d
  402fb8:	fffffbee 	.word	0xfffffbee
  402fbc:	3ff80000 	.word	0x3ff80000
  402fc0:	00405d48 	.word	0x00405d48
  402fc4:	4650      	mov	r0, sl
  402fc6:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
  402fca:	f000 ffe3 	bl	403f94 <_Balloc>
  402fce:	9f07      	ldr	r7, [sp, #28]
  402fd0:	9009      	str	r0, [sp, #36]	; 0x24
  402fd2:	2f0e      	cmp	r7, #14
  402fd4:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
  402fd8:	f200 816a 	bhi.w	4032b0 <_dtoa_r+0x5b6>
  402fdc:	2c00      	cmp	r4, #0
  402fde:	f000 8167 	beq.w	4032b0 <_dtoa_r+0x5b6>
  402fe2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  402fe6:	f1b9 0f00 	cmp.w	r9, #0
  402fea:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  402fee:	dd31      	ble.n	403054 <_dtoa_r+0x35a>
  402ff0:	4a80      	ldr	r2, [pc, #512]	; (4031f4 <_dtoa_r+0x4fa>)
  402ff2:	f009 030f 	and.w	r3, r9, #15
  402ff6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402ffa:	e9d3 0100 	ldrd	r0, r1, [r3]
  402ffe:	ea4f 1429 	mov.w	r4, r9, asr #4
  403002:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  403006:	06e0      	lsls	r0, r4, #27
  403008:	d50c      	bpl.n	403024 <_dtoa_r+0x32a>
  40300a:	4b7b      	ldr	r3, [pc, #492]	; (4031f8 <_dtoa_r+0x4fe>)
  40300c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  403010:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403014:	f7fe fca6 	bl	401964 <__aeabi_ddiv>
  403018:	f004 040f 	and.w	r4, r4, #15
  40301c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403020:	2703      	movs	r7, #3
  403022:	e000      	b.n	403026 <_dtoa_r+0x32c>
  403024:	2702      	movs	r7, #2
  403026:	4d74      	ldr	r5, [pc, #464]	; (4031f8 <_dtoa_r+0x4fe>)
  403028:	b16c      	cbz	r4, 403046 <_dtoa_r+0x34c>
  40302a:	07e1      	lsls	r1, r4, #31
  40302c:	d508      	bpl.n	403040 <_dtoa_r+0x346>
  40302e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  403032:	e9d5 2300 	ldrd	r2, r3, [r5]
  403036:	f7fe fb6b 	bl	401710 <__aeabi_dmul>
  40303a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40303e:	3701      	adds	r7, #1
  403040:	1064      	asrs	r4, r4, #1
  403042:	3508      	adds	r5, #8
  403044:	e7f0      	b.n	403028 <_dtoa_r+0x32e>
  403046:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40304a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40304e:	f7fe fc89 	bl	401964 <__aeabi_ddiv>
  403052:	e01b      	b.n	40308c <_dtoa_r+0x392>
  403054:	f1c9 0400 	rsb	r4, r9, #0
  403058:	b1dc      	cbz	r4, 403092 <_dtoa_r+0x398>
  40305a:	4b66      	ldr	r3, [pc, #408]	; (4031f4 <_dtoa_r+0x4fa>)
  40305c:	4d66      	ldr	r5, [pc, #408]	; (4031f8 <_dtoa_r+0x4fe>)
  40305e:	f004 020f 	and.w	r2, r4, #15
  403062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403066:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40306a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40306e:	f7fe fb4f 	bl	401710 <__aeabi_dmul>
  403072:	1124      	asrs	r4, r4, #4
  403074:	2702      	movs	r7, #2
  403076:	b14c      	cbz	r4, 40308c <_dtoa_r+0x392>
  403078:	07e2      	lsls	r2, r4, #31
  40307a:	d504      	bpl.n	403086 <_dtoa_r+0x38c>
  40307c:	e9d5 2300 	ldrd	r2, r3, [r5]
  403080:	3701      	adds	r7, #1
  403082:	f7fe fb45 	bl	401710 <__aeabi_dmul>
  403086:	1064      	asrs	r4, r4, #1
  403088:	3508      	adds	r5, #8
  40308a:	e7f4      	b.n	403076 <_dtoa_r+0x37c>
  40308c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403090:	e000      	b.n	403094 <_dtoa_r+0x39a>
  403092:	2702      	movs	r7, #2
  403094:	9914      	ldr	r1, [sp, #80]	; 0x50
  403096:	b1e9      	cbz	r1, 4030d4 <_dtoa_r+0x3da>
  403098:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  40309c:	2200      	movs	r2, #0
  40309e:	4620      	mov	r0, r4
  4030a0:	4629      	mov	r1, r5
  4030a2:	4b56      	ldr	r3, [pc, #344]	; (4031fc <_dtoa_r+0x502>)
  4030a4:	f002 fa8c 	bl	4055c0 <__aeabi_dcmplt>
  4030a8:	b1c8      	cbz	r0, 4030de <_dtoa_r+0x3e4>
  4030aa:	9a07      	ldr	r2, [sp, #28]
  4030ac:	b1e2      	cbz	r2, 4030e8 <_dtoa_r+0x3ee>
  4030ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4030b0:	2b00      	cmp	r3, #0
  4030b2:	f340 80f9 	ble.w	4032a8 <_dtoa_r+0x5ae>
  4030b6:	f109 30ff 	add.w	r0, r9, #4294967295
  4030ba:	9010      	str	r0, [sp, #64]	; 0x40
  4030bc:	4629      	mov	r1, r5
  4030be:	4620      	mov	r0, r4
  4030c0:	2200      	movs	r2, #0
  4030c2:	4b4f      	ldr	r3, [pc, #316]	; (403200 <_dtoa_r+0x506>)
  4030c4:	f7fe fb24 	bl	401710 <__aeabi_dmul>
  4030c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4030cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4030ce:	910c      	str	r1, [sp, #48]	; 0x30
  4030d0:	3701      	adds	r7, #1
  4030d2:	e00d      	b.n	4030f0 <_dtoa_r+0x3f6>
  4030d4:	9a07      	ldr	r2, [sp, #28]
  4030d6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  4030da:	920c      	str	r2, [sp, #48]	; 0x30
  4030dc:	e008      	b.n	4030f0 <_dtoa_r+0x3f6>
  4030de:	9b07      	ldr	r3, [sp, #28]
  4030e0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  4030e4:	930c      	str	r3, [sp, #48]	; 0x30
  4030e6:	e003      	b.n	4030f0 <_dtoa_r+0x3f6>
  4030e8:	9807      	ldr	r0, [sp, #28]
  4030ea:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  4030ee:	900c      	str	r0, [sp, #48]	; 0x30
  4030f0:	4638      	mov	r0, r7
  4030f2:	f7fe faa7 	bl	401644 <__aeabi_i2d>
  4030f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4030fa:	f7fe fb09 	bl	401710 <__aeabi_dmul>
  4030fe:	2200      	movs	r2, #0
  403100:	4b40      	ldr	r3, [pc, #256]	; (403204 <_dtoa_r+0x50a>)
  403102:	f7fe f953 	bl	4013ac <__adddf3>
  403106:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403108:	4604      	mov	r4, r0
  40310a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  40310e:	b9cf      	cbnz	r7, 403144 <_dtoa_r+0x44a>
  403110:	2200      	movs	r2, #0
  403112:	4b3d      	ldr	r3, [pc, #244]	; (403208 <_dtoa_r+0x50e>)
  403114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403118:	f7fe f946 	bl	4013a8 <__aeabi_dsub>
  40311c:	4622      	mov	r2, r4
  40311e:	462b      	mov	r3, r5
  403120:	4606      	mov	r6, r0
  403122:	460f      	mov	r7, r1
  403124:	f002 fa6a 	bl	4055fc <__aeabi_dcmpgt>
  403128:	2800      	cmp	r0, #0
  40312a:	f040 8252 	bne.w	4035d2 <_dtoa_r+0x8d8>
  40312e:	4622      	mov	r2, r4
  403130:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  403134:	4630      	mov	r0, r6
  403136:	4639      	mov	r1, r7
  403138:	f002 fa42 	bl	4055c0 <__aeabi_dcmplt>
  40313c:	2800      	cmp	r0, #0
  40313e:	f040 823e 	bne.w	4035be <_dtoa_r+0x8c4>
  403142:	e0b1      	b.n	4032a8 <_dtoa_r+0x5ae>
  403144:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403146:	4b2b      	ldr	r3, [pc, #172]	; (4031f4 <_dtoa_r+0x4fa>)
  403148:	1e7a      	subs	r2, r7, #1
  40314a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40314c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403150:	2f00      	cmp	r7, #0
  403152:	d05d      	beq.n	403210 <_dtoa_r+0x516>
  403154:	e9d3 2300 	ldrd	r2, r3, [r3]
  403158:	2000      	movs	r0, #0
  40315a:	492c      	ldr	r1, [pc, #176]	; (40320c <_dtoa_r+0x512>)
  40315c:	f7fe fc02 	bl	401964 <__aeabi_ddiv>
  403160:	4622      	mov	r2, r4
  403162:	462b      	mov	r3, r5
  403164:	f7fe f920 	bl	4013a8 <__aeabi_dsub>
  403168:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  40316c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  403170:	4604      	mov	r4, r0
  403172:	460d      	mov	r5, r1
  403174:	4639      	mov	r1, r7
  403176:	4630      	mov	r0, r6
  403178:	f002 fa4a 	bl	405610 <__aeabi_d2iz>
  40317c:	9002      	str	r0, [sp, #8]
  40317e:	f7fe fa61 	bl	401644 <__aeabi_i2d>
  403182:	4602      	mov	r2, r0
  403184:	460b      	mov	r3, r1
  403186:	4630      	mov	r0, r6
  403188:	4639      	mov	r1, r7
  40318a:	f7fe f90d 	bl	4013a8 <__aeabi_dsub>
  40318e:	f8dd c008 	ldr.w	ip, [sp, #8]
  403192:	f10c 0330 	add.w	r3, ip, #48	; 0x30
  403196:	f808 3b01 	strb.w	r3, [r8], #1
  40319a:	4622      	mov	r2, r4
  40319c:	462b      	mov	r3, r5
  40319e:	4606      	mov	r6, r0
  4031a0:	460f      	mov	r7, r1
  4031a2:	f002 fa0d 	bl	4055c0 <__aeabi_dcmplt>
  4031a6:	2800      	cmp	r0, #0
  4031a8:	f040 833a 	bne.w	403820 <_dtoa_r+0xb26>
  4031ac:	4632      	mov	r2, r6
  4031ae:	463b      	mov	r3, r7
  4031b0:	2000      	movs	r0, #0
  4031b2:	4912      	ldr	r1, [pc, #72]	; (4031fc <_dtoa_r+0x502>)
  4031b4:	f7fe f8f8 	bl	4013a8 <__aeabi_dsub>
  4031b8:	4622      	mov	r2, r4
  4031ba:	462b      	mov	r3, r5
  4031bc:	f002 fa00 	bl	4055c0 <__aeabi_dcmplt>
  4031c0:	2800      	cmp	r0, #0
  4031c2:	f040 80d4 	bne.w	40336e <_dtoa_r+0x674>
  4031c6:	9809      	ldr	r0, [sp, #36]	; 0x24
  4031c8:	990c      	ldr	r1, [sp, #48]	; 0x30
  4031ca:	ebc0 0308 	rsb	r3, r0, r8
  4031ce:	428b      	cmp	r3, r1
  4031d0:	da6a      	bge.n	4032a8 <_dtoa_r+0x5ae>
  4031d2:	4620      	mov	r0, r4
  4031d4:	4629      	mov	r1, r5
  4031d6:	2200      	movs	r2, #0
  4031d8:	4b09      	ldr	r3, [pc, #36]	; (403200 <_dtoa_r+0x506>)
  4031da:	f7fe fa99 	bl	401710 <__aeabi_dmul>
  4031de:	2200      	movs	r2, #0
  4031e0:	4604      	mov	r4, r0
  4031e2:	460d      	mov	r5, r1
  4031e4:	4630      	mov	r0, r6
  4031e6:	4639      	mov	r1, r7
  4031e8:	4b05      	ldr	r3, [pc, #20]	; (403200 <_dtoa_r+0x506>)
  4031ea:	f7fe fa91 	bl	401710 <__aeabi_dmul>
  4031ee:	4606      	mov	r6, r0
  4031f0:	460f      	mov	r7, r1
  4031f2:	e7bf      	b.n	403174 <_dtoa_r+0x47a>
  4031f4:	00405d48 	.word	0x00405d48
  4031f8:	00405e38 	.word	0x00405e38
  4031fc:	3ff00000 	.word	0x3ff00000
  403200:	40240000 	.word	0x40240000
  403204:	401c0000 	.word	0x401c0000
  403208:	40140000 	.word	0x40140000
  40320c:	3fe00000 	.word	0x3fe00000
  403210:	4622      	mov	r2, r4
  403212:	e9d3 0100 	ldrd	r0, r1, [r3]
  403216:	462b      	mov	r3, r5
  403218:	f7fe fa7a 	bl	401710 <__aeabi_dmul>
  40321c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  403220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403222:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403224:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  403228:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  40322c:	4490      	add	r8, r2
  40322e:	4639      	mov	r1, r7
  403230:	4630      	mov	r0, r6
  403232:	f002 f9ed 	bl	405610 <__aeabi_d2iz>
  403236:	4605      	mov	r5, r0
  403238:	f7fe fa04 	bl	401644 <__aeabi_i2d>
  40323c:	3530      	adds	r5, #48	; 0x30
  40323e:	4602      	mov	r2, r0
  403240:	460b      	mov	r3, r1
  403242:	4630      	mov	r0, r6
  403244:	4639      	mov	r1, r7
  403246:	f7fe f8af 	bl	4013a8 <__aeabi_dsub>
  40324a:	f804 5b01 	strb.w	r5, [r4], #1
  40324e:	4544      	cmp	r4, r8
  403250:	4606      	mov	r6, r0
  403252:	460f      	mov	r7, r1
  403254:	d121      	bne.n	40329a <_dtoa_r+0x5a0>
  403256:	2200      	movs	r2, #0
  403258:	4b87      	ldr	r3, [pc, #540]	; (403478 <_dtoa_r+0x77e>)
  40325a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40325e:	f7fe f8a5 	bl	4013ac <__adddf3>
  403262:	4602      	mov	r2, r0
  403264:	460b      	mov	r3, r1
  403266:	4630      	mov	r0, r6
  403268:	4639      	mov	r1, r7
  40326a:	f002 f9c7 	bl	4055fc <__aeabi_dcmpgt>
  40326e:	2800      	cmp	r0, #0
  403270:	d17d      	bne.n	40336e <_dtoa_r+0x674>
  403272:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  403276:	2000      	movs	r0, #0
  403278:	497f      	ldr	r1, [pc, #508]	; (403478 <_dtoa_r+0x77e>)
  40327a:	f7fe f895 	bl	4013a8 <__aeabi_dsub>
  40327e:	4602      	mov	r2, r0
  403280:	460b      	mov	r3, r1
  403282:	4630      	mov	r0, r6
  403284:	4639      	mov	r1, r7
  403286:	f002 f99b 	bl	4055c0 <__aeabi_dcmplt>
  40328a:	b168      	cbz	r0, 4032a8 <_dtoa_r+0x5ae>
  40328c:	46a0      	mov	r8, r4
  40328e:	3c01      	subs	r4, #1
  403290:	f818 3c01 	ldrb.w	r3, [r8, #-1]
  403294:	2b30      	cmp	r3, #48	; 0x30
  403296:	d0f9      	beq.n	40328c <_dtoa_r+0x592>
  403298:	e2c2      	b.n	403820 <_dtoa_r+0xb26>
  40329a:	2200      	movs	r2, #0
  40329c:	4b77      	ldr	r3, [pc, #476]	; (40347c <_dtoa_r+0x782>)
  40329e:	f7fe fa37 	bl	401710 <__aeabi_dmul>
  4032a2:	4606      	mov	r6, r0
  4032a4:	460f      	mov	r7, r1
  4032a6:	e7c2      	b.n	40322e <_dtoa_r+0x534>
  4032a8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4032ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4032b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4032b2:	2b00      	cmp	r3, #0
  4032b4:	db7c      	blt.n	4033b0 <_dtoa_r+0x6b6>
  4032b6:	f1b9 0f0e 	cmp.w	r9, #14
  4032ba:	dc79      	bgt.n	4033b0 <_dtoa_r+0x6b6>
  4032bc:	4b70      	ldr	r3, [pc, #448]	; (403480 <_dtoa_r+0x786>)
  4032be:	9f25      	ldr	r7, [sp, #148]	; 0x94
  4032c0:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  4032c4:	2f00      	cmp	r7, #0
  4032c6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4032ca:	da14      	bge.n	4032f6 <_dtoa_r+0x5fc>
  4032cc:	9f07      	ldr	r7, [sp, #28]
  4032ce:	2f00      	cmp	r7, #0
  4032d0:	dc11      	bgt.n	4032f6 <_dtoa_r+0x5fc>
  4032d2:	f040 8176 	bne.w	4035c2 <_dtoa_r+0x8c8>
  4032d6:	4620      	mov	r0, r4
  4032d8:	4629      	mov	r1, r5
  4032da:	2200      	movs	r2, #0
  4032dc:	4b69      	ldr	r3, [pc, #420]	; (403484 <_dtoa_r+0x78a>)
  4032de:	f7fe fa17 	bl	401710 <__aeabi_dmul>
  4032e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4032e6:	f002 f97f 	bl	4055e8 <__aeabi_dcmpge>
  4032ea:	9d07      	ldr	r5, [sp, #28]
  4032ec:	462c      	mov	r4, r5
  4032ee:	2800      	cmp	r0, #0
  4032f0:	f040 8169 	bne.w	4035c6 <_dtoa_r+0x8cc>
  4032f4:	e171      	b.n	4035da <_dtoa_r+0x8e0>
  4032f6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  4032fa:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  4032fe:	4622      	mov	r2, r4
  403300:	462b      	mov	r3, r5
  403302:	4630      	mov	r0, r6
  403304:	4639      	mov	r1, r7
  403306:	f7fe fb2d 	bl	401964 <__aeabi_ddiv>
  40330a:	f002 f981 	bl	405610 <__aeabi_d2iz>
  40330e:	9004      	str	r0, [sp, #16]
  403310:	f7fe f998 	bl	401644 <__aeabi_i2d>
  403314:	4622      	mov	r2, r4
  403316:	462b      	mov	r3, r5
  403318:	f7fe f9fa 	bl	401710 <__aeabi_dmul>
  40331c:	4602      	mov	r2, r0
  40331e:	460b      	mov	r3, r1
  403320:	4630      	mov	r0, r6
  403322:	4639      	mov	r1, r7
  403324:	f7fe f840 	bl	4013a8 <__aeabi_dsub>
  403328:	9f04      	ldr	r7, [sp, #16]
  40332a:	f107 0630 	add.w	r6, r7, #48	; 0x30
  40332e:	f808 6b01 	strb.w	r6, [r8], #1
  403332:	9f09      	ldr	r7, [sp, #36]	; 0x24
  403334:	ebc7 0608 	rsb	r6, r7, r8
  403338:	9f07      	ldr	r7, [sp, #28]
  40333a:	42be      	cmp	r6, r7
  40333c:	4602      	mov	r2, r0
  40333e:	460b      	mov	r3, r1
  403340:	d129      	bne.n	403396 <_dtoa_r+0x69c>
  403342:	f7fe f833 	bl	4013ac <__adddf3>
  403346:	4622      	mov	r2, r4
  403348:	462b      	mov	r3, r5
  40334a:	4606      	mov	r6, r0
  40334c:	460f      	mov	r7, r1
  40334e:	f002 f955 	bl	4055fc <__aeabi_dcmpgt>
  403352:	b970      	cbnz	r0, 403372 <_dtoa_r+0x678>
  403354:	4630      	mov	r0, r6
  403356:	4639      	mov	r1, r7
  403358:	4622      	mov	r2, r4
  40335a:	462b      	mov	r3, r5
  40335c:	f002 f926 	bl	4055ac <__aeabi_dcmpeq>
  403360:	2800      	cmp	r0, #0
  403362:	f000 825f 	beq.w	403824 <_dtoa_r+0xb2a>
  403366:	9f04      	ldr	r7, [sp, #16]
  403368:	07fb      	lsls	r3, r7, #31
  40336a:	d402      	bmi.n	403372 <_dtoa_r+0x678>
  40336c:	e25a      	b.n	403824 <_dtoa_r+0xb2a>
  40336e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  403372:	4643      	mov	r3, r8
  403374:	4698      	mov	r8, r3
  403376:	3b01      	subs	r3, #1
  403378:	f818 2c01 	ldrb.w	r2, [r8, #-1]
  40337c:	2a39      	cmp	r2, #57	; 0x39
  40337e:	d106      	bne.n	40338e <_dtoa_r+0x694>
  403380:	9f09      	ldr	r7, [sp, #36]	; 0x24
  403382:	429f      	cmp	r7, r3
  403384:	d1f6      	bne.n	403374 <_dtoa_r+0x67a>
  403386:	2230      	movs	r2, #48	; 0x30
  403388:	f109 0901 	add.w	r9, r9, #1
  40338c:	703a      	strb	r2, [r7, #0]
  40338e:	781a      	ldrb	r2, [r3, #0]
  403390:	3201      	adds	r2, #1
  403392:	701a      	strb	r2, [r3, #0]
  403394:	e246      	b.n	403824 <_dtoa_r+0xb2a>
  403396:	2200      	movs	r2, #0
  403398:	4b38      	ldr	r3, [pc, #224]	; (40347c <_dtoa_r+0x782>)
  40339a:	f7fe f9b9 	bl	401710 <__aeabi_dmul>
  40339e:	2200      	movs	r2, #0
  4033a0:	2300      	movs	r3, #0
  4033a2:	4606      	mov	r6, r0
  4033a4:	460f      	mov	r7, r1
  4033a6:	f002 f901 	bl	4055ac <__aeabi_dcmpeq>
  4033aa:	2800      	cmp	r0, #0
  4033ac:	d0a7      	beq.n	4032fe <_dtoa_r+0x604>
  4033ae:	e239      	b.n	403824 <_dtoa_r+0xb2a>
  4033b0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  4033b2:	2f00      	cmp	r7, #0
  4033b4:	d030      	beq.n	403418 <_dtoa_r+0x71e>
  4033b6:	9f24      	ldr	r7, [sp, #144]	; 0x90
  4033b8:	2f01      	cmp	r7, #1
  4033ba:	dc0a      	bgt.n	4033d2 <_dtoa_r+0x6d8>
  4033bc:	9f15      	ldr	r7, [sp, #84]	; 0x54
  4033be:	b117      	cbz	r7, 4033c6 <_dtoa_r+0x6cc>
  4033c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4033c4:	e002      	b.n	4033cc <_dtoa_r+0x6d2>
  4033c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4033c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4033cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4033ce:	9e08      	ldr	r6, [sp, #32]
  4033d0:	e016      	b.n	403400 <_dtoa_r+0x706>
  4033d2:	9f07      	ldr	r7, [sp, #28]
  4033d4:	1e7d      	subs	r5, r7, #1
  4033d6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4033d8:	42af      	cmp	r7, r5
  4033da:	db01      	blt.n	4033e0 <_dtoa_r+0x6e6>
  4033dc:	1b7d      	subs	r5, r7, r5
  4033de:	e006      	b.n	4033ee <_dtoa_r+0x6f4>
  4033e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4033e2:	950e      	str	r5, [sp, #56]	; 0x38
  4033e4:	1beb      	subs	r3, r5, r7
  4033e6:	9f11      	ldr	r7, [sp, #68]	; 0x44
  4033e8:	441f      	add	r7, r3
  4033ea:	9711      	str	r7, [sp, #68]	; 0x44
  4033ec:	2500      	movs	r5, #0
  4033ee:	9f07      	ldr	r7, [sp, #28]
  4033f0:	2f00      	cmp	r7, #0
  4033f2:	da03      	bge.n	4033fc <_dtoa_r+0x702>
  4033f4:	9808      	ldr	r0, [sp, #32]
  4033f6:	2300      	movs	r3, #0
  4033f8:	1bc6      	subs	r6, r0, r7
  4033fa:	e001      	b.n	403400 <_dtoa_r+0x706>
  4033fc:	9e08      	ldr	r6, [sp, #32]
  4033fe:	9b07      	ldr	r3, [sp, #28]
  403400:	9f08      	ldr	r7, [sp, #32]
  403402:	441f      	add	r7, r3
  403404:	9708      	str	r7, [sp, #32]
  403406:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403408:	4650      	mov	r0, sl
  40340a:	441f      	add	r7, r3
  40340c:	2101      	movs	r1, #1
  40340e:	970a      	str	r7, [sp, #40]	; 0x28
  403410:	f000 feb8 	bl	404184 <__i2b>
  403414:	4604      	mov	r4, r0
  403416:	e002      	b.n	40341e <_dtoa_r+0x724>
  403418:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40341a:	9e08      	ldr	r6, [sp, #32]
  40341c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40341e:	b16e      	cbz	r6, 40343c <_dtoa_r+0x742>
  403420:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403422:	2f00      	cmp	r7, #0
  403424:	dd0a      	ble.n	40343c <_dtoa_r+0x742>
  403426:	463b      	mov	r3, r7
  403428:	9f08      	ldr	r7, [sp, #32]
  40342a:	42b3      	cmp	r3, r6
  40342c:	bfa8      	it	ge
  40342e:	4633      	movge	r3, r6
  403430:	1aff      	subs	r7, r7, r3
  403432:	9708      	str	r7, [sp, #32]
  403434:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403436:	1aff      	subs	r7, r7, r3
  403438:	1af6      	subs	r6, r6, r3
  40343a:	970a      	str	r7, [sp, #40]	; 0x28
  40343c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40343e:	2f00      	cmp	r7, #0
  403440:	dd28      	ble.n	403494 <_dtoa_r+0x79a>
  403442:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  403444:	b307      	cbz	r7, 403488 <_dtoa_r+0x78e>
  403446:	2d00      	cmp	r5, #0
  403448:	dd10      	ble.n	40346c <_dtoa_r+0x772>
  40344a:	4621      	mov	r1, r4
  40344c:	462a      	mov	r2, r5
  40344e:	4650      	mov	r0, sl
  403450:	f000 ff39 	bl	4042c6 <__pow5mult>
  403454:	4604      	mov	r4, r0
  403456:	465a      	mov	r2, fp
  403458:	4621      	mov	r1, r4
  40345a:	4650      	mov	r0, sl
  40345c:	f000 fe9b 	bl	404196 <__multiply>
  403460:	4659      	mov	r1, fp
  403462:	4607      	mov	r7, r0
  403464:	4650      	mov	r0, sl
  403466:	f000 fdbb 	bl	403fe0 <_Bfree>
  40346a:	46bb      	mov	fp, r7
  40346c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40346e:	1b7a      	subs	r2, r7, r5
  403470:	d010      	beq.n	403494 <_dtoa_r+0x79a>
  403472:	4650      	mov	r0, sl
  403474:	4659      	mov	r1, fp
  403476:	e00a      	b.n	40348e <_dtoa_r+0x794>
  403478:	3fe00000 	.word	0x3fe00000
  40347c:	40240000 	.word	0x40240000
  403480:	00405d48 	.word	0x00405d48
  403484:	40140000 	.word	0x40140000
  403488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40348a:	4650      	mov	r0, sl
  40348c:	4659      	mov	r1, fp
  40348e:	f000 ff1a 	bl	4042c6 <__pow5mult>
  403492:	4683      	mov	fp, r0
  403494:	4650      	mov	r0, sl
  403496:	2101      	movs	r1, #1
  403498:	f000 fe74 	bl	404184 <__i2b>
  40349c:	9f11      	ldr	r7, [sp, #68]	; 0x44
  40349e:	2f00      	cmp	r7, #0
  4034a0:	4605      	mov	r5, r0
  4034a2:	dd05      	ble.n	4034b0 <_dtoa_r+0x7b6>
  4034a4:	4629      	mov	r1, r5
  4034a6:	4650      	mov	r0, sl
  4034a8:	463a      	mov	r2, r7
  4034aa:	f000 ff0c 	bl	4042c6 <__pow5mult>
  4034ae:	4605      	mov	r5, r0
  4034b0:	9f24      	ldr	r7, [sp, #144]	; 0x90
  4034b2:	2f01      	cmp	r7, #1
  4034b4:	dc12      	bgt.n	4034dc <_dtoa_r+0x7e2>
  4034b6:	9804      	ldr	r0, [sp, #16]
  4034b8:	b980      	cbnz	r0, 4034dc <_dtoa_r+0x7e2>
  4034ba:	9905      	ldr	r1, [sp, #20]
  4034bc:	f3c1 0313 	ubfx	r3, r1, #0, #20
  4034c0:	b973      	cbnz	r3, 4034e0 <_dtoa_r+0x7e6>
  4034c2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  4034c6:	0d3f      	lsrs	r7, r7, #20
  4034c8:	053f      	lsls	r7, r7, #20
  4034ca:	b157      	cbz	r7, 4034e2 <_dtoa_r+0x7e8>
  4034cc:	9f08      	ldr	r7, [sp, #32]
  4034ce:	3701      	adds	r7, #1
  4034d0:	9708      	str	r7, [sp, #32]
  4034d2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4034d4:	3701      	adds	r7, #1
  4034d6:	970a      	str	r7, [sp, #40]	; 0x28
  4034d8:	2701      	movs	r7, #1
  4034da:	e002      	b.n	4034e2 <_dtoa_r+0x7e8>
  4034dc:	2700      	movs	r7, #0
  4034de:	e000      	b.n	4034e2 <_dtoa_r+0x7e8>
  4034e0:	9f04      	ldr	r7, [sp, #16]
  4034e2:	9811      	ldr	r0, [sp, #68]	; 0x44
  4034e4:	b140      	cbz	r0, 4034f8 <_dtoa_r+0x7fe>
  4034e6:	692b      	ldr	r3, [r5, #16]
  4034e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  4034ec:	6918      	ldr	r0, [r3, #16]
  4034ee:	f000 fdfc 	bl	4040ea <__hi0bits>
  4034f2:	f1c0 0020 	rsb	r0, r0, #32
  4034f6:	e000      	b.n	4034fa <_dtoa_r+0x800>
  4034f8:	2001      	movs	r0, #1
  4034fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4034fc:	4403      	add	r3, r0
  4034fe:	f013 031f 	ands.w	r3, r3, #31
  403502:	d00f      	beq.n	403524 <_dtoa_r+0x82a>
  403504:	f1c3 0220 	rsb	r2, r3, #32
  403508:	2a04      	cmp	r2, #4
  40350a:	dd09      	ble.n	403520 <_dtoa_r+0x826>
  40350c:	9908      	ldr	r1, [sp, #32]
  40350e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403510:	f1c3 031c 	rsb	r3, r3, #28
  403514:	4419      	add	r1, r3
  403516:	441a      	add	r2, r3
  403518:	9108      	str	r1, [sp, #32]
  40351a:	441e      	add	r6, r3
  40351c:	920a      	str	r2, [sp, #40]	; 0x28
  40351e:	e009      	b.n	403534 <_dtoa_r+0x83a>
  403520:	d008      	beq.n	403534 <_dtoa_r+0x83a>
  403522:	4613      	mov	r3, r2
  403524:	9808      	ldr	r0, [sp, #32]
  403526:	990a      	ldr	r1, [sp, #40]	; 0x28
  403528:	331c      	adds	r3, #28
  40352a:	4418      	add	r0, r3
  40352c:	4419      	add	r1, r3
  40352e:	9008      	str	r0, [sp, #32]
  403530:	441e      	add	r6, r3
  403532:	910a      	str	r1, [sp, #40]	; 0x28
  403534:	9a08      	ldr	r2, [sp, #32]
  403536:	2a00      	cmp	r2, #0
  403538:	dd04      	ble.n	403544 <_dtoa_r+0x84a>
  40353a:	4659      	mov	r1, fp
  40353c:	4650      	mov	r0, sl
  40353e:	f000 ff01 	bl	404344 <__lshift>
  403542:	4683      	mov	fp, r0
  403544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403546:	2b00      	cmp	r3, #0
  403548:	dd05      	ble.n	403556 <_dtoa_r+0x85c>
  40354a:	4629      	mov	r1, r5
  40354c:	4650      	mov	r0, sl
  40354e:	461a      	mov	r2, r3
  403550:	f000 fef8 	bl	404344 <__lshift>
  403554:	4605      	mov	r5, r0
  403556:	9814      	ldr	r0, [sp, #80]	; 0x50
  403558:	b1e0      	cbz	r0, 403594 <_dtoa_r+0x89a>
  40355a:	4658      	mov	r0, fp
  40355c:	4629      	mov	r1, r5
  40355e:	f000 ff44 	bl	4043ea <__mcmp>
  403562:	2800      	cmp	r0, #0
  403564:	da16      	bge.n	403594 <_dtoa_r+0x89a>
  403566:	4659      	mov	r1, fp
  403568:	4650      	mov	r0, sl
  40356a:	220a      	movs	r2, #10
  40356c:	2300      	movs	r3, #0
  40356e:	f000 fd40 	bl	403ff2 <__multadd>
  403572:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403574:	f109 39ff 	add.w	r9, r9, #4294967295
  403578:	4683      	mov	fp, r0
  40357a:	b149      	cbz	r1, 403590 <_dtoa_r+0x896>
  40357c:	4621      	mov	r1, r4
  40357e:	220a      	movs	r2, #10
  403580:	4650      	mov	r0, sl
  403582:	2300      	movs	r3, #0
  403584:	f000 fd35 	bl	403ff2 <__multadd>
  403588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40358a:	9207      	str	r2, [sp, #28]
  40358c:	4604      	mov	r4, r0
  40358e:	e001      	b.n	403594 <_dtoa_r+0x89a>
  403590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403592:	9307      	str	r3, [sp, #28]
  403594:	9807      	ldr	r0, [sp, #28]
  403596:	2800      	cmp	r0, #0
  403598:	dc29      	bgt.n	4035ee <_dtoa_r+0x8f4>
  40359a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40359c:	2902      	cmp	r1, #2
  40359e:	dd26      	ble.n	4035ee <_dtoa_r+0x8f4>
  4035a0:	b988      	cbnz	r0, 4035c6 <_dtoa_r+0x8cc>
  4035a2:	4629      	mov	r1, r5
  4035a4:	2205      	movs	r2, #5
  4035a6:	9b07      	ldr	r3, [sp, #28]
  4035a8:	4650      	mov	r0, sl
  4035aa:	f000 fd22 	bl	403ff2 <__multadd>
  4035ae:	4605      	mov	r5, r0
  4035b0:	4629      	mov	r1, r5
  4035b2:	4658      	mov	r0, fp
  4035b4:	f000 ff19 	bl	4043ea <__mcmp>
  4035b8:	2800      	cmp	r0, #0
  4035ba:	dc0e      	bgt.n	4035da <_dtoa_r+0x8e0>
  4035bc:	e003      	b.n	4035c6 <_dtoa_r+0x8cc>
  4035be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4035c0:	e000      	b.n	4035c4 <_dtoa_r+0x8ca>
  4035c2:	2500      	movs	r5, #0
  4035c4:	462c      	mov	r4, r5
  4035c6:	9f25      	ldr	r7, [sp, #148]	; 0x94
  4035c8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  4035cc:	ea6f 0907 	mvn.w	r9, r7
  4035d0:	e00a      	b.n	4035e8 <_dtoa_r+0x8ee>
  4035d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4035d4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  4035d8:	462c      	mov	r4, r5
  4035da:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4035dc:	2331      	movs	r3, #49	; 0x31
  4035de:	f107 0801 	add.w	r8, r7, #1
  4035e2:	703b      	strb	r3, [r7, #0]
  4035e4:	f109 0901 	add.w	r9, r9, #1
  4035e8:	4627      	mov	r7, r4
  4035ea:	2400      	movs	r4, #0
  4035ec:	e107      	b.n	4037fe <_dtoa_r+0xb04>
  4035ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
  4035f0:	2800      	cmp	r0, #0
  4035f2:	f000 80bb 	beq.w	40376c <_dtoa_r+0xa72>
  4035f6:	2e00      	cmp	r6, #0
  4035f8:	dd05      	ble.n	403606 <_dtoa_r+0x90c>
  4035fa:	4621      	mov	r1, r4
  4035fc:	4650      	mov	r0, sl
  4035fe:	4632      	mov	r2, r6
  403600:	f000 fea0 	bl	404344 <__lshift>
  403604:	4604      	mov	r4, r0
  403606:	b19f      	cbz	r7, 403630 <_dtoa_r+0x936>
  403608:	6861      	ldr	r1, [r4, #4]
  40360a:	4650      	mov	r0, sl
  40360c:	f000 fcc2 	bl	403f94 <_Balloc>
  403610:	6922      	ldr	r2, [r4, #16]
  403612:	3202      	adds	r2, #2
  403614:	4606      	mov	r6, r0
  403616:	f104 010c 	add.w	r1, r4, #12
  40361a:	0092      	lsls	r2, r2, #2
  40361c:	300c      	adds	r0, #12
  40361e:	f000 fc92 	bl	403f46 <memcpy>
  403622:	4650      	mov	r0, sl
  403624:	4631      	mov	r1, r6
  403626:	2201      	movs	r2, #1
  403628:	f000 fe8c 	bl	404344 <__lshift>
  40362c:	4607      	mov	r7, r0
  40362e:	e000      	b.n	403632 <_dtoa_r+0x938>
  403630:	4627      	mov	r7, r4
  403632:	9e09      	ldr	r6, [sp, #36]	; 0x24
  403634:	4629      	mov	r1, r5
  403636:	4658      	mov	r0, fp
  403638:	f7ff fad2 	bl	402be0 <quorem>
  40363c:	4621      	mov	r1, r4
  40363e:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  403642:	4680      	mov	r8, r0
  403644:	4658      	mov	r0, fp
  403646:	f8cd c008 	str.w	ip, [sp, #8]
  40364a:	f000 fece 	bl	4043ea <__mcmp>
  40364e:	463a      	mov	r2, r7
  403650:	9008      	str	r0, [sp, #32]
  403652:	4629      	mov	r1, r5
  403654:	4650      	mov	r0, sl
  403656:	f000 fee5 	bl	404424 <__mdiff>
  40365a:	68c3      	ldr	r3, [r0, #12]
  40365c:	f8dd c008 	ldr.w	ip, [sp, #8]
  403660:	4602      	mov	r2, r0
  403662:	b94b      	cbnz	r3, 403678 <_dtoa_r+0x97e>
  403664:	4611      	mov	r1, r2
  403666:	4658      	mov	r0, fp
  403668:	9203      	str	r2, [sp, #12]
  40366a:	f000 febe 	bl	4043ea <__mcmp>
  40366e:	9a03      	ldr	r2, [sp, #12]
  403670:	f8dd c008 	ldr.w	ip, [sp, #8]
  403674:	4603      	mov	r3, r0
  403676:	e000      	b.n	40367a <_dtoa_r+0x980>
  403678:	2301      	movs	r3, #1
  40367a:	4650      	mov	r0, sl
  40367c:	4611      	mov	r1, r2
  40367e:	9303      	str	r3, [sp, #12]
  403680:	f8cd c008 	str.w	ip, [sp, #8]
  403684:	f000 fcac 	bl	403fe0 <_Bfree>
  403688:	9b03      	ldr	r3, [sp, #12]
  40368a:	f8dd c008 	ldr.w	ip, [sp, #8]
  40368e:	b963      	cbnz	r3, 4036aa <_dtoa_r+0x9b0>
  403690:	9924      	ldr	r1, [sp, #144]	; 0x90
  403692:	b951      	cbnz	r1, 4036aa <_dtoa_r+0x9b0>
  403694:	9804      	ldr	r0, [sp, #16]
  403696:	f000 0201 	and.w	r2, r0, #1
  40369a:	b932      	cbnz	r2, 4036aa <_dtoa_r+0x9b0>
  40369c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  4036a0:	d035      	beq.n	40370e <_dtoa_r+0xa14>
  4036a2:	9b08      	ldr	r3, [sp, #32]
  4036a4:	2b00      	cmp	r3, #0
  4036a6:	dc24      	bgt.n	4036f2 <_dtoa_r+0x9f8>
  4036a8:	e025      	b.n	4036f6 <_dtoa_r+0x9fc>
  4036aa:	9808      	ldr	r0, [sp, #32]
  4036ac:	2800      	cmp	r0, #0
  4036ae:	da02      	bge.n	4036b6 <_dtoa_r+0x9bc>
  4036b0:	2b00      	cmp	r3, #0
  4036b2:	dc08      	bgt.n	4036c6 <_dtoa_r+0x9cc>
  4036b4:	e01f      	b.n	4036f6 <_dtoa_r+0x9fc>
  4036b6:	d123      	bne.n	403700 <_dtoa_r+0xa06>
  4036b8:	9924      	ldr	r1, [sp, #144]	; 0x90
  4036ba:	bb09      	cbnz	r1, 403700 <_dtoa_r+0xa06>
  4036bc:	9804      	ldr	r0, [sp, #16]
  4036be:	f000 0201 	and.w	r2, r0, #1
  4036c2:	b9ea      	cbnz	r2, 403700 <_dtoa_r+0xa06>
  4036c4:	e7f4      	b.n	4036b0 <_dtoa_r+0x9b6>
  4036c6:	4659      	mov	r1, fp
  4036c8:	2201      	movs	r2, #1
  4036ca:	4650      	mov	r0, sl
  4036cc:	f8cd c008 	str.w	ip, [sp, #8]
  4036d0:	f000 fe38 	bl	404344 <__lshift>
  4036d4:	4629      	mov	r1, r5
  4036d6:	4683      	mov	fp, r0
  4036d8:	f000 fe87 	bl	4043ea <__mcmp>
  4036dc:	2800      	cmp	r0, #0
  4036de:	f8dd c008 	ldr.w	ip, [sp, #8]
  4036e2:	dc03      	bgt.n	4036ec <_dtoa_r+0x9f2>
  4036e4:	d107      	bne.n	4036f6 <_dtoa_r+0x9fc>
  4036e6:	f01c 0f01 	tst.w	ip, #1
  4036ea:	d004      	beq.n	4036f6 <_dtoa_r+0x9fc>
  4036ec:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  4036f0:	d00d      	beq.n	40370e <_dtoa_r+0xa14>
  4036f2:	f108 0c31 	add.w	ip, r8, #49	; 0x31
  4036f6:	f106 0801 	add.w	r8, r6, #1
  4036fa:	f886 c000 	strb.w	ip, [r6]
  4036fe:	e07e      	b.n	4037fe <_dtoa_r+0xb04>
  403700:	2b00      	cmp	r3, #0
  403702:	f106 0801 	add.w	r8, r6, #1
  403706:	dd09      	ble.n	40371c <_dtoa_r+0xa22>
  403708:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40370c:	d103      	bne.n	403716 <_dtoa_r+0xa1c>
  40370e:	2339      	movs	r3, #57	; 0x39
  403710:	7033      	strb	r3, [r6, #0]
  403712:	3601      	adds	r6, #1
  403714:	e05b      	b.n	4037ce <_dtoa_r+0xad4>
  403716:	f10c 0301 	add.w	r3, ip, #1
  40371a:	e068      	b.n	4037ee <_dtoa_r+0xaf4>
  40371c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40371e:	9a07      	ldr	r2, [sp, #28]
  403720:	4646      	mov	r6, r8
  403722:	ebc1 0308 	rsb	r3, r1, r8
  403726:	4293      	cmp	r3, r2
  403728:	f806 cc01 	strb.w	ip, [r6, #-1]
  40372c:	d03c      	beq.n	4037a8 <_dtoa_r+0xaae>
  40372e:	4659      	mov	r1, fp
  403730:	220a      	movs	r2, #10
  403732:	2300      	movs	r3, #0
  403734:	4650      	mov	r0, sl
  403736:	f000 fc5c 	bl	403ff2 <__multadd>
  40373a:	42bc      	cmp	r4, r7
  40373c:	4683      	mov	fp, r0
  40373e:	4621      	mov	r1, r4
  403740:	4650      	mov	r0, sl
  403742:	f04f 020a 	mov.w	r2, #10
  403746:	f04f 0300 	mov.w	r3, #0
  40374a:	d104      	bne.n	403756 <_dtoa_r+0xa5c>
  40374c:	f000 fc51 	bl	403ff2 <__multadd>
  403750:	4604      	mov	r4, r0
  403752:	4607      	mov	r7, r0
  403754:	e76e      	b.n	403634 <_dtoa_r+0x93a>
  403756:	f000 fc4c 	bl	403ff2 <__multadd>
  40375a:	4639      	mov	r1, r7
  40375c:	4604      	mov	r4, r0
  40375e:	220a      	movs	r2, #10
  403760:	4650      	mov	r0, sl
  403762:	2300      	movs	r3, #0
  403764:	f000 fc45 	bl	403ff2 <__multadd>
  403768:	4607      	mov	r7, r0
  40376a:	e763      	b.n	403634 <_dtoa_r+0x93a>
  40376c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  40376e:	4658      	mov	r0, fp
  403770:	4629      	mov	r1, r5
  403772:	f7ff fa35 	bl	402be0 <quorem>
  403776:	9f09      	ldr	r7, [sp, #36]	; 0x24
  403778:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  40377c:	f807 c006 	strb.w	ip, [r7, r6]
  403780:	9f07      	ldr	r7, [sp, #28]
  403782:	3601      	adds	r6, #1
  403784:	42be      	cmp	r6, r7
  403786:	db07      	blt.n	403798 <_dtoa_r+0xa9e>
  403788:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40378a:	2f01      	cmp	r7, #1
  40378c:	bfac      	ite	ge
  40378e:	19f6      	addge	r6, r6, r7
  403790:	3601      	addlt	r6, #1
  403792:	4627      	mov	r7, r4
  403794:	2400      	movs	r4, #0
  403796:	e007      	b.n	4037a8 <_dtoa_r+0xaae>
  403798:	4659      	mov	r1, fp
  40379a:	4650      	mov	r0, sl
  40379c:	220a      	movs	r2, #10
  40379e:	2300      	movs	r3, #0
  4037a0:	f000 fc27 	bl	403ff2 <__multadd>
  4037a4:	4683      	mov	fp, r0
  4037a6:	e7e2      	b.n	40376e <_dtoa_r+0xa74>
  4037a8:	4659      	mov	r1, fp
  4037aa:	2201      	movs	r2, #1
  4037ac:	4650      	mov	r0, sl
  4037ae:	f8cd c008 	str.w	ip, [sp, #8]
  4037b2:	f000 fdc7 	bl	404344 <__lshift>
  4037b6:	4629      	mov	r1, r5
  4037b8:	4683      	mov	fp, r0
  4037ba:	f000 fe16 	bl	4043ea <__mcmp>
  4037be:	2800      	cmp	r0, #0
  4037c0:	f8dd c008 	ldr.w	ip, [sp, #8]
  4037c4:	dc03      	bgt.n	4037ce <_dtoa_r+0xad4>
  4037c6:	d114      	bne.n	4037f2 <_dtoa_r+0xaf8>
  4037c8:	f01c 0f01 	tst.w	ip, #1
  4037cc:	d011      	beq.n	4037f2 <_dtoa_r+0xaf8>
  4037ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  4037d2:	2b39      	cmp	r3, #57	; 0x39
  4037d4:	46b0      	mov	r8, r6
  4037d6:	f106 36ff 	add.w	r6, r6, #4294967295
  4037da:	d107      	bne.n	4037ec <_dtoa_r+0xaf2>
  4037dc:	9809      	ldr	r0, [sp, #36]	; 0x24
  4037de:	42b0      	cmp	r0, r6
  4037e0:	d1f5      	bne.n	4037ce <_dtoa_r+0xad4>
  4037e2:	2331      	movs	r3, #49	; 0x31
  4037e4:	f109 0901 	add.w	r9, r9, #1
  4037e8:	7003      	strb	r3, [r0, #0]
  4037ea:	e008      	b.n	4037fe <_dtoa_r+0xb04>
  4037ec:	3301      	adds	r3, #1
  4037ee:	7033      	strb	r3, [r6, #0]
  4037f0:	e005      	b.n	4037fe <_dtoa_r+0xb04>
  4037f2:	46b0      	mov	r8, r6
  4037f4:	3e01      	subs	r6, #1
  4037f6:	f818 3c01 	ldrb.w	r3, [r8, #-1]
  4037fa:	2b30      	cmp	r3, #48	; 0x30
  4037fc:	d0f9      	beq.n	4037f2 <_dtoa_r+0xaf8>
  4037fe:	4650      	mov	r0, sl
  403800:	4629      	mov	r1, r5
  403802:	f000 fbed 	bl	403fe0 <_Bfree>
  403806:	b16f      	cbz	r7, 403824 <_dtoa_r+0xb2a>
  403808:	b12c      	cbz	r4, 403816 <_dtoa_r+0xb1c>
  40380a:	42bc      	cmp	r4, r7
  40380c:	d003      	beq.n	403816 <_dtoa_r+0xb1c>
  40380e:	4650      	mov	r0, sl
  403810:	4621      	mov	r1, r4
  403812:	f000 fbe5 	bl	403fe0 <_Bfree>
  403816:	4650      	mov	r0, sl
  403818:	4639      	mov	r1, r7
  40381a:	f000 fbe1 	bl	403fe0 <_Bfree>
  40381e:	e001      	b.n	403824 <_dtoa_r+0xb2a>
  403820:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  403824:	4650      	mov	r0, sl
  403826:	4659      	mov	r1, fp
  403828:	f000 fbda 	bl	403fe0 <_Bfree>
  40382c:	2300      	movs	r3, #0
  40382e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403830:	f888 3000 	strb.w	r3, [r8]
  403834:	f109 0301 	add.w	r3, r9, #1
  403838:	603b      	str	r3, [r7, #0]
  40383a:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  40383c:	b127      	cbz	r7, 403848 <_dtoa_r+0xb4e>
  40383e:	f8c7 8000 	str.w	r8, [r7]
  403842:	e001      	b.n	403848 <_dtoa_r+0xb4e>
  403844:	4802      	ldr	r0, [pc, #8]	; (403850 <_dtoa_r+0xb56>)
  403846:	e000      	b.n	40384a <_dtoa_r+0xb50>
  403848:	9809      	ldr	r0, [sp, #36]	; 0x24
  40384a:	b01b      	add	sp, #108	; 0x6c
  40384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403850:	00405d1c 	.word	0x00405d1c
  403854:	f3af 8000 	nop.w

00403858 <__libc_fini_array>:
  403858:	b538      	push	{r3, r4, r5, lr}
  40385a:	4d08      	ldr	r5, [pc, #32]	; (40387c <__libc_fini_array+0x24>)
  40385c:	4c08      	ldr	r4, [pc, #32]	; (403880 <__libc_fini_array+0x28>)
  40385e:	1b64      	subs	r4, r4, r5
  403860:	10a4      	asrs	r4, r4, #2
  403862:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  403866:	b124      	cbz	r4, 403872 <__libc_fini_array+0x1a>
  403868:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40386c:	3c01      	subs	r4, #1
  40386e:	4798      	blx	r3
  403870:	e7f9      	b.n	403866 <__libc_fini_array+0xe>
  403872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403876:	f002 bb0d 	b.w	405e94 <_fini>
  40387a:	bf00      	nop
  40387c:	00405ea0 	.word	0x00405ea0
  403880:	00405ea4 	.word	0x00405ea4

00403884 <_malloc_trim_r>:
  403884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403886:	4d23      	ldr	r5, [pc, #140]	; (403914 <_malloc_trim_r+0x90>)
  403888:	460e      	mov	r6, r1
  40388a:	4604      	mov	r4, r0
  40388c:	f000 fb7f 	bl	403f8e <__malloc_lock>
  403890:	68ab      	ldr	r3, [r5, #8]
  403892:	685f      	ldr	r7, [r3, #4]
  403894:	f027 0703 	bic.w	r7, r7, #3
  403898:	1bbe      	subs	r6, r7, r6
  40389a:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
  40389e:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
  4038a2:	f026 060f 	bic.w	r6, r6, #15
  4038a6:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
  4038aa:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
  4038ae:	da04      	bge.n	4038ba <_malloc_trim_r+0x36>
  4038b0:	4620      	mov	r0, r4
  4038b2:	f000 fb6d 	bl	403f90 <__malloc_unlock>
  4038b6:	2000      	movs	r0, #0
  4038b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4038ba:	4620      	mov	r0, r4
  4038bc:	2100      	movs	r1, #0
  4038be:	f001 f91d 	bl	404afc <_sbrk_r>
  4038c2:	68ab      	ldr	r3, [r5, #8]
  4038c4:	443b      	add	r3, r7
  4038c6:	4298      	cmp	r0, r3
  4038c8:	d1f2      	bne.n	4038b0 <_malloc_trim_r+0x2c>
  4038ca:	4620      	mov	r0, r4
  4038cc:	4271      	negs	r1, r6
  4038ce:	f001 f915 	bl	404afc <_sbrk_r>
  4038d2:	3001      	adds	r0, #1
  4038d4:	d110      	bne.n	4038f8 <_malloc_trim_r+0x74>
  4038d6:	4620      	mov	r0, r4
  4038d8:	2100      	movs	r1, #0
  4038da:	f001 f90f 	bl	404afc <_sbrk_r>
  4038de:	68ab      	ldr	r3, [r5, #8]
  4038e0:	1ac2      	subs	r2, r0, r3
  4038e2:	2a0f      	cmp	r2, #15
  4038e4:	dde4      	ble.n	4038b0 <_malloc_trim_r+0x2c>
  4038e6:	490c      	ldr	r1, [pc, #48]	; (403918 <_malloc_trim_r+0x94>)
  4038e8:	6809      	ldr	r1, [r1, #0]
  4038ea:	1a40      	subs	r0, r0, r1
  4038ec:	490b      	ldr	r1, [pc, #44]	; (40391c <_malloc_trim_r+0x98>)
  4038ee:	f042 0201 	orr.w	r2, r2, #1
  4038f2:	6008      	str	r0, [r1, #0]
  4038f4:	605a      	str	r2, [r3, #4]
  4038f6:	e7db      	b.n	4038b0 <_malloc_trim_r+0x2c>
  4038f8:	68ab      	ldr	r3, [r5, #8]
  4038fa:	1bbf      	subs	r7, r7, r6
  4038fc:	f047 0701 	orr.w	r7, r7, #1
  403900:	605f      	str	r7, [r3, #4]
  403902:	4b06      	ldr	r3, [pc, #24]	; (40391c <_malloc_trim_r+0x98>)
  403904:	681a      	ldr	r2, [r3, #0]
  403906:	4620      	mov	r0, r4
  403908:	1b96      	subs	r6, r2, r6
  40390a:	601e      	str	r6, [r3, #0]
  40390c:	f000 fb40 	bl	403f90 <__malloc_unlock>
  403910:	2001      	movs	r0, #1
  403912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403914:	200004c4 	.word	0x200004c4
  403918:	200008cc 	.word	0x200008cc
  40391c:	20000970 	.word	0x20000970

00403920 <_free_r>:
  403920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403922:	4606      	mov	r6, r0
  403924:	460d      	mov	r5, r1
  403926:	2900      	cmp	r1, #0
  403928:	f000 80a9 	beq.w	403a7e <_free_r+0x15e>
  40392c:	f000 fb2f 	bl	403f8e <__malloc_lock>
  403930:	f855 cc04 	ldr.w	ip, [r5, #-4]
  403934:	4c52      	ldr	r4, [pc, #328]	; (403a80 <_free_r+0x160>)
  403936:	f1a5 0308 	sub.w	r3, r5, #8
  40393a:	f02c 0201 	bic.w	r2, ip, #1
  40393e:	1898      	adds	r0, r3, r2
  403940:	68a1      	ldr	r1, [r4, #8]
  403942:	6847      	ldr	r7, [r0, #4]
  403944:	4288      	cmp	r0, r1
  403946:	f027 0703 	bic.w	r7, r7, #3
  40394a:	f00c 0101 	and.w	r1, ip, #1
  40394e:	d11b      	bne.n	403988 <_free_r+0x68>
  403950:	443a      	add	r2, r7
  403952:	b939      	cbnz	r1, 403964 <_free_r+0x44>
  403954:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403958:	1a5b      	subs	r3, r3, r1
  40395a:	440a      	add	r2, r1
  40395c:	6898      	ldr	r0, [r3, #8]
  40395e:	68d9      	ldr	r1, [r3, #12]
  403960:	60c1      	str	r1, [r0, #12]
  403962:	6088      	str	r0, [r1, #8]
  403964:	f042 0101 	orr.w	r1, r2, #1
  403968:	6059      	str	r1, [r3, #4]
  40396a:	60a3      	str	r3, [r4, #8]
  40396c:	4b45      	ldr	r3, [pc, #276]	; (403a84 <_free_r+0x164>)
  40396e:	681b      	ldr	r3, [r3, #0]
  403970:	429a      	cmp	r2, r3
  403972:	d304      	bcc.n	40397e <_free_r+0x5e>
  403974:	4b44      	ldr	r3, [pc, #272]	; (403a88 <_free_r+0x168>)
  403976:	4630      	mov	r0, r6
  403978:	6819      	ldr	r1, [r3, #0]
  40397a:	f7ff ff83 	bl	403884 <_malloc_trim_r>
  40397e:	4630      	mov	r0, r6
  403980:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  403984:	f000 bb04 	b.w	403f90 <__malloc_unlock>
  403988:	6047      	str	r7, [r0, #4]
  40398a:	b979      	cbnz	r1, 4039ac <_free_r+0x8c>
  40398c:	f855 5c08 	ldr.w	r5, [r5, #-8]
  403990:	1b5b      	subs	r3, r3, r5
  403992:	442a      	add	r2, r5
  403994:	689d      	ldr	r5, [r3, #8]
  403996:	f104 0c08 	add.w	ip, r4, #8
  40399a:	4565      	cmp	r5, ip
  40399c:	d008      	beq.n	4039b0 <_free_r+0x90>
  40399e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4039a2:	f8c5 c00c 	str.w	ip, [r5, #12]
  4039a6:	f8cc 5008 	str.w	r5, [ip, #8]
  4039aa:	e002      	b.n	4039b2 <_free_r+0x92>
  4039ac:	2100      	movs	r1, #0
  4039ae:	e000      	b.n	4039b2 <_free_r+0x92>
  4039b0:	2101      	movs	r1, #1
  4039b2:	19c5      	adds	r5, r0, r7
  4039b4:	686d      	ldr	r5, [r5, #4]
  4039b6:	07ed      	lsls	r5, r5, #31
  4039b8:	d40e      	bmi.n	4039d8 <_free_r+0xb8>
  4039ba:	443a      	add	r2, r7
  4039bc:	6885      	ldr	r5, [r0, #8]
  4039be:	b941      	cbnz	r1, 4039d2 <_free_r+0xb2>
  4039c0:	4f32      	ldr	r7, [pc, #200]	; (403a8c <_free_r+0x16c>)
  4039c2:	42bd      	cmp	r5, r7
  4039c4:	d105      	bne.n	4039d2 <_free_r+0xb2>
  4039c6:	6163      	str	r3, [r4, #20]
  4039c8:	6123      	str	r3, [r4, #16]
  4039ca:	2101      	movs	r1, #1
  4039cc:	60dd      	str	r5, [r3, #12]
  4039ce:	609d      	str	r5, [r3, #8]
  4039d0:	e002      	b.n	4039d8 <_free_r+0xb8>
  4039d2:	68c0      	ldr	r0, [r0, #12]
  4039d4:	60e8      	str	r0, [r5, #12]
  4039d6:	6085      	str	r5, [r0, #8]
  4039d8:	f042 0001 	orr.w	r0, r2, #1
  4039dc:	6058      	str	r0, [r3, #4]
  4039de:	509a      	str	r2, [r3, r2]
  4039e0:	2900      	cmp	r1, #0
  4039e2:	d1cc      	bne.n	40397e <_free_r+0x5e>
  4039e4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4039e8:	d20e      	bcs.n	403a08 <_free_r+0xe8>
  4039ea:	08d2      	lsrs	r2, r2, #3
  4039ec:	1091      	asrs	r1, r2, #2
  4039ee:	2001      	movs	r0, #1
  4039f0:	4088      	lsls	r0, r1
  4039f2:	6861      	ldr	r1, [r4, #4]
  4039f4:	4301      	orrs	r1, r0
  4039f6:	6061      	str	r1, [r4, #4]
  4039f8:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
  4039fc:	68a2      	ldr	r2, [r4, #8]
  4039fe:	609a      	str	r2, [r3, #8]
  403a00:	60dc      	str	r4, [r3, #12]
  403a02:	60a3      	str	r3, [r4, #8]
  403a04:	60d3      	str	r3, [r2, #12]
  403a06:	e7ba      	b.n	40397e <_free_r+0x5e>
  403a08:	0a51      	lsrs	r1, r2, #9
  403a0a:	2904      	cmp	r1, #4
  403a0c:	d802      	bhi.n	403a14 <_free_r+0xf4>
  403a0e:	0991      	lsrs	r1, r2, #6
  403a10:	3138      	adds	r1, #56	; 0x38
  403a12:	e015      	b.n	403a40 <_free_r+0x120>
  403a14:	2914      	cmp	r1, #20
  403a16:	d801      	bhi.n	403a1c <_free_r+0xfc>
  403a18:	315b      	adds	r1, #91	; 0x5b
  403a1a:	e011      	b.n	403a40 <_free_r+0x120>
  403a1c:	2954      	cmp	r1, #84	; 0x54
  403a1e:	d802      	bhi.n	403a26 <_free_r+0x106>
  403a20:	0b11      	lsrs	r1, r2, #12
  403a22:	316e      	adds	r1, #110	; 0x6e
  403a24:	e00c      	b.n	403a40 <_free_r+0x120>
  403a26:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  403a2a:	d802      	bhi.n	403a32 <_free_r+0x112>
  403a2c:	0bd1      	lsrs	r1, r2, #15
  403a2e:	3177      	adds	r1, #119	; 0x77
  403a30:	e006      	b.n	403a40 <_free_r+0x120>
  403a32:	f240 5054 	movw	r0, #1364	; 0x554
  403a36:	4281      	cmp	r1, r0
  403a38:	bf9a      	itte	ls
  403a3a:	0c91      	lsrls	r1, r2, #18
  403a3c:	317c      	addls	r1, #124	; 0x7c
  403a3e:	217e      	movhi	r1, #126	; 0x7e
  403a40:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
  403a44:	480e      	ldr	r0, [pc, #56]	; (403a80 <_free_r+0x160>)
  403a46:	68a5      	ldr	r5, [r4, #8]
  403a48:	42a5      	cmp	r5, r4
  403a4a:	d001      	beq.n	403a50 <_free_r+0x130>
  403a4c:	4629      	mov	r1, r5
  403a4e:	e00b      	b.n	403a68 <_free_r+0x148>
  403a50:	2201      	movs	r2, #1
  403a52:	1089      	asrs	r1, r1, #2
  403a54:	fa02 f101 	lsl.w	r1, r2, r1
  403a58:	6842      	ldr	r2, [r0, #4]
  403a5a:	430a      	orrs	r2, r1
  403a5c:	6042      	str	r2, [r0, #4]
  403a5e:	4629      	mov	r1, r5
  403a60:	e008      	b.n	403a74 <_free_r+0x154>
  403a62:	6889      	ldr	r1, [r1, #8]
  403a64:	42a1      	cmp	r1, r4
  403a66:	d004      	beq.n	403a72 <_free_r+0x152>
  403a68:	6848      	ldr	r0, [r1, #4]
  403a6a:	f020 0003 	bic.w	r0, r0, #3
  403a6e:	4282      	cmp	r2, r0
  403a70:	d3f7      	bcc.n	403a62 <_free_r+0x142>
  403a72:	68cd      	ldr	r5, [r1, #12]
  403a74:	60dd      	str	r5, [r3, #12]
  403a76:	6099      	str	r1, [r3, #8]
  403a78:	60ab      	str	r3, [r5, #8]
  403a7a:	60cb      	str	r3, [r1, #12]
  403a7c:	e77f      	b.n	40397e <_free_r+0x5e>
  403a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403a80:	200004c4 	.word	0x200004c4
  403a84:	200008d0 	.word	0x200008d0
  403a88:	2000096c 	.word	0x2000096c
  403a8c:	200004cc 	.word	0x200004cc

00403a90 <_setlocale_r>:
  403a90:	b510      	push	{r4, lr}
  403a92:	4614      	mov	r4, r2
  403a94:	b90a      	cbnz	r2, 403a9a <_setlocale_r+0xa>
  403a96:	480b      	ldr	r0, [pc, #44]	; (403ac4 <_setlocale_r+0x34>)
  403a98:	bd10      	pop	{r4, pc}
  403a9a:	4610      	mov	r0, r2
  403a9c:	490a      	ldr	r1, [pc, #40]	; (403ac8 <_setlocale_r+0x38>)
  403a9e:	f001 f83d 	bl	404b1c <strcmp>
  403aa2:	2800      	cmp	r0, #0
  403aa4:	d0f7      	beq.n	403a96 <_setlocale_r+0x6>
  403aa6:	4620      	mov	r0, r4
  403aa8:	4906      	ldr	r1, [pc, #24]	; (403ac4 <_setlocale_r+0x34>)
  403aaa:	f001 f837 	bl	404b1c <strcmp>
  403aae:	2800      	cmp	r0, #0
  403ab0:	d0f1      	beq.n	403a96 <_setlocale_r+0x6>
  403ab2:	4620      	mov	r0, r4
  403ab4:	4905      	ldr	r1, [pc, #20]	; (403acc <_setlocale_r+0x3c>)
  403ab6:	f001 f831 	bl	404b1c <strcmp>
  403aba:	2800      	cmp	r0, #0
  403abc:	4801      	ldr	r0, [pc, #4]	; (403ac4 <_setlocale_r+0x34>)
  403abe:	bf18      	it	ne
  403ac0:	2000      	movne	r0, #0
  403ac2:	bd10      	pop	{r4, pc}
  403ac4:	00405cc8 	.word	0x00405cc8
  403ac8:	00405d2b 	.word	0x00405d2b
  403acc:	00405d32 	.word	0x00405d32

00403ad0 <__locale_charset>:
  403ad0:	4800      	ldr	r0, [pc, #0]	; (403ad4 <__locale_charset+0x4>)
  403ad2:	4770      	bx	lr
  403ad4:	20000448 	.word	0x20000448

00403ad8 <__locale_mb_cur_max>:
  403ad8:	4b01      	ldr	r3, [pc, #4]	; (403ae0 <__locale_mb_cur_max+0x8>)
  403ada:	6a18      	ldr	r0, [r3, #32]
  403adc:	4770      	bx	lr
  403ade:	bf00      	nop
  403ae0:	20000448 	.word	0x20000448

00403ae4 <__locale_msgcharset>:
  403ae4:	4800      	ldr	r0, [pc, #0]	; (403ae8 <__locale_msgcharset+0x4>)
  403ae6:	4770      	bx	lr
  403ae8:	2000046c 	.word	0x2000046c

00403aec <__locale_cjk_lang>:
  403aec:	2000      	movs	r0, #0
  403aee:	4770      	bx	lr

00403af0 <_localeconv_r>:
  403af0:	4800      	ldr	r0, [pc, #0]	; (403af4 <_localeconv_r+0x4>)
  403af2:	4770      	bx	lr
  403af4:	2000048c 	.word	0x2000048c

00403af8 <setlocale>:
  403af8:	460a      	mov	r2, r1
  403afa:	4903      	ldr	r1, [pc, #12]	; (403b08 <setlocale+0x10>)
  403afc:	4603      	mov	r3, r0
  403afe:	6808      	ldr	r0, [r1, #0]
  403b00:	4619      	mov	r1, r3
  403b02:	f7ff bfc5 	b.w	403a90 <_setlocale_r>
  403b06:	bf00      	nop
  403b08:	20000018 	.word	0x20000018

00403b0c <localeconv>:
  403b0c:	4800      	ldr	r0, [pc, #0]	; (403b10 <localeconv+0x4>)
  403b0e:	4770      	bx	lr
  403b10:	2000048c 	.word	0x2000048c

00403b14 <_malloc_r>:
  403b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b18:	f101 040b 	add.w	r4, r1, #11
  403b1c:	2c16      	cmp	r4, #22
  403b1e:	4607      	mov	r7, r0
  403b20:	d903      	bls.n	403b2a <_malloc_r+0x16>
  403b22:	f034 0407 	bics.w	r4, r4, #7
  403b26:	d501      	bpl.n	403b2c <_malloc_r+0x18>
  403b28:	e002      	b.n	403b30 <_malloc_r+0x1c>
  403b2a:	2410      	movs	r4, #16
  403b2c:	428c      	cmp	r4, r1
  403b2e:	d202      	bcs.n	403b36 <_malloc_r+0x22>
  403b30:	230c      	movs	r3, #12
  403b32:	603b      	str	r3, [r7, #0]
  403b34:	e1e0      	b.n	403ef8 <_malloc_r+0x3e4>
  403b36:	4638      	mov	r0, r7
  403b38:	f000 fa29 	bl	403f8e <__malloc_lock>
  403b3c:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  403b40:	4da4      	ldr	r5, [pc, #656]	; (403dd4 <_malloc_r+0x2c0>)
  403b42:	d214      	bcs.n	403b6e <_malloc_r+0x5a>
  403b44:	08e2      	lsrs	r2, r4, #3
  403b46:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
  403b4a:	68de      	ldr	r6, [r3, #12]
  403b4c:	429e      	cmp	r6, r3
  403b4e:	d106      	bne.n	403b5e <_malloc_r+0x4a>
  403b50:	f106 0308 	add.w	r3, r6, #8
  403b54:	6976      	ldr	r6, [r6, #20]
  403b56:	429e      	cmp	r6, r3
  403b58:	bf08      	it	eq
  403b5a:	3202      	addeq	r2, #2
  403b5c:	d043      	beq.n	403be6 <_malloc_r+0xd2>
  403b5e:	6873      	ldr	r3, [r6, #4]
  403b60:	68f2      	ldr	r2, [r6, #12]
  403b62:	68b1      	ldr	r1, [r6, #8]
  403b64:	f023 0303 	bic.w	r3, r3, #3
  403b68:	60ca      	str	r2, [r1, #12]
  403b6a:	6091      	str	r1, [r2, #8]
  403b6c:	e05d      	b.n	403c2a <_malloc_r+0x116>
  403b6e:	0a62      	lsrs	r2, r4, #9
  403b70:	d01a      	beq.n	403ba8 <_malloc_r+0x94>
  403b72:	2a04      	cmp	r2, #4
  403b74:	d802      	bhi.n	403b7c <_malloc_r+0x68>
  403b76:	09a2      	lsrs	r2, r4, #6
  403b78:	3238      	adds	r2, #56	; 0x38
  403b7a:	e018      	b.n	403bae <_malloc_r+0x9a>
  403b7c:	2a14      	cmp	r2, #20
  403b7e:	d801      	bhi.n	403b84 <_malloc_r+0x70>
  403b80:	325b      	adds	r2, #91	; 0x5b
  403b82:	e014      	b.n	403bae <_malloc_r+0x9a>
  403b84:	2a54      	cmp	r2, #84	; 0x54
  403b86:	d802      	bhi.n	403b8e <_malloc_r+0x7a>
  403b88:	0b22      	lsrs	r2, r4, #12
  403b8a:	326e      	adds	r2, #110	; 0x6e
  403b8c:	e00f      	b.n	403bae <_malloc_r+0x9a>
  403b8e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403b92:	d802      	bhi.n	403b9a <_malloc_r+0x86>
  403b94:	0be2      	lsrs	r2, r4, #15
  403b96:	3277      	adds	r2, #119	; 0x77
  403b98:	e009      	b.n	403bae <_malloc_r+0x9a>
  403b9a:	f240 5354 	movw	r3, #1364	; 0x554
  403b9e:	429a      	cmp	r2, r3
  403ba0:	d804      	bhi.n	403bac <_malloc_r+0x98>
  403ba2:	0ca2      	lsrs	r2, r4, #18
  403ba4:	327c      	adds	r2, #124	; 0x7c
  403ba6:	e002      	b.n	403bae <_malloc_r+0x9a>
  403ba8:	223f      	movs	r2, #63	; 0x3f
  403baa:	e000      	b.n	403bae <_malloc_r+0x9a>
  403bac:	227e      	movs	r2, #126	; 0x7e
  403bae:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
  403bb2:	68de      	ldr	r6, [r3, #12]
  403bb4:	429e      	cmp	r6, r3
  403bb6:	d015      	beq.n	403be4 <_malloc_r+0xd0>
  403bb8:	6871      	ldr	r1, [r6, #4]
  403bba:	f021 0103 	bic.w	r1, r1, #3
  403bbe:	1b08      	subs	r0, r1, r4
  403bc0:	280f      	cmp	r0, #15
  403bc2:	dd01      	ble.n	403bc8 <_malloc_r+0xb4>
  403bc4:	3a01      	subs	r2, #1
  403bc6:	e00d      	b.n	403be4 <_malloc_r+0xd0>
  403bc8:	2800      	cmp	r0, #0
  403bca:	db09      	blt.n	403be0 <_malloc_r+0xcc>
  403bcc:	68f3      	ldr	r3, [r6, #12]
  403bce:	68b2      	ldr	r2, [r6, #8]
  403bd0:	60d3      	str	r3, [r2, #12]
  403bd2:	609a      	str	r2, [r3, #8]
  403bd4:	1873      	adds	r3, r6, r1
  403bd6:	685a      	ldr	r2, [r3, #4]
  403bd8:	f042 0201 	orr.w	r2, r2, #1
  403bdc:	605a      	str	r2, [r3, #4]
  403bde:	e196      	b.n	403f0e <_malloc_r+0x3fa>
  403be0:	68f6      	ldr	r6, [r6, #12]
  403be2:	e7e7      	b.n	403bb4 <_malloc_r+0xa0>
  403be4:	3201      	adds	r2, #1
  403be6:	497b      	ldr	r1, [pc, #492]	; (403dd4 <_malloc_r+0x2c0>)
  403be8:	692e      	ldr	r6, [r5, #16]
  403bea:	f101 0008 	add.w	r0, r1, #8
  403bee:	4286      	cmp	r6, r0
  403bf0:	4686      	mov	lr, r0
  403bf2:	d06d      	beq.n	403cd0 <_malloc_r+0x1bc>
  403bf4:	6873      	ldr	r3, [r6, #4]
  403bf6:	f023 0303 	bic.w	r3, r3, #3
  403bfa:	ebc4 0c03 	rsb	ip, r4, r3
  403bfe:	f1bc 0f0f 	cmp.w	ip, #15
  403c02:	dd0d      	ble.n	403c20 <_malloc_r+0x10c>
  403c04:	1933      	adds	r3, r6, r4
  403c06:	f04c 0201 	orr.w	r2, ip, #1
  403c0a:	f044 0401 	orr.w	r4, r4, #1
  403c0e:	6074      	str	r4, [r6, #4]
  403c10:	614b      	str	r3, [r1, #20]
  403c12:	610b      	str	r3, [r1, #16]
  403c14:	60d8      	str	r0, [r3, #12]
  403c16:	6098      	str	r0, [r3, #8]
  403c18:	605a      	str	r2, [r3, #4]
  403c1a:	f843 c00c 	str.w	ip, [r3, ip]
  403c1e:	e176      	b.n	403f0e <_malloc_r+0x3fa>
  403c20:	f1bc 0f00 	cmp.w	ip, #0
  403c24:	6148      	str	r0, [r1, #20]
  403c26:	6108      	str	r0, [r1, #16]
  403c28:	db01      	blt.n	403c2e <_malloc_r+0x11a>
  403c2a:	4433      	add	r3, r6
  403c2c:	e7d3      	b.n	403bd6 <_malloc_r+0xc2>
  403c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403c32:	d211      	bcs.n	403c58 <_malloc_r+0x144>
  403c34:	08db      	lsrs	r3, r3, #3
  403c36:	1098      	asrs	r0, r3, #2
  403c38:	f04f 0c01 	mov.w	ip, #1
  403c3c:	fa0c fc00 	lsl.w	ip, ip, r0
  403c40:	6848      	ldr	r0, [r1, #4]
  403c42:	ea4c 0000 	orr.w	r0, ip, r0
  403c46:	6048      	str	r0, [r1, #4]
  403c48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  403c4c:	688b      	ldr	r3, [r1, #8]
  403c4e:	60b3      	str	r3, [r6, #8]
  403c50:	60f1      	str	r1, [r6, #12]
  403c52:	608e      	str	r6, [r1, #8]
  403c54:	60de      	str	r6, [r3, #12]
  403c56:	e03b      	b.n	403cd0 <_malloc_r+0x1bc>
  403c58:	0a58      	lsrs	r0, r3, #9
  403c5a:	2804      	cmp	r0, #4
  403c5c:	d802      	bhi.n	403c64 <_malloc_r+0x150>
  403c5e:	0998      	lsrs	r0, r3, #6
  403c60:	3038      	adds	r0, #56	; 0x38
  403c62:	e015      	b.n	403c90 <_malloc_r+0x17c>
  403c64:	2814      	cmp	r0, #20
  403c66:	d801      	bhi.n	403c6c <_malloc_r+0x158>
  403c68:	305b      	adds	r0, #91	; 0x5b
  403c6a:	e011      	b.n	403c90 <_malloc_r+0x17c>
  403c6c:	2854      	cmp	r0, #84	; 0x54
  403c6e:	d802      	bhi.n	403c76 <_malloc_r+0x162>
  403c70:	0b18      	lsrs	r0, r3, #12
  403c72:	306e      	adds	r0, #110	; 0x6e
  403c74:	e00c      	b.n	403c90 <_malloc_r+0x17c>
  403c76:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  403c7a:	d802      	bhi.n	403c82 <_malloc_r+0x16e>
  403c7c:	0bd8      	lsrs	r0, r3, #15
  403c7e:	3077      	adds	r0, #119	; 0x77
  403c80:	e006      	b.n	403c90 <_malloc_r+0x17c>
  403c82:	f240 5154 	movw	r1, #1364	; 0x554
  403c86:	4288      	cmp	r0, r1
  403c88:	bf9a      	itte	ls
  403c8a:	0c98      	lsrls	r0, r3, #18
  403c8c:	307c      	addls	r0, #124	; 0x7c
  403c8e:	207e      	movhi	r0, #126	; 0x7e
  403c90:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
  403c94:	f8df 813c 	ldr.w	r8, [pc, #316]	; 403dd4 <_malloc_r+0x2c0>
  403c98:	f8dc 1008 	ldr.w	r1, [ip, #8]
  403c9c:	4561      	cmp	r1, ip
  403c9e:	d10d      	bne.n	403cbc <_malloc_r+0x1a8>
  403ca0:	2301      	movs	r3, #1
  403ca2:	1080      	asrs	r0, r0, #2
  403ca4:	fa03 f000 	lsl.w	r0, r3, r0
  403ca8:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403cac:	4303      	orrs	r3, r0
  403cae:	f8c8 3004 	str.w	r3, [r8, #4]
  403cb2:	460b      	mov	r3, r1
  403cb4:	e008      	b.n	403cc8 <_malloc_r+0x1b4>
  403cb6:	6889      	ldr	r1, [r1, #8]
  403cb8:	4561      	cmp	r1, ip
  403cba:	d004      	beq.n	403cc6 <_malloc_r+0x1b2>
  403cbc:	6848      	ldr	r0, [r1, #4]
  403cbe:	f020 0003 	bic.w	r0, r0, #3
  403cc2:	4283      	cmp	r3, r0
  403cc4:	d3f7      	bcc.n	403cb6 <_malloc_r+0x1a2>
  403cc6:	68cb      	ldr	r3, [r1, #12]
  403cc8:	60f3      	str	r3, [r6, #12]
  403cca:	60b1      	str	r1, [r6, #8]
  403ccc:	609e      	str	r6, [r3, #8]
  403cce:	60ce      	str	r6, [r1, #12]
  403cd0:	2101      	movs	r1, #1
  403cd2:	1093      	asrs	r3, r2, #2
  403cd4:	fa01 f303 	lsl.w	r3, r1, r3
  403cd8:	6869      	ldr	r1, [r5, #4]
  403cda:	428b      	cmp	r3, r1
  403cdc:	d85e      	bhi.n	403d9c <_malloc_r+0x288>
  403cde:	420b      	tst	r3, r1
  403ce0:	d106      	bne.n	403cf0 <_malloc_r+0x1dc>
  403ce2:	f022 0203 	bic.w	r2, r2, #3
  403ce6:	005b      	lsls	r3, r3, #1
  403ce8:	420b      	tst	r3, r1
  403cea:	f102 0204 	add.w	r2, r2, #4
  403cee:	d0fa      	beq.n	403ce6 <_malloc_r+0x1d2>
  403cf0:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
  403cf4:	4680      	mov	r8, r0
  403cf6:	4694      	mov	ip, r2
  403cf8:	f8d8 600c 	ldr.w	r6, [r8, #12]
  403cfc:	4546      	cmp	r6, r8
  403cfe:	d02d      	beq.n	403d5c <_malloc_r+0x248>
  403d00:	6871      	ldr	r1, [r6, #4]
  403d02:	f021 0903 	bic.w	r9, r1, #3
  403d06:	ebc4 0109 	rsb	r1, r4, r9
  403d0a:	290f      	cmp	r1, #15
  403d0c:	dd13      	ble.n	403d36 <_malloc_r+0x222>
  403d0e:	1933      	adds	r3, r6, r4
  403d10:	f044 0401 	orr.w	r4, r4, #1
  403d14:	68f2      	ldr	r2, [r6, #12]
  403d16:	6074      	str	r4, [r6, #4]
  403d18:	f856 0f08 	ldr.w	r0, [r6, #8]!
  403d1c:	60c2      	str	r2, [r0, #12]
  403d1e:	6090      	str	r0, [r2, #8]
  403d20:	f041 0201 	orr.w	r2, r1, #1
  403d24:	616b      	str	r3, [r5, #20]
  403d26:	612b      	str	r3, [r5, #16]
  403d28:	f8c3 e00c 	str.w	lr, [r3, #12]
  403d2c:	f8c3 e008 	str.w	lr, [r3, #8]
  403d30:	605a      	str	r2, [r3, #4]
  403d32:	5059      	str	r1, [r3, r1]
  403d34:	e00c      	b.n	403d50 <_malloc_r+0x23c>
  403d36:	2900      	cmp	r1, #0
  403d38:	db0e      	blt.n	403d58 <_malloc_r+0x244>
  403d3a:	eb06 0109 	add.w	r1, r6, r9
  403d3e:	684b      	ldr	r3, [r1, #4]
  403d40:	f043 0301 	orr.w	r3, r3, #1
  403d44:	604b      	str	r3, [r1, #4]
  403d46:	68f3      	ldr	r3, [r6, #12]
  403d48:	f856 2f08 	ldr.w	r2, [r6, #8]!
  403d4c:	60d3      	str	r3, [r2, #12]
  403d4e:	609a      	str	r2, [r3, #8]
  403d50:	4638      	mov	r0, r7
  403d52:	f000 f91d 	bl	403f90 <__malloc_unlock>
  403d56:	e0de      	b.n	403f16 <_malloc_r+0x402>
  403d58:	68f6      	ldr	r6, [r6, #12]
  403d5a:	e7cf      	b.n	403cfc <_malloc_r+0x1e8>
  403d5c:	f10c 0c01 	add.w	ip, ip, #1
  403d60:	f01c 0f03 	tst.w	ip, #3
  403d64:	f108 0808 	add.w	r8, r8, #8
  403d68:	d1c6      	bne.n	403cf8 <_malloc_r+0x1e4>
  403d6a:	0791      	lsls	r1, r2, #30
  403d6c:	d104      	bne.n	403d78 <_malloc_r+0x264>
  403d6e:	686a      	ldr	r2, [r5, #4]
  403d70:	ea22 0203 	bic.w	r2, r2, r3
  403d74:	606a      	str	r2, [r5, #4]
  403d76:	e006      	b.n	403d86 <_malloc_r+0x272>
  403d78:	f1a0 0108 	sub.w	r1, r0, #8
  403d7c:	6800      	ldr	r0, [r0, #0]
  403d7e:	4288      	cmp	r0, r1
  403d80:	f102 32ff 	add.w	r2, r2, #4294967295
  403d84:	d0f1      	beq.n	403d6a <_malloc_r+0x256>
  403d86:	6869      	ldr	r1, [r5, #4]
  403d88:	005b      	lsls	r3, r3, #1
  403d8a:	428b      	cmp	r3, r1
  403d8c:	d806      	bhi.n	403d9c <_malloc_r+0x288>
  403d8e:	b12b      	cbz	r3, 403d9c <_malloc_r+0x288>
  403d90:	4662      	mov	r2, ip
  403d92:	420b      	tst	r3, r1
  403d94:	d1ac      	bne.n	403cf0 <_malloc_r+0x1dc>
  403d96:	3204      	adds	r2, #4
  403d98:	005b      	lsls	r3, r3, #1
  403d9a:	e7fa      	b.n	403d92 <_malloc_r+0x27e>
  403d9c:	f8d5 9008 	ldr.w	r9, [r5, #8]
  403da0:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403da4:	f023 0b03 	bic.w	fp, r3, #3
  403da8:	45a3      	cmp	fp, r4
  403daa:	d304      	bcc.n	403db6 <_malloc_r+0x2a2>
  403dac:	ebc4 030b 	rsb	r3, r4, fp
  403db0:	2b0f      	cmp	r3, #15
  403db2:	f300 80a3 	bgt.w	403efc <_malloc_r+0x3e8>
  403db6:	4908      	ldr	r1, [pc, #32]	; (403dd8 <_malloc_r+0x2c4>)
  403db8:	680a      	ldr	r2, [r1, #0]
  403dba:	eb04 0a02 	add.w	sl, r4, r2
  403dbe:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
  403dc2:	3201      	adds	r2, #1
  403dc4:	eb09 030b 	add.w	r3, r9, fp
  403dc8:	4688      	mov	r8, r1
  403dca:	d107      	bne.n	403ddc <_malloc_r+0x2c8>
  403dcc:	f10a 0a10 	add.w	sl, sl, #16
  403dd0:	e00c      	b.n	403dec <_malloc_r+0x2d8>
  403dd2:	bf00      	nop
  403dd4:	200004c4 	.word	0x200004c4
  403dd8:	2000096c 	.word	0x2000096c
  403ddc:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  403de0:	f10a 0a0f 	add.w	sl, sl, #15
  403de4:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  403de8:	f02a 0a0f 	bic.w	sl, sl, #15
  403dec:	4638      	mov	r0, r7
  403dee:	4651      	mov	r1, sl
  403df0:	9301      	str	r3, [sp, #4]
  403df2:	f000 fe83 	bl	404afc <_sbrk_r>
  403df6:	1c42      	adds	r2, r0, #1
  403df8:	4606      	mov	r6, r0
  403dfa:	9b01      	ldr	r3, [sp, #4]
  403dfc:	d06f      	beq.n	403ede <_malloc_r+0x3ca>
  403dfe:	4298      	cmp	r0, r3
  403e00:	d201      	bcs.n	403e06 <_malloc_r+0x2f2>
  403e02:	45a9      	cmp	r9, r5
  403e04:	d16b      	bne.n	403ede <_malloc_r+0x3ca>
  403e06:	f8d8 2004 	ldr.w	r2, [r8, #4]
  403e0a:	429e      	cmp	r6, r3
  403e0c:	4452      	add	r2, sl
  403e0e:	f8c8 2004 	str.w	r2, [r8, #4]
  403e12:	d108      	bne.n	403e26 <_malloc_r+0x312>
  403e14:	f3c6 010b 	ubfx	r1, r6, #0, #12
  403e18:	b929      	cbnz	r1, 403e26 <_malloc_r+0x312>
  403e1a:	68ab      	ldr	r3, [r5, #8]
  403e1c:	44da      	add	sl, fp
  403e1e:	f04a 0201 	orr.w	r2, sl, #1
  403e22:	605a      	str	r2, [r3, #4]
  403e24:	e04d      	b.n	403ec2 <_malloc_r+0x3ae>
  403e26:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
  403e2a:	3101      	adds	r1, #1
  403e2c:	d103      	bne.n	403e36 <_malloc_r+0x322>
  403e2e:	4b3c      	ldr	r3, [pc, #240]	; (403f20 <_malloc_r+0x40c>)
  403e30:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
  403e34:	e003      	b.n	403e3e <_malloc_r+0x32a>
  403e36:	1af3      	subs	r3, r6, r3
  403e38:	441a      	add	r2, r3
  403e3a:	f8c8 2004 	str.w	r2, [r8, #4]
  403e3e:	f016 0307 	ands.w	r3, r6, #7
  403e42:	bf1c      	itt	ne
  403e44:	f1c3 0308 	rsbne	r3, r3, #8
  403e48:	18f6      	addne	r6, r6, r3
  403e4a:	44b2      	add	sl, r6
  403e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403e50:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  403e54:	ebca 0a03 	rsb	sl, sl, r3
  403e58:	4651      	mov	r1, sl
  403e5a:	4638      	mov	r0, r7
  403e5c:	f000 fe4e 	bl	404afc <_sbrk_r>
  403e60:	1c43      	adds	r3, r0, #1
  403e62:	bf04      	itt	eq
  403e64:	4630      	moveq	r0, r6
  403e66:	f04f 0a00 	moveq.w	sl, #0
  403e6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403e6e:	60ae      	str	r6, [r5, #8]
  403e70:	1b80      	subs	r0, r0, r6
  403e72:	4450      	add	r0, sl
  403e74:	4453      	add	r3, sl
  403e76:	f040 0001 	orr.w	r0, r0, #1
  403e7a:	45a9      	cmp	r9, r5
  403e7c:	f8c8 3004 	str.w	r3, [r8, #4]
  403e80:	6070      	str	r0, [r6, #4]
  403e82:	d01e      	beq.n	403ec2 <_malloc_r+0x3ae>
  403e84:	f1bb 0f0f 	cmp.w	fp, #15
  403e88:	d802      	bhi.n	403e90 <_malloc_r+0x37c>
  403e8a:	2301      	movs	r3, #1
  403e8c:	6073      	str	r3, [r6, #4]
  403e8e:	e026      	b.n	403ede <_malloc_r+0x3ca>
  403e90:	f8d9 3004 	ldr.w	r3, [r9, #4]
  403e94:	f1ab 0b0c 	sub.w	fp, fp, #12
  403e98:	f02b 0b07 	bic.w	fp, fp, #7
  403e9c:	f003 0301 	and.w	r3, r3, #1
  403ea0:	ea4b 0303 	orr.w	r3, fp, r3
  403ea4:	f8c9 3004 	str.w	r3, [r9, #4]
  403ea8:	eb09 030b 	add.w	r3, r9, fp
  403eac:	2205      	movs	r2, #5
  403eae:	f1bb 0f0f 	cmp.w	fp, #15
  403eb2:	605a      	str	r2, [r3, #4]
  403eb4:	609a      	str	r2, [r3, #8]
  403eb6:	d904      	bls.n	403ec2 <_malloc_r+0x3ae>
  403eb8:	4638      	mov	r0, r7
  403eba:	f109 0108 	add.w	r1, r9, #8
  403ebe:	f7ff fd2f 	bl	403920 <_free_r>
  403ec2:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403ec6:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
  403eca:	4293      	cmp	r3, r2
  403ecc:	bf84      	itt	hi
  403ece:	4a15      	ldrhi	r2, [pc, #84]	; (403f24 <_malloc_r+0x410>)
  403ed0:	62d3      	strhi	r3, [r2, #44]	; 0x2c
  403ed2:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
  403ed6:	4293      	cmp	r3, r2
  403ed8:	bf84      	itt	hi
  403eda:	4a12      	ldrhi	r2, [pc, #72]	; (403f24 <_malloc_r+0x410>)
  403edc:	6313      	strhi	r3, [r2, #48]	; 0x30
  403ede:	68ab      	ldr	r3, [r5, #8]
  403ee0:	685a      	ldr	r2, [r3, #4]
  403ee2:	f022 0203 	bic.w	r2, r2, #3
  403ee6:	42a2      	cmp	r2, r4
  403ee8:	ebc4 0302 	rsb	r3, r4, r2
  403eec:	d301      	bcc.n	403ef2 <_malloc_r+0x3de>
  403eee:	2b0f      	cmp	r3, #15
  403ef0:	dc04      	bgt.n	403efc <_malloc_r+0x3e8>
  403ef2:	4638      	mov	r0, r7
  403ef4:	f000 f84c 	bl	403f90 <__malloc_unlock>
  403ef8:	2600      	movs	r6, #0
  403efa:	e00c      	b.n	403f16 <_malloc_r+0x402>
  403efc:	68ae      	ldr	r6, [r5, #8]
  403efe:	f044 0201 	orr.w	r2, r4, #1
  403f02:	4434      	add	r4, r6
  403f04:	f043 0301 	orr.w	r3, r3, #1
  403f08:	6072      	str	r2, [r6, #4]
  403f0a:	60ac      	str	r4, [r5, #8]
  403f0c:	6063      	str	r3, [r4, #4]
  403f0e:	4638      	mov	r0, r7
  403f10:	f000 f83e 	bl	403f90 <__malloc_unlock>
  403f14:	3608      	adds	r6, #8
  403f16:	4630      	mov	r0, r6
  403f18:	b003      	add	sp, #12
  403f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f1e:	bf00      	nop
  403f20:	200004c4 	.word	0x200004c4
  403f24:	2000096c 	.word	0x2000096c

00403f28 <memchr>:
  403f28:	b510      	push	{r4, lr}
  403f2a:	b2c9      	uxtb	r1, r1
  403f2c:	4402      	add	r2, r0
  403f2e:	4290      	cmp	r0, r2
  403f30:	4603      	mov	r3, r0
  403f32:	d006      	beq.n	403f42 <memchr+0x1a>
  403f34:	781c      	ldrb	r4, [r3, #0]
  403f36:	428c      	cmp	r4, r1
  403f38:	f100 0001 	add.w	r0, r0, #1
  403f3c:	d1f7      	bne.n	403f2e <memchr+0x6>
  403f3e:	4618      	mov	r0, r3
  403f40:	bd10      	pop	{r4, pc}
  403f42:	2000      	movs	r0, #0
  403f44:	bd10      	pop	{r4, pc}

00403f46 <memcpy>:
  403f46:	b510      	push	{r4, lr}
  403f48:	2300      	movs	r3, #0
  403f4a:	4293      	cmp	r3, r2
  403f4c:	d003      	beq.n	403f56 <memcpy+0x10>
  403f4e:	5ccc      	ldrb	r4, [r1, r3]
  403f50:	54c4      	strb	r4, [r0, r3]
  403f52:	3301      	adds	r3, #1
  403f54:	e7f9      	b.n	403f4a <memcpy+0x4>
  403f56:	bd10      	pop	{r4, pc}

00403f58 <memmove>:
  403f58:	4281      	cmp	r1, r0
  403f5a:	b570      	push	{r4, r5, r6, lr}
  403f5c:	d301      	bcc.n	403f62 <memmove+0xa>
  403f5e:	2300      	movs	r3, #0
  403f60:	e00e      	b.n	403f80 <memmove+0x28>
  403f62:	188c      	adds	r4, r1, r2
  403f64:	42a0      	cmp	r0, r4
  403f66:	d2fa      	bcs.n	403f5e <memmove+0x6>
  403f68:	1885      	adds	r5, r0, r2
  403f6a:	4613      	mov	r3, r2
  403f6c:	f113 33ff 	adds.w	r3, r3, #4294967295
  403f70:	d305      	bcc.n	403f7e <memmove+0x26>
  403f72:	4251      	negs	r1, r2
  403f74:	1866      	adds	r6, r4, r1
  403f76:	4429      	add	r1, r5
  403f78:	5cf6      	ldrb	r6, [r6, r3]
  403f7a:	54ce      	strb	r6, [r1, r3]
  403f7c:	e7f6      	b.n	403f6c <memmove+0x14>
  403f7e:	bd70      	pop	{r4, r5, r6, pc}
  403f80:	4293      	cmp	r3, r2
  403f82:	d003      	beq.n	403f8c <memmove+0x34>
  403f84:	5ccc      	ldrb	r4, [r1, r3]
  403f86:	54c4      	strb	r4, [r0, r3]
  403f88:	3301      	adds	r3, #1
  403f8a:	e7f9      	b.n	403f80 <memmove+0x28>
  403f8c:	bd70      	pop	{r4, r5, r6, pc}

00403f8e <__malloc_lock>:
  403f8e:	4770      	bx	lr

00403f90 <__malloc_unlock>:
  403f90:	4770      	bx	lr
	...

00403f94 <_Balloc>:
  403f94:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  403f96:	b570      	push	{r4, r5, r6, lr}
  403f98:	4605      	mov	r5, r0
  403f9a:	460c      	mov	r4, r1
  403f9c:	b13b      	cbz	r3, 403fae <_Balloc+0x1a>
  403f9e:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  403fa0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  403fa4:	b160      	cbz	r0, 403fc0 <_Balloc+0x2c>
  403fa6:	6801      	ldr	r1, [r0, #0]
  403fa8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  403fac:	e014      	b.n	403fd8 <_Balloc+0x44>
  403fae:	2104      	movs	r1, #4
  403fb0:	2221      	movs	r2, #33	; 0x21
  403fb2:	f001 fa77 	bl	4054a4 <_calloc_r>
  403fb6:	64e8      	str	r0, [r5, #76]	; 0x4c
  403fb8:	2800      	cmp	r0, #0
  403fba:	d1f0      	bne.n	403f9e <_Balloc+0xa>
  403fbc:	2000      	movs	r0, #0
  403fbe:	bd70      	pop	{r4, r5, r6, pc}
  403fc0:	2101      	movs	r1, #1
  403fc2:	fa01 f604 	lsl.w	r6, r1, r4
  403fc6:	1d72      	adds	r2, r6, #5
  403fc8:	4628      	mov	r0, r5
  403fca:	0092      	lsls	r2, r2, #2
  403fcc:	f001 fa6a 	bl	4054a4 <_calloc_r>
  403fd0:	2800      	cmp	r0, #0
  403fd2:	d0f3      	beq.n	403fbc <_Balloc+0x28>
  403fd4:	6044      	str	r4, [r0, #4]
  403fd6:	6086      	str	r6, [r0, #8]
  403fd8:	2200      	movs	r2, #0
  403fda:	6102      	str	r2, [r0, #16]
  403fdc:	60c2      	str	r2, [r0, #12]
  403fde:	bd70      	pop	{r4, r5, r6, pc}

00403fe0 <_Bfree>:
  403fe0:	b131      	cbz	r1, 403ff0 <_Bfree+0x10>
  403fe2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  403fe4:	684a      	ldr	r2, [r1, #4]
  403fe6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  403fea:	6008      	str	r0, [r1, #0]
  403fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  403ff0:	4770      	bx	lr

00403ff2 <__multadd>:
  403ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ff6:	460c      	mov	r4, r1
  403ff8:	461e      	mov	r6, r3
  403ffa:	690d      	ldr	r5, [r1, #16]
  403ffc:	4607      	mov	r7, r0
  403ffe:	3114      	adds	r1, #20
  404000:	2300      	movs	r3, #0
  404002:	6808      	ldr	r0, [r1, #0]
  404004:	fa1f fc80 	uxth.w	ip, r0
  404008:	0c00      	lsrs	r0, r0, #16
  40400a:	fb02 6c0c 	mla	ip, r2, ip, r6
  40400e:	4350      	muls	r0, r2
  404010:	eb00 401c 	add.w	r0, r0, ip, lsr #16
  404014:	3301      	adds	r3, #1
  404016:	fa1f fc8c 	uxth.w	ip, ip
  40401a:	0c06      	lsrs	r6, r0, #16
  40401c:	42ab      	cmp	r3, r5
  40401e:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
  404022:	f841 0b04 	str.w	r0, [r1], #4
  404026:	dbec      	blt.n	404002 <__multadd+0x10>
  404028:	b1d6      	cbz	r6, 404060 <__multadd+0x6e>
  40402a:	68a3      	ldr	r3, [r4, #8]
  40402c:	429d      	cmp	r5, r3
  40402e:	db12      	blt.n	404056 <__multadd+0x64>
  404030:	6861      	ldr	r1, [r4, #4]
  404032:	4638      	mov	r0, r7
  404034:	3101      	adds	r1, #1
  404036:	f7ff ffad 	bl	403f94 <_Balloc>
  40403a:	6922      	ldr	r2, [r4, #16]
  40403c:	3202      	adds	r2, #2
  40403e:	f104 010c 	add.w	r1, r4, #12
  404042:	4680      	mov	r8, r0
  404044:	0092      	lsls	r2, r2, #2
  404046:	300c      	adds	r0, #12
  404048:	f7ff ff7d 	bl	403f46 <memcpy>
  40404c:	4621      	mov	r1, r4
  40404e:	4638      	mov	r0, r7
  404050:	f7ff ffc6 	bl	403fe0 <_Bfree>
  404054:	4644      	mov	r4, r8
  404056:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  40405a:	3501      	adds	r5, #1
  40405c:	615e      	str	r6, [r3, #20]
  40405e:	6125      	str	r5, [r4, #16]
  404060:	4620      	mov	r0, r4
  404062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404066 <__s2b>:
  404066:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40406a:	4614      	mov	r4, r2
  40406c:	4698      	mov	r8, r3
  40406e:	f103 0208 	add.w	r2, r3, #8
  404072:	2309      	movs	r3, #9
  404074:	460d      	mov	r5, r1
  404076:	fb92 f2f3 	sdiv	r2, r2, r3
  40407a:	4606      	mov	r6, r0
  40407c:	2301      	movs	r3, #1
  40407e:	2100      	movs	r1, #0
  404080:	429a      	cmp	r2, r3
  404082:	dd02      	ble.n	40408a <__s2b+0x24>
  404084:	005b      	lsls	r3, r3, #1
  404086:	3101      	adds	r1, #1
  404088:	e7fa      	b.n	404080 <__s2b+0x1a>
  40408a:	4630      	mov	r0, r6
  40408c:	f7ff ff82 	bl	403f94 <_Balloc>
  404090:	9b08      	ldr	r3, [sp, #32]
  404092:	6143      	str	r3, [r0, #20]
  404094:	2c09      	cmp	r4, #9
  404096:	f04f 0301 	mov.w	r3, #1
  40409a:	4601      	mov	r1, r0
  40409c:	6103      	str	r3, [r0, #16]
  40409e:	dd11      	ble.n	4040c4 <__s2b+0x5e>
  4040a0:	f105 0909 	add.w	r9, r5, #9
  4040a4:	464f      	mov	r7, r9
  4040a6:	4425      	add	r5, r4
  4040a8:	f817 3b01 	ldrb.w	r3, [r7], #1
  4040ac:	4630      	mov	r0, r6
  4040ae:	220a      	movs	r2, #10
  4040b0:	3b30      	subs	r3, #48	; 0x30
  4040b2:	f7ff ff9e 	bl	403ff2 <__multadd>
  4040b6:	42af      	cmp	r7, r5
  4040b8:	4601      	mov	r1, r0
  4040ba:	d1f5      	bne.n	4040a8 <__s2b+0x42>
  4040bc:	eb09 0704 	add.w	r7, r9, r4
  4040c0:	3f08      	subs	r7, #8
  4040c2:	e002      	b.n	4040ca <__s2b+0x64>
  4040c4:	f105 070a 	add.w	r7, r5, #10
  4040c8:	2409      	movs	r4, #9
  4040ca:	4625      	mov	r5, r4
  4040cc:	4545      	cmp	r5, r8
  4040ce:	da09      	bge.n	4040e4 <__s2b+0x7e>
  4040d0:	1b3b      	subs	r3, r7, r4
  4040d2:	4630      	mov	r0, r6
  4040d4:	5d5b      	ldrb	r3, [r3, r5]
  4040d6:	220a      	movs	r2, #10
  4040d8:	3b30      	subs	r3, #48	; 0x30
  4040da:	f7ff ff8a 	bl	403ff2 <__multadd>
  4040de:	3501      	adds	r5, #1
  4040e0:	4601      	mov	r1, r0
  4040e2:	e7f3      	b.n	4040cc <__s2b+0x66>
  4040e4:	4608      	mov	r0, r1
  4040e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004040ea <__hi0bits>:
  4040ea:	0c03      	lsrs	r3, r0, #16
  4040ec:	041b      	lsls	r3, r3, #16
  4040ee:	b913      	cbnz	r3, 4040f6 <__hi0bits+0xc>
  4040f0:	0400      	lsls	r0, r0, #16
  4040f2:	2310      	movs	r3, #16
  4040f4:	e000      	b.n	4040f8 <__hi0bits+0xe>
  4040f6:	2300      	movs	r3, #0
  4040f8:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4040fc:	bf04      	itt	eq
  4040fe:	0200      	lsleq	r0, r0, #8
  404100:	3308      	addeq	r3, #8
  404102:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  404106:	bf04      	itt	eq
  404108:	0100      	lsleq	r0, r0, #4
  40410a:	3304      	addeq	r3, #4
  40410c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  404110:	bf04      	itt	eq
  404112:	0080      	lsleq	r0, r0, #2
  404114:	3302      	addeq	r3, #2
  404116:	2800      	cmp	r0, #0
  404118:	db03      	blt.n	404122 <__hi0bits+0x38>
  40411a:	0042      	lsls	r2, r0, #1
  40411c:	d503      	bpl.n	404126 <__hi0bits+0x3c>
  40411e:	1c58      	adds	r0, r3, #1
  404120:	4770      	bx	lr
  404122:	4618      	mov	r0, r3
  404124:	4770      	bx	lr
  404126:	2020      	movs	r0, #32
  404128:	4770      	bx	lr

0040412a <__lo0bits>:
  40412a:	6803      	ldr	r3, [r0, #0]
  40412c:	f013 0207 	ands.w	r2, r3, #7
  404130:	d00b      	beq.n	40414a <__lo0bits+0x20>
  404132:	07d9      	lsls	r1, r3, #31
  404134:	d422      	bmi.n	40417c <__lo0bits+0x52>
  404136:	079a      	lsls	r2, r3, #30
  404138:	d503      	bpl.n	404142 <__lo0bits+0x18>
  40413a:	085b      	lsrs	r3, r3, #1
  40413c:	6003      	str	r3, [r0, #0]
  40413e:	2001      	movs	r0, #1
  404140:	4770      	bx	lr
  404142:	089b      	lsrs	r3, r3, #2
  404144:	6003      	str	r3, [r0, #0]
  404146:	2002      	movs	r0, #2
  404148:	4770      	bx	lr
  40414a:	b299      	uxth	r1, r3
  40414c:	b909      	cbnz	r1, 404152 <__lo0bits+0x28>
  40414e:	0c1b      	lsrs	r3, r3, #16
  404150:	2210      	movs	r2, #16
  404152:	f013 0fff 	tst.w	r3, #255	; 0xff
  404156:	bf04      	itt	eq
  404158:	0a1b      	lsreq	r3, r3, #8
  40415a:	3208      	addeq	r2, #8
  40415c:	0719      	lsls	r1, r3, #28
  40415e:	bf04      	itt	eq
  404160:	091b      	lsreq	r3, r3, #4
  404162:	3204      	addeq	r2, #4
  404164:	0799      	lsls	r1, r3, #30
  404166:	bf04      	itt	eq
  404168:	089b      	lsreq	r3, r3, #2
  40416a:	3202      	addeq	r2, #2
  40416c:	07d9      	lsls	r1, r3, #31
  40416e:	d402      	bmi.n	404176 <__lo0bits+0x4c>
  404170:	085b      	lsrs	r3, r3, #1
  404172:	d005      	beq.n	404180 <__lo0bits+0x56>
  404174:	3201      	adds	r2, #1
  404176:	6003      	str	r3, [r0, #0]
  404178:	4610      	mov	r0, r2
  40417a:	4770      	bx	lr
  40417c:	2000      	movs	r0, #0
  40417e:	4770      	bx	lr
  404180:	2020      	movs	r0, #32
  404182:	4770      	bx	lr

00404184 <__i2b>:
  404184:	b510      	push	{r4, lr}
  404186:	460c      	mov	r4, r1
  404188:	2101      	movs	r1, #1
  40418a:	f7ff ff03 	bl	403f94 <_Balloc>
  40418e:	2201      	movs	r2, #1
  404190:	6144      	str	r4, [r0, #20]
  404192:	6102      	str	r2, [r0, #16]
  404194:	bd10      	pop	{r4, pc}

00404196 <__multiply>:
  404196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40419a:	4616      	mov	r6, r2
  40419c:	690a      	ldr	r2, [r1, #16]
  40419e:	6933      	ldr	r3, [r6, #16]
  4041a0:	429a      	cmp	r2, r3
  4041a2:	b085      	sub	sp, #20
  4041a4:	460d      	mov	r5, r1
  4041a6:	da01      	bge.n	4041ac <__multiply+0x16>
  4041a8:	4635      	mov	r5, r6
  4041aa:	460e      	mov	r6, r1
  4041ac:	f8d5 8010 	ldr.w	r8, [r5, #16]
  4041b0:	6937      	ldr	r7, [r6, #16]
  4041b2:	68ab      	ldr	r3, [r5, #8]
  4041b4:	6869      	ldr	r1, [r5, #4]
  4041b6:	eb08 0407 	add.w	r4, r8, r7
  4041ba:	429c      	cmp	r4, r3
  4041bc:	bfc8      	it	gt
  4041be:	3101      	addgt	r1, #1
  4041c0:	f7ff fee8 	bl	403f94 <_Balloc>
  4041c4:	f100 0314 	add.w	r3, r0, #20
  4041c8:	eb03 0184 	add.w	r1, r3, r4, lsl #2
  4041cc:	9101      	str	r1, [sp, #4]
  4041ce:	461a      	mov	r2, r3
  4041d0:	f8dd a004 	ldr.w	sl, [sp, #4]
  4041d4:	4552      	cmp	r2, sl
  4041d6:	d203      	bcs.n	4041e0 <__multiply+0x4a>
  4041d8:	2100      	movs	r1, #0
  4041da:	f842 1b04 	str.w	r1, [r2], #4
  4041de:	e7f7      	b.n	4041d0 <__multiply+0x3a>
  4041e0:	f105 0114 	add.w	r1, r5, #20
  4041e4:	f106 0214 	add.w	r2, r6, #20
  4041e8:	eb01 0888 	add.w	r8, r1, r8, lsl #2
  4041ec:	eb02 0787 	add.w	r7, r2, r7, lsl #2
  4041f0:	f8cd 8008 	str.w	r8, [sp, #8]
  4041f4:	9703      	str	r7, [sp, #12]
  4041f6:	9e03      	ldr	r6, [sp, #12]
  4041f8:	42b2      	cmp	r2, r6
  4041fa:	4615      	mov	r5, r2
  4041fc:	d256      	bcs.n	4042ac <__multiply+0x116>
  4041fe:	f8b5 c000 	ldrh.w	ip, [r5]
  404202:	3204      	adds	r2, #4
  404204:	f1bc 0f00 	cmp.w	ip, #0
  404208:	d025      	beq.n	404256 <__multiply+0xc0>
  40420a:	460f      	mov	r7, r1
  40420c:	461d      	mov	r5, r3
  40420e:	2600      	movs	r6, #0
  404210:	f857 9b04 	ldr.w	r9, [r7], #4
  404214:	f8d5 8000 	ldr.w	r8, [r5]
  404218:	fa1f fb89 	uxth.w	fp, r9
  40421c:	fa1f fa88 	uxth.w	sl, r8
  404220:	fb0c aa0b 	mla	sl, ip, fp, sl
  404224:	ea4f 4919 	mov.w	r9, r9, lsr #16
  404228:	ea4f 4818 	mov.w	r8, r8, lsr #16
  40422c:	44b2      	add	sl, r6
  40422e:	fb0c 8809 	mla	r8, ip, r9, r8
  404232:	eb08 481a 	add.w	r8, r8, sl, lsr #16
  404236:	fa1f fa8a 	uxth.w	sl, sl
  40423a:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
  40423e:	ea4f 4618 	mov.w	r6, r8, lsr #16
  404242:	f8dd 8008 	ldr.w	r8, [sp, #8]
  404246:	46ab      	mov	fp, r5
  404248:	45b8      	cmp	r8, r7
  40424a:	f84b ab04 	str.w	sl, [fp], #4
  40424e:	d901      	bls.n	404254 <__multiply+0xbe>
  404250:	465d      	mov	r5, fp
  404252:	e7dd      	b.n	404210 <__multiply+0x7a>
  404254:	606e      	str	r6, [r5, #4]
  404256:	f832 8c02 	ldrh.w	r8, [r2, #-2]
  40425a:	f1b8 0f00 	cmp.w	r8, #0
  40425e:	d023      	beq.n	4042a8 <__multiply+0x112>
  404260:	681e      	ldr	r6, [r3, #0]
  404262:	460f      	mov	r7, r1
  404264:	461d      	mov	r5, r3
  404266:	f04f 0900 	mov.w	r9, #0
  40426a:	f8b7 a000 	ldrh.w	sl, [r7]
  40426e:	f8b5 c002 	ldrh.w	ip, [r5, #2]
  404272:	fb08 cc0a 	mla	ip, r8, sl, ip
  404276:	44e1      	add	r9, ip
  404278:	b2b6      	uxth	r6, r6
  40427a:	46ac      	mov	ip, r5
  40427c:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
  404280:	f84c 6b04 	str.w	r6, [ip], #4
  404284:	f857 6b04 	ldr.w	r6, [r7], #4
  404288:	f8b5 a004 	ldrh.w	sl, [r5, #4]
  40428c:	0c36      	lsrs	r6, r6, #16
  40428e:	fb08 a606 	mla	r6, r8, r6, sl
  404292:	f8dd a008 	ldr.w	sl, [sp, #8]
  404296:	eb06 4619 	add.w	r6, r6, r9, lsr #16
  40429a:	4557      	cmp	r7, sl
  40429c:	ea4f 4916 	mov.w	r9, r6, lsr #16
  4042a0:	d201      	bcs.n	4042a6 <__multiply+0x110>
  4042a2:	4665      	mov	r5, ip
  4042a4:	e7e1      	b.n	40426a <__multiply+0xd4>
  4042a6:	606e      	str	r6, [r5, #4]
  4042a8:	3304      	adds	r3, #4
  4042aa:	e7a4      	b.n	4041f6 <__multiply+0x60>
  4042ac:	9b01      	ldr	r3, [sp, #4]
  4042ae:	2c00      	cmp	r4, #0
  4042b0:	dc03      	bgt.n	4042ba <__multiply+0x124>
  4042b2:	6104      	str	r4, [r0, #16]
  4042b4:	b005      	add	sp, #20
  4042b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042ba:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4042be:	2a00      	cmp	r2, #0
  4042c0:	d1f7      	bne.n	4042b2 <__multiply+0x11c>
  4042c2:	3c01      	subs	r4, #1
  4042c4:	e7f3      	b.n	4042ae <__multiply+0x118>

004042c6 <__pow5mult>:
  4042c6:	f012 0303 	ands.w	r3, r2, #3
  4042ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4042ce:	4605      	mov	r5, r0
  4042d0:	460e      	mov	r6, r1
  4042d2:	4617      	mov	r7, r2
  4042d4:	d007      	beq.n	4042e6 <__pow5mult+0x20>
  4042d6:	3b01      	subs	r3, #1
  4042d8:	4a19      	ldr	r2, [pc, #100]	; (404340 <__pow5mult+0x7a>)
  4042da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4042de:	2300      	movs	r3, #0
  4042e0:	f7ff fe87 	bl	403ff2 <__multadd>
  4042e4:	4606      	mov	r6, r0
  4042e6:	10bf      	asrs	r7, r7, #2
  4042e8:	d027      	beq.n	40433a <__pow5mult+0x74>
  4042ea:	6cac      	ldr	r4, [r5, #72]	; 0x48
  4042ec:	b974      	cbnz	r4, 40430c <__pow5mult+0x46>
  4042ee:	4628      	mov	r0, r5
  4042f0:	f240 2171 	movw	r1, #625	; 0x271
  4042f4:	f7ff ff46 	bl	404184 <__i2b>
  4042f8:	2300      	movs	r3, #0
  4042fa:	64a8      	str	r0, [r5, #72]	; 0x48
  4042fc:	4604      	mov	r4, r0
  4042fe:	6003      	str	r3, [r0, #0]
  404300:	e004      	b.n	40430c <__pow5mult+0x46>
  404302:	107f      	asrs	r7, r7, #1
  404304:	d019      	beq.n	40433a <__pow5mult+0x74>
  404306:	6820      	ldr	r0, [r4, #0]
  404308:	b170      	cbz	r0, 404328 <__pow5mult+0x62>
  40430a:	4604      	mov	r4, r0
  40430c:	07fb      	lsls	r3, r7, #31
  40430e:	d5f8      	bpl.n	404302 <__pow5mult+0x3c>
  404310:	4631      	mov	r1, r6
  404312:	4622      	mov	r2, r4
  404314:	4628      	mov	r0, r5
  404316:	f7ff ff3e 	bl	404196 <__multiply>
  40431a:	4631      	mov	r1, r6
  40431c:	4680      	mov	r8, r0
  40431e:	4628      	mov	r0, r5
  404320:	f7ff fe5e 	bl	403fe0 <_Bfree>
  404324:	4646      	mov	r6, r8
  404326:	e7ec      	b.n	404302 <__pow5mult+0x3c>
  404328:	4628      	mov	r0, r5
  40432a:	4621      	mov	r1, r4
  40432c:	4622      	mov	r2, r4
  40432e:	f7ff ff32 	bl	404196 <__multiply>
  404332:	2300      	movs	r3, #0
  404334:	6020      	str	r0, [r4, #0]
  404336:	6003      	str	r3, [r0, #0]
  404338:	e7e7      	b.n	40430a <__pow5mult+0x44>
  40433a:	4630      	mov	r0, r6
  40433c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404340:	00405d38 	.word	0x00405d38

00404344 <__lshift>:
  404344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404348:	460c      	mov	r4, r1
  40434a:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40434e:	6923      	ldr	r3, [r4, #16]
  404350:	6849      	ldr	r1, [r1, #4]
  404352:	eb0a 0903 	add.w	r9, sl, r3
  404356:	68a3      	ldr	r3, [r4, #8]
  404358:	4680      	mov	r8, r0
  40435a:	4615      	mov	r5, r2
  40435c:	f109 0701 	add.w	r7, r9, #1
  404360:	429f      	cmp	r7, r3
  404362:	dd02      	ble.n	40436a <__lshift+0x26>
  404364:	3101      	adds	r1, #1
  404366:	005b      	lsls	r3, r3, #1
  404368:	e7fa      	b.n	404360 <__lshift+0x1c>
  40436a:	4640      	mov	r0, r8
  40436c:	f7ff fe12 	bl	403f94 <_Balloc>
  404370:	2300      	movs	r3, #0
  404372:	4606      	mov	r6, r0
  404374:	f100 0214 	add.w	r2, r0, #20
  404378:	4553      	cmp	r3, sl
  40437a:	da04      	bge.n	404386 <__lshift+0x42>
  40437c:	2100      	movs	r1, #0
  40437e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  404382:	3301      	adds	r3, #1
  404384:	e7f8      	b.n	404378 <__lshift+0x34>
  404386:	6920      	ldr	r0, [r4, #16]
  404388:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
  40438c:	f104 0314 	add.w	r3, r4, #20
  404390:	f015 0c1f 	ands.w	ip, r5, #31
  404394:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  404398:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
  40439c:	d016      	beq.n	4043cc <__lshift+0x88>
  40439e:	f1cc 0a20 	rsb	sl, ip, #32
  4043a2:	2500      	movs	r5, #0
  4043a4:	6818      	ldr	r0, [r3, #0]
  4043a6:	460a      	mov	r2, r1
  4043a8:	fa00 f00c 	lsl.w	r0, r0, ip
  4043ac:	4305      	orrs	r5, r0
  4043ae:	f842 5b04 	str.w	r5, [r2], #4
  4043b2:	f853 5b04 	ldr.w	r5, [r3], #4
  4043b6:	4573      	cmp	r3, lr
  4043b8:	fa25 f50a 	lsr.w	r5, r5, sl
  4043bc:	d201      	bcs.n	4043c2 <__lshift+0x7e>
  4043be:	4611      	mov	r1, r2
  4043c0:	e7f0      	b.n	4043a4 <__lshift+0x60>
  4043c2:	604d      	str	r5, [r1, #4]
  4043c4:	b145      	cbz	r5, 4043d8 <__lshift+0x94>
  4043c6:	f109 0702 	add.w	r7, r9, #2
  4043ca:	e005      	b.n	4043d8 <__lshift+0x94>
  4043cc:	f853 2b04 	ldr.w	r2, [r3], #4
  4043d0:	f841 2b04 	str.w	r2, [r1], #4
  4043d4:	4573      	cmp	r3, lr
  4043d6:	d3f9      	bcc.n	4043cc <__lshift+0x88>
  4043d8:	3f01      	subs	r7, #1
  4043da:	4640      	mov	r0, r8
  4043dc:	6137      	str	r7, [r6, #16]
  4043de:	4621      	mov	r1, r4
  4043e0:	f7ff fdfe 	bl	403fe0 <_Bfree>
  4043e4:	4630      	mov	r0, r6
  4043e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004043ea <__mcmp>:
  4043ea:	6902      	ldr	r2, [r0, #16]
  4043ec:	690b      	ldr	r3, [r1, #16]
  4043ee:	1ad2      	subs	r2, r2, r3
  4043f0:	b510      	push	{r4, lr}
  4043f2:	d113      	bne.n	40441c <__mcmp+0x32>
  4043f4:	009c      	lsls	r4, r3, #2
  4043f6:	3014      	adds	r0, #20
  4043f8:	f101 0214 	add.w	r2, r1, #20
  4043fc:	1903      	adds	r3, r0, r4
  4043fe:	4422      	add	r2, r4
  404400:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  404404:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  404408:	428c      	cmp	r4, r1
  40440a:	d003      	beq.n	404414 <__mcmp+0x2a>
  40440c:	d208      	bcs.n	404420 <__mcmp+0x36>
  40440e:	f04f 30ff 	mov.w	r0, #4294967295
  404412:	bd10      	pop	{r4, pc}
  404414:	4298      	cmp	r0, r3
  404416:	d3f3      	bcc.n	404400 <__mcmp+0x16>
  404418:	2000      	movs	r0, #0
  40441a:	bd10      	pop	{r4, pc}
  40441c:	4610      	mov	r0, r2
  40441e:	bd10      	pop	{r4, pc}
  404420:	2001      	movs	r0, #1
  404422:	bd10      	pop	{r4, pc}

00404424 <__mdiff>:
  404424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404428:	4606      	mov	r6, r0
  40442a:	460c      	mov	r4, r1
  40442c:	4608      	mov	r0, r1
  40442e:	4611      	mov	r1, r2
  404430:	4615      	mov	r5, r2
  404432:	f7ff ffda 	bl	4043ea <__mcmp>
  404436:	1e07      	subs	r7, r0, #0
  404438:	d108      	bne.n	40444c <__mdiff+0x28>
  40443a:	4630      	mov	r0, r6
  40443c:	4639      	mov	r1, r7
  40443e:	f7ff fda9 	bl	403f94 <_Balloc>
  404442:	2301      	movs	r3, #1
  404444:	6103      	str	r3, [r0, #16]
  404446:	6147      	str	r7, [r0, #20]
  404448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40444c:	db01      	blt.n	404452 <__mdiff+0x2e>
  40444e:	2700      	movs	r7, #0
  404450:	e003      	b.n	40445a <__mdiff+0x36>
  404452:	4623      	mov	r3, r4
  404454:	2701      	movs	r7, #1
  404456:	462c      	mov	r4, r5
  404458:	461d      	mov	r5, r3
  40445a:	6861      	ldr	r1, [r4, #4]
  40445c:	4630      	mov	r0, r6
  40445e:	f7ff fd99 	bl	403f94 <_Balloc>
  404462:	6922      	ldr	r2, [r4, #16]
  404464:	692b      	ldr	r3, [r5, #16]
  404466:	60c7      	str	r7, [r0, #12]
  404468:	3414      	adds	r4, #20
  40446a:	f105 0614 	add.w	r6, r5, #20
  40446e:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
  404472:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
  404476:	f100 0314 	add.w	r3, r0, #20
  40447a:	2100      	movs	r1, #0
  40447c:	f854 7b04 	ldr.w	r7, [r4], #4
  404480:	f856 9b04 	ldr.w	r9, [r6], #4
  404484:	fa11 f187 	uxtah	r1, r1, r7
  404488:	fa1f f589 	uxth.w	r5, r9
  40448c:	ea4f 4919 	mov.w	r9, r9, lsr #16
  404490:	ebc5 0801 	rsb	r8, r5, r1
  404494:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
  404498:	eb07 4728 	add.w	r7, r7, r8, asr #16
  40449c:	fa1f f888 	uxth.w	r8, r8
  4044a0:	1439      	asrs	r1, r7, #16
  4044a2:	45b2      	cmp	sl, r6
  4044a4:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  4044a8:	4625      	mov	r5, r4
  4044aa:	f843 7b04 	str.w	r7, [r3], #4
  4044ae:	d8e5      	bhi.n	40447c <__mdiff+0x58>
  4044b0:	4565      	cmp	r5, ip
  4044b2:	d20d      	bcs.n	4044d0 <__mdiff+0xac>
  4044b4:	f855 4b04 	ldr.w	r4, [r5], #4
  4044b8:	fa11 f684 	uxtah	r6, r1, r4
  4044bc:	0c24      	lsrs	r4, r4, #16
  4044be:	eb04 4426 	add.w	r4, r4, r6, asr #16
  4044c2:	b2b6      	uxth	r6, r6
  4044c4:	1421      	asrs	r1, r4, #16
  4044c6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
  4044ca:	f843 4b04 	str.w	r4, [r3], #4
  4044ce:	e7ef      	b.n	4044b0 <__mdiff+0x8c>
  4044d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  4044d4:	b909      	cbnz	r1, 4044da <__mdiff+0xb6>
  4044d6:	3a01      	subs	r2, #1
  4044d8:	e7fa      	b.n	4044d0 <__mdiff+0xac>
  4044da:	6102      	str	r2, [r0, #16]
  4044dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004044e0 <__ulp>:
  4044e0:	4b0f      	ldr	r3, [pc, #60]	; (404520 <__ulp+0x40>)
  4044e2:	400b      	ands	r3, r1
  4044e4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  4044e8:	2b00      	cmp	r3, #0
  4044ea:	dd01      	ble.n	4044f0 <__ulp+0x10>
  4044ec:	4619      	mov	r1, r3
  4044ee:	e009      	b.n	404504 <__ulp+0x24>
  4044f0:	425b      	negs	r3, r3
  4044f2:	151b      	asrs	r3, r3, #20
  4044f4:	2b13      	cmp	r3, #19
  4044f6:	f04f 0100 	mov.w	r1, #0
  4044fa:	dc05      	bgt.n	404508 <__ulp+0x28>
  4044fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  404500:	fa42 f103 	asr.w	r1, r2, r3
  404504:	2000      	movs	r0, #0
  404506:	4770      	bx	lr
  404508:	2b32      	cmp	r3, #50	; 0x32
  40450a:	f04f 0201 	mov.w	r2, #1
  40450e:	bfda      	itte	le
  404510:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
  404514:	fa02 f303 	lslle.w	r3, r2, r3
  404518:	4613      	movgt	r3, r2
  40451a:	4618      	mov	r0, r3
  40451c:	4770      	bx	lr
  40451e:	bf00      	nop
  404520:	7ff00000 	.word	0x7ff00000

00404524 <__b2d>:
  404524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404528:	6906      	ldr	r6, [r0, #16]
  40452a:	f100 0714 	add.w	r7, r0, #20
  40452e:	eb07 0686 	add.w	r6, r7, r6, lsl #2
  404532:	4688      	mov	r8, r1
  404534:	f856 4c04 	ldr.w	r4, [r6, #-4]
  404538:	4620      	mov	r0, r4
  40453a:	f7ff fdd6 	bl	4040ea <__hi0bits>
  40453e:	f1c0 0320 	rsb	r3, r0, #32
  404542:	280a      	cmp	r0, #10
  404544:	f1a6 0504 	sub.w	r5, r6, #4
  404548:	f8c8 3000 	str.w	r3, [r8]
  40454c:	dc14      	bgt.n	404578 <__b2d+0x54>
  40454e:	42bd      	cmp	r5, r7
  404550:	f1c0 010b 	rsb	r1, r0, #11
  404554:	bf88      	it	hi
  404556:	f856 5c08 	ldrhi.w	r5, [r6, #-8]
  40455a:	fa24 fc01 	lsr.w	ip, r4, r1
  40455e:	bf98      	it	ls
  404560:	2500      	movls	r5, #0
  404562:	3015      	adds	r0, #21
  404564:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
  404568:	fa25 f101 	lsr.w	r1, r5, r1
  40456c:	4084      	lsls	r4, r0
  40456e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  404572:	ea41 0204 	orr.w	r2, r1, r4
  404576:	e024      	b.n	4045c2 <__b2d+0x9e>
  404578:	42bd      	cmp	r5, r7
  40457a:	bf86      	itte	hi
  40457c:	f1a6 0508 	subhi.w	r5, r6, #8
  404580:	f856 1c08 	ldrhi.w	r1, [r6, #-8]
  404584:	2100      	movls	r1, #0
  404586:	f1b0 060b 	subs.w	r6, r0, #11
  40458a:	d015      	beq.n	4045b8 <__b2d+0x94>
  40458c:	40b4      	lsls	r4, r6
  40458e:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
  404592:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
  404596:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
  40459a:	fa21 fc00 	lsr.w	ip, r1, r0
  40459e:	42bd      	cmp	r5, r7
  4045a0:	ea44 030c 	orr.w	r3, r4, ip
  4045a4:	bf8c      	ite	hi
  4045a6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
  4045aa:	2400      	movls	r4, #0
  4045ac:	fa24 f000 	lsr.w	r0, r4, r0
  4045b0:	40b1      	lsls	r1, r6
  4045b2:	ea40 0201 	orr.w	r2, r0, r1
  4045b6:	e004      	b.n	4045c2 <__b2d+0x9e>
  4045b8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
  4045bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  4045c0:	460a      	mov	r2, r1
  4045c2:	4610      	mov	r0, r2
  4045c4:	4619      	mov	r1, r3
  4045c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004045ca <__d2b>:
  4045ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4045ce:	2101      	movs	r1, #1
  4045d0:	461d      	mov	r5, r3
  4045d2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  4045d6:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  4045da:	4614      	mov	r4, r2
  4045dc:	f7ff fcda 	bl	403f94 <_Balloc>
  4045e0:	f3c5 570a 	ubfx	r7, r5, #20, #11
  4045e4:	4606      	mov	r6, r0
  4045e6:	f3c5 0313 	ubfx	r3, r5, #0, #20
  4045ea:	b10f      	cbz	r7, 4045f0 <__d2b+0x26>
  4045ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4045f0:	9301      	str	r3, [sp, #4]
  4045f2:	b1d4      	cbz	r4, 40462a <__d2b+0x60>
  4045f4:	a802      	add	r0, sp, #8
  4045f6:	f840 4d08 	str.w	r4, [r0, #-8]!
  4045fa:	4668      	mov	r0, sp
  4045fc:	f7ff fd95 	bl	40412a <__lo0bits>
  404600:	9b00      	ldr	r3, [sp, #0]
  404602:	b148      	cbz	r0, 404618 <__d2b+0x4e>
  404604:	9a01      	ldr	r2, [sp, #4]
  404606:	f1c0 0120 	rsb	r1, r0, #32
  40460a:	fa02 f101 	lsl.w	r1, r2, r1
  40460e:	430b      	orrs	r3, r1
  404610:	40c2      	lsrs	r2, r0
  404612:	6173      	str	r3, [r6, #20]
  404614:	9201      	str	r2, [sp, #4]
  404616:	e000      	b.n	40461a <__d2b+0x50>
  404618:	6173      	str	r3, [r6, #20]
  40461a:	9b01      	ldr	r3, [sp, #4]
  40461c:	61b3      	str	r3, [r6, #24]
  40461e:	2b00      	cmp	r3, #0
  404620:	bf0c      	ite	eq
  404622:	2401      	moveq	r4, #1
  404624:	2402      	movne	r4, #2
  404626:	6134      	str	r4, [r6, #16]
  404628:	e007      	b.n	40463a <__d2b+0x70>
  40462a:	a801      	add	r0, sp, #4
  40462c:	f7ff fd7d 	bl	40412a <__lo0bits>
  404630:	2401      	movs	r4, #1
  404632:	9b01      	ldr	r3, [sp, #4]
  404634:	6173      	str	r3, [r6, #20]
  404636:	6134      	str	r4, [r6, #16]
  404638:	3020      	adds	r0, #32
  40463a:	b13f      	cbz	r7, 40464c <__d2b+0x82>
  40463c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  404640:	4407      	add	r7, r0
  404642:	f8c9 7000 	str.w	r7, [r9]
  404646:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40464a:	e00a      	b.n	404662 <__d2b+0x98>
  40464c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  404650:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  404654:	f8c9 0000 	str.w	r0, [r9]
  404658:	6918      	ldr	r0, [r3, #16]
  40465a:	f7ff fd46 	bl	4040ea <__hi0bits>
  40465e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  404662:	f8c8 0000 	str.w	r0, [r8]
  404666:	4630      	mov	r0, r6
  404668:	b003      	add	sp, #12
  40466a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0040466e <__ratio>:
  40466e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  404672:	460e      	mov	r6, r1
  404674:	4669      	mov	r1, sp
  404676:	4680      	mov	r8, r0
  404678:	f7ff ff54 	bl	404524 <__b2d>
  40467c:	460d      	mov	r5, r1
  40467e:	4604      	mov	r4, r0
  404680:	a901      	add	r1, sp, #4
  404682:	4630      	mov	r0, r6
  404684:	f7ff ff4e 	bl	404524 <__b2d>
  404688:	9f00      	ldr	r7, [sp, #0]
  40468a:	460b      	mov	r3, r1
  40468c:	9901      	ldr	r1, [sp, #4]
  40468e:	4602      	mov	r2, r0
  404690:	1a7f      	subs	r7, r7, r1
  404692:	f8d8 0010 	ldr.w	r0, [r8, #16]
  404696:	6931      	ldr	r1, [r6, #16]
  404698:	1a41      	subs	r1, r0, r1
  40469a:	eb07 1141 	add.w	r1, r7, r1, lsl #5
  40469e:	2900      	cmp	r1, #0
  4046a0:	bfcc      	ite	gt
  4046a2:	eb05 5501 	addgt.w	r5, r5, r1, lsl #20
  4046a6:	eba3 5301 	suble.w	r3, r3, r1, lsl #20
  4046aa:	4620      	mov	r0, r4
  4046ac:	4629      	mov	r1, r5
  4046ae:	f7fd f959 	bl	401964 <__aeabi_ddiv>
  4046b2:	b002      	add	sp, #8
  4046b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004046b8 <_mprec_log10>:
  4046b8:	2817      	cmp	r0, #23
  4046ba:	b510      	push	{r4, lr}
  4046bc:	4604      	mov	r4, r0
  4046be:	dc05      	bgt.n	4046cc <_mprec_log10+0x14>
  4046c0:	4b07      	ldr	r3, [pc, #28]	; (4046e0 <_mprec_log10+0x28>)
  4046c2:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
  4046c6:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  4046ca:	bd10      	pop	{r4, pc}
  4046cc:	4905      	ldr	r1, [pc, #20]	; (4046e4 <_mprec_log10+0x2c>)
  4046ce:	2000      	movs	r0, #0
  4046d0:	2200      	movs	r2, #0
  4046d2:	4b05      	ldr	r3, [pc, #20]	; (4046e8 <_mprec_log10+0x30>)
  4046d4:	f7fd f81c 	bl	401710 <__aeabi_dmul>
  4046d8:	3c01      	subs	r4, #1
  4046da:	d1f9      	bne.n	4046d0 <_mprec_log10+0x18>
  4046dc:	bd10      	pop	{r4, pc}
  4046de:	bf00      	nop
  4046e0:	00405d38 	.word	0x00405d38
  4046e4:	3ff00000 	.word	0x3ff00000
  4046e8:	40240000 	.word	0x40240000

004046ec <__copybits>:
  4046ec:	b510      	push	{r4, lr}
  4046ee:	3901      	subs	r1, #1
  4046f0:	f102 0314 	add.w	r3, r2, #20
  4046f4:	1149      	asrs	r1, r1, #5
  4046f6:	6912      	ldr	r2, [r2, #16]
  4046f8:	3101      	adds	r1, #1
  4046fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  4046fe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  404702:	4293      	cmp	r3, r2
  404704:	d204      	bcs.n	404710 <__copybits+0x24>
  404706:	f853 4b04 	ldr.w	r4, [r3], #4
  40470a:	f840 4b04 	str.w	r4, [r0], #4
  40470e:	e7f8      	b.n	404702 <__copybits+0x16>
  404710:	4288      	cmp	r0, r1
  404712:	d203      	bcs.n	40471c <__copybits+0x30>
  404714:	2300      	movs	r3, #0
  404716:	f840 3b04 	str.w	r3, [r0], #4
  40471a:	e7f9      	b.n	404710 <__copybits+0x24>
  40471c:	bd10      	pop	{r4, pc}

0040471e <__any_on>:
  40471e:	f100 0214 	add.w	r2, r0, #20
  404722:	6900      	ldr	r0, [r0, #16]
  404724:	114b      	asrs	r3, r1, #5
  404726:	4283      	cmp	r3, r0
  404728:	b510      	push	{r4, lr}
  40472a:	dc0c      	bgt.n	404746 <__any_on+0x28>
  40472c:	da0c      	bge.n	404748 <__any_on+0x2a>
  40472e:	f011 011f 	ands.w	r1, r1, #31
  404732:	d009      	beq.n	404748 <__any_on+0x2a>
  404734:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  404738:	fa20 f401 	lsr.w	r4, r0, r1
  40473c:	fa04 f101 	lsl.w	r1, r4, r1
  404740:	4281      	cmp	r1, r0
  404742:	d10e      	bne.n	404762 <__any_on+0x44>
  404744:	e000      	b.n	404748 <__any_on+0x2a>
  404746:	4603      	mov	r3, r0
  404748:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40474c:	4293      	cmp	r3, r2
  40474e:	4619      	mov	r1, r3
  404750:	d905      	bls.n	40475e <__any_on+0x40>
  404752:	f851 1c04 	ldr.w	r1, [r1, #-4]
  404756:	3b04      	subs	r3, #4
  404758:	2900      	cmp	r1, #0
  40475a:	d0f7      	beq.n	40474c <__any_on+0x2e>
  40475c:	e001      	b.n	404762 <__any_on+0x44>
  40475e:	2000      	movs	r0, #0
  404760:	bd10      	pop	{r4, pc}
  404762:	2001      	movs	r0, #1
  404764:	bd10      	pop	{r4, pc}
  404766:	bf00      	nop

00404768 <_realloc_r>:
  404768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40476c:	4681      	mov	r9, r0
  40476e:	460c      	mov	r4, r1
  404770:	b929      	cbnz	r1, 40477e <_realloc_r+0x16>
  404772:	4611      	mov	r1, r2
  404774:	b003      	add	sp, #12
  404776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40477a:	f7ff b9cb 	b.w	403b14 <_malloc_r>
  40477e:	9201      	str	r2, [sp, #4]
  404780:	f7ff fc05 	bl	403f8e <__malloc_lock>
  404784:	9a01      	ldr	r2, [sp, #4]
  404786:	f854 5c04 	ldr.w	r5, [r4, #-4]
  40478a:	f102 070b 	add.w	r7, r2, #11
  40478e:	2f16      	cmp	r7, #22
  404790:	f1a4 0808 	sub.w	r8, r4, #8
  404794:	f025 0603 	bic.w	r6, r5, #3
  404798:	d903      	bls.n	4047a2 <_realloc_r+0x3a>
  40479a:	f037 0707 	bics.w	r7, r7, #7
  40479e:	d501      	bpl.n	4047a4 <_realloc_r+0x3c>
  4047a0:	e002      	b.n	4047a8 <_realloc_r+0x40>
  4047a2:	2710      	movs	r7, #16
  4047a4:	4297      	cmp	r7, r2
  4047a6:	d204      	bcs.n	4047b2 <_realloc_r+0x4a>
  4047a8:	230c      	movs	r3, #12
  4047aa:	f8c9 3000 	str.w	r3, [r9]
  4047ae:	2000      	movs	r0, #0
  4047b0:	e17e      	b.n	404ab0 <_realloc_r+0x348>
  4047b2:	42be      	cmp	r6, r7
  4047b4:	f280 8154 	bge.w	404a60 <_realloc_r+0x2f8>
  4047b8:	49a2      	ldr	r1, [pc, #648]	; (404a44 <_realloc_r+0x2dc>)
  4047ba:	f8d1 e008 	ldr.w	lr, [r1, #8]
  4047be:	eb08 0306 	add.w	r3, r8, r6
  4047c2:	4573      	cmp	r3, lr
  4047c4:	468b      	mov	fp, r1
  4047c6:	6858      	ldr	r0, [r3, #4]
  4047c8:	d005      	beq.n	4047d6 <_realloc_r+0x6e>
  4047ca:	f020 0101 	bic.w	r1, r0, #1
  4047ce:	4419      	add	r1, r3
  4047d0:	6849      	ldr	r1, [r1, #4]
  4047d2:	07c9      	lsls	r1, r1, #31
  4047d4:	d425      	bmi.n	404822 <_realloc_r+0xba>
  4047d6:	f020 0003 	bic.w	r0, r0, #3
  4047da:	4573      	cmp	r3, lr
  4047dc:	eb00 0106 	add.w	r1, r0, r6
  4047e0:	d117      	bne.n	404812 <_realloc_r+0xaa>
  4047e2:	f107 0c10 	add.w	ip, r7, #16
  4047e6:	4561      	cmp	r1, ip
  4047e8:	db1d      	blt.n	404826 <_realloc_r+0xbe>
  4047ea:	eb08 0507 	add.w	r5, r8, r7
  4047ee:	1bc9      	subs	r1, r1, r7
  4047f0:	f041 0101 	orr.w	r1, r1, #1
  4047f4:	f8cb 5008 	str.w	r5, [fp, #8]
  4047f8:	6069      	str	r1, [r5, #4]
  4047fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4047fe:	f003 0301 	and.w	r3, r3, #1
  404802:	431f      	orrs	r7, r3
  404804:	4648      	mov	r0, r9
  404806:	f844 7c04 	str.w	r7, [r4, #-4]
  40480a:	f7ff fbc1 	bl	403f90 <__malloc_unlock>
  40480e:	4620      	mov	r0, r4
  404810:	e14e      	b.n	404ab0 <_realloc_r+0x348>
  404812:	42b9      	cmp	r1, r7
  404814:	db07      	blt.n	404826 <_realloc_r+0xbe>
  404816:	68da      	ldr	r2, [r3, #12]
  404818:	689b      	ldr	r3, [r3, #8]
  40481a:	460e      	mov	r6, r1
  40481c:	60da      	str	r2, [r3, #12]
  40481e:	6093      	str	r3, [r2, #8]
  404820:	e11e      	b.n	404a60 <_realloc_r+0x2f8>
  404822:	2000      	movs	r0, #0
  404824:	4603      	mov	r3, r0
  404826:	07e9      	lsls	r1, r5, #31
  404828:	f100 80c9 	bmi.w	4049be <_realloc_r+0x256>
  40482c:	f854 5c08 	ldr.w	r5, [r4, #-8]
  404830:	ebc5 0508 	rsb	r5, r5, r8
  404834:	6869      	ldr	r1, [r5, #4]
  404836:	f021 0103 	bic.w	r1, r1, #3
  40483a:	eb01 0a06 	add.w	sl, r1, r6
  40483e:	2b00      	cmp	r3, #0
  404840:	f000 8088 	beq.w	404954 <_realloc_r+0x1ec>
  404844:	4573      	cmp	r3, lr
  404846:	d14b      	bne.n	4048e0 <_realloc_r+0x178>
  404848:	eb0a 0300 	add.w	r3, sl, r0
  40484c:	f107 0110 	add.w	r1, r7, #16
  404850:	428b      	cmp	r3, r1
  404852:	db7f      	blt.n	404954 <_realloc_r+0x1ec>
  404854:	46a8      	mov	r8, r5
  404856:	68ea      	ldr	r2, [r5, #12]
  404858:	f858 1f08 	ldr.w	r1, [r8, #8]!
  40485c:	60ca      	str	r2, [r1, #12]
  40485e:	6091      	str	r1, [r2, #8]
  404860:	1f32      	subs	r2, r6, #4
  404862:	2a24      	cmp	r2, #36	; 0x24
  404864:	d825      	bhi.n	4048b2 <_realloc_r+0x14a>
  404866:	2a13      	cmp	r2, #19
  404868:	d91b      	bls.n	4048a2 <_realloc_r+0x13a>
  40486a:	6821      	ldr	r1, [r4, #0]
  40486c:	60a9      	str	r1, [r5, #8]
  40486e:	6861      	ldr	r1, [r4, #4]
  404870:	60e9      	str	r1, [r5, #12]
  404872:	2a1b      	cmp	r2, #27
  404874:	d803      	bhi.n	40487e <_realloc_r+0x116>
  404876:	f105 0210 	add.w	r2, r5, #16
  40487a:	3408      	adds	r4, #8
  40487c:	e012      	b.n	4048a4 <_realloc_r+0x13c>
  40487e:	68a1      	ldr	r1, [r4, #8]
  404880:	6129      	str	r1, [r5, #16]
  404882:	68e1      	ldr	r1, [r4, #12]
  404884:	6169      	str	r1, [r5, #20]
  404886:	2a24      	cmp	r2, #36	; 0x24
  404888:	d003      	beq.n	404892 <_realloc_r+0x12a>
  40488a:	f105 0218 	add.w	r2, r5, #24
  40488e:	3410      	adds	r4, #16
  404890:	e008      	b.n	4048a4 <_realloc_r+0x13c>
  404892:	6922      	ldr	r2, [r4, #16]
  404894:	61aa      	str	r2, [r5, #24]
  404896:	6961      	ldr	r1, [r4, #20]
  404898:	61e9      	str	r1, [r5, #28]
  40489a:	f105 0220 	add.w	r2, r5, #32
  40489e:	3418      	adds	r4, #24
  4048a0:	e000      	b.n	4048a4 <_realloc_r+0x13c>
  4048a2:	4642      	mov	r2, r8
  4048a4:	6821      	ldr	r1, [r4, #0]
  4048a6:	6011      	str	r1, [r2, #0]
  4048a8:	6861      	ldr	r1, [r4, #4]
  4048aa:	6051      	str	r1, [r2, #4]
  4048ac:	68a1      	ldr	r1, [r4, #8]
  4048ae:	6091      	str	r1, [r2, #8]
  4048b0:	e005      	b.n	4048be <_realloc_r+0x156>
  4048b2:	4640      	mov	r0, r8
  4048b4:	4621      	mov	r1, r4
  4048b6:	9301      	str	r3, [sp, #4]
  4048b8:	f7ff fb4e 	bl	403f58 <memmove>
  4048bc:	9b01      	ldr	r3, [sp, #4]
  4048be:	19ea      	adds	r2, r5, r7
  4048c0:	1bdb      	subs	r3, r3, r7
  4048c2:	f043 0301 	orr.w	r3, r3, #1
  4048c6:	f8cb 2008 	str.w	r2, [fp, #8]
  4048ca:	6053      	str	r3, [r2, #4]
  4048cc:	686b      	ldr	r3, [r5, #4]
  4048ce:	f003 0301 	and.w	r3, r3, #1
  4048d2:	431f      	orrs	r7, r3
  4048d4:	4648      	mov	r0, r9
  4048d6:	606f      	str	r7, [r5, #4]
  4048d8:	f7ff fb5a 	bl	403f90 <__malloc_unlock>
  4048dc:	4640      	mov	r0, r8
  4048de:	e0e7      	b.n	404ab0 <_realloc_r+0x348>
  4048e0:	eb0a 0b00 	add.w	fp, sl, r0
  4048e4:	45bb      	cmp	fp, r7
  4048e6:	db35      	blt.n	404954 <_realloc_r+0x1ec>
  4048e8:	68da      	ldr	r2, [r3, #12]
  4048ea:	689b      	ldr	r3, [r3, #8]
  4048ec:	4628      	mov	r0, r5
  4048ee:	60da      	str	r2, [r3, #12]
  4048f0:	6093      	str	r3, [r2, #8]
  4048f2:	f850 2f08 	ldr.w	r2, [r0, #8]!
  4048f6:	68eb      	ldr	r3, [r5, #12]
  4048f8:	60d3      	str	r3, [r2, #12]
  4048fa:	609a      	str	r2, [r3, #8]
  4048fc:	1f32      	subs	r2, r6, #4
  4048fe:	2a24      	cmp	r2, #36	; 0x24
  404900:	d823      	bhi.n	40494a <_realloc_r+0x1e2>
  404902:	2a13      	cmp	r2, #19
  404904:	d91a      	bls.n	40493c <_realloc_r+0x1d4>
  404906:	6823      	ldr	r3, [r4, #0]
  404908:	60ab      	str	r3, [r5, #8]
  40490a:	6863      	ldr	r3, [r4, #4]
  40490c:	60eb      	str	r3, [r5, #12]
  40490e:	2a1b      	cmp	r2, #27
  404910:	d803      	bhi.n	40491a <_realloc_r+0x1b2>
  404912:	f105 0010 	add.w	r0, r5, #16
  404916:	3408      	adds	r4, #8
  404918:	e010      	b.n	40493c <_realloc_r+0x1d4>
  40491a:	68a3      	ldr	r3, [r4, #8]
  40491c:	612b      	str	r3, [r5, #16]
  40491e:	68e3      	ldr	r3, [r4, #12]
  404920:	616b      	str	r3, [r5, #20]
  404922:	2a24      	cmp	r2, #36	; 0x24
  404924:	d003      	beq.n	40492e <_realloc_r+0x1c6>
  404926:	f105 0018 	add.w	r0, r5, #24
  40492a:	3410      	adds	r4, #16
  40492c:	e006      	b.n	40493c <_realloc_r+0x1d4>
  40492e:	6923      	ldr	r3, [r4, #16]
  404930:	61ab      	str	r3, [r5, #24]
  404932:	6963      	ldr	r3, [r4, #20]
  404934:	61eb      	str	r3, [r5, #28]
  404936:	f105 0020 	add.w	r0, r5, #32
  40493a:	3418      	adds	r4, #24
  40493c:	6823      	ldr	r3, [r4, #0]
  40493e:	6003      	str	r3, [r0, #0]
  404940:	6863      	ldr	r3, [r4, #4]
  404942:	6043      	str	r3, [r0, #4]
  404944:	68a3      	ldr	r3, [r4, #8]
  404946:	6083      	str	r3, [r0, #8]
  404948:	e002      	b.n	404950 <_realloc_r+0x1e8>
  40494a:	4621      	mov	r1, r4
  40494c:	f7ff fb04 	bl	403f58 <memmove>
  404950:	465e      	mov	r6, fp
  404952:	e02e      	b.n	4049b2 <_realloc_r+0x24a>
  404954:	45ba      	cmp	sl, r7
  404956:	db32      	blt.n	4049be <_realloc_r+0x256>
  404958:	4628      	mov	r0, r5
  40495a:	68eb      	ldr	r3, [r5, #12]
  40495c:	f850 2f08 	ldr.w	r2, [r0, #8]!
  404960:	60d3      	str	r3, [r2, #12]
  404962:	609a      	str	r2, [r3, #8]
  404964:	1f32      	subs	r2, r6, #4
  404966:	2a24      	cmp	r2, #36	; 0x24
  404968:	d825      	bhi.n	4049b6 <_realloc_r+0x24e>
  40496a:	2a13      	cmp	r2, #19
  40496c:	d91a      	bls.n	4049a4 <_realloc_r+0x23c>
  40496e:	6823      	ldr	r3, [r4, #0]
  404970:	60ab      	str	r3, [r5, #8]
  404972:	6863      	ldr	r3, [r4, #4]
  404974:	60eb      	str	r3, [r5, #12]
  404976:	2a1b      	cmp	r2, #27
  404978:	d803      	bhi.n	404982 <_realloc_r+0x21a>
  40497a:	f105 0010 	add.w	r0, r5, #16
  40497e:	3408      	adds	r4, #8
  404980:	e010      	b.n	4049a4 <_realloc_r+0x23c>
  404982:	68a3      	ldr	r3, [r4, #8]
  404984:	612b      	str	r3, [r5, #16]
  404986:	68e3      	ldr	r3, [r4, #12]
  404988:	616b      	str	r3, [r5, #20]
  40498a:	2a24      	cmp	r2, #36	; 0x24
  40498c:	d003      	beq.n	404996 <_realloc_r+0x22e>
  40498e:	f105 0018 	add.w	r0, r5, #24
  404992:	3410      	adds	r4, #16
  404994:	e006      	b.n	4049a4 <_realloc_r+0x23c>
  404996:	6923      	ldr	r3, [r4, #16]
  404998:	61ab      	str	r3, [r5, #24]
  40499a:	6963      	ldr	r3, [r4, #20]
  40499c:	61eb      	str	r3, [r5, #28]
  40499e:	f105 0020 	add.w	r0, r5, #32
  4049a2:	3418      	adds	r4, #24
  4049a4:	6823      	ldr	r3, [r4, #0]
  4049a6:	6003      	str	r3, [r0, #0]
  4049a8:	6863      	ldr	r3, [r4, #4]
  4049aa:	6043      	str	r3, [r0, #4]
  4049ac:	68a3      	ldr	r3, [r4, #8]
  4049ae:	6083      	str	r3, [r0, #8]
  4049b0:	4656      	mov	r6, sl
  4049b2:	46a8      	mov	r8, r5
  4049b4:	e054      	b.n	404a60 <_realloc_r+0x2f8>
  4049b6:	4621      	mov	r1, r4
  4049b8:	f7ff face 	bl	403f58 <memmove>
  4049bc:	e7f8      	b.n	4049b0 <_realloc_r+0x248>
  4049be:	4648      	mov	r0, r9
  4049c0:	4611      	mov	r1, r2
  4049c2:	f7ff f8a7 	bl	403b14 <_malloc_r>
  4049c6:	4605      	mov	r5, r0
  4049c8:	2800      	cmp	r0, #0
  4049ca:	d044      	beq.n	404a56 <_realloc_r+0x2ee>
  4049cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4049d0:	f023 0301 	bic.w	r3, r3, #1
  4049d4:	f1a0 0208 	sub.w	r2, r0, #8
  4049d8:	4443      	add	r3, r8
  4049da:	429a      	cmp	r2, r3
  4049dc:	d105      	bne.n	4049ea <_realloc_r+0x282>
  4049de:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4049e2:	f023 0303 	bic.w	r3, r3, #3
  4049e6:	441e      	add	r6, r3
  4049e8:	e03a      	b.n	404a60 <_realloc_r+0x2f8>
  4049ea:	1f32      	subs	r2, r6, #4
  4049ec:	2a24      	cmp	r2, #36	; 0x24
  4049ee:	d82b      	bhi.n	404a48 <_realloc_r+0x2e0>
  4049f0:	2a13      	cmp	r2, #19
  4049f2:	d91e      	bls.n	404a32 <_realloc_r+0x2ca>
  4049f4:	6823      	ldr	r3, [r4, #0]
  4049f6:	6003      	str	r3, [r0, #0]
  4049f8:	6863      	ldr	r3, [r4, #4]
  4049fa:	6043      	str	r3, [r0, #4]
  4049fc:	2a1b      	cmp	r2, #27
  4049fe:	d804      	bhi.n	404a0a <_realloc_r+0x2a2>
  404a00:	f100 0308 	add.w	r3, r0, #8
  404a04:	f104 0208 	add.w	r2, r4, #8
  404a08:	e015      	b.n	404a36 <_realloc_r+0x2ce>
  404a0a:	68a3      	ldr	r3, [r4, #8]
  404a0c:	6083      	str	r3, [r0, #8]
  404a0e:	68e3      	ldr	r3, [r4, #12]
  404a10:	60c3      	str	r3, [r0, #12]
  404a12:	2a24      	cmp	r2, #36	; 0x24
  404a14:	d004      	beq.n	404a20 <_realloc_r+0x2b8>
  404a16:	f100 0310 	add.w	r3, r0, #16
  404a1a:	f104 0210 	add.w	r2, r4, #16
  404a1e:	e00a      	b.n	404a36 <_realloc_r+0x2ce>
  404a20:	6923      	ldr	r3, [r4, #16]
  404a22:	6103      	str	r3, [r0, #16]
  404a24:	6961      	ldr	r1, [r4, #20]
  404a26:	6141      	str	r1, [r0, #20]
  404a28:	f100 0318 	add.w	r3, r0, #24
  404a2c:	f104 0218 	add.w	r2, r4, #24
  404a30:	e001      	b.n	404a36 <_realloc_r+0x2ce>
  404a32:	4603      	mov	r3, r0
  404a34:	4622      	mov	r2, r4
  404a36:	6811      	ldr	r1, [r2, #0]
  404a38:	6019      	str	r1, [r3, #0]
  404a3a:	6851      	ldr	r1, [r2, #4]
  404a3c:	6059      	str	r1, [r3, #4]
  404a3e:	6892      	ldr	r2, [r2, #8]
  404a40:	609a      	str	r2, [r3, #8]
  404a42:	e004      	b.n	404a4e <_realloc_r+0x2e6>
  404a44:	200004c4 	.word	0x200004c4
  404a48:	4621      	mov	r1, r4
  404a4a:	f7ff fa85 	bl	403f58 <memmove>
  404a4e:	4648      	mov	r0, r9
  404a50:	4621      	mov	r1, r4
  404a52:	f7fe ff65 	bl	403920 <_free_r>
  404a56:	4648      	mov	r0, r9
  404a58:	f7ff fa9a 	bl	403f90 <__malloc_unlock>
  404a5c:	4628      	mov	r0, r5
  404a5e:	e027      	b.n	404ab0 <_realloc_r+0x348>
  404a60:	1bf3      	subs	r3, r6, r7
  404a62:	2b0f      	cmp	r3, #15
  404a64:	f8d8 2004 	ldr.w	r2, [r8, #4]
  404a68:	d913      	bls.n	404a92 <_realloc_r+0x32a>
  404a6a:	eb08 0107 	add.w	r1, r8, r7
  404a6e:	f002 0201 	and.w	r2, r2, #1
  404a72:	4317      	orrs	r7, r2
  404a74:	f043 0201 	orr.w	r2, r3, #1
  404a78:	440b      	add	r3, r1
  404a7a:	f8c8 7004 	str.w	r7, [r8, #4]
  404a7e:	604a      	str	r2, [r1, #4]
  404a80:	685a      	ldr	r2, [r3, #4]
  404a82:	f042 0201 	orr.w	r2, r2, #1
  404a86:	605a      	str	r2, [r3, #4]
  404a88:	4648      	mov	r0, r9
  404a8a:	3108      	adds	r1, #8
  404a8c:	f7fe ff48 	bl	403920 <_free_r>
  404a90:	e009      	b.n	404aa6 <_realloc_r+0x33e>
  404a92:	f002 0201 	and.w	r2, r2, #1
  404a96:	4332      	orrs	r2, r6
  404a98:	4446      	add	r6, r8
  404a9a:	f8c8 2004 	str.w	r2, [r8, #4]
  404a9e:	6873      	ldr	r3, [r6, #4]
  404aa0:	f043 0301 	orr.w	r3, r3, #1
  404aa4:	6073      	str	r3, [r6, #4]
  404aa6:	4648      	mov	r0, r9
  404aa8:	f7ff fa72 	bl	403f90 <__malloc_unlock>
  404aac:	f108 0008 	add.w	r0, r8, #8
  404ab0:	b003      	add	sp, #12
  404ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ab6:	bf00      	nop

00404ab8 <__fpclassifyd>:
  404ab8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  404abc:	b510      	push	{r4, lr}
  404abe:	d100      	bne.n	404ac2 <__fpclassifyd+0xa>
  404ac0:	b178      	cbz	r0, 404ae2 <__fpclassifyd+0x2a>
  404ac2:	4a0c      	ldr	r2, [pc, #48]	; (404af4 <__fpclassifyd+0x3c>)
  404ac4:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  404ac8:	4294      	cmp	r4, r2
  404aca:	d90c      	bls.n	404ae6 <__fpclassifyd+0x2e>
  404acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  404ad0:	d30b      	bcc.n	404aea <__fpclassifyd+0x32>
  404ad2:	4a09      	ldr	r2, [pc, #36]	; (404af8 <__fpclassifyd+0x40>)
  404ad4:	4293      	cmp	r3, r2
  404ad6:	d10a      	bne.n	404aee <__fpclassifyd+0x36>
  404ad8:	f1d0 0001 	rsbs	r0, r0, #1
  404adc:	bf38      	it	cc
  404ade:	2000      	movcc	r0, #0
  404ae0:	bd10      	pop	{r4, pc}
  404ae2:	2002      	movs	r0, #2
  404ae4:	bd10      	pop	{r4, pc}
  404ae6:	2004      	movs	r0, #4
  404ae8:	bd10      	pop	{r4, pc}
  404aea:	2003      	movs	r0, #3
  404aec:	bd10      	pop	{r4, pc}
  404aee:	2000      	movs	r0, #0
  404af0:	bd10      	pop	{r4, pc}
  404af2:	bf00      	nop
  404af4:	7fdfffff 	.word	0x7fdfffff
  404af8:	7ff00000 	.word	0x7ff00000

00404afc <_sbrk_r>:
  404afc:	b538      	push	{r3, r4, r5, lr}
  404afe:	4c06      	ldr	r4, [pc, #24]	; (404b18 <_sbrk_r+0x1c>)
  404b00:	2300      	movs	r3, #0
  404b02:	4605      	mov	r5, r0
  404b04:	4608      	mov	r0, r1
  404b06:	6023      	str	r3, [r4, #0]
  404b08:	f7fc fa2c 	bl	400f64 <_sbrk>
  404b0c:	1c43      	adds	r3, r0, #1
  404b0e:	d102      	bne.n	404b16 <_sbrk_r+0x1a>
  404b10:	6823      	ldr	r3, [r4, #0]
  404b12:	b103      	cbz	r3, 404b16 <_sbrk_r+0x1a>
  404b14:	602b      	str	r3, [r5, #0]
  404b16:	bd38      	pop	{r3, r4, r5, pc}
  404b18:	200009a4 	.word	0x200009a4

00404b1c <strcmp>:
  404b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
  404b20:	f811 3b01 	ldrb.w	r3, [r1], #1
  404b24:	2a01      	cmp	r2, #1
  404b26:	bf28      	it	cs
  404b28:	429a      	cmpcs	r2, r3
  404b2a:	d0f7      	beq.n	404b1c <strcmp>
  404b2c:	1ad0      	subs	r0, r2, r3
  404b2e:	4770      	bx	lr

00404b30 <__ssprint_r>:
  404b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b34:	4680      	mov	r8, r0
  404b36:	6890      	ldr	r0, [r2, #8]
  404b38:	f8d2 9000 	ldr.w	r9, [r2]
  404b3c:	460c      	mov	r4, r1
  404b3e:	4615      	mov	r5, r2
  404b40:	b118      	cbz	r0, 404b4a <__ssprint_r+0x1a>
  404b42:	2300      	movs	r3, #0
  404b44:	9301      	str	r3, [sp, #4]
  404b46:	461e      	mov	r6, r3
  404b48:	e008      	b.n	404b5c <__ssprint_r+0x2c>
  404b4a:	6050      	str	r0, [r2, #4]
  404b4c:	e066      	b.n	404c1c <__ssprint_r+0xec>
  404b4e:	f8d9 3000 	ldr.w	r3, [r9]
  404b52:	f8d9 6004 	ldr.w	r6, [r9, #4]
  404b56:	9301      	str	r3, [sp, #4]
  404b58:	f109 0908 	add.w	r9, r9, #8
  404b5c:	2e00      	cmp	r6, #0
  404b5e:	d0f6      	beq.n	404b4e <__ssprint_r+0x1e>
  404b60:	68a7      	ldr	r7, [r4, #8]
  404b62:	42be      	cmp	r6, r7
  404b64:	d347      	bcc.n	404bf6 <__ssprint_r+0xc6>
  404b66:	89a2      	ldrh	r2, [r4, #12]
  404b68:	f412 6f90 	tst.w	r2, #1152	; 0x480
  404b6c:	d041      	beq.n	404bf2 <__ssprint_r+0xc2>
  404b6e:	6823      	ldr	r3, [r4, #0]
  404b70:	6921      	ldr	r1, [r4, #16]
  404b72:	ebc1 0a03 	rsb	sl, r1, r3
  404b76:	6963      	ldr	r3, [r4, #20]
  404b78:	2002      	movs	r0, #2
  404b7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  404b7e:	fb93 fbf0 	sdiv	fp, r3, r0
  404b82:	f10a 0001 	add.w	r0, sl, #1
  404b86:	4430      	add	r0, r6
  404b88:	4583      	cmp	fp, r0
  404b8a:	bf38      	it	cc
  404b8c:	4683      	movcc	fp, r0
  404b8e:	0553      	lsls	r3, r2, #21
  404b90:	4640      	mov	r0, r8
  404b92:	d50f      	bpl.n	404bb4 <__ssprint_r+0x84>
  404b94:	4659      	mov	r1, fp
  404b96:	f7fe ffbd 	bl	403b14 <_malloc_r>
  404b9a:	4607      	mov	r7, r0
  404b9c:	b198      	cbz	r0, 404bc6 <__ssprint_r+0x96>
  404b9e:	4652      	mov	r2, sl
  404ba0:	6921      	ldr	r1, [r4, #16]
  404ba2:	f7ff f9d0 	bl	403f46 <memcpy>
  404ba6:	89a2      	ldrh	r2, [r4, #12]
  404ba8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  404bac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  404bb0:	81a2      	strh	r2, [r4, #12]
  404bb2:	e015      	b.n	404be0 <__ssprint_r+0xb0>
  404bb4:	465a      	mov	r2, fp
  404bb6:	f7ff fdd7 	bl	404768 <_realloc_r>
  404bba:	4607      	mov	r7, r0
  404bbc:	b980      	cbnz	r0, 404be0 <__ssprint_r+0xb0>
  404bbe:	4640      	mov	r0, r8
  404bc0:	6921      	ldr	r1, [r4, #16]
  404bc2:	f7fe fead 	bl	403920 <_free_r>
  404bc6:	230c      	movs	r3, #12
  404bc8:	f8c8 3000 	str.w	r3, [r8]
  404bcc:	89a3      	ldrh	r3, [r4, #12]
  404bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404bd2:	81a3      	strh	r3, [r4, #12]
  404bd4:	2300      	movs	r3, #0
  404bd6:	60ab      	str	r3, [r5, #8]
  404bd8:	606b      	str	r3, [r5, #4]
  404bda:	f04f 30ff 	mov.w	r0, #4294967295
  404bde:	e01d      	b.n	404c1c <__ssprint_r+0xec>
  404be0:	6127      	str	r7, [r4, #16]
  404be2:	ebca 030b 	rsb	r3, sl, fp
  404be6:	4457      	add	r7, sl
  404be8:	6027      	str	r7, [r4, #0]
  404bea:	f8c4 b014 	str.w	fp, [r4, #20]
  404bee:	4637      	mov	r7, r6
  404bf0:	60a3      	str	r3, [r4, #8]
  404bf2:	42be      	cmp	r6, r7
  404bf4:	d200      	bcs.n	404bf8 <__ssprint_r+0xc8>
  404bf6:	4637      	mov	r7, r6
  404bf8:	463a      	mov	r2, r7
  404bfa:	6820      	ldr	r0, [r4, #0]
  404bfc:	9901      	ldr	r1, [sp, #4]
  404bfe:	f7ff f9ab 	bl	403f58 <memmove>
  404c02:	68a3      	ldr	r3, [r4, #8]
  404c04:	1bdb      	subs	r3, r3, r7
  404c06:	60a3      	str	r3, [r4, #8]
  404c08:	6823      	ldr	r3, [r4, #0]
  404c0a:	441f      	add	r7, r3
  404c0c:	68ab      	ldr	r3, [r5, #8]
  404c0e:	6027      	str	r7, [r4, #0]
  404c10:	1b9e      	subs	r6, r3, r6
  404c12:	60ae      	str	r6, [r5, #8]
  404c14:	2e00      	cmp	r6, #0
  404c16:	d19a      	bne.n	404b4e <__ssprint_r+0x1e>
  404c18:	606e      	str	r6, [r5, #4]
  404c1a:	4630      	mov	r0, r6
  404c1c:	b003      	add	sp, #12
  404c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00404c22 <_svfiprintf_r>:
  404c22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c26:	461e      	mov	r6, r3
  404c28:	898b      	ldrh	r3, [r1, #12]
  404c2a:	b0ad      	sub	sp, #180	; 0xb4
  404c2c:	4688      	mov	r8, r1
  404c2e:	0619      	lsls	r1, r3, #24
  404c30:	4683      	mov	fp, r0
  404c32:	9202      	str	r2, [sp, #8]
  404c34:	d513      	bpl.n	404c5e <_svfiprintf_r+0x3c>
  404c36:	f8d8 3010 	ldr.w	r3, [r8, #16]
  404c3a:	b983      	cbnz	r3, 404c5e <_svfiprintf_r+0x3c>
  404c3c:	2140      	movs	r1, #64	; 0x40
  404c3e:	f7fe ff69 	bl	403b14 <_malloc_r>
  404c42:	f8c8 0000 	str.w	r0, [r8]
  404c46:	f8c8 0010 	str.w	r0, [r8, #16]
  404c4a:	b928      	cbnz	r0, 404c58 <_svfiprintf_r+0x36>
  404c4c:	230c      	movs	r3, #12
  404c4e:	f8cb 3000 	str.w	r3, [fp]
  404c52:	f04f 30ff 	mov.w	r0, #4294967295
  404c56:	e3d6      	b.n	405406 <_svfiprintf_r+0x7e4>
  404c58:	2340      	movs	r3, #64	; 0x40
  404c5a:	f8c8 3014 	str.w	r3, [r8, #20]
  404c5e:	2300      	movs	r3, #0
  404c60:	aa1c      	add	r2, sp, #112	; 0x70
  404c62:	920f      	str	r2, [sp, #60]	; 0x3c
  404c64:	9311      	str	r3, [sp, #68]	; 0x44
  404c66:	9310      	str	r3, [sp, #64]	; 0x40
  404c68:	4694      	mov	ip, r2
  404c6a:	930a      	str	r3, [sp, #40]	; 0x28
  404c6c:	9305      	str	r3, [sp, #20]
  404c6e:	9b02      	ldr	r3, [sp, #8]
  404c70:	461c      	mov	r4, r3
  404c72:	f813 2b01 	ldrb.w	r2, [r3], #1
  404c76:	b91a      	cbnz	r2, 404c80 <_svfiprintf_r+0x5e>
  404c78:	9802      	ldr	r0, [sp, #8]
  404c7a:	1a25      	subs	r5, r4, r0
  404c7c:	d103      	bne.n	404c86 <_svfiprintf_r+0x64>
  404c7e:	e01d      	b.n	404cbc <_svfiprintf_r+0x9a>
  404c80:	2a25      	cmp	r2, #37	; 0x25
  404c82:	d1f5      	bne.n	404c70 <_svfiprintf_r+0x4e>
  404c84:	e7f8      	b.n	404c78 <_svfiprintf_r+0x56>
  404c86:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404c88:	9902      	ldr	r1, [sp, #8]
  404c8a:	442b      	add	r3, r5
  404c8c:	9311      	str	r3, [sp, #68]	; 0x44
  404c8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404c90:	3301      	adds	r3, #1
  404c92:	2b07      	cmp	r3, #7
  404c94:	e88c 0022 	stmia.w	ip, {r1, r5}
  404c98:	9310      	str	r3, [sp, #64]	; 0x40
  404c9a:	dc02      	bgt.n	404ca2 <_svfiprintf_r+0x80>
  404c9c:	f10c 0c08 	add.w	ip, ip, #8
  404ca0:	e009      	b.n	404cb6 <_svfiprintf_r+0x94>
  404ca2:	4658      	mov	r0, fp
  404ca4:	4641      	mov	r1, r8
  404ca6:	aa0f      	add	r2, sp, #60	; 0x3c
  404ca8:	f7ff ff42 	bl	404b30 <__ssprint_r>
  404cac:	2800      	cmp	r0, #0
  404cae:	f040 83a2 	bne.w	4053f6 <_svfiprintf_r+0x7d4>
  404cb2:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  404cb6:	9a05      	ldr	r2, [sp, #20]
  404cb8:	442a      	add	r2, r5
  404cba:	9205      	str	r2, [sp, #20]
  404cbc:	7823      	ldrb	r3, [r4, #0]
  404cbe:	2b00      	cmp	r3, #0
  404cc0:	f000 8392 	beq.w	4053e8 <_svfiprintf_r+0x7c6>
  404cc4:	2200      	movs	r2, #0
  404cc6:	3401      	adds	r4, #1
  404cc8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404ccc:	f04f 3aff 	mov.w	sl, #4294967295
  404cd0:	9204      	str	r2, [sp, #16]
  404cd2:	4617      	mov	r7, r2
  404cd4:	1c65      	adds	r5, r4, #1
  404cd6:	7823      	ldrb	r3, [r4, #0]
  404cd8:	9502      	str	r5, [sp, #8]
  404cda:	2b58      	cmp	r3, #88	; 0x58
  404cdc:	d065      	beq.n	404daa <_svfiprintf_r+0x188>
  404cde:	dc2e      	bgt.n	404d3e <_svfiprintf_r+0x11c>
  404ce0:	2b2e      	cmp	r3, #46	; 0x2e
  404ce2:	d077      	beq.n	404dd4 <_svfiprintf_r+0x1b2>
  404ce4:	dc12      	bgt.n	404d0c <_svfiprintf_r+0xea>
  404ce6:	2b2a      	cmp	r3, #42	; 0x2a
  404ce8:	d067      	beq.n	404dba <_svfiprintf_r+0x198>
  404cea:	dc08      	bgt.n	404cfe <_svfiprintf_r+0xdc>
  404cec:	2b20      	cmp	r3, #32
  404cee:	d060      	beq.n	404db2 <_svfiprintf_r+0x190>
  404cf0:	2b23      	cmp	r3, #35	; 0x23
  404cf2:	f040 8203 	bne.w	4050fc <_svfiprintf_r+0x4da>
  404cf6:	f047 0701 	orr.w	r7, r7, #1
  404cfa:	9c02      	ldr	r4, [sp, #8]
  404cfc:	e7ea      	b.n	404cd4 <_svfiprintf_r+0xb2>
  404cfe:	2b2b      	cmp	r3, #43	; 0x2b
  404d00:	d101      	bne.n	404d06 <_svfiprintf_r+0xe4>
  404d02:	461a      	mov	r2, r3
  404d04:	e7f9      	b.n	404cfa <_svfiprintf_r+0xd8>
  404d06:	2b2d      	cmp	r3, #45	; 0x2d
  404d08:	d061      	beq.n	404dce <_svfiprintf_r+0x1ac>
  404d0a:	e1f7      	b.n	4050fc <_svfiprintf_r+0x4da>
  404d0c:	2b39      	cmp	r3, #57	; 0x39
  404d0e:	dc08      	bgt.n	404d22 <_svfiprintf_r+0x100>
  404d10:	2b31      	cmp	r3, #49	; 0x31
  404d12:	f280 8081 	bge.w	404e18 <_svfiprintf_r+0x1f6>
  404d16:	2b30      	cmp	r3, #48	; 0x30
  404d18:	f040 81f0 	bne.w	4050fc <_svfiprintf_r+0x4da>
  404d1c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  404d20:	e7eb      	b.n	404cfa <_svfiprintf_r+0xd8>
  404d22:	2b4f      	cmp	r3, #79	; 0x4f
  404d24:	f000 80e1 	beq.w	404eea <_svfiprintf_r+0x2c8>
  404d28:	2b55      	cmp	r3, #85	; 0x55
  404d2a:	f000 8121 	beq.w	404f70 <_svfiprintf_r+0x34e>
  404d2e:	2b44      	cmp	r3, #68	; 0x44
  404d30:	f040 81e4 	bne.w	4050fc <_svfiprintf_r+0x4da>
  404d34:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404d38:	f047 0710 	orr.w	r7, r7, #16
  404d3c:	e095      	b.n	404e6a <_svfiprintf_r+0x248>
  404d3e:	2b6e      	cmp	r3, #110	; 0x6e
  404d40:	f000 80b7 	beq.w	404eb2 <_svfiprintf_r+0x290>
  404d44:	dc0d      	bgt.n	404d62 <_svfiprintf_r+0x140>
  404d46:	2b68      	cmp	r3, #104	; 0x68
  404d48:	d077      	beq.n	404e3a <_svfiprintf_r+0x218>
  404d4a:	dc05      	bgt.n	404d58 <_svfiprintf_r+0x136>
  404d4c:	2b63      	cmp	r3, #99	; 0x63
  404d4e:	f000 8084 	beq.w	404e5a <_svfiprintf_r+0x238>
  404d52:	2b64      	cmp	r3, #100	; 0x64
  404d54:	d026      	beq.n	404da4 <_svfiprintf_r+0x182>
  404d56:	e1d1      	b.n	4050fc <_svfiprintf_r+0x4da>
  404d58:	2b69      	cmp	r3, #105	; 0x69
  404d5a:	d023      	beq.n	404da4 <_svfiprintf_r+0x182>
  404d5c:	2b6c      	cmp	r3, #108	; 0x6c
  404d5e:	d06f      	beq.n	404e40 <_svfiprintf_r+0x21e>
  404d60:	e1cc      	b.n	4050fc <_svfiprintf_r+0x4da>
  404d62:	2b71      	cmp	r3, #113	; 0x71
  404d64:	d076      	beq.n	404e54 <_svfiprintf_r+0x232>
  404d66:	dc13      	bgt.n	404d90 <_svfiprintf_r+0x16e>
  404d68:	2b6f      	cmp	r3, #111	; 0x6f
  404d6a:	f000 80c0 	beq.w	404eee <_svfiprintf_r+0x2cc>
  404d6e:	2b70      	cmp	r3, #112	; 0x70
  404d70:	f040 81c4 	bne.w	4050fc <_svfiprintf_r+0x4da>
  404d74:	2330      	movs	r3, #48	; 0x30
  404d76:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  404d7a:	48a0      	ldr	r0, [pc, #640]	; (404ffc <_svfiprintf_r+0x3da>)
  404d7c:	6834      	ldr	r4, [r6, #0]
  404d7e:	900a      	str	r0, [sp, #40]	; 0x28
  404d80:	2378      	movs	r3, #120	; 0x78
  404d82:	2500      	movs	r5, #0
  404d84:	f047 0702 	orr.w	r7, r7, #2
  404d88:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  404d8c:	3604      	adds	r6, #4
  404d8e:	e12f      	b.n	404ff0 <_svfiprintf_r+0x3ce>
  404d90:	2b75      	cmp	r3, #117	; 0x75
  404d92:	f000 80ef 	beq.w	404f74 <_svfiprintf_r+0x352>
  404d96:	2b78      	cmp	r3, #120	; 0x78
  404d98:	f000 8104 	beq.w	404fa4 <_svfiprintf_r+0x382>
  404d9c:	2b73      	cmp	r3, #115	; 0x73
  404d9e:	f040 81ad 	bne.w	4050fc <_svfiprintf_r+0x4da>
  404da2:	e0c0      	b.n	404f26 <_svfiprintf_r+0x304>
  404da4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404da8:	e05f      	b.n	404e6a <_svfiprintf_r+0x248>
  404daa:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404dae:	4c94      	ldr	r4, [pc, #592]	; (405000 <_svfiprintf_r+0x3de>)
  404db0:	e0fb      	b.n	404faa <_svfiprintf_r+0x388>
  404db2:	2a00      	cmp	r2, #0
  404db4:	bf08      	it	eq
  404db6:	2220      	moveq	r2, #32
  404db8:	e79f      	b.n	404cfa <_svfiprintf_r+0xd8>
  404dba:	1d33      	adds	r3, r6, #4
  404dbc:	6836      	ldr	r6, [r6, #0]
  404dbe:	9604      	str	r6, [sp, #16]
  404dc0:	2e00      	cmp	r6, #0
  404dc2:	db01      	blt.n	404dc8 <_svfiprintf_r+0x1a6>
  404dc4:	461e      	mov	r6, r3
  404dc6:	e798      	b.n	404cfa <_svfiprintf_r+0xd8>
  404dc8:	4275      	negs	r5, r6
  404dca:	9504      	str	r5, [sp, #16]
  404dcc:	461e      	mov	r6, r3
  404dce:	f047 0704 	orr.w	r7, r7, #4
  404dd2:	e792      	b.n	404cfa <_svfiprintf_r+0xd8>
  404dd4:	9c02      	ldr	r4, [sp, #8]
  404dd6:	7823      	ldrb	r3, [r4, #0]
  404dd8:	2b2a      	cmp	r3, #42	; 0x2a
  404dda:	f104 0101 	add.w	r1, r4, #1
  404dde:	d002      	beq.n	404de6 <_svfiprintf_r+0x1c4>
  404de0:	f04f 0a00 	mov.w	sl, #0
  404de4:	e00a      	b.n	404dfc <_svfiprintf_r+0x1da>
  404de6:	f8d6 a000 	ldr.w	sl, [r6]
  404dea:	9102      	str	r1, [sp, #8]
  404dec:	1d33      	adds	r3, r6, #4
  404dee:	f1ba 0f00 	cmp.w	sl, #0
  404df2:	461e      	mov	r6, r3
  404df4:	da81      	bge.n	404cfa <_svfiprintf_r+0xd8>
  404df6:	f04f 3aff 	mov.w	sl, #4294967295
  404dfa:	e77e      	b.n	404cfa <_svfiprintf_r+0xd8>
  404dfc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404e00:	2809      	cmp	r0, #9
  404e02:	d805      	bhi.n	404e10 <_svfiprintf_r+0x1ee>
  404e04:	230a      	movs	r3, #10
  404e06:	fb03 0a0a 	mla	sl, r3, sl, r0
  404e0a:	f811 3b01 	ldrb.w	r3, [r1], #1
  404e0e:	e7f5      	b.n	404dfc <_svfiprintf_r+0x1da>
  404e10:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
  404e14:	9102      	str	r1, [sp, #8]
  404e16:	e760      	b.n	404cda <_svfiprintf_r+0xb8>
  404e18:	2500      	movs	r5, #0
  404e1a:	9504      	str	r5, [sp, #16]
  404e1c:	9c04      	ldr	r4, [sp, #16]
  404e1e:	3b30      	subs	r3, #48	; 0x30
  404e20:	210a      	movs	r1, #10
  404e22:	fb01 3404 	mla	r4, r1, r4, r3
  404e26:	9902      	ldr	r1, [sp, #8]
  404e28:	9404      	str	r4, [sp, #16]
  404e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
  404e2e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404e32:	2809      	cmp	r0, #9
  404e34:	d8ee      	bhi.n	404e14 <_svfiprintf_r+0x1f2>
  404e36:	9102      	str	r1, [sp, #8]
  404e38:	e7f0      	b.n	404e1c <_svfiprintf_r+0x1fa>
  404e3a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  404e3e:	e75c      	b.n	404cfa <_svfiprintf_r+0xd8>
  404e40:	9d02      	ldr	r5, [sp, #8]
  404e42:	782b      	ldrb	r3, [r5, #0]
  404e44:	2b6c      	cmp	r3, #108	; 0x6c
  404e46:	d102      	bne.n	404e4e <_svfiprintf_r+0x22c>
  404e48:	3501      	adds	r5, #1
  404e4a:	9502      	str	r5, [sp, #8]
  404e4c:	e002      	b.n	404e54 <_svfiprintf_r+0x232>
  404e4e:	f047 0710 	orr.w	r7, r7, #16
  404e52:	e752      	b.n	404cfa <_svfiprintf_r+0xd8>
  404e54:	f047 0720 	orr.w	r7, r7, #32
  404e58:	e74f      	b.n	404cfa <_svfiprintf_r+0xd8>
  404e5a:	6833      	ldr	r3, [r6, #0]
  404e5c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  404e60:	2500      	movs	r5, #0
  404e62:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404e66:	3604      	adds	r6, #4
  404e68:	e152      	b.n	405110 <_svfiprintf_r+0x4ee>
  404e6a:	06ba      	lsls	r2, r7, #26
  404e6c:	d507      	bpl.n	404e7e <_svfiprintf_r+0x25c>
  404e6e:	3607      	adds	r6, #7
  404e70:	f026 0307 	bic.w	r3, r6, #7
  404e74:	f103 0608 	add.w	r6, r3, #8
  404e78:	e9d3 4500 	ldrd	r4, r5, [r3]
  404e7c:	e00d      	b.n	404e9a <_svfiprintf_r+0x278>
  404e7e:	f017 0f10 	tst.w	r7, #16
  404e82:	f106 0304 	add.w	r3, r6, #4
  404e86:	d001      	beq.n	404e8c <_svfiprintf_r+0x26a>
  404e88:	6834      	ldr	r4, [r6, #0]
  404e8a:	e004      	b.n	404e96 <_svfiprintf_r+0x274>
  404e8c:	6834      	ldr	r4, [r6, #0]
  404e8e:	f017 0f40 	tst.w	r7, #64	; 0x40
  404e92:	bf18      	it	ne
  404e94:	b224      	sxthne	r4, r4
  404e96:	17e5      	asrs	r5, r4, #31
  404e98:	461e      	mov	r6, r3
  404e9a:	2c00      	cmp	r4, #0
  404e9c:	f175 0000 	sbcs.w	r0, r5, #0
  404ea0:	f280 80b0 	bge.w	405004 <_svfiprintf_r+0x3e2>
  404ea4:	232d      	movs	r3, #45	; 0x2d
  404ea6:	4264      	negs	r4, r4
  404ea8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404eac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404eb0:	e0a8      	b.n	405004 <_svfiprintf_r+0x3e2>
  404eb2:	f017 0f20 	tst.w	r7, #32
  404eb6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404eba:	f106 0104 	add.w	r1, r6, #4
  404ebe:	d007      	beq.n	404ed0 <_svfiprintf_r+0x2ae>
  404ec0:	9c05      	ldr	r4, [sp, #20]
  404ec2:	6830      	ldr	r0, [r6, #0]
  404ec4:	17e5      	asrs	r5, r4, #31
  404ec6:	4622      	mov	r2, r4
  404ec8:	462b      	mov	r3, r5
  404eca:	e9c0 2300 	strd	r2, r3, [r0]
  404ece:	e00a      	b.n	404ee6 <_svfiprintf_r+0x2c4>
  404ed0:	06fb      	lsls	r3, r7, #27
  404ed2:	d405      	bmi.n	404ee0 <_svfiprintf_r+0x2be>
  404ed4:	067f      	lsls	r7, r7, #25
  404ed6:	d503      	bpl.n	404ee0 <_svfiprintf_r+0x2be>
  404ed8:	6833      	ldr	r3, [r6, #0]
  404eda:	9c05      	ldr	r4, [sp, #20]
  404edc:	801c      	strh	r4, [r3, #0]
  404ede:	e002      	b.n	404ee6 <_svfiprintf_r+0x2c4>
  404ee0:	6833      	ldr	r3, [r6, #0]
  404ee2:	9d05      	ldr	r5, [sp, #20]
  404ee4:	601d      	str	r5, [r3, #0]
  404ee6:	460e      	mov	r6, r1
  404ee8:	e6c1      	b.n	404c6e <_svfiprintf_r+0x4c>
  404eea:	f047 0710 	orr.w	r7, r7, #16
  404eee:	f017 0320 	ands.w	r3, r7, #32
  404ef2:	d008      	beq.n	404f06 <_svfiprintf_r+0x2e4>
  404ef4:	3607      	adds	r6, #7
  404ef6:	f026 0307 	bic.w	r3, r6, #7
  404efa:	e9d3 4500 	ldrd	r4, r5, [r3]
  404efe:	f103 0608 	add.w	r6, r3, #8
  404f02:	2300      	movs	r3, #0
  404f04:	e075      	b.n	404ff2 <_svfiprintf_r+0x3d0>
  404f06:	f017 0110 	ands.w	r1, r7, #16
  404f0a:	f106 0204 	add.w	r2, r6, #4
  404f0e:	d106      	bne.n	404f1e <_svfiprintf_r+0x2fc>
  404f10:	f017 0340 	ands.w	r3, r7, #64	; 0x40
  404f14:	d003      	beq.n	404f1e <_svfiprintf_r+0x2fc>
  404f16:	8834      	ldrh	r4, [r6, #0]
  404f18:	2500      	movs	r5, #0
  404f1a:	4616      	mov	r6, r2
  404f1c:	e7f1      	b.n	404f02 <_svfiprintf_r+0x2e0>
  404f1e:	6834      	ldr	r4, [r6, #0]
  404f20:	2500      	movs	r5, #0
  404f22:	4616      	mov	r6, r2
  404f24:	e065      	b.n	404ff2 <_svfiprintf_r+0x3d0>
  404f26:	f8d6 9000 	ldr.w	r9, [r6]
  404f2a:	2300      	movs	r3, #0
  404f2c:	459a      	cmp	sl, r3
  404f2e:	f106 0604 	add.w	r6, r6, #4
  404f32:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404f36:	4648      	mov	r0, r9
  404f38:	db11      	blt.n	404f5e <_svfiprintf_r+0x33c>
  404f3a:	4619      	mov	r1, r3
  404f3c:	4652      	mov	r2, sl
  404f3e:	f8cd c004 	str.w	ip, [sp, #4]
  404f42:	f7fe fff1 	bl	403f28 <memchr>
  404f46:	f8dd c004 	ldr.w	ip, [sp, #4]
  404f4a:	2800      	cmp	r0, #0
  404f4c:	f000 80e5 	beq.w	40511a <_svfiprintf_r+0x4f8>
  404f50:	ebc9 0000 	rsb	r0, r9, r0
  404f54:	4550      	cmp	r0, sl
  404f56:	bfb8      	it	lt
  404f58:	4682      	movlt	sl, r0
  404f5a:	2500      	movs	r5, #0
  404f5c:	e0de      	b.n	40511c <_svfiprintf_r+0x4fa>
  404f5e:	f8cd c004 	str.w	ip, [sp, #4]
  404f62:	f7fc fe7f 	bl	401c64 <strlen>
  404f66:	2500      	movs	r5, #0
  404f68:	4682      	mov	sl, r0
  404f6a:	f8dd c004 	ldr.w	ip, [sp, #4]
  404f6e:	e0d5      	b.n	40511c <_svfiprintf_r+0x4fa>
  404f70:	f047 0710 	orr.w	r7, r7, #16
  404f74:	06bd      	lsls	r5, r7, #26
  404f76:	d507      	bpl.n	404f88 <_svfiprintf_r+0x366>
  404f78:	3607      	adds	r6, #7
  404f7a:	f026 0307 	bic.w	r3, r6, #7
  404f7e:	f103 0608 	add.w	r6, r3, #8
  404f82:	e9d3 4500 	ldrd	r4, r5, [r3]
  404f86:	e00b      	b.n	404fa0 <_svfiprintf_r+0x37e>
  404f88:	f017 0f10 	tst.w	r7, #16
  404f8c:	f106 0304 	add.w	r3, r6, #4
  404f90:	d103      	bne.n	404f9a <_svfiprintf_r+0x378>
  404f92:	067c      	lsls	r4, r7, #25
  404f94:	d501      	bpl.n	404f9a <_svfiprintf_r+0x378>
  404f96:	8834      	ldrh	r4, [r6, #0]
  404f98:	e000      	b.n	404f9c <_svfiprintf_r+0x37a>
  404f9a:	6834      	ldr	r4, [r6, #0]
  404f9c:	2500      	movs	r5, #0
  404f9e:	461e      	mov	r6, r3
  404fa0:	2301      	movs	r3, #1
  404fa2:	e026      	b.n	404ff2 <_svfiprintf_r+0x3d0>
  404fa4:	4c15      	ldr	r4, [pc, #84]	; (404ffc <_svfiprintf_r+0x3da>)
  404fa6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404faa:	06b8      	lsls	r0, r7, #26
  404fac:	940a      	str	r4, [sp, #40]	; 0x28
  404fae:	d507      	bpl.n	404fc0 <_svfiprintf_r+0x39e>
  404fb0:	3607      	adds	r6, #7
  404fb2:	f026 0207 	bic.w	r2, r6, #7
  404fb6:	f102 0608 	add.w	r6, r2, #8
  404fba:	e9d2 4500 	ldrd	r4, r5, [r2]
  404fbe:	e00b      	b.n	404fd8 <_svfiprintf_r+0x3b6>
  404fc0:	f017 0f10 	tst.w	r7, #16
  404fc4:	f106 0204 	add.w	r2, r6, #4
  404fc8:	d103      	bne.n	404fd2 <_svfiprintf_r+0x3b0>
  404fca:	0679      	lsls	r1, r7, #25
  404fcc:	d501      	bpl.n	404fd2 <_svfiprintf_r+0x3b0>
  404fce:	8834      	ldrh	r4, [r6, #0]
  404fd0:	e000      	b.n	404fd4 <_svfiprintf_r+0x3b2>
  404fd2:	6834      	ldr	r4, [r6, #0]
  404fd4:	2500      	movs	r5, #0
  404fd6:	4616      	mov	r6, r2
  404fd8:	07fa      	lsls	r2, r7, #31
  404fda:	d509      	bpl.n	404ff0 <_svfiprintf_r+0x3ce>
  404fdc:	ea54 0005 	orrs.w	r0, r4, r5
  404fe0:	d006      	beq.n	404ff0 <_svfiprintf_r+0x3ce>
  404fe2:	2230      	movs	r2, #48	; 0x30
  404fe4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  404fe8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  404fec:	f047 0702 	orr.w	r7, r7, #2
  404ff0:	2302      	movs	r3, #2
  404ff2:	2200      	movs	r2, #0
  404ff4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404ff8:	e005      	b.n	405006 <_svfiprintf_r+0x3e4>
  404ffa:	bf00      	nop
  404ffc:	00405d0b 	.word	0x00405d0b
  405000:	00405cfa 	.word	0x00405cfa
  405004:	2301      	movs	r3, #1
  405006:	f1ba 0f00 	cmp.w	sl, #0
  40500a:	bfa8      	it	ge
  40500c:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
  405010:	ea54 0105 	orrs.w	r1, r4, r5
  405014:	d102      	bne.n	40501c <_svfiprintf_r+0x3fa>
  405016:	f1ba 0f00 	cmp.w	sl, #0
  40501a:	d05e      	beq.n	4050da <_svfiprintf_r+0x4b8>
  40501c:	2b01      	cmp	r3, #1
  40501e:	d01f      	beq.n	405060 <_svfiprintf_r+0x43e>
  405020:	2b02      	cmp	r3, #2
  405022:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
  405026:	d045      	beq.n	4050b4 <_svfiprintf_r+0x492>
  405028:	08e0      	lsrs	r0, r4, #3
  40502a:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
  40502e:	08e8      	lsrs	r0, r5, #3
  405030:	9106      	str	r1, [sp, #24]
  405032:	9007      	str	r0, [sp, #28]
  405034:	f004 0207 	and.w	r2, r4, #7
  405038:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  40503c:	3230      	adds	r2, #48	; 0x30
  40503e:	ea54 0105 	orrs.w	r1, r4, r5
  405042:	4699      	mov	r9, r3
  405044:	701a      	strb	r2, [r3, #0]
  405046:	f103 33ff 	add.w	r3, r3, #4294967295
  40504a:	d1ed      	bne.n	405028 <_svfiprintf_r+0x406>
  40504c:	07f8      	lsls	r0, r7, #31
  40504e:	4649      	mov	r1, r9
  405050:	d54e      	bpl.n	4050f0 <_svfiprintf_r+0x4ce>
  405052:	2a30      	cmp	r2, #48	; 0x30
  405054:	d04c      	beq.n	4050f0 <_svfiprintf_r+0x4ce>
  405056:	4699      	mov	r9, r3
  405058:	2330      	movs	r3, #48	; 0x30
  40505a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40505e:	e047      	b.n	4050f0 <_svfiprintf_r+0x4ce>
  405060:	2d00      	cmp	r5, #0
  405062:	bf08      	it	eq
  405064:	2c0a      	cmpeq	r4, #10
  405066:	d205      	bcs.n	405074 <_svfiprintf_r+0x452>
  405068:	3430      	adds	r4, #48	; 0x30
  40506a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  40506e:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
  405072:	e03d      	b.n	4050f0 <_svfiprintf_r+0x4ce>
  405074:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
  405078:	9203      	str	r2, [sp, #12]
  40507a:	4620      	mov	r0, r4
  40507c:	4629      	mov	r1, r5
  40507e:	220a      	movs	r2, #10
  405080:	2300      	movs	r3, #0
  405082:	f8cd c004 	str.w	ip, [sp, #4]
  405086:	f000 faeb 	bl	405660 <__aeabi_uldivmod>
  40508a:	9b03      	ldr	r3, [sp, #12]
  40508c:	f8dd 900c 	ldr.w	r9, [sp, #12]
  405090:	3230      	adds	r2, #48	; 0x30
  405092:	f803 2901 	strb.w	r2, [r3], #-1
  405096:	4620      	mov	r0, r4
  405098:	9303      	str	r3, [sp, #12]
  40509a:	4629      	mov	r1, r5
  40509c:	220a      	movs	r2, #10
  40509e:	2300      	movs	r3, #0
  4050a0:	f000 fade 	bl	405660 <__aeabi_uldivmod>
  4050a4:	4604      	mov	r4, r0
  4050a6:	460d      	mov	r5, r1
  4050a8:	ea54 0005 	orrs.w	r0, r4, r5
  4050ac:	f8dd c004 	ldr.w	ip, [sp, #4]
  4050b0:	d1e3      	bne.n	40507a <_svfiprintf_r+0x458>
  4050b2:	e01d      	b.n	4050f0 <_svfiprintf_r+0x4ce>
  4050b4:	f004 020f 	and.w	r2, r4, #15
  4050b8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4050ba:	5c8a      	ldrb	r2, [r1, r2]
  4050bc:	4699      	mov	r9, r3
  4050be:	f803 2901 	strb.w	r2, [r3], #-1
  4050c2:	0922      	lsrs	r2, r4, #4
  4050c4:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
  4050c8:	0929      	lsrs	r1, r5, #4
  4050ca:	9008      	str	r0, [sp, #32]
  4050cc:	9109      	str	r1, [sp, #36]	; 0x24
  4050ce:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
  4050d2:	ea54 0205 	orrs.w	r2, r4, r5
  4050d6:	d1ed      	bne.n	4050b4 <_svfiprintf_r+0x492>
  4050d8:	e00a      	b.n	4050f0 <_svfiprintf_r+0x4ce>
  4050da:	b93b      	cbnz	r3, 4050ec <_svfiprintf_r+0x4ca>
  4050dc:	07f9      	lsls	r1, r7, #31
  4050de:	d505      	bpl.n	4050ec <_svfiprintf_r+0x4ca>
  4050e0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
  4050e4:	2330      	movs	r3, #48	; 0x30
  4050e6:	f809 3d41 	strb.w	r3, [r9, #-65]!
  4050ea:	e001      	b.n	4050f0 <_svfiprintf_r+0x4ce>
  4050ec:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4050f0:	4655      	mov	r5, sl
  4050f2:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
  4050f6:	ebc9 0a0a 	rsb	sl, r9, sl
  4050fa:	e00f      	b.n	40511c <_svfiprintf_r+0x4fa>
  4050fc:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405100:	2b00      	cmp	r3, #0
  405102:	f000 8171 	beq.w	4053e8 <_svfiprintf_r+0x7c6>
  405106:	2500      	movs	r5, #0
  405108:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40510c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405110:	f04f 0a01 	mov.w	sl, #1
  405114:	f10d 0948 	add.w	r9, sp, #72	; 0x48
  405118:	e000      	b.n	40511c <_svfiprintf_r+0x4fa>
  40511a:	4605      	mov	r5, r0
  40511c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  405120:	45aa      	cmp	sl, r5
  405122:	bfac      	ite	ge
  405124:	4654      	movge	r4, sl
  405126:	462c      	movlt	r4, r5
  405128:	b103      	cbz	r3, 40512c <_svfiprintf_r+0x50a>
  40512a:	3401      	adds	r4, #1
  40512c:	f017 0302 	ands.w	r3, r7, #2
  405130:	9303      	str	r3, [sp, #12]
  405132:	bf18      	it	ne
  405134:	3402      	addne	r4, #2
  405136:	f017 0384 	ands.w	r3, r7, #132	; 0x84
  40513a:	930b      	str	r3, [sp, #44]	; 0x2c
  40513c:	d13b      	bne.n	4051b6 <_svfiprintf_r+0x594>
  40513e:	9804      	ldr	r0, [sp, #16]
  405140:	1b03      	subs	r3, r0, r4
  405142:	2b00      	cmp	r3, #0
  405144:	dd37      	ble.n	4051b6 <_svfiprintf_r+0x594>
  405146:	4aa6      	ldr	r2, [pc, #664]	; (4053e0 <_svfiprintf_r+0x7be>)
  405148:	f8cc 2000 	str.w	r2, [ip]
  40514c:	2b10      	cmp	r3, #16
  40514e:	dd1b      	ble.n	405188 <_svfiprintf_r+0x566>
  405150:	2210      	movs	r2, #16
  405152:	f8cc 2004 	str.w	r2, [ip, #4]
  405156:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405158:	3210      	adds	r2, #16
  40515a:	9211      	str	r2, [sp, #68]	; 0x44
  40515c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40515e:	3201      	adds	r2, #1
  405160:	2a07      	cmp	r2, #7
  405162:	9210      	str	r2, [sp, #64]	; 0x40
  405164:	dc02      	bgt.n	40516c <_svfiprintf_r+0x54a>
  405166:	f10c 0c08 	add.w	ip, ip, #8
  40516a:	e00b      	b.n	405184 <_svfiprintf_r+0x562>
  40516c:	4658      	mov	r0, fp
  40516e:	4641      	mov	r1, r8
  405170:	aa0f      	add	r2, sp, #60	; 0x3c
  405172:	9301      	str	r3, [sp, #4]
  405174:	f7ff fcdc 	bl	404b30 <__ssprint_r>
  405178:	9b01      	ldr	r3, [sp, #4]
  40517a:	2800      	cmp	r0, #0
  40517c:	f040 813b 	bne.w	4053f6 <_svfiprintf_r+0x7d4>
  405180:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  405184:	3b10      	subs	r3, #16
  405186:	e7de      	b.n	405146 <_svfiprintf_r+0x524>
  405188:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40518a:	f8cc 3004 	str.w	r3, [ip, #4]
  40518e:	4413      	add	r3, r2
  405190:	9311      	str	r3, [sp, #68]	; 0x44
  405192:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405194:	3301      	adds	r3, #1
  405196:	2b07      	cmp	r3, #7
  405198:	9310      	str	r3, [sp, #64]	; 0x40
  40519a:	dc02      	bgt.n	4051a2 <_svfiprintf_r+0x580>
  40519c:	f10c 0c08 	add.w	ip, ip, #8
  4051a0:	e009      	b.n	4051b6 <_svfiprintf_r+0x594>
  4051a2:	4658      	mov	r0, fp
  4051a4:	4641      	mov	r1, r8
  4051a6:	aa0f      	add	r2, sp, #60	; 0x3c
  4051a8:	f7ff fcc2 	bl	404b30 <__ssprint_r>
  4051ac:	2800      	cmp	r0, #0
  4051ae:	f040 8122 	bne.w	4053f6 <_svfiprintf_r+0x7d4>
  4051b2:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4051b6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  4051ba:	b1db      	cbz	r3, 4051f4 <_svfiprintf_r+0x5d2>
  4051bc:	f10d 0337 	add.w	r3, sp, #55	; 0x37
  4051c0:	f8cc 3000 	str.w	r3, [ip]
  4051c4:	2301      	movs	r3, #1
  4051c6:	f8cc 3004 	str.w	r3, [ip, #4]
  4051ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4051cc:	3301      	adds	r3, #1
  4051ce:	9311      	str	r3, [sp, #68]	; 0x44
  4051d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4051d2:	3301      	adds	r3, #1
  4051d4:	2b07      	cmp	r3, #7
  4051d6:	9310      	str	r3, [sp, #64]	; 0x40
  4051d8:	dc02      	bgt.n	4051e0 <_svfiprintf_r+0x5be>
  4051da:	f10c 0c08 	add.w	ip, ip, #8
  4051de:	e009      	b.n	4051f4 <_svfiprintf_r+0x5d2>
  4051e0:	4658      	mov	r0, fp
  4051e2:	4641      	mov	r1, r8
  4051e4:	aa0f      	add	r2, sp, #60	; 0x3c
  4051e6:	f7ff fca3 	bl	404b30 <__ssprint_r>
  4051ea:	2800      	cmp	r0, #0
  4051ec:	f040 8103 	bne.w	4053f6 <_svfiprintf_r+0x7d4>
  4051f0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4051f4:	9b03      	ldr	r3, [sp, #12]
  4051f6:	b1d3      	cbz	r3, 40522e <_svfiprintf_r+0x60c>
  4051f8:	ab0e      	add	r3, sp, #56	; 0x38
  4051fa:	f8cc 3000 	str.w	r3, [ip]
  4051fe:	2302      	movs	r3, #2
  405200:	f8cc 3004 	str.w	r3, [ip, #4]
  405204:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405206:	3302      	adds	r3, #2
  405208:	9311      	str	r3, [sp, #68]	; 0x44
  40520a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40520c:	3301      	adds	r3, #1
  40520e:	2b07      	cmp	r3, #7
  405210:	9310      	str	r3, [sp, #64]	; 0x40
  405212:	dc02      	bgt.n	40521a <_svfiprintf_r+0x5f8>
  405214:	f10c 0c08 	add.w	ip, ip, #8
  405218:	e009      	b.n	40522e <_svfiprintf_r+0x60c>
  40521a:	4658      	mov	r0, fp
  40521c:	4641      	mov	r1, r8
  40521e:	aa0f      	add	r2, sp, #60	; 0x3c
  405220:	f7ff fc86 	bl	404b30 <__ssprint_r>
  405224:	2800      	cmp	r0, #0
  405226:	f040 80e6 	bne.w	4053f6 <_svfiprintf_r+0x7d4>
  40522a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  40522e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405230:	2b80      	cmp	r3, #128	; 0x80
  405232:	d13f      	bne.n	4052b4 <_svfiprintf_r+0x692>
  405234:	9b04      	ldr	r3, [sp, #16]
  405236:	1b1b      	subs	r3, r3, r4
  405238:	2b00      	cmp	r3, #0
  40523a:	9303      	str	r3, [sp, #12]
  40523c:	dd3a      	ble.n	4052b4 <_svfiprintf_r+0x692>
  40523e:	9b03      	ldr	r3, [sp, #12]
  405240:	2b10      	cmp	r3, #16
  405242:	4b68      	ldr	r3, [pc, #416]	; (4053e4 <_svfiprintf_r+0x7c2>)
  405244:	f8cc 3000 	str.w	r3, [ip]
  405248:	dd1b      	ble.n	405282 <_svfiprintf_r+0x660>
  40524a:	2310      	movs	r3, #16
  40524c:	f8cc 3004 	str.w	r3, [ip, #4]
  405250:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405252:	3310      	adds	r3, #16
  405254:	9311      	str	r3, [sp, #68]	; 0x44
  405256:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405258:	3301      	adds	r3, #1
  40525a:	2b07      	cmp	r3, #7
  40525c:	9310      	str	r3, [sp, #64]	; 0x40
  40525e:	dc02      	bgt.n	405266 <_svfiprintf_r+0x644>
  405260:	f10c 0c08 	add.w	ip, ip, #8
  405264:	e009      	b.n	40527a <_svfiprintf_r+0x658>
  405266:	4658      	mov	r0, fp
  405268:	4641      	mov	r1, r8
  40526a:	aa0f      	add	r2, sp, #60	; 0x3c
  40526c:	f7ff fc60 	bl	404b30 <__ssprint_r>
  405270:	2800      	cmp	r0, #0
  405272:	f040 80c0 	bne.w	4053f6 <_svfiprintf_r+0x7d4>
  405276:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  40527a:	9b03      	ldr	r3, [sp, #12]
  40527c:	3b10      	subs	r3, #16
  40527e:	9303      	str	r3, [sp, #12]
  405280:	e7dd      	b.n	40523e <_svfiprintf_r+0x61c>
  405282:	9b03      	ldr	r3, [sp, #12]
  405284:	f8cc 3004 	str.w	r3, [ip, #4]
  405288:	9803      	ldr	r0, [sp, #12]
  40528a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40528c:	4403      	add	r3, r0
  40528e:	9311      	str	r3, [sp, #68]	; 0x44
  405290:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405292:	3301      	adds	r3, #1
  405294:	2b07      	cmp	r3, #7
  405296:	9310      	str	r3, [sp, #64]	; 0x40
  405298:	dc02      	bgt.n	4052a0 <_svfiprintf_r+0x67e>
  40529a:	f10c 0c08 	add.w	ip, ip, #8
  40529e:	e009      	b.n	4052b4 <_svfiprintf_r+0x692>
  4052a0:	4658      	mov	r0, fp
  4052a2:	4641      	mov	r1, r8
  4052a4:	aa0f      	add	r2, sp, #60	; 0x3c
  4052a6:	f7ff fc43 	bl	404b30 <__ssprint_r>
  4052aa:	2800      	cmp	r0, #0
  4052ac:	f040 80a3 	bne.w	4053f6 <_svfiprintf_r+0x7d4>
  4052b0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4052b4:	ebca 0505 	rsb	r5, sl, r5
  4052b8:	2d00      	cmp	r5, #0
  4052ba:	dd34      	ble.n	405326 <_svfiprintf_r+0x704>
  4052bc:	4b49      	ldr	r3, [pc, #292]	; (4053e4 <_svfiprintf_r+0x7c2>)
  4052be:	f8cc 3000 	str.w	r3, [ip]
  4052c2:	2d10      	cmp	r5, #16
  4052c4:	dd19      	ble.n	4052fa <_svfiprintf_r+0x6d8>
  4052c6:	2310      	movs	r3, #16
  4052c8:	f8cc 3004 	str.w	r3, [ip, #4]
  4052cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4052ce:	3310      	adds	r3, #16
  4052d0:	9311      	str	r3, [sp, #68]	; 0x44
  4052d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4052d4:	3301      	adds	r3, #1
  4052d6:	2b07      	cmp	r3, #7
  4052d8:	9310      	str	r3, [sp, #64]	; 0x40
  4052da:	dc02      	bgt.n	4052e2 <_svfiprintf_r+0x6c0>
  4052dc:	f10c 0c08 	add.w	ip, ip, #8
  4052e0:	e009      	b.n	4052f6 <_svfiprintf_r+0x6d4>
  4052e2:	4658      	mov	r0, fp
  4052e4:	4641      	mov	r1, r8
  4052e6:	aa0f      	add	r2, sp, #60	; 0x3c
  4052e8:	f7ff fc22 	bl	404b30 <__ssprint_r>
  4052ec:	2800      	cmp	r0, #0
  4052ee:	f040 8082 	bne.w	4053f6 <_svfiprintf_r+0x7d4>
  4052f2:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4052f6:	3d10      	subs	r5, #16
  4052f8:	e7e0      	b.n	4052bc <_svfiprintf_r+0x69a>
  4052fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4052fc:	f8cc 5004 	str.w	r5, [ip, #4]
  405300:	441d      	add	r5, r3
  405302:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405304:	9511      	str	r5, [sp, #68]	; 0x44
  405306:	3301      	adds	r3, #1
  405308:	2b07      	cmp	r3, #7
  40530a:	9310      	str	r3, [sp, #64]	; 0x40
  40530c:	dc02      	bgt.n	405314 <_svfiprintf_r+0x6f2>
  40530e:	f10c 0c08 	add.w	ip, ip, #8
  405312:	e008      	b.n	405326 <_svfiprintf_r+0x704>
  405314:	4658      	mov	r0, fp
  405316:	4641      	mov	r1, r8
  405318:	aa0f      	add	r2, sp, #60	; 0x3c
  40531a:	f7ff fc09 	bl	404b30 <__ssprint_r>
  40531e:	2800      	cmp	r0, #0
  405320:	d169      	bne.n	4053f6 <_svfiprintf_r+0x7d4>
  405322:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  405326:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405328:	4453      	add	r3, sl
  40532a:	9311      	str	r3, [sp, #68]	; 0x44
  40532c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40532e:	3301      	adds	r3, #1
  405330:	2b07      	cmp	r3, #7
  405332:	e88c 0600 	stmia.w	ip, {r9, sl}
  405336:	9310      	str	r3, [sp, #64]	; 0x40
  405338:	dc02      	bgt.n	405340 <_svfiprintf_r+0x71e>
  40533a:	f10c 0308 	add.w	r3, ip, #8
  40533e:	e007      	b.n	405350 <_svfiprintf_r+0x72e>
  405340:	4658      	mov	r0, fp
  405342:	4641      	mov	r1, r8
  405344:	aa0f      	add	r2, sp, #60	; 0x3c
  405346:	f7ff fbf3 	bl	404b30 <__ssprint_r>
  40534a:	2800      	cmp	r0, #0
  40534c:	d153      	bne.n	4053f6 <_svfiprintf_r+0x7d4>
  40534e:	ab1c      	add	r3, sp, #112	; 0x70
  405350:	077a      	lsls	r2, r7, #29
  405352:	d40a      	bmi.n	40536a <_svfiprintf_r+0x748>
  405354:	9d05      	ldr	r5, [sp, #20]
  405356:	9804      	ldr	r0, [sp, #16]
  405358:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40535a:	4284      	cmp	r4, r0
  40535c:	bfac      	ite	ge
  40535e:	192d      	addge	r5, r5, r4
  405360:	182d      	addlt	r5, r5, r0
  405362:	9505      	str	r5, [sp, #20]
  405364:	2b00      	cmp	r3, #0
  405366:	d035      	beq.n	4053d4 <_svfiprintf_r+0x7b2>
  405368:	e02e      	b.n	4053c8 <_svfiprintf_r+0x7a6>
  40536a:	9904      	ldr	r1, [sp, #16]
  40536c:	1b0d      	subs	r5, r1, r4
  40536e:	2d00      	cmp	r5, #0
  405370:	ddf0      	ble.n	405354 <_svfiprintf_r+0x732>
  405372:	4a1b      	ldr	r2, [pc, #108]	; (4053e0 <_svfiprintf_r+0x7be>)
  405374:	601a      	str	r2, [r3, #0]
  405376:	2d10      	cmp	r5, #16
  405378:	dd15      	ble.n	4053a6 <_svfiprintf_r+0x784>
  40537a:	2210      	movs	r2, #16
  40537c:	605a      	str	r2, [r3, #4]
  40537e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405380:	3210      	adds	r2, #16
  405382:	9211      	str	r2, [sp, #68]	; 0x44
  405384:	9a10      	ldr	r2, [sp, #64]	; 0x40
  405386:	3201      	adds	r2, #1
  405388:	2a07      	cmp	r2, #7
  40538a:	9210      	str	r2, [sp, #64]	; 0x40
  40538c:	dc01      	bgt.n	405392 <_svfiprintf_r+0x770>
  40538e:	3308      	adds	r3, #8
  405390:	e007      	b.n	4053a2 <_svfiprintf_r+0x780>
  405392:	4658      	mov	r0, fp
  405394:	4641      	mov	r1, r8
  405396:	aa0f      	add	r2, sp, #60	; 0x3c
  405398:	f7ff fbca 	bl	404b30 <__ssprint_r>
  40539c:	2800      	cmp	r0, #0
  40539e:	d12a      	bne.n	4053f6 <_svfiprintf_r+0x7d4>
  4053a0:	ab1c      	add	r3, sp, #112	; 0x70
  4053a2:	3d10      	subs	r5, #16
  4053a4:	e7e5      	b.n	405372 <_svfiprintf_r+0x750>
  4053a6:	605d      	str	r5, [r3, #4]
  4053a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4053aa:	441d      	add	r5, r3
  4053ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4053ae:	9511      	str	r5, [sp, #68]	; 0x44
  4053b0:	3301      	adds	r3, #1
  4053b2:	2b07      	cmp	r3, #7
  4053b4:	9310      	str	r3, [sp, #64]	; 0x40
  4053b6:	ddcd      	ble.n	405354 <_svfiprintf_r+0x732>
  4053b8:	4658      	mov	r0, fp
  4053ba:	4641      	mov	r1, r8
  4053bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4053be:	f7ff fbb7 	bl	404b30 <__ssprint_r>
  4053c2:	2800      	cmp	r0, #0
  4053c4:	d0c6      	beq.n	405354 <_svfiprintf_r+0x732>
  4053c6:	e016      	b.n	4053f6 <_svfiprintf_r+0x7d4>
  4053c8:	4658      	mov	r0, fp
  4053ca:	4641      	mov	r1, r8
  4053cc:	aa0f      	add	r2, sp, #60	; 0x3c
  4053ce:	f7ff fbaf 	bl	404b30 <__ssprint_r>
  4053d2:	b980      	cbnz	r0, 4053f6 <_svfiprintf_r+0x7d4>
  4053d4:	2300      	movs	r3, #0
  4053d6:	9310      	str	r3, [sp, #64]	; 0x40
  4053d8:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4053dc:	e447      	b.n	404c6e <_svfiprintf_r+0x4c>
  4053de:	bf00      	nop
  4053e0:	00405e60 	.word	0x00405e60
  4053e4:	00405e70 	.word	0x00405e70
  4053e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4053ea:	b123      	cbz	r3, 4053f6 <_svfiprintf_r+0x7d4>
  4053ec:	4658      	mov	r0, fp
  4053ee:	4641      	mov	r1, r8
  4053f0:	aa0f      	add	r2, sp, #60	; 0x3c
  4053f2:	f7ff fb9d 	bl	404b30 <__ssprint_r>
  4053f6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  4053fa:	9805      	ldr	r0, [sp, #20]
  4053fc:	f013 0f40 	tst.w	r3, #64	; 0x40
  405400:	bf18      	it	ne
  405402:	f04f 30ff 	movne.w	r0, #4294967295
  405406:	b02d      	add	sp, #180	; 0xb4
  405408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040540c <__register_exitproc>:
  40540c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405410:	4698      	mov	r8, r3
  405412:	4b22      	ldr	r3, [pc, #136]	; (40549c <__register_exitproc+0x90>)
  405414:	681c      	ldr	r4, [r3, #0]
  405416:	4606      	mov	r6, r0
  405418:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
  40541c:	460f      	mov	r7, r1
  40541e:	4691      	mov	r9, r2
  405420:	b918      	cbnz	r0, 40542a <__register_exitproc+0x1e>
  405422:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
  405426:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40542a:	6843      	ldr	r3, [r0, #4]
  40542c:	2b1f      	cmp	r3, #31
  40542e:	dd16      	ble.n	40545e <__register_exitproc+0x52>
  405430:	4b1b      	ldr	r3, [pc, #108]	; (4054a0 <__register_exitproc+0x94>)
  405432:	b91b      	cbnz	r3, 40543c <__register_exitproc+0x30>
  405434:	f04f 30ff 	mov.w	r0, #4294967295
  405438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40543c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405440:	f3af 8000 	nop.w
  405444:	2800      	cmp	r0, #0
  405446:	d0f5      	beq.n	405434 <__register_exitproc+0x28>
  405448:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  40544c:	6001      	str	r1, [r0, #0]
  40544e:	2500      	movs	r5, #0
  405450:	6045      	str	r5, [r0, #4]
  405452:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405456:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
  40545a:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
  40545e:	6844      	ldr	r4, [r0, #4]
  405460:	b19e      	cbz	r6, 40548a <__register_exitproc+0x7e>
  405462:	eb00 0584 	add.w	r5, r0, r4, lsl #2
  405466:	2201      	movs	r2, #1
  405468:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  40546c:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
  405470:	40a2      	lsls	r2, r4
  405472:	4311      	orrs	r1, r2
  405474:	2e02      	cmp	r6, #2
  405476:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40547a:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
  40547e:	d104      	bne.n	40548a <__register_exitproc+0x7e>
  405480:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
  405484:	431a      	orrs	r2, r3
  405486:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
  40548a:	1c63      	adds	r3, r4, #1
  40548c:	3402      	adds	r4, #2
  40548e:	6043      	str	r3, [r0, #4]
  405490:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
  405494:	2000      	movs	r0, #0
  405496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40549a:	bf00      	nop
  40549c:	00405cc4 	.word	0x00405cc4
  4054a0:	00000000 	.word	0x00000000

004054a4 <_calloc_r>:
  4054a4:	b510      	push	{r4, lr}
  4054a6:	4351      	muls	r1, r2
  4054a8:	f7fe fb34 	bl	403b14 <_malloc_r>
  4054ac:	4604      	mov	r4, r0
  4054ae:	b320      	cbz	r0, 4054fa <_calloc_r+0x56>
  4054b0:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4054b4:	f022 0203 	bic.w	r2, r2, #3
  4054b8:	3a04      	subs	r2, #4
  4054ba:	2a24      	cmp	r2, #36	; 0x24
  4054bc:	d81a      	bhi.n	4054f4 <_calloc_r+0x50>
  4054be:	2a13      	cmp	r2, #19
  4054c0:	d912      	bls.n	4054e8 <_calloc_r+0x44>
  4054c2:	2100      	movs	r1, #0
  4054c4:	2a1b      	cmp	r2, #27
  4054c6:	6001      	str	r1, [r0, #0]
  4054c8:	6041      	str	r1, [r0, #4]
  4054ca:	d802      	bhi.n	4054d2 <_calloc_r+0x2e>
  4054cc:	f100 0308 	add.w	r3, r0, #8
  4054d0:	e00b      	b.n	4054ea <_calloc_r+0x46>
  4054d2:	2a24      	cmp	r2, #36	; 0x24
  4054d4:	6081      	str	r1, [r0, #8]
  4054d6:	60c1      	str	r1, [r0, #12]
  4054d8:	bf11      	iteee	ne
  4054da:	f100 0310 	addne.w	r3, r0, #16
  4054de:	6101      	streq	r1, [r0, #16]
  4054e0:	f100 0318 	addeq.w	r3, r0, #24
  4054e4:	6141      	streq	r1, [r0, #20]
  4054e6:	e000      	b.n	4054ea <_calloc_r+0x46>
  4054e8:	4603      	mov	r3, r0
  4054ea:	2200      	movs	r2, #0
  4054ec:	601a      	str	r2, [r3, #0]
  4054ee:	605a      	str	r2, [r3, #4]
  4054f0:	609a      	str	r2, [r3, #8]
  4054f2:	e002      	b.n	4054fa <_calloc_r+0x56>
  4054f4:	2100      	movs	r1, #0
  4054f6:	f7fc fb43 	bl	401b80 <memset>
  4054fa:	4620      	mov	r0, r4
  4054fc:	bd10      	pop	{r4, pc}
	...

00405500 <__gedf2>:
  405500:	f04f 3cff 	mov.w	ip, #4294967295
  405504:	e006      	b.n	405514 <__cmpdf2+0x4>
  405506:	bf00      	nop

00405508 <__ledf2>:
  405508:	f04f 0c01 	mov.w	ip, #1
  40550c:	e002      	b.n	405514 <__cmpdf2+0x4>
  40550e:	bf00      	nop

00405510 <__cmpdf2>:
  405510:	f04f 0c01 	mov.w	ip, #1
  405514:	f84d cd04 	str.w	ip, [sp, #-4]!
  405518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40551c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405524:	bf18      	it	ne
  405526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40552a:	d01b      	beq.n	405564 <__cmpdf2+0x54>
  40552c:	b001      	add	sp, #4
  40552e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  405532:	bf0c      	ite	eq
  405534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  405538:	ea91 0f03 	teqne	r1, r3
  40553c:	bf02      	ittt	eq
  40553e:	ea90 0f02 	teqeq	r0, r2
  405542:	2000      	moveq	r0, #0
  405544:	4770      	bxeq	lr
  405546:	f110 0f00 	cmn.w	r0, #0
  40554a:	ea91 0f03 	teq	r1, r3
  40554e:	bf58      	it	pl
  405550:	4299      	cmppl	r1, r3
  405552:	bf08      	it	eq
  405554:	4290      	cmpeq	r0, r2
  405556:	bf2c      	ite	cs
  405558:	17d8      	asrcs	r0, r3, #31
  40555a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40555e:	f040 0001 	orr.w	r0, r0, #1
  405562:	4770      	bx	lr
  405564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40556c:	d102      	bne.n	405574 <__cmpdf2+0x64>
  40556e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405572:	d107      	bne.n	405584 <__cmpdf2+0x74>
  405574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40557c:	d1d6      	bne.n	40552c <__cmpdf2+0x1c>
  40557e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405582:	d0d3      	beq.n	40552c <__cmpdf2+0x1c>
  405584:	f85d 0b04 	ldr.w	r0, [sp], #4
  405588:	4770      	bx	lr
  40558a:	bf00      	nop

0040558c <__aeabi_cdrcmple>:
  40558c:	4684      	mov	ip, r0
  40558e:	4610      	mov	r0, r2
  405590:	4662      	mov	r2, ip
  405592:	468c      	mov	ip, r1
  405594:	4619      	mov	r1, r3
  405596:	4663      	mov	r3, ip
  405598:	e000      	b.n	40559c <__aeabi_cdcmpeq>
  40559a:	bf00      	nop

0040559c <__aeabi_cdcmpeq>:
  40559c:	b501      	push	{r0, lr}
  40559e:	f7ff ffb7 	bl	405510 <__cmpdf2>
  4055a2:	2800      	cmp	r0, #0
  4055a4:	bf48      	it	mi
  4055a6:	f110 0f00 	cmnmi.w	r0, #0
  4055aa:	bd01      	pop	{r0, pc}

004055ac <__aeabi_dcmpeq>:
  4055ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4055b0:	f7ff fff4 	bl	40559c <__aeabi_cdcmpeq>
  4055b4:	bf0c      	ite	eq
  4055b6:	2001      	moveq	r0, #1
  4055b8:	2000      	movne	r0, #0
  4055ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4055be:	bf00      	nop

004055c0 <__aeabi_dcmplt>:
  4055c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4055c4:	f7ff ffea 	bl	40559c <__aeabi_cdcmpeq>
  4055c8:	bf34      	ite	cc
  4055ca:	2001      	movcc	r0, #1
  4055cc:	2000      	movcs	r0, #0
  4055ce:	f85d fb08 	ldr.w	pc, [sp], #8
  4055d2:	bf00      	nop

004055d4 <__aeabi_dcmple>:
  4055d4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4055d8:	f7ff ffe0 	bl	40559c <__aeabi_cdcmpeq>
  4055dc:	bf94      	ite	ls
  4055de:	2001      	movls	r0, #1
  4055e0:	2000      	movhi	r0, #0
  4055e2:	f85d fb08 	ldr.w	pc, [sp], #8
  4055e6:	bf00      	nop

004055e8 <__aeabi_dcmpge>:
  4055e8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4055ec:	f7ff ffce 	bl	40558c <__aeabi_cdrcmple>
  4055f0:	bf94      	ite	ls
  4055f2:	2001      	movls	r0, #1
  4055f4:	2000      	movhi	r0, #0
  4055f6:	f85d fb08 	ldr.w	pc, [sp], #8
  4055fa:	bf00      	nop

004055fc <__aeabi_dcmpgt>:
  4055fc:	f84d ed08 	str.w	lr, [sp, #-8]!
  405600:	f7ff ffc4 	bl	40558c <__aeabi_cdrcmple>
  405604:	bf34      	ite	cc
  405606:	2001      	movcc	r0, #1
  405608:	2000      	movcs	r0, #0
  40560a:	f85d fb08 	ldr.w	pc, [sp], #8
  40560e:	bf00      	nop

00405610 <__aeabi_d2iz>:
  405610:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  405618:	d215      	bcs.n	405646 <__aeabi_d2iz+0x36>
  40561a:	d511      	bpl.n	405640 <__aeabi_d2iz+0x30>
  40561c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  405620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  405624:	d912      	bls.n	40564c <__aeabi_d2iz+0x3c>
  405626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40562a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40562e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  405632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405636:	fa23 f002 	lsr.w	r0, r3, r2
  40563a:	bf18      	it	ne
  40563c:	4240      	negne	r0, r0
  40563e:	4770      	bx	lr
  405640:	f04f 0000 	mov.w	r0, #0
  405644:	4770      	bx	lr
  405646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40564a:	d105      	bne.n	405658 <__aeabi_d2iz+0x48>
  40564c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  405650:	bf08      	it	eq
  405652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405656:	4770      	bx	lr
  405658:	f04f 0000 	mov.w	r0, #0
  40565c:	4770      	bx	lr
  40565e:	bf00      	nop

00405660 <__aeabi_uldivmod>:
  405660:	b94b      	cbnz	r3, 405676 <__aeabi_uldivmod+0x16>
  405662:	b942      	cbnz	r2, 405676 <__aeabi_uldivmod+0x16>
  405664:	2900      	cmp	r1, #0
  405666:	bf08      	it	eq
  405668:	2800      	cmpeq	r0, #0
  40566a:	d002      	beq.n	405672 <__aeabi_uldivmod+0x12>
  40566c:	f04f 31ff 	mov.w	r1, #4294967295
  405670:	4608      	mov	r0, r1
  405672:	f000 b83b 	b.w	4056ec <__aeabi_idiv0>
  405676:	b082      	sub	sp, #8
  405678:	46ec      	mov	ip, sp
  40567a:	e92d 5000 	stmdb	sp!, {ip, lr}
  40567e:	f000 f81d 	bl	4056bc <__gnu_uldivmod_helper>
  405682:	f8dd e004 	ldr.w	lr, [sp, #4]
  405686:	b002      	add	sp, #8
  405688:	bc0c      	pop	{r2, r3}
  40568a:	4770      	bx	lr

0040568c <__gnu_ldivmod_helper>:
  40568c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  405690:	9e06      	ldr	r6, [sp, #24]
  405692:	4614      	mov	r4, r2
  405694:	461d      	mov	r5, r3
  405696:	4680      	mov	r8, r0
  405698:	4689      	mov	r9, r1
  40569a:	f000 f829 	bl	4056f0 <__divdi3>
  40569e:	fb04 f301 	mul.w	r3, r4, r1
  4056a2:	fb00 3305 	mla	r3, r0, r5, r3
  4056a6:	fba4 4500 	umull	r4, r5, r4, r0
  4056aa:	441d      	add	r5, r3
  4056ac:	ebb8 0404 	subs.w	r4, r8, r4
  4056b0:	eb69 0505 	sbc.w	r5, r9, r5
  4056b4:	e9c6 4500 	strd	r4, r5, [r6]
  4056b8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

004056bc <__gnu_uldivmod_helper>:
  4056bc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  4056c0:	9e06      	ldr	r6, [sp, #24]
  4056c2:	4614      	mov	r4, r2
  4056c4:	4680      	mov	r8, r0
  4056c6:	4689      	mov	r9, r1
  4056c8:	461d      	mov	r5, r3
  4056ca:	f000 f95d 	bl	405988 <__udivdi3>
  4056ce:	fb00 f505 	mul.w	r5, r0, r5
  4056d2:	fb04 5301 	mla	r3, r4, r1, r5
  4056d6:	fba0 4504 	umull	r4, r5, r0, r4
  4056da:	441d      	add	r5, r3
  4056dc:	ebb8 0404 	subs.w	r4, r8, r4
  4056e0:	eb69 0505 	sbc.w	r5, r9, r5
  4056e4:	e9c6 4500 	strd	r4, r5, [r6]
  4056e8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

004056ec <__aeabi_idiv0>:
  4056ec:	4770      	bx	lr
  4056ee:	bf00      	nop

004056f0 <__divdi3>:
  4056f0:	2900      	cmp	r1, #0
  4056f2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4056f6:	f2c0 809f 	blt.w	405838 <__divdi3+0x148>
  4056fa:	2400      	movs	r4, #0
  4056fc:	2b00      	cmp	r3, #0
  4056fe:	f2c0 8096 	blt.w	40582e <__divdi3+0x13e>
  405702:	4615      	mov	r5, r2
  405704:	4606      	mov	r6, r0
  405706:	460f      	mov	r7, r1
  405708:	2b00      	cmp	r3, #0
  40570a:	d13e      	bne.n	40578a <__divdi3+0x9a>
  40570c:	428a      	cmp	r2, r1
  40570e:	d957      	bls.n	4057c0 <__divdi3+0xd0>
  405710:	fab2 f382 	clz	r3, r2
  405714:	b14b      	cbz	r3, 40572a <__divdi3+0x3a>
  405716:	f1c3 0220 	rsb	r2, r3, #32
  40571a:	fa01 f703 	lsl.w	r7, r1, r3
  40571e:	fa20 f202 	lsr.w	r2, r0, r2
  405722:	409d      	lsls	r5, r3
  405724:	4317      	orrs	r7, r2
  405726:	fa00 f603 	lsl.w	r6, r0, r3
  40572a:	0c29      	lsrs	r1, r5, #16
  40572c:	fbb7 f2f1 	udiv	r2, r7, r1
  405730:	0c33      	lsrs	r3, r6, #16
  405732:	fb01 7c12 	mls	ip, r1, r2, r7
  405736:	b2a8      	uxth	r0, r5
  405738:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  40573c:	fb00 f302 	mul.w	r3, r0, r2
  405740:	42bb      	cmp	r3, r7
  405742:	d909      	bls.n	405758 <__divdi3+0x68>
  405744:	197f      	adds	r7, r7, r5
  405746:	f102 3cff 	add.w	ip, r2, #4294967295
  40574a:	f080 8101 	bcs.w	405950 <__divdi3+0x260>
  40574e:	42bb      	cmp	r3, r7
  405750:	f240 80fe 	bls.w	405950 <__divdi3+0x260>
  405754:	3a02      	subs	r2, #2
  405756:	442f      	add	r7, r5
  405758:	1aff      	subs	r7, r7, r3
  40575a:	fbb7 f3f1 	udiv	r3, r7, r1
  40575e:	b2b6      	uxth	r6, r6
  405760:	fb01 7113 	mls	r1, r1, r3, r7
  405764:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  405768:	fb00 f003 	mul.w	r0, r0, r3
  40576c:	4288      	cmp	r0, r1
  40576e:	d908      	bls.n	405782 <__divdi3+0x92>
  405770:	1949      	adds	r1, r1, r5
  405772:	f103 37ff 	add.w	r7, r3, #4294967295
  405776:	f080 80ed 	bcs.w	405954 <__divdi3+0x264>
  40577a:	4288      	cmp	r0, r1
  40577c:	f240 80ea 	bls.w	405954 <__divdi3+0x264>
  405780:	3b02      	subs	r3, #2
  405782:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  405786:	2300      	movs	r3, #0
  405788:	e003      	b.n	405792 <__divdi3+0xa2>
  40578a:	428b      	cmp	r3, r1
  40578c:	d90a      	bls.n	4057a4 <__divdi3+0xb4>
  40578e:	2300      	movs	r3, #0
  405790:	461a      	mov	r2, r3
  405792:	4610      	mov	r0, r2
  405794:	4619      	mov	r1, r3
  405796:	b114      	cbz	r4, 40579e <__divdi3+0xae>
  405798:	4240      	negs	r0, r0
  40579a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40579e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4057a2:	4770      	bx	lr
  4057a4:	fab3 f883 	clz	r8, r3
  4057a8:	f1b8 0f00 	cmp.w	r8, #0
  4057ac:	f040 8084 	bne.w	4058b8 <__divdi3+0x1c8>
  4057b0:	428b      	cmp	r3, r1
  4057b2:	d302      	bcc.n	4057ba <__divdi3+0xca>
  4057b4:	4282      	cmp	r2, r0
  4057b6:	f200 80de 	bhi.w	405976 <__divdi3+0x286>
  4057ba:	2300      	movs	r3, #0
  4057bc:	2201      	movs	r2, #1
  4057be:	e7e8      	b.n	405792 <__divdi3+0xa2>
  4057c0:	b912      	cbnz	r2, 4057c8 <__divdi3+0xd8>
  4057c2:	2301      	movs	r3, #1
  4057c4:	fbb3 f5f2 	udiv	r5, r3, r2
  4057c8:	fab5 f285 	clz	r2, r5
  4057cc:	2a00      	cmp	r2, #0
  4057ce:	d139      	bne.n	405844 <__divdi3+0x154>
  4057d0:	1b7f      	subs	r7, r7, r5
  4057d2:	0c28      	lsrs	r0, r5, #16
  4057d4:	fa1f fc85 	uxth.w	ip, r5
  4057d8:	2301      	movs	r3, #1
  4057da:	fbb7 f1f0 	udiv	r1, r7, r0
  4057de:	0c32      	lsrs	r2, r6, #16
  4057e0:	fb00 7711 	mls	r7, r0, r1, r7
  4057e4:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  4057e8:	fb0c f201 	mul.w	r2, ip, r1
  4057ec:	42ba      	cmp	r2, r7
  4057ee:	d907      	bls.n	405800 <__divdi3+0x110>
  4057f0:	197f      	adds	r7, r7, r5
  4057f2:	f101 38ff 	add.w	r8, r1, #4294967295
  4057f6:	d202      	bcs.n	4057fe <__divdi3+0x10e>
  4057f8:	42ba      	cmp	r2, r7
  4057fa:	f200 80c1 	bhi.w	405980 <__divdi3+0x290>
  4057fe:	4641      	mov	r1, r8
  405800:	1abf      	subs	r7, r7, r2
  405802:	fbb7 f2f0 	udiv	r2, r7, r0
  405806:	b2b6      	uxth	r6, r6
  405808:	fb00 7012 	mls	r0, r0, r2, r7
  40580c:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  405810:	fb0c fc02 	mul.w	ip, ip, r2
  405814:	4584      	cmp	ip, r0
  405816:	d907      	bls.n	405828 <__divdi3+0x138>
  405818:	1940      	adds	r0, r0, r5
  40581a:	f102 37ff 	add.w	r7, r2, #4294967295
  40581e:	d202      	bcs.n	405826 <__divdi3+0x136>
  405820:	4584      	cmp	ip, r0
  405822:	f200 80ab 	bhi.w	40597c <__divdi3+0x28c>
  405826:	463a      	mov	r2, r7
  405828:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  40582c:	e7b1      	b.n	405792 <__divdi3+0xa2>
  40582e:	43e4      	mvns	r4, r4
  405830:	4252      	negs	r2, r2
  405832:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405836:	e764      	b.n	405702 <__divdi3+0x12>
  405838:	4240      	negs	r0, r0
  40583a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40583e:	f04f 34ff 	mov.w	r4, #4294967295
  405842:	e75b      	b.n	4056fc <__divdi3+0xc>
  405844:	4095      	lsls	r5, r2
  405846:	f1c2 0320 	rsb	r3, r2, #32
  40584a:	fa27 f103 	lsr.w	r1, r7, r3
  40584e:	0c28      	lsrs	r0, r5, #16
  405850:	fa26 f303 	lsr.w	r3, r6, r3
  405854:	4097      	lsls	r7, r2
  405856:	fbb1 f8f0 	udiv	r8, r1, r0
  40585a:	431f      	orrs	r7, r3
  40585c:	0c3b      	lsrs	r3, r7, #16
  40585e:	fb00 1118 	mls	r1, r0, r8, r1
  405862:	fa1f fc85 	uxth.w	ip, r5
  405866:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40586a:	fb0c f308 	mul.w	r3, ip, r8
  40586e:	428b      	cmp	r3, r1
  405870:	fa06 f602 	lsl.w	r6, r6, r2
  405874:	d908      	bls.n	405888 <__divdi3+0x198>
  405876:	1949      	adds	r1, r1, r5
  405878:	f108 32ff 	add.w	r2, r8, #4294967295
  40587c:	d279      	bcs.n	405972 <__divdi3+0x282>
  40587e:	428b      	cmp	r3, r1
  405880:	d977      	bls.n	405972 <__divdi3+0x282>
  405882:	f1a8 0802 	sub.w	r8, r8, #2
  405886:	4429      	add	r1, r5
  405888:	1ac9      	subs	r1, r1, r3
  40588a:	fbb1 f3f0 	udiv	r3, r1, r0
  40588e:	b2bf      	uxth	r7, r7
  405890:	fb00 1113 	mls	r1, r0, r3, r1
  405894:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  405898:	fb0c f203 	mul.w	r2, ip, r3
  40589c:	42ba      	cmp	r2, r7
  40589e:	d907      	bls.n	4058b0 <__divdi3+0x1c0>
  4058a0:	197f      	adds	r7, r7, r5
  4058a2:	f103 31ff 	add.w	r1, r3, #4294967295
  4058a6:	d260      	bcs.n	40596a <__divdi3+0x27a>
  4058a8:	42ba      	cmp	r2, r7
  4058aa:	d95e      	bls.n	40596a <__divdi3+0x27a>
  4058ac:	3b02      	subs	r3, #2
  4058ae:	442f      	add	r7, r5
  4058b0:	1abf      	subs	r7, r7, r2
  4058b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4058b6:	e790      	b.n	4057da <__divdi3+0xea>
  4058b8:	f1c8 0220 	rsb	r2, r8, #32
  4058bc:	fa03 fc08 	lsl.w	ip, r3, r8
  4058c0:	fa25 f302 	lsr.w	r3, r5, r2
  4058c4:	ea43 0c0c 	orr.w	ip, r3, ip
  4058c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
  4058cc:	fa21 f302 	lsr.w	r3, r1, r2
  4058d0:	fa01 f708 	lsl.w	r7, r1, r8
  4058d4:	fa20 f202 	lsr.w	r2, r0, r2
  4058d8:	fbb3 f1f9 	udiv	r1, r3, r9
  4058dc:	4317      	orrs	r7, r2
  4058de:	fb09 3311 	mls	r3, r9, r1, r3
  4058e2:	0c3a      	lsrs	r2, r7, #16
  4058e4:	fa1f fb8c 	uxth.w	fp, ip
  4058e8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  4058ec:	fb0b fa01 	mul.w	sl, fp, r1
  4058f0:	459a      	cmp	sl, r3
  4058f2:	fa05 f008 	lsl.w	r0, r5, r8
  4058f6:	d908      	bls.n	40590a <__divdi3+0x21a>
  4058f8:	eb13 030c 	adds.w	r3, r3, ip
  4058fc:	f101 32ff 	add.w	r2, r1, #4294967295
  405900:	d235      	bcs.n	40596e <__divdi3+0x27e>
  405902:	459a      	cmp	sl, r3
  405904:	d933      	bls.n	40596e <__divdi3+0x27e>
  405906:	3902      	subs	r1, #2
  405908:	4463      	add	r3, ip
  40590a:	ebca 0303 	rsb	r3, sl, r3
  40590e:	fbb3 f2f9 	udiv	r2, r3, r9
  405912:	fb09 3312 	mls	r3, r9, r2, r3
  405916:	b2bf      	uxth	r7, r7
  405918:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40591c:	fb0b f902 	mul.w	r9, fp, r2
  405920:	45b9      	cmp	r9, r7
  405922:	d908      	bls.n	405936 <__divdi3+0x246>
  405924:	eb17 070c 	adds.w	r7, r7, ip
  405928:	f102 33ff 	add.w	r3, r2, #4294967295
  40592c:	d21b      	bcs.n	405966 <__divdi3+0x276>
  40592e:	45b9      	cmp	r9, r7
  405930:	d919      	bls.n	405966 <__divdi3+0x276>
  405932:	3a02      	subs	r2, #2
  405934:	4467      	add	r7, ip
  405936:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  40593a:	fba5 0100 	umull	r0, r1, r5, r0
  40593e:	ebc9 0707 	rsb	r7, r9, r7
  405942:	428f      	cmp	r7, r1
  405944:	f04f 0300 	mov.w	r3, #0
  405948:	d30a      	bcc.n	405960 <__divdi3+0x270>
  40594a:	d005      	beq.n	405958 <__divdi3+0x268>
  40594c:	462a      	mov	r2, r5
  40594e:	e720      	b.n	405792 <__divdi3+0xa2>
  405950:	4662      	mov	r2, ip
  405952:	e701      	b.n	405758 <__divdi3+0x68>
  405954:	463b      	mov	r3, r7
  405956:	e714      	b.n	405782 <__divdi3+0x92>
  405958:	fa06 f608 	lsl.w	r6, r6, r8
  40595c:	4286      	cmp	r6, r0
  40595e:	d2f5      	bcs.n	40594c <__divdi3+0x25c>
  405960:	1e6a      	subs	r2, r5, #1
  405962:	2300      	movs	r3, #0
  405964:	e715      	b.n	405792 <__divdi3+0xa2>
  405966:	461a      	mov	r2, r3
  405968:	e7e5      	b.n	405936 <__divdi3+0x246>
  40596a:	460b      	mov	r3, r1
  40596c:	e7a0      	b.n	4058b0 <__divdi3+0x1c0>
  40596e:	4611      	mov	r1, r2
  405970:	e7cb      	b.n	40590a <__divdi3+0x21a>
  405972:	4690      	mov	r8, r2
  405974:	e788      	b.n	405888 <__divdi3+0x198>
  405976:	4643      	mov	r3, r8
  405978:	4642      	mov	r2, r8
  40597a:	e70a      	b.n	405792 <__divdi3+0xa2>
  40597c:	3a02      	subs	r2, #2
  40597e:	e753      	b.n	405828 <__divdi3+0x138>
  405980:	3902      	subs	r1, #2
  405982:	442f      	add	r7, r5
  405984:	e73c      	b.n	405800 <__divdi3+0x110>
  405986:	bf00      	nop

00405988 <__udivdi3>:
  405988:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40598c:	4614      	mov	r4, r2
  40598e:	4605      	mov	r5, r0
  405990:	460e      	mov	r6, r1
  405992:	2b00      	cmp	r3, #0
  405994:	d143      	bne.n	405a1e <__udivdi3+0x96>
  405996:	428a      	cmp	r2, r1
  405998:	d953      	bls.n	405a42 <__udivdi3+0xba>
  40599a:	fab2 f782 	clz	r7, r2
  40599e:	b157      	cbz	r7, 4059b6 <__udivdi3+0x2e>
  4059a0:	f1c7 0620 	rsb	r6, r7, #32
  4059a4:	fa20 f606 	lsr.w	r6, r0, r6
  4059a8:	fa01 f307 	lsl.w	r3, r1, r7
  4059ac:	fa02 f407 	lsl.w	r4, r2, r7
  4059b0:	431e      	orrs	r6, r3
  4059b2:	fa00 f507 	lsl.w	r5, r0, r7
  4059b6:	0c21      	lsrs	r1, r4, #16
  4059b8:	fbb6 f2f1 	udiv	r2, r6, r1
  4059bc:	0c2b      	lsrs	r3, r5, #16
  4059be:	fb01 6712 	mls	r7, r1, r2, r6
  4059c2:	b2a0      	uxth	r0, r4
  4059c4:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  4059c8:	fb00 f302 	mul.w	r3, r0, r2
  4059cc:	42b3      	cmp	r3, r6
  4059ce:	d909      	bls.n	4059e4 <__udivdi3+0x5c>
  4059d0:	1936      	adds	r6, r6, r4
  4059d2:	f102 37ff 	add.w	r7, r2, #4294967295
  4059d6:	f080 80f6 	bcs.w	405bc6 <__udivdi3+0x23e>
  4059da:	42b3      	cmp	r3, r6
  4059dc:	f240 80f3 	bls.w	405bc6 <__udivdi3+0x23e>
  4059e0:	3a02      	subs	r2, #2
  4059e2:	4426      	add	r6, r4
  4059e4:	1af6      	subs	r6, r6, r3
  4059e6:	fbb6 f3f1 	udiv	r3, r6, r1
  4059ea:	b2ad      	uxth	r5, r5
  4059ec:	fb01 6113 	mls	r1, r1, r3, r6
  4059f0:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  4059f4:	fb00 f003 	mul.w	r0, r0, r3
  4059f8:	4288      	cmp	r0, r1
  4059fa:	d908      	bls.n	405a0e <__udivdi3+0x86>
  4059fc:	1909      	adds	r1, r1, r4
  4059fe:	f103 36ff 	add.w	r6, r3, #4294967295
  405a02:	f080 80e2 	bcs.w	405bca <__udivdi3+0x242>
  405a06:	4288      	cmp	r0, r1
  405a08:	f240 80df 	bls.w	405bca <__udivdi3+0x242>
  405a0c:	3b02      	subs	r3, #2
  405a0e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  405a12:	2300      	movs	r3, #0
  405a14:	4610      	mov	r0, r2
  405a16:	4619      	mov	r1, r3
  405a18:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405a1c:	4770      	bx	lr
  405a1e:	428b      	cmp	r3, r1
  405a20:	d84a      	bhi.n	405ab8 <__udivdi3+0x130>
  405a22:	fab3 f683 	clz	r6, r3
  405a26:	2e00      	cmp	r6, #0
  405a28:	d14d      	bne.n	405ac6 <__udivdi3+0x13e>
  405a2a:	428b      	cmp	r3, r1
  405a2c:	d302      	bcc.n	405a34 <__udivdi3+0xac>
  405a2e:	4282      	cmp	r2, r0
  405a30:	f200 80d6 	bhi.w	405be0 <__udivdi3+0x258>
  405a34:	2300      	movs	r3, #0
  405a36:	2201      	movs	r2, #1
  405a38:	4610      	mov	r0, r2
  405a3a:	4619      	mov	r1, r3
  405a3c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405a40:	4770      	bx	lr
  405a42:	b912      	cbnz	r2, 405a4a <__udivdi3+0xc2>
  405a44:	2401      	movs	r4, #1
  405a46:	fbb4 f4f2 	udiv	r4, r4, r2
  405a4a:	fab4 f284 	clz	r2, r4
  405a4e:	2a00      	cmp	r2, #0
  405a50:	d17c      	bne.n	405b4c <__udivdi3+0x1c4>
  405a52:	1b09      	subs	r1, r1, r4
  405a54:	0c26      	lsrs	r6, r4, #16
  405a56:	b2a7      	uxth	r7, r4
  405a58:	2301      	movs	r3, #1
  405a5a:	fbb1 f0f6 	udiv	r0, r1, r6
  405a5e:	0c2a      	lsrs	r2, r5, #16
  405a60:	fb06 1110 	mls	r1, r6, r0, r1
  405a64:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  405a68:	fb07 f200 	mul.w	r2, r7, r0
  405a6c:	428a      	cmp	r2, r1
  405a6e:	d907      	bls.n	405a80 <__udivdi3+0xf8>
  405a70:	1909      	adds	r1, r1, r4
  405a72:	f100 3cff 	add.w	ip, r0, #4294967295
  405a76:	d202      	bcs.n	405a7e <__udivdi3+0xf6>
  405a78:	428a      	cmp	r2, r1
  405a7a:	f200 80c3 	bhi.w	405c04 <__udivdi3+0x27c>
  405a7e:	4660      	mov	r0, ip
  405a80:	1a89      	subs	r1, r1, r2
  405a82:	fbb1 f2f6 	udiv	r2, r1, r6
  405a86:	b2ad      	uxth	r5, r5
  405a88:	fb06 1112 	mls	r1, r6, r2, r1
  405a8c:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  405a90:	fb07 f702 	mul.w	r7, r7, r2
  405a94:	42af      	cmp	r7, r5
  405a96:	d908      	bls.n	405aaa <__udivdi3+0x122>
  405a98:	192c      	adds	r4, r5, r4
  405a9a:	f102 31ff 	add.w	r1, r2, #4294967295
  405a9e:	f080 8096 	bcs.w	405bce <__udivdi3+0x246>
  405aa2:	42a7      	cmp	r7, r4
  405aa4:	f240 8093 	bls.w	405bce <__udivdi3+0x246>
  405aa8:	3a02      	subs	r2, #2
  405aaa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  405aae:	4610      	mov	r0, r2
  405ab0:	4619      	mov	r1, r3
  405ab2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405ab6:	4770      	bx	lr
  405ab8:	2300      	movs	r3, #0
  405aba:	461a      	mov	r2, r3
  405abc:	4610      	mov	r0, r2
  405abe:	4619      	mov	r1, r3
  405ac0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405ac4:	4770      	bx	lr
  405ac6:	f1c6 0520 	rsb	r5, r6, #32
  405aca:	fa22 f405 	lsr.w	r4, r2, r5
  405ace:	40b3      	lsls	r3, r6
  405ad0:	431c      	orrs	r4, r3
  405ad2:	ea4f 4814 	mov.w	r8, r4, lsr #16
  405ad6:	fa21 f305 	lsr.w	r3, r1, r5
  405ada:	fa01 f706 	lsl.w	r7, r1, r6
  405ade:	fa20 f505 	lsr.w	r5, r0, r5
  405ae2:	fbb3 fcf8 	udiv	ip, r3, r8
  405ae6:	432f      	orrs	r7, r5
  405ae8:	fb08 331c 	mls	r3, r8, ip, r3
  405aec:	0c3d      	lsrs	r5, r7, #16
  405aee:	fa1f fa84 	uxth.w	sl, r4
  405af2:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  405af6:	fb0a f90c 	mul.w	r9, sl, ip
  405afa:	4599      	cmp	r9, r3
  405afc:	fa02 fb06 	lsl.w	fp, r2, r6
  405b00:	d904      	bls.n	405b0c <__udivdi3+0x184>
  405b02:	191b      	adds	r3, r3, r4
  405b04:	f10c 32ff 	add.w	r2, ip, #4294967295
  405b08:	d36d      	bcc.n	405be6 <__udivdi3+0x25e>
  405b0a:	4694      	mov	ip, r2
  405b0c:	ebc9 0303 	rsb	r3, r9, r3
  405b10:	fbb3 f5f8 	udiv	r5, r3, r8
  405b14:	fb08 3315 	mls	r3, r8, r5, r3
  405b18:	b2bf      	uxth	r7, r7
  405b1a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  405b1e:	fb0a f805 	mul.w	r8, sl, r5
  405b22:	45b8      	cmp	r8, r7
  405b24:	d904      	bls.n	405b30 <__udivdi3+0x1a8>
  405b26:	193f      	adds	r7, r7, r4
  405b28:	f105 33ff 	add.w	r3, r5, #4294967295
  405b2c:	d361      	bcc.n	405bf2 <__udivdi3+0x26a>
  405b2e:	461d      	mov	r5, r3
  405b30:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  405b34:	fbac 230b 	umull	r2, r3, ip, fp
  405b38:	ebc8 0707 	rsb	r7, r8, r7
  405b3c:	429f      	cmp	r7, r3
  405b3e:	f04f 0500 	mov.w	r5, #0
  405b42:	d349      	bcc.n	405bd8 <__udivdi3+0x250>
  405b44:	d045      	beq.n	405bd2 <__udivdi3+0x24a>
  405b46:	4662      	mov	r2, ip
  405b48:	462b      	mov	r3, r5
  405b4a:	e763      	b.n	405a14 <__udivdi3+0x8c>
  405b4c:	4094      	lsls	r4, r2
  405b4e:	f1c2 0320 	rsb	r3, r2, #32
  405b52:	fa21 fc03 	lsr.w	ip, r1, r3
  405b56:	0c26      	lsrs	r6, r4, #16
  405b58:	fa20 f303 	lsr.w	r3, r0, r3
  405b5c:	fa01 f502 	lsl.w	r5, r1, r2
  405b60:	fbbc f8f6 	udiv	r8, ip, r6
  405b64:	ea43 0105 	orr.w	r1, r3, r5
  405b68:	0c0b      	lsrs	r3, r1, #16
  405b6a:	fb06 cc18 	mls	ip, r6, r8, ip
  405b6e:	b2a7      	uxth	r7, r4
  405b70:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  405b74:	fb07 f308 	mul.w	r3, r7, r8
  405b78:	4563      	cmp	r3, ip
  405b7a:	fa00 f502 	lsl.w	r5, r0, r2
  405b7e:	d909      	bls.n	405b94 <__udivdi3+0x20c>
  405b80:	eb1c 0c04 	adds.w	ip, ip, r4
  405b84:	f108 32ff 	add.w	r2, r8, #4294967295
  405b88:	d23a      	bcs.n	405c00 <__udivdi3+0x278>
  405b8a:	4563      	cmp	r3, ip
  405b8c:	d938      	bls.n	405c00 <__udivdi3+0x278>
  405b8e:	f1a8 0802 	sub.w	r8, r8, #2
  405b92:	44a4      	add	ip, r4
  405b94:	ebc3 0c0c 	rsb	ip, r3, ip
  405b98:	fbbc f3f6 	udiv	r3, ip, r6
  405b9c:	b289      	uxth	r1, r1
  405b9e:	fb06 cc13 	mls	ip, r6, r3, ip
  405ba2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  405ba6:	fb07 f203 	mul.w	r2, r7, r3
  405baa:	428a      	cmp	r2, r1
  405bac:	d907      	bls.n	405bbe <__udivdi3+0x236>
  405bae:	1909      	adds	r1, r1, r4
  405bb0:	f103 30ff 	add.w	r0, r3, #4294967295
  405bb4:	d222      	bcs.n	405bfc <__udivdi3+0x274>
  405bb6:	428a      	cmp	r2, r1
  405bb8:	d920      	bls.n	405bfc <__udivdi3+0x274>
  405bba:	3b02      	subs	r3, #2
  405bbc:	4421      	add	r1, r4
  405bbe:	1a89      	subs	r1, r1, r2
  405bc0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  405bc4:	e749      	b.n	405a5a <__udivdi3+0xd2>
  405bc6:	463a      	mov	r2, r7
  405bc8:	e70c      	b.n	4059e4 <__udivdi3+0x5c>
  405bca:	4633      	mov	r3, r6
  405bcc:	e71f      	b.n	405a0e <__udivdi3+0x86>
  405bce:	460a      	mov	r2, r1
  405bd0:	e76b      	b.n	405aaa <__udivdi3+0x122>
  405bd2:	40b0      	lsls	r0, r6
  405bd4:	4290      	cmp	r0, r2
  405bd6:	d2b6      	bcs.n	405b46 <__udivdi3+0x1be>
  405bd8:	f10c 32ff 	add.w	r2, ip, #4294967295
  405bdc:	2300      	movs	r3, #0
  405bde:	e719      	b.n	405a14 <__udivdi3+0x8c>
  405be0:	4633      	mov	r3, r6
  405be2:	4632      	mov	r2, r6
  405be4:	e716      	b.n	405a14 <__udivdi3+0x8c>
  405be6:	4599      	cmp	r9, r3
  405be8:	d98f      	bls.n	405b0a <__udivdi3+0x182>
  405bea:	f1ac 0c02 	sub.w	ip, ip, #2
  405bee:	4423      	add	r3, r4
  405bf0:	e78c      	b.n	405b0c <__udivdi3+0x184>
  405bf2:	45b8      	cmp	r8, r7
  405bf4:	d99b      	bls.n	405b2e <__udivdi3+0x1a6>
  405bf6:	3d02      	subs	r5, #2
  405bf8:	4427      	add	r7, r4
  405bfa:	e799      	b.n	405b30 <__udivdi3+0x1a8>
  405bfc:	4603      	mov	r3, r0
  405bfe:	e7de      	b.n	405bbe <__udivdi3+0x236>
  405c00:	4690      	mov	r8, r2
  405c02:	e7c7      	b.n	405b94 <__udivdi3+0x20c>
  405c04:	3802      	subs	r0, #2
  405c06:	4421      	add	r1, r4
  405c08:	e73a      	b.n	405a80 <__udivdi3+0xf8>
  405c0a:	bf00      	nop
	...
  405c20:	00000004 	.word	0x00000004
  405c24:	00000004 	.word	0x00000004
  405c28:	00000004 	.word	0x00000004
  405c2c:	656d6147 	.word	0x656d6147
  405c30:	61745320 	.word	0x61745320
  405c34:	25206574 	.word	0x25206574
  405c38:	73203a64 	.word	0x73203a64
  405c3c:	63656c65 	.word	0x63656c65
  405c40:	20646574 	.word	0x20646574
  405c44:	726f6f64 	.word	0x726f6f64
  405c48:	20642520 	.word	0x20642520
  405c4c:	6e65706f 	.word	0x6e65706f
  405c50:	6f6f6420 	.word	0x6f6f6420
  405c54:	64252072 	.word	0x64252072
  405c58:	00000000 	.word	0x00000000
  405c5c:	3a6e6f57 	.word	0x3a6e6f57
  405c60:	6d614720 	.word	0x6d614720
  405c64:	74532065 	.word	0x74532065
  405c68:	20657461 	.word	0x20657461
  405c6c:	203a6425 	.word	0x203a6425
  405c70:	656c6573 	.word	0x656c6573
  405c74:	64657463 	.word	0x64657463
  405c78:	6f6f6420 	.word	0x6f6f6420
  405c7c:	64252072 	.word	0x64252072
  405c80:	65706f20 	.word	0x65706f20
  405c84:	6f64206e 	.word	0x6f64206e
  405c88:	2520726f 	.word	0x2520726f
  405c8c:	00000064 	.word	0x00000064
  405c90:	74736f4c 	.word	0x74736f4c
  405c94:	6147203a 	.word	0x6147203a
  405c98:	5320656d 	.word	0x5320656d
  405c9c:	65746174 	.word	0x65746174
  405ca0:	3a642520 	.word	0x3a642520
  405ca4:	6c657320 	.word	0x6c657320
  405ca8:	65746365 	.word	0x65746365
  405cac:	6f642064 	.word	0x6f642064
  405cb0:	2520726f 	.word	0x2520726f
  405cb4:	706f2064 	.word	0x706f2064
  405cb8:	64206e65 	.word	0x64206e65
  405cbc:	20726f6f 	.word	0x20726f6f
  405cc0:	00006425 	.word	0x00006425

00405cc4 <_global_impure_ptr>:
  405cc4:	20000020 20200043                                 .. C.

00405cca <blanks.6743>:
  405cca:	20202020 20202020 20202020 20202020                     

00405cda <zeroes.6744>:
  405cda:	30303030 30303030 30303030 30303030     0000000000000000
  405cea:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  405cfa:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  405d0a:	32313000 36353433 61393837 65646362     .0123456789abcde
  405d1a:	00300066 69666e49 7974696e 4e614e00     f.0.Infinity.NaN
  405d2a:	534f5000 2e005849 00000000 00050000              .POSIX........

00405d38 <p05.5289>:
  405d38:	00000005 00000019 0000007d 00000000     ........}.......

00405d48 <__mprec_tens>:
  405d48:	00000000 3ff00000 00000000 40240000     .......?......$@
  405d58:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  405d68:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  405d78:	00000000 412e8480 00000000 416312d0     .......A......cA
  405d88:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  405d98:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  405da8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  405db8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  405dc8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  405dd8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  405de8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  405df8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  405e08:	79d99db4 44ea7843                       ...yCx.D

00405e10 <__mprec_tinytens>:
  405e10:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
  405e20:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
  405e30:	64ac6f43 0ac80628                       Co.d(...

00405e38 <__mprec_bigtens>:
  405e38:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  405e48:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  405e58:	7f73bf3c 75154fdd                       <.s..O.u

00405e60 <blanks.6687>:
  405e60:	20202020 20202020 20202020 20202020                     

00405e70 <zeroes.6688>:
  405e70:	30303030 30303030 30303030 30303030     0000000000000000

00405e80 <_init>:
  405e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405e82:	bf00      	nop
  405e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405e86:	bc08      	pop	{r3}
  405e88:	469e      	mov	lr, r3
  405e8a:	4770      	bx	lr

00405e8c <__init_array_start>:
  405e8c:	00402bbd 	.word	0x00402bbd

00405e90 <__frame_dummy_init_array_entry>:
  405e90:	00400145                                E.@.

00405e94 <_fini>:
  405e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405e96:	bf00      	nop
  405e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405e9a:	bc08      	pop	{r3}
  405e9c:	469e      	mov	lr, r3
  405e9e:	4770      	bx	lr

00405ea0 <__fini_array_start>:
  405ea0:	0040011d 	.word	0x0040011d

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <g_door_pressed>:
20000010:	0004 0000 0000 0000                         ........

20000018 <_impure_ptr>:
20000018:	0020 2000 0000 0000                          .. ....

20000020 <impure_data>:
20000020:	0000 0000 030c 2000 0374 2000 03dc 2000     ....... t.. ... 
	...
20000054:	5cc8 0040 0000 0000 0000 0000 0000 0000     .\@.............
	...
200000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000448 <lc_ctype_charset>:
20000448:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20000468 <__mb_cur_max>:
20000468:	0001 0000                                   ....

2000046c <lc_message_charset>:
2000046c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2000048c <lconv>:
2000048c:	5d31 0040 5d32 0040 5d32 0040 5d32 0040     1]@.2]@.2]@.2]@.
2000049c:	5d32 0040 5d32 0040 5d32 0040 5d32 0040     2]@.2]@.2]@.2]@.
200004ac:	5d32 0040 5d32 0040 ffff ffff ffff ffff     2]@.2]@.........
200004bc:	ffff ffff ffff 0000                         ........

200004c4 <__malloc_av_>:
	...
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 
2000084c:	0844 2000 0844 2000 084c 2000 084c 2000     D.. D.. L.. L.. 
2000085c:	0854 2000 0854 2000 085c 2000 085c 2000     T.. T.. \.. \.. 
2000086c:	0864 2000 0864 2000 086c 2000 086c 2000     d.. d.. l.. l.. 
2000087c:	0874 2000 0874 2000 087c 2000 087c 2000     t.. t.. |.. |.. 
2000088c:	0884 2000 0884 2000 088c 2000 088c 2000     ... ... ... ... 
2000089c:	0894 2000 0894 2000 089c 2000 089c 2000     ... ... ... ... 
200008ac:	08a4 2000 08a4 2000 08ac 2000 08ac 2000     ... ... ... ... 
200008bc:	08b4 2000 08b4 2000 08bc 2000 08bc 2000     ... ... ... ... 

200008cc <__malloc_sbrk_base>:
200008cc:	ffff ffff                                   ....

200008d0 <__malloc_trim_threshold>:
200008d0:	0000 0002                                   ....
