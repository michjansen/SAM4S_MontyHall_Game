
MontyHallGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000063ec  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004063ec  004063ec  0000e3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ccc  20000000  004063f4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000d4  20000ccc  004070c0  00010ccc  2**2
                  ALLOC
  4 .stack        00003000  20000da0  00407194  00010ccc  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00010ccc  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00010cf6  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001ca96  00000000  00000000  00010d67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000534e  00000000  00000000  0002d7fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c70  00000000  00000000  00032b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000144a2  00000000  00000000  000337c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000122d5  00000000  00000000  00047c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0005334f  00000000  00000000  00059f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000d526  00000000  00000000  000ad286  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b38  00000000  00000000  000ba7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001af8  00000000  00000000  000bb2e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003da0 	.word	0x20003da0
  400004:	00400e01 	.word	0x00400e01
  400008:	00400dfd 	.word	0x00400dfd
  40000c:	00400dfd 	.word	0x00400dfd
  400010:	00400dfd 	.word	0x00400dfd
  400014:	00400dfd 	.word	0x00400dfd
  400018:	00400dfd 	.word	0x00400dfd
	...
  40002c:	00400dfd 	.word	0x00400dfd
  400030:	00400dfd 	.word	0x00400dfd
  400034:	00000000 	.word	0x00000000
  400038:	00400dfd 	.word	0x00400dfd
  40003c:	00400dfd 	.word	0x00400dfd
  400040:	00400dfd 	.word	0x00400dfd
  400044:	00400dfd 	.word	0x00400dfd
  400048:	00400dfd 	.word	0x00400dfd
  40004c:	00400dfd 	.word	0x00400dfd
  400050:	00400dfd 	.word	0x00400dfd
  400054:	00400dfd 	.word	0x00400dfd
  400058:	00400dfd 	.word	0x00400dfd
  40005c:	00400dfd 	.word	0x00400dfd
  400060:	00400dfd 	.word	0x00400dfd
  400064:	00400dfd 	.word	0x00400dfd
  400068:	00000000 	.word	0x00000000
  40006c:	004009f1 	.word	0x004009f1
  400070:	00400a05 	.word	0x00400a05
  400074:	00400a19 	.word	0x00400a19
  400078:	00400dfd 	.word	0x00400dfd
  40007c:	00400dfd 	.word	0x00400dfd
	...
  400088:	00400dfd 	.word	0x00400dfd
  40008c:	00400dfd 	.word	0x00400dfd
  400090:	00400dfd 	.word	0x00400dfd
  400094:	00400dfd 	.word	0x00400dfd
  400098:	00400dfd 	.word	0x00400dfd
  40009c:	00400dfd 	.word	0x00400dfd
  4000a0:	00400dfd 	.word	0x00400dfd
  4000a4:	00400dfd 	.word	0x00400dfd
  4000a8:	00400dfd 	.word	0x00400dfd
  4000ac:	00400dfd 	.word	0x00400dfd
  4000b0:	00400dfd 	.word	0x00400dfd
  4000b4:	00400dfd 	.word	0x00400dfd
  4000b8:	00400dfd 	.word	0x00400dfd
  4000bc:	00400dfd 	.word	0x00400dfd
  4000c0:	00400dfd 	.word	0x00400dfd
  4000c4:	00400dfd 	.word	0x00400dfd
  4000c8:	00400dfd 	.word	0x00400dfd

004000cc <deregister_tm_clones>:
  4000cc:	b508      	push	{r3, lr}
  4000ce:	4805      	ldr	r0, [pc, #20]	; (4000e4 <deregister_tm_clones+0x18>)
  4000d0:	4b05      	ldr	r3, [pc, #20]	; (4000e8 <deregister_tm_clones+0x1c>)
  4000d2:	1a1b      	subs	r3, r3, r0
  4000d4:	2b06      	cmp	r3, #6
  4000d6:	d800      	bhi.n	4000da <deregister_tm_clones+0xe>
  4000d8:	bd08      	pop	{r3, pc}
  4000da:	4b04      	ldr	r3, [pc, #16]	; (4000ec <deregister_tm_clones+0x20>)
  4000dc:	2b00      	cmp	r3, #0
  4000de:	d0fb      	beq.n	4000d8 <deregister_tm_clones+0xc>
  4000e0:	4798      	blx	r3
  4000e2:	e7f9      	b.n	4000d8 <deregister_tm_clones+0xc>
  4000e4:	004063f4 	.word	0x004063f4
  4000e8:	004063f7 	.word	0x004063f7
  4000ec:	00000000 	.word	0x00000000

004000f0 <register_tm_clones>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4807      	ldr	r0, [pc, #28]	; (400110 <register_tm_clones+0x20>)
  4000f4:	4b07      	ldr	r3, [pc, #28]	; (400114 <register_tm_clones+0x24>)
  4000f6:	1a1b      	subs	r3, r3, r0
  4000f8:	109b      	asrs	r3, r3, #2
  4000fa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  4000fe:	1059      	asrs	r1, r3, #1
  400100:	d100      	bne.n	400104 <register_tm_clones+0x14>
  400102:	bd08      	pop	{r3, pc}
  400104:	4a04      	ldr	r2, [pc, #16]	; (400118 <register_tm_clones+0x28>)
  400106:	2a00      	cmp	r2, #0
  400108:	d0fb      	beq.n	400102 <register_tm_clones+0x12>
  40010a:	4790      	blx	r2
  40010c:	e7f9      	b.n	400102 <register_tm_clones+0x12>
  40010e:	bf00      	nop
  400110:	004063f4 	.word	0x004063f4
  400114:	004063f4 	.word	0x004063f4
  400118:	00000000 	.word	0x00000000

0040011c <__do_global_dtors_aux>:
  40011c:	b510      	push	{r4, lr}
  40011e:	4c06      	ldr	r4, [pc, #24]	; (400138 <__do_global_dtors_aux+0x1c>)
  400120:	7823      	ldrb	r3, [r4, #0]
  400122:	b943      	cbnz	r3, 400136 <__do_global_dtors_aux+0x1a>
  400124:	f7ff ffd2 	bl	4000cc <deregister_tm_clones>
  400128:	4b04      	ldr	r3, [pc, #16]	; (40013c <__do_global_dtors_aux+0x20>)
  40012a:	b113      	cbz	r3, 400132 <__do_global_dtors_aux+0x16>
  40012c:	4804      	ldr	r0, [pc, #16]	; (400140 <__do_global_dtors_aux+0x24>)
  40012e:	f3af 8000 	nop.w
  400132:	2301      	movs	r3, #1
  400134:	7023      	strb	r3, [r4, #0]
  400136:	bd10      	pop	{r4, pc}
  400138:	20000ccc 	.word	0x20000ccc
  40013c:	00000000 	.word	0x00000000
  400140:	004063f4 	.word	0x004063f4

00400144 <frame_dummy>:
  400144:	b508      	push	{r3, lr}
  400146:	4b08      	ldr	r3, [pc, #32]	; (400168 <frame_dummy+0x24>)
  400148:	b11b      	cbz	r3, 400152 <frame_dummy+0xe>
  40014a:	4808      	ldr	r0, [pc, #32]	; (40016c <frame_dummy+0x28>)
  40014c:	4908      	ldr	r1, [pc, #32]	; (400170 <frame_dummy+0x2c>)
  40014e:	f3af 8000 	nop.w
  400152:	4808      	ldr	r0, [pc, #32]	; (400174 <frame_dummy+0x30>)
  400154:	6803      	ldr	r3, [r0, #0]
  400156:	b113      	cbz	r3, 40015e <frame_dummy+0x1a>
  400158:	4b07      	ldr	r3, [pc, #28]	; (400178 <frame_dummy+0x34>)
  40015a:	b103      	cbz	r3, 40015e <frame_dummy+0x1a>
  40015c:	4798      	blx	r3
  40015e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400162:	f7ff bfc5 	b.w	4000f0 <register_tm_clones>
  400166:	bf00      	nop
  400168:	00000000 	.word	0x00000000
  40016c:	004063f4 	.word	0x004063f4
  400170:	20000cd0 	.word	0x20000cd0
  400174:	004063f4 	.word	0x004063f4
  400178:	00000000 	.word	0x00000000

0040017c <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  40017c:	b570      	push	{r4, r5, r6, lr}
  40017e:	b082      	sub	sp, #8
  400180:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400182:	ac02      	add	r4, sp, #8
  400184:	2302      	movs	r3, #2
  400186:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40018a:	4d09      	ldr	r5, [pc, #36]	; (4001b0 <ssd1306_write_command+0x34>)
  40018c:	4628      	mov	r0, r5
  40018e:	4621      	mov	r1, r4
  400190:	4b08      	ldr	r3, [pc, #32]	; (4001b4 <ssd1306_write_command+0x38>)
  400192:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400194:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400198:	4b07      	ldr	r3, [pc, #28]	; (4001b8 <ssd1306_write_command+0x3c>)
  40019a:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40019c:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  40019e:	2056      	movs	r0, #86	; 0x56
  4001a0:	4b06      	ldr	r3, [pc, #24]	; (4001bc <ssd1306_write_command+0x40>)
  4001a2:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4001a4:	4628      	mov	r0, r5
  4001a6:	4621      	mov	r1, r4
  4001a8:	4b05      	ldr	r3, [pc, #20]	; (4001c0 <ssd1306_write_command+0x44>)
  4001aa:	4798      	blx	r3
#endif
}
  4001ac:	b002      	add	sp, #8
  4001ae:	bd70      	pop	{r4, r5, r6, pc}
  4001b0:	40008000 	.word	0x40008000
  4001b4:	00400499 	.word	0x00400499
  4001b8:	400e1200 	.word	0x400e1200
  4001bc:	20000001 	.word	0x20000001
  4001c0:	004004c9 	.word	0x004004c9

004001c4 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
  4001c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001c6:	b085      	sub	sp, #20
  4001c8:	4d25      	ldr	r5, [pc, #148]	; (400260 <ssd1306_init+0x9c>)
  4001ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  4001ce:	636e      	str	r6, [r5, #52]	; 0x34
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	arch_ioport_set_pin_level(SSD1306_RES_PIN, false);
	delay_us(SSD1306_LATENCY); // At least 3us
  4001d0:	2056      	movs	r0, #86	; 0x56
  4001d2:	4c24      	ldr	r4, [pc, #144]	; (400264 <ssd1306_init+0xa0>)
  4001d4:	47a0      	blx	r4
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001d6:	632e      	str	r6, [r5, #48]	; 0x30
	arch_ioport_set_pin_level(SSD1306_RES_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
  4001d8:	2056      	movs	r0, #86	; 0x56
  4001da:	47a0      	blx	r4
	};
	usart_spi_init(SSD1306_USART_SPI);
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
			SSD1306_CLOCK_SPEED, spi_select_id);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {
  4001dc:	2702      	movs	r7, #2
  4001de:	ae04      	add	r6, sp, #16
  4001e0:	f846 7d04 	str.w	r7, [r6, #-4]!
		.id = SSD1306_CS_PIN,
	};
	spi_master_init(SSD1306_SPI);
  4001e4:	4c20      	ldr	r4, [pc, #128]	; (400268 <ssd1306_init+0xa4>)
  4001e6:	4620      	mov	r0, r4
  4001e8:	4b20      	ldr	r3, [pc, #128]	; (40026c <ssd1306_init+0xa8>)
  4001ea:	4798      	blx	r3
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
  4001ec:	2500      	movs	r5, #0
  4001ee:	9500      	str	r5, [sp, #0]
  4001f0:	4620      	mov	r0, r4
  4001f2:	4631      	mov	r1, r6
  4001f4:	462a      	mov	r2, r5
  4001f6:	4b1e      	ldr	r3, [pc, #120]	; (400270 <ssd1306_init+0xac>)
  4001f8:	4e1e      	ldr	r6, [pc, #120]	; (400274 <ssd1306_init+0xb0>)
  4001fa:	47b0      	blx	r6
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4001fc:	2301      	movs	r3, #1
  4001fe:	6023      	str	r3, [r4, #0]

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400200:	20a8      	movs	r0, #168	; 0xa8
  400202:	4c1d      	ldr	r4, [pc, #116]	; (400278 <ssd1306_init+0xb4>)
  400204:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400206:	201f      	movs	r0, #31
  400208:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  40020a:	20d3      	movs	r0, #211	; 0xd3
  40020c:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  40020e:	4628      	mov	r0, r5
  400210:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
  400212:	2040      	movs	r0, #64	; 0x40
  400214:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400216:	20a1      	movs	r0, #161	; 0xa1
  400218:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  40021a:	20c8      	movs	r0, #200	; 0xc8
  40021c:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  40021e:	20da      	movs	r0, #218	; 0xda
  400220:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400222:	4638      	mov	r0, r7
  400224:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400226:	2081      	movs	r0, #129	; 0x81
  400228:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  40022a:	208f      	movs	r0, #143	; 0x8f
  40022c:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  40022e:	20a4      	movs	r0, #164	; 0xa4
  400230:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400232:	20a6      	movs	r0, #166	; 0xa6
  400234:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400236:	20d5      	movs	r0, #213	; 0xd5
  400238:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  40023a:	2080      	movs	r0, #128	; 0x80
  40023c:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  40023e:	208d      	movs	r0, #141	; 0x8d
  400240:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400242:	2014      	movs	r0, #20
  400244:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400246:	20db      	movs	r0, #219	; 0xdb
  400248:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  40024a:	2040      	movs	r0, #64	; 0x40
  40024c:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  40024e:	20d9      	movs	r0, #217	; 0xd9
  400250:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400252:	20f1      	movs	r0, #241	; 0xf1
  400254:	47a0      	blx	r4
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400256:	20af      	movs	r0, #175	; 0xaf
  400258:	47a0      	blx	r4

	ssd1306_display_on();
}
  40025a:	b005      	add	sp, #20
  40025c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40025e:	bf00      	nop
  400260:	400e1200 	.word	0x400e1200
  400264:	20000001 	.word	0x20000001
  400268:	40008000 	.word	0x40008000
  40026c:	004003c9 	.word	0x004003c9
  400270:	004c4b40 	.word	0x004c4b40
  400274:	0040041d 	.word	0x0040041d
  400278:	0040017d 	.word	0x0040017d

0040027c <ssd1306_write_text>:
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(const char *string)
{
  40027c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400280:	b083      	sub	sp, #12
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
  400282:	7803      	ldrb	r3, [r0, #0]
  400284:	2b00      	cmp	r3, #0
  400286:	d041      	beq.n	40030c <ssd1306_write_text+0x90>
  400288:	4683      	mov	fp, r0
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  40028a:	4e22      	ldr	r6, [pc, #136]	; (400314 <ssd1306_write_text+0x98>)
  40028c:	f8df a094 	ldr.w	sl, [pc, #148]	; 400324 <ssd1306_write_text+0xa8>
  400290:	f8df 9094 	ldr.w	r9, [pc, #148]	; 400328 <ssd1306_write_text+0xac>
		if (*string < 0x7F) {
  400294:	2b7e      	cmp	r3, #126	; 0x7e
  400296:	d835      	bhi.n	400304 <ssd1306_write_text+0x88>
			char_ptr = font_table[*string - 32];
  400298:	3b20      	subs	r3, #32
  40029a:	4a1f      	ldr	r2, [pc, #124]	; (400318 <ssd1306_write_text+0x9c>)
  40029c:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
			for (i = 1; i <= char_ptr[0]; i++) {
  4002a0:	783b      	ldrb	r3, [r7, #0]
  4002a2:	b1db      	cbz	r3, 4002dc <ssd1306_write_text+0x60>
  4002a4:	2501      	movs	r5, #1
				ssd1306_write_data(char_ptr[i]);
  4002a6:	f817 8005 	ldrb.w	r8, [r7, r5]
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4002aa:	ac02      	add	r4, sp, #8
  4002ac:	2302      	movs	r3, #2
  4002ae:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  4002b2:	4630      	mov	r0, r6
  4002b4:	4621      	mov	r1, r4
  4002b6:	47d0      	blx	sl
  4002b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4002bc:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4002c0:	f8c6 800c 	str.w	r8, [r6, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4002c4:	2056      	movs	r0, #86	; 0x56
  4002c6:	4b15      	ldr	r3, [pc, #84]	; (40031c <ssd1306_write_text+0xa0>)
  4002c8:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4002ca:	4630      	mov	r0, r6
  4002cc:	4621      	mov	r1, r4
  4002ce:	4b14      	ldr	r3, [pc, #80]	; (400320 <ssd1306_write_text+0xa4>)
  4002d0:	4798      	blx	r3
	uint8_t i;

	while (*string != 0) {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
  4002d2:	3501      	adds	r5, #1
  4002d4:	b2ed      	uxtb	r5, r5
  4002d6:	783b      	ldrb	r3, [r7, #0]
  4002d8:	42ab      	cmp	r3, r5
  4002da:	d2e4      	bcs.n	4002a6 <ssd1306_write_text+0x2a>
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4002dc:	ac02      	add	r4, sp, #8
  4002de:	2302      	movs	r3, #2
  4002e0:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  4002e4:	4630      	mov	r0, r6
  4002e6:	4621      	mov	r1, r4
  4002e8:	47d0      	blx	sl
  4002ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4002ee:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  4002f2:	2300      	movs	r3, #0
  4002f4:	60f3      	str	r3, [r6, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4002f6:	2056      	movs	r0, #86	; 0x56
  4002f8:	4b08      	ldr	r3, [pc, #32]	; (40031c <ssd1306_write_text+0xa0>)
  4002fa:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4002fc:	4630      	mov	r0, r6
  4002fe:	4621      	mov	r1, r4
  400300:	4b07      	ldr	r3, [pc, #28]	; (400320 <ssd1306_write_text+0xa4>)
  400302:	4798      	blx	r3
void ssd1306_write_text(const char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
  400304:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
  400308:	2b00      	cmp	r3, #0
  40030a:	d1c3      	bne.n	400294 <ssd1306_write_text+0x18>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
  40030c:	b003      	add	sp, #12
  40030e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400312:	bf00      	nop
  400314:	40008000 	.word	0x40008000
  400318:	20000034 	.word	0x20000034
  40031c:	20000001 	.word	0x20000001
  400320:	004004c9 	.word	0x004004c9
  400324:	00400499 	.word	0x00400499
  400328:	400e1200 	.word	0x400e1200

0040032c <at30tse_init>:

/**
 * \brief Initialize the TWI instance used for AT30TSE75x.
 */
void at30tse_init(void)
{
  40032c:	b500      	push	{lr}
  40032e:	b085      	sub	sp, #20
	twi_options_t opts = {
  400330:	2300      	movs	r3, #0
  400332:	9303      	str	r3, [sp, #12]
  400334:	4b07      	ldr	r3, [pc, #28]	; (400354 <at30tse_init+0x28>)
  400336:	9301      	str	r3, [sp, #4]
  400338:	f242 7310 	movw	r3, #10000	; 0x2710
  40033c:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40033e:	2013      	movs	r0, #19
  400340:	4b05      	ldr	r3, [pc, #20]	; (400358 <at30tse_init+0x2c>)
  400342:	4798      	blx	r3
		.speed = BOARD_TWI_SPEED,
		.smbus = 0
	};

	sysclk_enable_peripheral_clock(BOARD_AT30TSE_TWI_ID);
	twi_master_init(BOARD_AT30TSE_TWI, &opts);
  400344:	4805      	ldr	r0, [pc, #20]	; (40035c <at30tse_init+0x30>)
  400346:	a901      	add	r1, sp, #4
  400348:	4b05      	ldr	r3, [pc, #20]	; (400360 <at30tse_init+0x34>)
  40034a:	4798      	blx	r3
}
  40034c:	b005      	add	sp, #20
  40034e:	f85d fb04 	ldr.w	pc, [sp], #4
  400352:	bf00      	nop
  400354:	07270e00 	.word	0x07270e00
  400358:	00400ba1 	.word	0x00400ba1
  40035c:	40018000 	.word	0x40018000
  400360:	00400d59 	.word	0x00400d59

00400364 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400364:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400366:	480e      	ldr	r0, [pc, #56]	; (4003a0 <sysclk_init+0x3c>)
  400368:	4b0e      	ldr	r3, [pc, #56]	; (4003a4 <sysclk_init+0x40>)
  40036a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40036c:	2000      	movs	r0, #0
  40036e:	213e      	movs	r1, #62	; 0x3e
  400370:	4b0d      	ldr	r3, [pc, #52]	; (4003a8 <sysclk_init+0x44>)
  400372:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400374:	4c0d      	ldr	r4, [pc, #52]	; (4003ac <sysclk_init+0x48>)
  400376:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400378:	2800      	cmp	r0, #0
  40037a:	d0fc      	beq.n	400376 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40037c:	4b0c      	ldr	r3, [pc, #48]	; (4003b0 <sysclk_init+0x4c>)
  40037e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400380:	4a0c      	ldr	r2, [pc, #48]	; (4003b4 <sysclk_init+0x50>)
  400382:	4b0d      	ldr	r3, [pc, #52]	; (4003b8 <sysclk_init+0x54>)
  400384:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400386:	4c0d      	ldr	r4, [pc, #52]	; (4003bc <sysclk_init+0x58>)
  400388:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40038a:	2800      	cmp	r0, #0
  40038c:	d0fc      	beq.n	400388 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40038e:	2010      	movs	r0, #16
  400390:	4b0b      	ldr	r3, [pc, #44]	; (4003c0 <sysclk_init+0x5c>)
  400392:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400394:	4b0b      	ldr	r3, [pc, #44]	; (4003c4 <sysclk_init+0x60>)
  400396:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400398:	4801      	ldr	r0, [pc, #4]	; (4003a0 <sysclk_init+0x3c>)
  40039a:	4b02      	ldr	r3, [pc, #8]	; (4003a4 <sysclk_init+0x40>)
  40039c:	4798      	blx	r3
  40039e:	bd10      	pop	{r4, pc}
  4003a0:	07270e00 	.word	0x07270e00
  4003a4:	00400fc9 	.word	0x00400fc9
  4003a8:	00400b1d 	.word	0x00400b1d
  4003ac:	00400b71 	.word	0x00400b71
  4003b0:	00400b81 	.word	0x00400b81
  4003b4:	20133f01 	.word	0x20133f01
  4003b8:	400e0400 	.word	0x400e0400
  4003bc:	00400b91 	.word	0x00400b91
  4003c0:	00400ab9 	.word	0x00400ab9
  4003c4:	00400eb5 	.word	0x00400eb5

004003c8 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  4003c8:	b510      	push	{r4, lr}
  4003ca:	4604      	mov	r4, r0
	spi_enable_clock(p_spi);
  4003cc:	4b10      	ldr	r3, [pc, #64]	; (400410 <spi_master_init+0x48>)
  4003ce:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4003d0:	2380      	movs	r3, #128	; 0x80
  4003d2:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4003d4:	6863      	ldr	r3, [r4, #4]
  4003d6:	f043 0301 	orr.w	r3, r3, #1
  4003da:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4003dc:	6863      	ldr	r3, [r4, #4]
  4003de:	f043 0310 	orr.w	r3, r3, #16
  4003e2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4003e4:	6863      	ldr	r3, [r4, #4]
  4003e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4003ea:	6063      	str	r3, [r4, #4]
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4003ec:	4620      	mov	r0, r4
  4003ee:	2100      	movs	r1, #0
  4003f0:	4b08      	ldr	r3, [pc, #32]	; (400414 <spi_master_init+0x4c>)
  4003f2:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4003f4:	6863      	ldr	r3, [r4, #4]
  4003f6:	f023 0302 	bic.w	r3, r3, #2
  4003fa:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4003fc:	6863      	ldr	r3, [r4, #4]
  4003fe:	f023 0304 	bic.w	r3, r3, #4
  400402:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  400404:	4620      	mov	r0, r4
  400406:	2100      	movs	r1, #0
  400408:	4b03      	ldr	r3, [pc, #12]	; (400418 <spi_master_init+0x50>)
  40040a:	4798      	blx	r3
  40040c:	bd10      	pop	{r4, pc}
  40040e:	bf00      	nop
  400410:	00400bf9 	.word	0x00400bf9
  400414:	00400c09 	.word	0x00400c09
  400418:	00400c21 	.word	0x00400c21

0040041c <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  40041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40041e:	4605      	mov	r5, r0
  400420:	460c      	mov	r4, r1
  400422:	4616      	mov	r6, r2
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
  400424:	4618      	mov	r0, r3
  400426:	4914      	ldr	r1, [pc, #80]	; (400478 <spi_master_setup_device+0x5c>)
  400428:	4b14      	ldr	r3, [pc, #80]	; (40047c <spi_master_setup_device+0x60>)
  40042a:	4798      	blx	r3
  40042c:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  40042e:	4628      	mov	r0, r5
  400430:	6821      	ldr	r1, [r4, #0]
  400432:	2200      	movs	r2, #0
  400434:	4613      	mov	r3, r2
  400436:	f8df c05c 	ldr.w	ip, [pc, #92]	; 400494 <spi_master_setup_device+0x78>
  40043a:	47e0      	blx	ip
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  40043c:	4628      	mov	r0, r5
  40043e:	6821      	ldr	r1, [r4, #0]
  400440:	2208      	movs	r2, #8
  400442:	4b0f      	ldr	r3, [pc, #60]	; (400480 <spi_master_setup_device+0x64>)
  400444:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400446:	4628      	mov	r0, r5
  400448:	6821      	ldr	r1, [r4, #0]
  40044a:	b2fa      	uxtb	r2, r7
  40044c:	4b0d      	ldr	r3, [pc, #52]	; (400484 <spi_master_setup_device+0x68>)
  40044e:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400450:	4628      	mov	r0, r5
  400452:	6821      	ldr	r1, [r4, #0]
  400454:	2208      	movs	r2, #8
  400456:	4b0c      	ldr	r3, [pc, #48]	; (400488 <spi_master_setup_device+0x6c>)
  400458:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  40045a:	4628      	mov	r0, r5
  40045c:	6821      	ldr	r1, [r4, #0]
  40045e:	0872      	lsrs	r2, r6, #1
  400460:	4b0a      	ldr	r3, [pc, #40]	; (40048c <spi_master_setup_device+0x70>)
  400462:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400464:	f086 0201 	eor.w	r2, r6, #1
  400468:	4628      	mov	r0, r5
  40046a:	6821      	ldr	r1, [r4, #0]
  40046c:	f002 0201 	and.w	r2, r2, #1
  400470:	4b07      	ldr	r3, [pc, #28]	; (400490 <spi_master_setup_device+0x74>)
  400472:	4798      	blx	r3
  400474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400476:	bf00      	nop
  400478:	07270e00 	.word	0x07270e00
  40047c:	00400ccd 	.word	0x00400ccd
  400480:	00400cb9 	.word	0x00400cb9
  400484:	00400ce5 	.word	0x00400ce5
  400488:	00400c75 	.word	0x00400c75
  40048c:	00400c35 	.word	0x00400c35
  400490:	00400c55 	.word	0x00400c55
  400494:	00400cfd 	.word	0x00400cfd

00400498 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  400498:	b508      	push	{r3, lr}
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  40049a:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  40049c:	f013 0f04 	tst.w	r3, #4
  4004a0:	d005      	beq.n	4004ae <spi_select_device+0x16>
		if (device->id < MAX_NUM_WITH_DECODER) {
  4004a2:	6809      	ldr	r1, [r1, #0]
  4004a4:	290f      	cmp	r1, #15
  4004a6:	d80b      	bhi.n	4004c0 <spi_select_device+0x28>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  4004a8:	4b06      	ldr	r3, [pc, #24]	; (4004c4 <spi_select_device+0x2c>)
  4004aa:	4798      	blx	r3
  4004ac:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  4004ae:	680b      	ldr	r3, [r1, #0]
  4004b0:	2b03      	cmp	r3, #3
  4004b2:	d805      	bhi.n	4004c0 <spi_select_device+0x28>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  4004b4:	2201      	movs	r2, #1
  4004b6:	fa02 f103 	lsl.w	r1, r2, r3
  4004ba:	43c9      	mvns	r1, r1
  4004bc:	4b01      	ldr	r3, [pc, #4]	; (4004c4 <spi_select_device+0x2c>)
  4004be:	4798      	blx	r3
  4004c0:	bd08      	pop	{r3, pc}
  4004c2:	bf00      	nop
  4004c4:	00400c09 	.word	0x00400c09

004004c8 <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  4004c8:	b510      	push	{r4, lr}
  4004ca:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4004cc:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  4004ce:	f413 7f00 	tst.w	r3, #512	; 0x200
  4004d2:	d0fb      	beq.n	4004cc <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  4004d4:	4620      	mov	r0, r4
  4004d6:	210f      	movs	r1, #15
  4004d8:	4b02      	ldr	r3, [pc, #8]	; (4004e4 <spi_deselect_device+0x1c>)
  4004da:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  4004dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4004e0:	6023      	str	r3, [r4, #0]
  4004e2:	bd10      	pop	{r4, pc}
  4004e4:	00400c09 	.word	0x00400c09

004004e8 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  4004e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  4004ea:	4838      	ldr	r0, [pc, #224]	; (4005cc <board_init+0xe4>)
  4004ec:	4b38      	ldr	r3, [pc, #224]	; (4005d0 <board_init+0xe8>)
  4004ee:	4798      	blx	r3
  4004f0:	200b      	movs	r0, #11
  4004f2:	4c38      	ldr	r4, [pc, #224]	; (4005d4 <board_init+0xec>)
  4004f4:	47a0      	blx	r4
  4004f6:	200c      	movs	r0, #12
  4004f8:	47a0      	blx	r4
  4004fa:	200d      	movs	r0, #13
  4004fc:	47a0      	blx	r4
  4004fe:	4b36      	ldr	r3, [pc, #216]	; (4005d8 <board_init+0xf0>)
  400500:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400504:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400506:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400508:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40050c:	4c33      	ldr	r4, [pc, #204]	; (4005dc <board_init+0xf4>)
  40050e:	2504      	movs	r5, #4
  400510:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400512:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400516:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400518:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40051c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40051e:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400520:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400524:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400526:	f022 0204 	bic.w	r2, r2, #4
  40052a:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40052c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40052e:	f022 0204 	bic.w	r2, r2, #4
  400532:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400534:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400538:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40053a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40053c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400540:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400544:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400546:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400548:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40054c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400550:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400552:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400554:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  400558:	4821      	ldr	r0, [pc, #132]	; (4005e0 <board_init+0xf8>)
  40055a:	210c      	movs	r1, #12
  40055c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400560:	4b20      	ldr	r3, [pc, #128]	; (4005e4 <board_init+0xfc>)
  400562:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  400564:	4f20      	ldr	r7, [pc, #128]	; (4005e8 <board_init+0x100>)
  400566:	2003      	movs	r0, #3
  400568:	4639      	mov	r1, r7
  40056a:	4e20      	ldr	r6, [pc, #128]	; (4005ec <board_init+0x104>)
  40056c:	47b0      	blx	r6
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  40056e:	4628      	mov	r0, r5
  400570:	4639      	mov	r1, r7
  400572:	47b0      	blx	r6
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400574:	200c      	movs	r0, #12
  400576:	4639      	mov	r1, r7
  400578:	47b0      	blx	r6
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  40057a:	200d      	movs	r0, #13
  40057c:	4639      	mov	r1, r7
  40057e:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400580:	200e      	movs	r0, #14
  400582:	4639      	mov	r1, r7
  400584:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS1
#if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS1_PA9_GPIO, SPI_NPCS1_PA9_FLAGS);
  400586:	2009      	movs	r0, #9
  400588:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40058c:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS2
#if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS2_PA10_GPIO, SPI_NPCS2_PA10_FLAGS);
  40058e:	200a      	movs	r0, #10
  400590:	4917      	ldr	r1, [pc, #92]	; (4005f0 <board_init+0x108>)
  400592:	47b0      	blx	r6
#endif
#endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_OLED_UG_2832HSWEG04
	gpio_configure_pin(UG_2832HSWEG04_DATA_CMD_GPIO, UG_2832HSWEG04_DATA_CMD_FLAGS);
  400594:	f107 5740 	add.w	r7, r7, #805306368	; 0x30000000
  400598:	2055      	movs	r0, #85	; 0x55
  40059a:	4639      	mov	r1, r7
  40059c:	47b0      	blx	r6
	gpio_configure_pin(UG_2832HSWEG04_RESET_GPIO, UG_2832HSWEG04_RESET_FLAGS);
  40059e:	205f      	movs	r0, #95	; 0x5f
  4005a0:	4639      	mov	r1, r7
  4005a2:	47b0      	blx	r6
#endif

#ifdef CONF_BOARD_SD_MMC_SPI
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  4005a4:	205b      	movs	r0, #91	; 0x5b
  4005a6:	4913      	ldr	r1, [pc, #76]	; (4005f4 <board_init+0x10c>)
  4005a8:	47b0      	blx	r6
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4005aa:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4005ac:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4005b0:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4005b2:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4005b4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4005b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4005ba:	f023 0304 	bic.w	r3, r3, #4
  4005be:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4005c0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4005c2:	f023 0304 	bic.w	r3, r3, #4
  4005c6:	6763      	str	r3, [r4, #116]	; 0x74
  4005c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4005ca:	bf00      	nop
  4005cc:	400e1450 	.word	0x400e1450
  4005d0:	00400df5 	.word	0x00400df5
  4005d4:	00400ba1 	.word	0x00400ba1
  4005d8:	400e1200 	.word	0x400e1200
  4005dc:	400e0e00 	.word	0x400e0e00
  4005e0:	400e1000 	.word	0x400e1000
  4005e4:	00400869 	.word	0x00400869
  4005e8:	08000001 	.word	0x08000001
  4005ec:	00400745 	.word	0x00400745
  4005f0:	10000001 	.word	0x10000001
  4005f4:	28000001 	.word	0x28000001

004005f8 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4005f8:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4005fc:	0052      	lsls	r2, r2, #1
  4005fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400602:	fbb3 f3f2 	udiv	r3, r3, r2
  400606:	3b01      	subs	r3, #1
  400608:	f3c3 030d 	ubfx	r3, r3, #0, #14
  40060c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  400610:	4770      	bx	lr
  400612:	bf00      	nop

00400614 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400614:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400616:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  400618:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40061c:	d02e      	beq.n	40067c <pio_set_peripheral+0x68>
  40061e:	d808      	bhi.n	400632 <pio_set_peripheral+0x1e>
  400620:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400624:	d014      	beq.n	400650 <pio_set_peripheral+0x3c>
  400626:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40062a:	d01d      	beq.n	400668 <pio_set_peripheral+0x54>
  40062c:	2900      	cmp	r1, #0
  40062e:	d135      	bne.n	40069c <pio_set_peripheral+0x88>
  400630:	e035      	b.n	40069e <pio_set_peripheral+0x8a>
  400632:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400636:	d032      	beq.n	40069e <pio_set_peripheral+0x8a>
  400638:	d803      	bhi.n	400642 <pio_set_peripheral+0x2e>
  40063a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40063e:	d027      	beq.n	400690 <pio_set_peripheral+0x7c>
  400640:	e02c      	b.n	40069c <pio_set_peripheral+0x88>
  400642:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400646:	d02a      	beq.n	40069e <pio_set_peripheral+0x8a>
  400648:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40064c:	d027      	beq.n	40069e <pio_set_peripheral+0x8a>
  40064e:	e025      	b.n	40069c <pio_set_peripheral+0x88>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400650:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400652:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400654:	43d3      	mvns	r3, r2
  400656:	4021      	ands	r1, r4
  400658:	4019      	ands	r1, r3
  40065a:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40065c:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40065e:	6f44      	ldr	r4, [r0, #116]	; 0x74
  400660:	4021      	ands	r1, r4
  400662:	400b      	ands	r3, r1
  400664:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400666:	e019      	b.n	40069c <pio_set_peripheral+0x88>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400668:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40066a:	4313      	orrs	r3, r2
  40066c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40066e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400670:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400672:	400b      	ands	r3, r1
  400674:	ea23 0302 	bic.w	r3, r3, r2
  400678:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40067a:	e00f      	b.n	40069c <pio_set_peripheral+0x88>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40067c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40067e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400680:	400b      	ands	r3, r1
  400682:	ea23 0302 	bic.w	r3, r3, r2
  400686:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400688:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40068a:	4313      	orrs	r3, r2
  40068c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40068e:	e005      	b.n	40069c <pio_set_peripheral+0x88>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400690:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400692:	4313      	orrs	r3, r2
  400694:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400696:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400698:	4313      	orrs	r3, r2
  40069a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40069c:	6042      	str	r2, [r0, #4]
}
  40069e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006a2:	4770      	bx	lr

004006a4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4006a4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4006a6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4006aa:	bf14      	ite	ne
  4006ac:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4006ae:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4006b0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4006b4:	bf14      	ite	ne
  4006b6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4006b8:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4006ba:	f012 0f02 	tst.w	r2, #2
  4006be:	d002      	beq.n	4006c6 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  4006c0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4006c4:	e004      	b.n	4006d0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4006c6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4006ca:	bf18      	it	ne
  4006cc:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4006d0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4006d2:	6001      	str	r1, [r0, #0]
  4006d4:	4770      	bx	lr
  4006d6:	bf00      	nop

004006d8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4006d8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4006da:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4006dc:	9c01      	ldr	r4, [sp, #4]
  4006de:	b10c      	cbz	r4, 4006e4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4006e0:	6641      	str	r1, [r0, #100]	; 0x64
  4006e2:	e000      	b.n	4006e6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4006e4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4006e6:	b10b      	cbz	r3, 4006ec <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4006e8:	6501      	str	r1, [r0, #80]	; 0x50
  4006ea:	e000      	b.n	4006ee <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4006ec:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4006ee:	b10a      	cbz	r2, 4006f4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4006f0:	6301      	str	r1, [r0, #48]	; 0x30
  4006f2:	e000      	b.n	4006f6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4006f4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4006f6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4006f8:	6001      	str	r1, [r0, #0]
}
  4006fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006fe:	4770      	bx	lr

00400700 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400700:	f012 0f10 	tst.w	r2, #16
  400704:	d010      	beq.n	400728 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400706:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40070a:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40070e:	bf14      	ite	ne
  400710:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400714:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400718:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40071c:	bf14      	ite	ne
  40071e:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  400722:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  400726:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400728:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40072c:	4770      	bx	lr
  40072e:	bf00      	nop

00400730 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  400730:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  400732:	6401      	str	r1, [r0, #64]	; 0x40
  400734:	4770      	bx	lr
  400736:	bf00      	nop

00400738 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400738:	6441      	str	r1, [r0, #68]	; 0x44
  40073a:	4770      	bx	lr

0040073c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40073c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40073e:	4770      	bx	lr

00400740 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400740:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400742:	4770      	bx	lr

00400744 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400744:	b570      	push	{r4, r5, r6, lr}
  400746:	b082      	sub	sp, #8
  400748:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40074a:	0944      	lsrs	r4, r0, #5
  40074c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
  400750:	f204 7407 	addw	r4, r4, #1799	; 0x707
  400754:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400756:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
  40075a:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  40075e:	d047      	beq.n	4007f0 <pio_configure_pin+0xac>
  400760:	d809      	bhi.n	400776 <pio_configure_pin+0x32>
  400762:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  400766:	d021      	beq.n	4007ac <pio_configure_pin+0x68>
  400768:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  40076c:	d02f      	beq.n	4007ce <pio_configure_pin+0x8a>
  40076e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  400772:	d16f      	bne.n	400854 <pio_configure_pin+0x110>
  400774:	e009      	b.n	40078a <pio_configure_pin+0x46>
  400776:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  40077a:	d055      	beq.n	400828 <pio_configure_pin+0xe4>
  40077c:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  400780:	d052      	beq.n	400828 <pio_configure_pin+0xe4>
  400782:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  400786:	d044      	beq.n	400812 <pio_configure_pin+0xce>
  400788:	e064      	b.n	400854 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40078a:	f000 001f 	and.w	r0, r0, #31
  40078e:	2401      	movs	r4, #1
  400790:	4084      	lsls	r4, r0
  400792:	4630      	mov	r0, r6
  400794:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400798:	4622      	mov	r2, r4
  40079a:	4b30      	ldr	r3, [pc, #192]	; (40085c <pio_configure_pin+0x118>)
  40079c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40079e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4007a2:	bf14      	ite	ne
  4007a4:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4007a6:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4007a8:	2001      	movs	r0, #1
  4007aa:	e054      	b.n	400856 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4007ac:	f000 001f 	and.w	r0, r0, #31
  4007b0:	2401      	movs	r4, #1
  4007b2:	4084      	lsls	r4, r0
  4007b4:	4630      	mov	r0, r6
  4007b6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007ba:	4622      	mov	r2, r4
  4007bc:	4b27      	ldr	r3, [pc, #156]	; (40085c <pio_configure_pin+0x118>)
  4007be:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4007c0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4007c4:	bf14      	ite	ne
  4007c6:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4007c8:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4007ca:	2001      	movs	r0, #1
  4007cc:	e043      	b.n	400856 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4007ce:	f000 001f 	and.w	r0, r0, #31
  4007d2:	2401      	movs	r4, #1
  4007d4:	4084      	lsls	r4, r0
  4007d6:	4630      	mov	r0, r6
  4007d8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4007dc:	4622      	mov	r2, r4
  4007de:	4b1f      	ldr	r3, [pc, #124]	; (40085c <pio_configure_pin+0x118>)
  4007e0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4007e2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4007e6:	bf14      	ite	ne
  4007e8:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4007ea:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4007ec:	2001      	movs	r0, #1
  4007ee:	e032      	b.n	400856 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4007f0:	f000 001f 	and.w	r0, r0, #31
  4007f4:	2401      	movs	r4, #1
  4007f6:	4084      	lsls	r4, r0
  4007f8:	4630      	mov	r0, r6
  4007fa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4007fe:	4622      	mov	r2, r4
  400800:	4b16      	ldr	r3, [pc, #88]	; (40085c <pio_configure_pin+0x118>)
  400802:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400804:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400808:	bf14      	ite	ne
  40080a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40080c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40080e:	2001      	movs	r0, #1
  400810:	e021      	b.n	400856 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400812:	f000 011f 	and.w	r1, r0, #31
  400816:	2401      	movs	r4, #1
  400818:	4630      	mov	r0, r6
  40081a:	fa04 f101 	lsl.w	r1, r4, r1
  40081e:	462a      	mov	r2, r5
  400820:	4b0f      	ldr	r3, [pc, #60]	; (400860 <pio_configure_pin+0x11c>)
  400822:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400824:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400826:	e016      	b.n	400856 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400828:	f000 011f 	and.w	r1, r0, #31
  40082c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40082e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400832:	ea05 0304 	and.w	r3, r5, r4
  400836:	9300      	str	r3, [sp, #0]
  400838:	4630      	mov	r0, r6
  40083a:	fa04 f101 	lsl.w	r1, r4, r1
  40083e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400842:	bf14      	ite	ne
  400844:	2200      	movne	r2, #0
  400846:	2201      	moveq	r2, #1
  400848:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40084c:	4d05      	ldr	r5, [pc, #20]	; (400864 <pio_configure_pin+0x120>)
  40084e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
  400850:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400852:	e000      	b.n	400856 <pio_configure_pin+0x112>

	default:
		return 0;
  400854:	2000      	movs	r0, #0
	}

	return 1;
}
  400856:	b002      	add	sp, #8
  400858:	bd70      	pop	{r4, r5, r6, pc}
  40085a:	bf00      	nop
  40085c:	00400615 	.word	0x00400615
  400860:	004006a5 	.word	0x004006a5
  400864:	004006d9 	.word	0x004006d9

00400868 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400868:	b5f0      	push	{r4, r5, r6, r7, lr}
  40086a:	b083      	sub	sp, #12
  40086c:	4607      	mov	r7, r0
  40086e:	460e      	mov	r6, r1
  400870:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400872:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
  400876:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  40087a:	d038      	beq.n	4008ee <pio_configure_pin_group+0x86>
  40087c:	d809      	bhi.n	400892 <pio_configure_pin_group+0x2a>
  40087e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  400882:	d01c      	beq.n	4008be <pio_configure_pin_group+0x56>
  400884:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  400888:	d025      	beq.n	4008d6 <pio_configure_pin_group+0x6e>
  40088a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  40088e:	d150      	bne.n	400932 <pio_configure_pin_group+0xca>
  400890:	e009      	b.n	4008a6 <pio_configure_pin_group+0x3e>
  400892:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  400896:	d03a      	beq.n	40090e <pio_configure_pin_group+0xa6>
  400898:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  40089c:	d037      	beq.n	40090e <pio_configure_pin_group+0xa6>
  40089e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  4008a2:	d030      	beq.n	400906 <pio_configure_pin_group+0x9e>
  4008a4:	e045      	b.n	400932 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4008a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4008aa:	4632      	mov	r2, r6
  4008ac:	4b22      	ldr	r3, [pc, #136]	; (400938 <pio_configure_pin_group+0xd0>)
  4008ae:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4008b0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4008b4:	bf14      	ite	ne
  4008b6:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4008b8:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4008ba:	2001      	movs	r0, #1
  4008bc:	e03a      	b.n	400934 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4008be:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008c2:	4632      	mov	r2, r6
  4008c4:	4b1c      	ldr	r3, [pc, #112]	; (400938 <pio_configure_pin_group+0xd0>)
  4008c6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4008c8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4008cc:	bf14      	ite	ne
  4008ce:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4008d0:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4008d2:	2001      	movs	r0, #1
  4008d4:	e02e      	b.n	400934 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4008d6:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4008da:	4632      	mov	r2, r6
  4008dc:	4b16      	ldr	r3, [pc, #88]	; (400938 <pio_configure_pin_group+0xd0>)
  4008de:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4008e0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4008e4:	bf14      	ite	ne
  4008e6:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4008e8:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4008ea:	2001      	movs	r0, #1
  4008ec:	e022      	b.n	400934 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4008ee:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4008f2:	4632      	mov	r2, r6
  4008f4:	4b10      	ldr	r3, [pc, #64]	; (400938 <pio_configure_pin_group+0xd0>)
  4008f6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4008f8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4008fc:	bf14      	ite	ne
  4008fe:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400900:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400902:	2001      	movs	r0, #1
  400904:	e016      	b.n	400934 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  400906:	4b0d      	ldr	r3, [pc, #52]	; (40093c <pio_configure_pin_group+0xd4>)
  400908:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  40090a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  40090c:	e012      	b.n	400934 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40090e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  400912:	f005 0301 	and.w	r3, r5, #1
  400916:	9300      	str	r3, [sp, #0]
  400918:	4638      	mov	r0, r7
  40091a:	4631      	mov	r1, r6
  40091c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400920:	bf14      	ite	ne
  400922:	2200      	movne	r2, #0
  400924:	2201      	moveq	r2, #1
  400926:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40092a:	4c05      	ldr	r4, [pc, #20]	; (400940 <pio_configure_pin_group+0xd8>)
  40092c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  40092e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400930:	e000      	b.n	400934 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  400932:	2000      	movs	r0, #0
	}

	return 1;
}
  400934:	b003      	add	sp, #12
  400936:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400938:	00400615 	.word	0x00400615
  40093c:	004006a5 	.word	0x004006a5
  400940:	004006d9 	.word	0x004006d9

00400944 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400948:	4681      	mov	r9, r0
  40094a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40094c:	4b14      	ldr	r3, [pc, #80]	; (4009a0 <pio_handler_process+0x5c>)
  40094e:	4798      	blx	r3
  400950:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400952:	4648      	mov	r0, r9
  400954:	4b13      	ldr	r3, [pc, #76]	; (4009a4 <pio_handler_process+0x60>)
  400956:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400958:	4005      	ands	r5, r0
  40095a:	d017      	beq.n	40098c <pio_handler_process+0x48>
  40095c:	4f12      	ldr	r7, [pc, #72]	; (4009a8 <pio_handler_process+0x64>)
  40095e:	f107 040c 	add.w	r4, r7, #12
  400962:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400964:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  400968:	42b3      	cmp	r3, r6
  40096a:	d10a      	bne.n	400982 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40096c:	f854 1c08 	ldr.w	r1, [r4, #-8]
  400970:	4229      	tst	r1, r5
  400972:	d006      	beq.n	400982 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400974:	6823      	ldr	r3, [r4, #0]
  400976:	4630      	mov	r0, r6
  400978:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40097a:	f854 3c08 	ldr.w	r3, [r4, #-8]
  40097e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400982:	42bc      	cmp	r4, r7
  400984:	d002      	beq.n	40098c <pio_handler_process+0x48>
  400986:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400988:	2d00      	cmp	r5, #0
  40098a:	d1eb      	bne.n	400964 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40098c:	4b07      	ldr	r3, [pc, #28]	; (4009ac <pio_handler_process+0x68>)
  40098e:	681b      	ldr	r3, [r3, #0]
  400990:	b123      	cbz	r3, 40099c <pio_handler_process+0x58>
		if (pio_capture_handler) {
  400992:	4b07      	ldr	r3, [pc, #28]	; (4009b0 <pio_handler_process+0x6c>)
  400994:	681b      	ldr	r3, [r3, #0]
  400996:	b10b      	cbz	r3, 40099c <pio_handler_process+0x58>
			pio_capture_handler(p_pio);
  400998:	4648      	mov	r0, r9
  40099a:	4798      	blx	r3
  40099c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4009a0:	0040073d 	.word	0x0040073d
  4009a4:	00400741 	.word	0x00400741
  4009a8:	20000cf0 	.word	0x20000cf0
  4009ac:	20000d98 	.word	0x20000d98
  4009b0:	20000cec 	.word	0x20000cec

004009b4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4009b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4009b6:	4c0b      	ldr	r4, [pc, #44]	; (4009e4 <pio_handler_set+0x30>)
  4009b8:	6824      	ldr	r4, [r4, #0]
  4009ba:	2c06      	cmp	r4, #6
  4009bc:	d810      	bhi.n	4009e0 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  4009be:	4f0a      	ldr	r7, [pc, #40]	; (4009e8 <pio_handler_set+0x34>)
  4009c0:	0126      	lsls	r6, r4, #4
  4009c2:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
  4009c4:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
  4009c6:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
  4009c8:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
  4009ca:	9906      	ldr	r1, [sp, #24]
  4009cc:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
  4009ce:	3401      	adds	r4, #1
  4009d0:	4904      	ldr	r1, [pc, #16]	; (4009e4 <pio_handler_set+0x30>)
  4009d2:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4009d4:	4611      	mov	r1, r2
  4009d6:	461a      	mov	r2, r3
  4009d8:	4b04      	ldr	r3, [pc, #16]	; (4009ec <pio_handler_set+0x38>)
  4009da:	4798      	blx	r3

	return 0;
  4009dc:	2000      	movs	r0, #0
  4009de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4009e0:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4009e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4009e4:	20000ce8 	.word	0x20000ce8
  4009e8:	20000cf0 	.word	0x20000cf0
  4009ec:	00400701 	.word	0x00400701

004009f0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4009f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4009f2:	4802      	ldr	r0, [pc, #8]	; (4009fc <PIOA_Handler+0xc>)
  4009f4:	210b      	movs	r1, #11
  4009f6:	4b02      	ldr	r3, [pc, #8]	; (400a00 <PIOA_Handler+0x10>)
  4009f8:	4798      	blx	r3
  4009fa:	bd08      	pop	{r3, pc}
  4009fc:	400e0e00 	.word	0x400e0e00
  400a00:	00400945 	.word	0x00400945

00400a04 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400a04:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400a06:	4802      	ldr	r0, [pc, #8]	; (400a10 <PIOB_Handler+0xc>)
  400a08:	210c      	movs	r1, #12
  400a0a:	4b02      	ldr	r3, [pc, #8]	; (400a14 <PIOB_Handler+0x10>)
  400a0c:	4798      	blx	r3
  400a0e:	bd08      	pop	{r3, pc}
  400a10:	400e1000 	.word	0x400e1000
  400a14:	00400945 	.word	0x00400945

00400a18 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400a18:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400a1a:	4802      	ldr	r0, [pc, #8]	; (400a24 <PIOC_Handler+0xc>)
  400a1c:	210d      	movs	r1, #13
  400a1e:	4b02      	ldr	r3, [pc, #8]	; (400a28 <PIOC_Handler+0x10>)
  400a20:	4798      	blx	r3
  400a22:	bd08      	pop	{r3, pc}
  400a24:	400e1200 	.word	0x400e1200
  400a28:	00400945 	.word	0x00400945

00400a2c <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  400a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400a30:	4605      	mov	r5, r0
  400a32:	460c      	mov	r4, r1
  400a34:	4691      	mov	r9, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  400a36:	4b1b      	ldr	r3, [pc, #108]	; (400aa4 <pio_handler_set_priority+0x78>)
  400a38:	4798      	blx	r3
  400a3a:	4680      	mov	r8, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  400a3c:	4628      	mov	r0, r5
  400a3e:	f04f 31ff 	mov.w	r1, #4294967295
  400a42:	4b19      	ldr	r3, [pc, #100]	; (400aa8 <pio_handler_set_priority+0x7c>)
  400a44:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  400a46:	4628      	mov	r0, r5
  400a48:	4b18      	ldr	r3, [pc, #96]	; (400aac <pio_handler_set_priority+0x80>)
  400a4a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400a4c:	b2e7      	uxtb	r7, r4
  400a4e:	f007 031f 	and.w	r3, r7, #31
  400a52:	2601      	movs	r6, #1
  400a54:	409e      	lsls	r6, r3
  400a56:	0963      	lsrs	r3, r4, #5
  400a58:	009b      	lsls	r3, r3, #2
  400a5a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  400a5e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  400a62:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400a66:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  400a6a:	2c00      	cmp	r4, #0
  400a6c:	da09      	bge.n	400a82 <pio_handler_set_priority+0x56>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400a6e:	f007 070f 	and.w	r7, r7, #15
  400a72:	ea4f 1909 	mov.w	r9, r9, lsl #4
  400a76:	fa5f f989 	uxtb.w	r9, r9
  400a7a:	4a0d      	ldr	r2, [pc, #52]	; (400ab0 <pio_handler_set_priority+0x84>)
  400a7c:	f802 9007 	strb.w	r9, [r2, r7]
  400a80:	e009      	b.n	400a96 <pio_handler_set_priority+0x6a>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400a82:	ea4f 1909 	mov.w	r9, r9, lsl #4
  400a86:	fa5f f989 	uxtb.w	r9, r9
  400a8a:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  400a8e:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  400a92:	f884 9300 	strb.w	r9, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400a96:	601e      	str	r6, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  400a98:	4628      	mov	r0, r5
  400a9a:	4641      	mov	r1, r8
  400a9c:	4b05      	ldr	r3, [pc, #20]	; (400ab4 <pio_handler_set_priority+0x88>)
  400a9e:	4798      	blx	r3
  400aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400aa4:	00400741 	.word	0x00400741
  400aa8:	00400739 	.word	0x00400739
  400aac:	0040073d 	.word	0x0040073d
  400ab0:	e000ed14 	.word	0xe000ed14
  400ab4:	00400731 	.word	0x00400731

00400ab8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400ab8:	4b17      	ldr	r3, [pc, #92]	; (400b18 <pmc_switch_mck_to_pllack+0x60>)
  400aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400abc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  400ac0:	4310      	orrs	r0, r2
  400ac2:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ac6:	f013 0f08 	tst.w	r3, #8
  400aca:	d109      	bne.n	400ae0 <pmc_switch_mck_to_pllack+0x28>
  400acc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400ad0:	4911      	ldr	r1, [pc, #68]	; (400b18 <pmc_switch_mck_to_pllack+0x60>)
  400ad2:	e001      	b.n	400ad8 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ad4:	3b01      	subs	r3, #1
  400ad6:	d019      	beq.n	400b0c <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ad8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400ada:	f012 0f08 	tst.w	r2, #8
  400ade:	d0f9      	beq.n	400ad4 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400ae0:	4b0d      	ldr	r3, [pc, #52]	; (400b18 <pmc_switch_mck_to_pllack+0x60>)
  400ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400ae4:	f022 0203 	bic.w	r2, r2, #3
  400ae8:	f042 0202 	orr.w	r2, r2, #2
  400aec:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400aee:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400af0:	f010 0008 	ands.w	r0, r0, #8
  400af4:	d10c      	bne.n	400b10 <pmc_switch_mck_to_pllack+0x58>
  400af6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400afa:	4907      	ldr	r1, [pc, #28]	; (400b18 <pmc_switch_mck_to_pllack+0x60>)
  400afc:	e001      	b.n	400b02 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400afe:	3b01      	subs	r3, #1
  400b00:	d008      	beq.n	400b14 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b02:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b04:	f012 0f08 	tst.w	r2, #8
  400b08:	d0f9      	beq.n	400afe <pmc_switch_mck_to_pllack+0x46>
  400b0a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400b0c:	2001      	movs	r0, #1
  400b0e:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400b10:	2000      	movs	r0, #0
  400b12:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400b14:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400b16:	4770      	bx	lr
  400b18:	400e0400 	.word	0x400e0400

00400b1c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400b1c:	b138      	cbz	r0, 400b2e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b1e:	4911      	ldr	r1, [pc, #68]	; (400b64 <pmc_switch_mainck_to_xtal+0x48>)
  400b20:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400b22:	4a11      	ldr	r2, [pc, #68]	; (400b68 <pmc_switch_mainck_to_xtal+0x4c>)
  400b24:	401a      	ands	r2, r3
  400b26:	4b11      	ldr	r3, [pc, #68]	; (400b6c <pmc_switch_mainck_to_xtal+0x50>)
  400b28:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b2a:	620b      	str	r3, [r1, #32]
  400b2c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b2e:	4a0d      	ldr	r2, [pc, #52]	; (400b64 <pmc_switch_mainck_to_xtal+0x48>)
  400b30:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400b32:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400b36:	f023 0303 	bic.w	r3, r3, #3
  400b3a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400b3e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400b42:	0209      	lsls	r1, r1, #8
  400b44:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400b46:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b48:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400b4a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b4c:	f013 0f01 	tst.w	r3, #1
  400b50:	d0fb      	beq.n	400b4a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400b52:	4a04      	ldr	r2, [pc, #16]	; (400b64 <pmc_switch_mainck_to_xtal+0x48>)
  400b54:	6a13      	ldr	r3, [r2, #32]
  400b56:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400b5e:	6213      	str	r3, [r2, #32]
  400b60:	4770      	bx	lr
  400b62:	bf00      	nop
  400b64:	400e0400 	.word	0x400e0400
  400b68:	fec8fffc 	.word	0xfec8fffc
  400b6c:	01370002 	.word	0x01370002

00400b70 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400b70:	4b02      	ldr	r3, [pc, #8]	; (400b7c <pmc_osc_is_ready_mainck+0xc>)
  400b72:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b74:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400b78:	4770      	bx	lr
  400b7a:	bf00      	nop
  400b7c:	400e0400 	.word	0x400e0400

00400b80 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400b80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400b84:	4b01      	ldr	r3, [pc, #4]	; (400b8c <pmc_disable_pllack+0xc>)
  400b86:	629a      	str	r2, [r3, #40]	; 0x28
  400b88:	4770      	bx	lr
  400b8a:	bf00      	nop
  400b8c:	400e0400 	.word	0x400e0400

00400b90 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400b90:	4b02      	ldr	r3, [pc, #8]	; (400b9c <pmc_is_locked_pllack+0xc>)
  400b92:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b94:	f000 0002 	and.w	r0, r0, #2
  400b98:	4770      	bx	lr
  400b9a:	bf00      	nop
  400b9c:	400e0400 	.word	0x400e0400

00400ba0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400ba0:	2822      	cmp	r0, #34	; 0x22
  400ba2:	d820      	bhi.n	400be6 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  400ba4:	281f      	cmp	r0, #31
  400ba6:	d80d      	bhi.n	400bc4 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400ba8:	4b12      	ldr	r3, [pc, #72]	; (400bf4 <pmc_enable_periph_clk+0x54>)
  400baa:	699a      	ldr	r2, [r3, #24]
  400bac:	2301      	movs	r3, #1
  400bae:	4083      	lsls	r3, r0
  400bb0:	401a      	ands	r2, r3
  400bb2:	4293      	cmp	r3, r2
  400bb4:	d019      	beq.n	400bea <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
  400bb6:	2301      	movs	r3, #1
  400bb8:	fa03 f000 	lsl.w	r0, r3, r0
  400bbc:	4b0d      	ldr	r3, [pc, #52]	; (400bf4 <pmc_enable_periph_clk+0x54>)
  400bbe:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400bc0:	2000      	movs	r0, #0
  400bc2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400bc4:	4b0b      	ldr	r3, [pc, #44]	; (400bf4 <pmc_enable_periph_clk+0x54>)
  400bc6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  400bca:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400bcc:	2301      	movs	r3, #1
  400bce:	4083      	lsls	r3, r0
  400bd0:	401a      	ands	r2, r3
  400bd2:	4293      	cmp	r3, r2
  400bd4:	d00b      	beq.n	400bee <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
  400bd6:	2301      	movs	r3, #1
  400bd8:	fa03 f000 	lsl.w	r0, r3, r0
  400bdc:	4b05      	ldr	r3, [pc, #20]	; (400bf4 <pmc_enable_periph_clk+0x54>)
  400bde:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400be2:	2000      	movs	r0, #0
  400be4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400be6:	2001      	movs	r0, #1
  400be8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400bea:	2000      	movs	r0, #0
  400bec:	4770      	bx	lr
  400bee:	2000      	movs	r0, #0
}
  400bf0:	4770      	bx	lr
  400bf2:	bf00      	nop
  400bf4:	400e0400 	.word	0x400e0400

00400bf8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400bf8:	b508      	push	{r3, lr}
  400bfa:	2015      	movs	r0, #21
  400bfc:	4b01      	ldr	r3, [pc, #4]	; (400c04 <spi_enable_clock+0xc>)
  400bfe:	4798      	blx	r3
  400c00:	bd08      	pop	{r3, pc}
  400c02:	bf00      	nop
  400c04:	00400ba1 	.word	0x00400ba1

00400c08 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400c08:	6843      	ldr	r3, [r0, #4]
  400c0a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400c0e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400c10:	6843      	ldr	r3, [r0, #4]
  400c12:	0409      	lsls	r1, r1, #16
  400c14:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400c18:	430b      	orrs	r3, r1
  400c1a:	6043      	str	r3, [r0, #4]
  400c1c:	4770      	bx	lr
  400c1e:	bf00      	nop

00400c20 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  400c20:	6843      	ldr	r3, [r0, #4]
  400c22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400c26:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  400c28:	6843      	ldr	r3, [r0, #4]
  400c2a:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  400c2e:	6041      	str	r1, [r0, #4]
  400c30:	4770      	bx	lr
  400c32:	bf00      	nop

00400c34 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400c34:	b132      	cbz	r2, 400c44 <spi_set_clock_polarity+0x10>
  400c36:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400c3a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c3c:	f043 0301 	orr.w	r3, r3, #1
  400c40:	6303      	str	r3, [r0, #48]	; 0x30
  400c42:	4770      	bx	lr
  400c44:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400c48:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c4a:	f023 0301 	bic.w	r3, r3, #1
  400c4e:	6303      	str	r3, [r0, #48]	; 0x30
  400c50:	4770      	bx	lr
  400c52:	bf00      	nop

00400c54 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400c54:	b132      	cbz	r2, 400c64 <spi_set_clock_phase+0x10>
  400c56:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400c5a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c5c:	f043 0302 	orr.w	r3, r3, #2
  400c60:	6303      	str	r3, [r0, #48]	; 0x30
  400c62:	4770      	bx	lr
  400c64:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400c68:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c6a:	f023 0302 	bic.w	r3, r3, #2
  400c6e:	6303      	str	r3, [r0, #48]	; 0x30
  400c70:	4770      	bx	lr
  400c72:	bf00      	nop

00400c74 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400c74:	2a04      	cmp	r2, #4
  400c76:	d10a      	bne.n	400c8e <spi_configure_cs_behavior+0x1a>
  400c78:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400c7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c7e:	f023 0308 	bic.w	r3, r3, #8
  400c82:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400c84:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c86:	f043 0304 	orr.w	r3, r3, #4
  400c8a:	6303      	str	r3, [r0, #48]	; 0x30
  400c8c:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400c8e:	b952      	cbnz	r2, 400ca6 <spi_configure_cs_behavior+0x32>
  400c90:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400c94:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c96:	f023 0308 	bic.w	r3, r3, #8
  400c9a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400c9c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400c9e:	f023 0304 	bic.w	r3, r3, #4
  400ca2:	6303      	str	r3, [r0, #48]	; 0x30
  400ca4:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400ca6:	2a08      	cmp	r2, #8
  400ca8:	d105      	bne.n	400cb6 <spi_configure_cs_behavior+0x42>
  400caa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400cae:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400cb0:	f043 0308 	orr.w	r3, r3, #8
  400cb4:	6303      	str	r3, [r0, #48]	; 0x30
  400cb6:	4770      	bx	lr

00400cb8 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400cb8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400cbc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400cc2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400cc4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400cc6:	431a      	orrs	r2, r3
  400cc8:	630a      	str	r2, [r1, #48]	; 0x30
  400cca:	4770      	bx	lr

00400ccc <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400ccc:	1e43      	subs	r3, r0, #1
  400cce:	4419      	add	r1, r3
  400cd0:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400cd4:	1e43      	subs	r3, r0, #1
  400cd6:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400cd8:	bf94      	ite	ls
  400cda:	b280      	uxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  400cdc:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}

	return baud_div;
}
  400ce0:	b200      	sxth	r0, r0
  400ce2:	4770      	bx	lr

00400ce4 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  400ce4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400ce8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400cee:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400cf0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400cf2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  400cf6:	630a      	str	r2, [r1, #48]	; 0x30
  400cf8:	4770      	bx	lr
  400cfa:	bf00      	nop

00400cfc <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  400cfc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  400d00:	6b08      	ldr	r0, [r1, #48]	; 0x30
  400d02:	b280      	uxth	r0, r0
  400d04:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400d06:	6b08      	ldr	r0, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
  400d08:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400d0c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  400d10:	630a      	str	r2, [r1, #48]	; 0x30
  400d12:	4770      	bx	lr

00400d14 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400d14:	4b0f      	ldr	r3, [pc, #60]	; (400d54 <twi_set_speed+0x40>)
  400d16:	4299      	cmp	r1, r3
  400d18:	d819      	bhi.n	400d4e <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400d1a:	0049      	lsls	r1, r1, #1
  400d1c:	fbb2 f2f1 	udiv	r2, r2, r1
  400d20:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400d22:	2aff      	cmp	r2, #255	; 0xff
  400d24:	d907      	bls.n	400d36 <twi_set_speed+0x22>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400d26:	2300      	movs	r3, #0
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
  400d28:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  400d2a:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400d2c:	2aff      	cmp	r2, #255	; 0xff
  400d2e:	d903      	bls.n	400d38 <twi_set_speed+0x24>
  400d30:	2b07      	cmp	r3, #7
  400d32:	d1f9      	bne.n	400d28 <twi_set_speed+0x14>
  400d34:	e000      	b.n	400d38 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400d36:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400d38:	0211      	lsls	r1, r2, #8
  400d3a:	b289      	uxth	r1, r1
			TWI_CWGR_CKDIV(ckdiv);
  400d3c:	041b      	lsls	r3, r3, #16
  400d3e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400d42:	430b      	orrs	r3, r1
  400d44:	b2d2      	uxtb	r2, r2
  400d46:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  400d48:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  400d4a:	2000      	movs	r0, #0
  400d4c:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  400d4e:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
  400d50:	4770      	bx	lr
  400d52:	bf00      	nop
  400d54:	00061a80 	.word	0x00061a80

00400d58 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400d58:	b538      	push	{r3, r4, r5, lr}
  400d5a:	4604      	mov	r4, r0
  400d5c:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400d5e:	f04f 33ff 	mov.w	r3, #4294967295
  400d62:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400d64:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400d66:	2380      	movs	r3, #128	; 0x80
  400d68:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400d6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400d6c:	2308      	movs	r3, #8
  400d6e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400d70:	2320      	movs	r3, #32
  400d72:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  400d74:	2304      	movs	r3, #4
  400d76:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400d78:	6849      	ldr	r1, [r1, #4]
  400d7a:	682a      	ldr	r2, [r5, #0]
  400d7c:	4b05      	ldr	r3, [pc, #20]	; (400d94 <twi_master_init+0x3c>)
  400d7e:	4798      	blx	r3
  400d80:	2801      	cmp	r0, #1
  400d82:	bf14      	ite	ne
  400d84:	2000      	movne	r0, #0
  400d86:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  400d88:	7a6b      	ldrb	r3, [r5, #9]
  400d8a:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  400d8c:	bf04      	itt	eq
  400d8e:	2340      	moveq	r3, #64	; 0x40
  400d90:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  400d92:	bd38      	pop	{r3, r4, r5, pc}
  400d94:	00400d15 	.word	0x00400d15

00400d98 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400d98:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400d9a:	23ac      	movs	r3, #172	; 0xac
  400d9c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400d9e:	680a      	ldr	r2, [r1, #0]
  400da0:	684b      	ldr	r3, [r1, #4]
  400da2:	fbb2 f3f3 	udiv	r3, r2, r3
  400da6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400da8:	1e5c      	subs	r4, r3, #1
  400daa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400dae:	4294      	cmp	r4, r2
  400db0:	d80a      	bhi.n	400dc8 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  400db2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400db4:	688b      	ldr	r3, [r1, #8]
  400db6:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400db8:	f240 2302 	movw	r3, #514	; 0x202
  400dbc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400dc0:	2350      	movs	r3, #80	; 0x50
  400dc2:	6003      	str	r3, [r0, #0]

	return 0;
  400dc4:	2000      	movs	r0, #0
  400dc6:	e000      	b.n	400dca <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400dc8:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400dca:	f85d 4b04 	ldr.w	r4, [sp], #4
  400dce:	4770      	bx	lr

00400dd0 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  400dd0:	2340      	movs	r3, #64	; 0x40
  400dd2:	6003      	str	r3, [r0, #0]
  400dd4:	4770      	bx	lr
  400dd6:	bf00      	nop

00400dd8 <uart_enable>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400dd8:	2350      	movs	r3, #80	; 0x50
  400dda:	6003      	str	r3, [r0, #0]
  400ddc:	4770      	bx	lr
  400dde:	bf00      	nop

00400de0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400de0:	6943      	ldr	r3, [r0, #20]
  400de2:	f013 0f02 	tst.w	r3, #2
  400de6:	d002      	beq.n	400dee <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400de8:	61c1      	str	r1, [r0, #28]
	return 0;
  400dea:	2000      	movs	r0, #0
  400dec:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400dee:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400df0:	4770      	bx	lr
  400df2:	bf00      	nop

00400df4 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400df4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400df8:	6043      	str	r3, [r0, #4]
  400dfa:	4770      	bx	lr

00400dfc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400dfc:	e7fe      	b.n	400dfc <Dummy_Handler>
  400dfe:	bf00      	nop

00400e00 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400e00:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400e02:	4b20      	ldr	r3, [pc, #128]	; (400e84 <Reset_Handler+0x84>)
  400e04:	4a20      	ldr	r2, [pc, #128]	; (400e88 <Reset_Handler+0x88>)
  400e06:	429a      	cmp	r2, r3
  400e08:	d912      	bls.n	400e30 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400e0a:	4b20      	ldr	r3, [pc, #128]	; (400e8c <Reset_Handler+0x8c>)
  400e0c:	4a1d      	ldr	r2, [pc, #116]	; (400e84 <Reset_Handler+0x84>)
  400e0e:	429a      	cmp	r2, r3
  400e10:	d21f      	bcs.n	400e52 <Reset_Handler+0x52>
  400e12:	1d13      	adds	r3, r2, #4
  400e14:	4c1e      	ldr	r4, [pc, #120]	; (400e90 <Reset_Handler+0x90>)
  400e16:	1ae4      	subs	r4, r4, r3
  400e18:	f024 0403 	bic.w	r4, r4, #3
  400e1c:	3404      	adds	r4, #4
  400e1e:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
  400e20:	4610      	mov	r0, r2
  400e22:	4919      	ldr	r1, [pc, #100]	; (400e88 <Reset_Handler+0x88>)
  400e24:	585a      	ldr	r2, [r3, r1]
  400e26:	501a      	str	r2, [r3, r0]
  400e28:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400e2a:	42a3      	cmp	r3, r4
  400e2c:	d1fa      	bne.n	400e24 <Reset_Handler+0x24>
  400e2e:	e010      	b.n	400e52 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400e30:	4b14      	ldr	r3, [pc, #80]	; (400e84 <Reset_Handler+0x84>)
  400e32:	4a15      	ldr	r2, [pc, #84]	; (400e88 <Reset_Handler+0x88>)
  400e34:	429a      	cmp	r2, r3
  400e36:	d20c      	bcs.n	400e52 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400e38:	4a14      	ldr	r2, [pc, #80]	; (400e8c <Reset_Handler+0x8c>)
  400e3a:	4619      	mov	r1, r3
  400e3c:	1ad3      	subs	r3, r2, r3
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400e3e:	4815      	ldr	r0, [pc, #84]	; (400e94 <Reset_Handler+0x94>)
  400e40:	4418      	add	r0, r3
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400e42:	b133      	cbz	r3, 400e52 <Reset_Handler+0x52>
  400e44:	4613      	mov	r3, r2
  400e46:	1a9c      	subs	r4, r3, r2
			*pDest-- = *pSrc--;
  400e48:	5824      	ldr	r4, [r4, r0]
  400e4a:	f843 4d04 	str.w	r4, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400e4e:	4299      	cmp	r1, r3
  400e50:	d1f9      	bne.n	400e46 <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400e52:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400e54:	4b10      	ldr	r3, [pc, #64]	; (400e98 <Reset_Handler+0x98>)
  400e56:	4a11      	ldr	r2, [pc, #68]	; (400e9c <Reset_Handler+0x9c>)
  400e58:	429a      	cmp	r2, r3
  400e5a:	d20b      	bcs.n	400e74 <Reset_Handler+0x74>
  400e5c:	1f13      	subs	r3, r2, #4
  400e5e:	4910      	ldr	r1, [pc, #64]	; (400ea0 <Reset_Handler+0xa0>)
  400e60:	1ac9      	subs	r1, r1, r3
  400e62:	f021 0103 	bic.w	r1, r1, #3
  400e66:	1d1a      	adds	r2, r3, #4
  400e68:	4411      	add	r1, r2
		*pDest++ = 0;
  400e6a:	2200      	movs	r2, #0
  400e6c:	f843 2f04 	str.w	r2, [r3, #4]!
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400e70:	428b      	cmp	r3, r1
  400e72:	d1fb      	bne.n	400e6c <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400e74:	4b0b      	ldr	r3, [pc, #44]	; (400ea4 <Reset_Handler+0xa4>)
  400e76:	4a0c      	ldr	r2, [pc, #48]	; (400ea8 <Reset_Handler+0xa8>)
  400e78:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400e7a:	4b0c      	ldr	r3, [pc, #48]	; (400eac <Reset_Handler+0xac>)
  400e7c:	4798      	blx	r3

	/* Branch to main function */
	main();
  400e7e:	4b0c      	ldr	r3, [pc, #48]	; (400eb0 <Reset_Handler+0xb0>)
  400e80:	4798      	blx	r3
  400e82:	e7fe      	b.n	400e82 <Reset_Handler+0x82>
  400e84:	20000000 	.word	0x20000000
  400e88:	004063f4 	.word	0x004063f4
  400e8c:	20000ccc 	.word	0x20000ccc
  400e90:	20000ccf 	.word	0x20000ccf
  400e94:	004063f0 	.word	0x004063f0
  400e98:	20000da0 	.word	0x20000da0
  400e9c:	20000ccc 	.word	0x20000ccc
  400ea0:	20000d9b 	.word	0x20000d9b
  400ea4:	e000ed00 	.word	0xe000ed00
  400ea8:	00400000 	.word	0x00400000
  400eac:	00401f9d 	.word	0x00401f9d
  400eb0:	00401415 	.word	0x00401415

00400eb4 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400eb4:	4b3d      	ldr	r3, [pc, #244]	; (400fac <SystemCoreClockUpdate+0xf8>)
  400eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400eb8:	f003 0303 	and.w	r3, r3, #3
  400ebc:	2b03      	cmp	r3, #3
  400ebe:	d85d      	bhi.n	400f7c <SystemCoreClockUpdate+0xc8>
  400ec0:	e8df f003 	tbb	[pc, r3]
  400ec4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400ec8:	4b39      	ldr	r3, [pc, #228]	; (400fb0 <SystemCoreClockUpdate+0xfc>)
  400eca:	695b      	ldr	r3, [r3, #20]
  400ecc:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400ed0:	bf14      	ite	ne
  400ed2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400ed6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400eda:	4b36      	ldr	r3, [pc, #216]	; (400fb4 <SystemCoreClockUpdate+0x100>)
  400edc:	601a      	str	r2, [r3, #0]
  400ede:	e04d      	b.n	400f7c <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400ee0:	4b32      	ldr	r3, [pc, #200]	; (400fac <SystemCoreClockUpdate+0xf8>)
  400ee2:	6a1b      	ldr	r3, [r3, #32]
  400ee4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ee8:	d003      	beq.n	400ef2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400eea:	4a33      	ldr	r2, [pc, #204]	; (400fb8 <SystemCoreClockUpdate+0x104>)
  400eec:	4b31      	ldr	r3, [pc, #196]	; (400fb4 <SystemCoreClockUpdate+0x100>)
  400eee:	601a      	str	r2, [r3, #0]
  400ef0:	e044      	b.n	400f7c <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400ef2:	4a32      	ldr	r2, [pc, #200]	; (400fbc <SystemCoreClockUpdate+0x108>)
  400ef4:	4b2f      	ldr	r3, [pc, #188]	; (400fb4 <SystemCoreClockUpdate+0x100>)
  400ef6:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400ef8:	4b2c      	ldr	r3, [pc, #176]	; (400fac <SystemCoreClockUpdate+0xf8>)
  400efa:	6a1b      	ldr	r3, [r3, #32]
  400efc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f00:	2b10      	cmp	r3, #16
  400f02:	d002      	beq.n	400f0a <SystemCoreClockUpdate+0x56>
  400f04:	2b20      	cmp	r3, #32
  400f06:	d004      	beq.n	400f12 <SystemCoreClockUpdate+0x5e>
  400f08:	e038      	b.n	400f7c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400f0a:	4a2d      	ldr	r2, [pc, #180]	; (400fc0 <SystemCoreClockUpdate+0x10c>)
  400f0c:	4b29      	ldr	r3, [pc, #164]	; (400fb4 <SystemCoreClockUpdate+0x100>)
  400f0e:	601a      	str	r2, [r3, #0]
			break;
  400f10:	e034      	b.n	400f7c <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400f12:	4a29      	ldr	r2, [pc, #164]	; (400fb8 <SystemCoreClockUpdate+0x104>)
  400f14:	4b27      	ldr	r3, [pc, #156]	; (400fb4 <SystemCoreClockUpdate+0x100>)
  400f16:	601a      	str	r2, [r3, #0]
			break;
  400f18:	e030      	b.n	400f7c <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400f1a:	4b24      	ldr	r3, [pc, #144]	; (400fac <SystemCoreClockUpdate+0xf8>)
  400f1c:	6a1b      	ldr	r3, [r3, #32]
  400f1e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f22:	d003      	beq.n	400f2c <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400f24:	4a24      	ldr	r2, [pc, #144]	; (400fb8 <SystemCoreClockUpdate+0x104>)
  400f26:	4b23      	ldr	r3, [pc, #140]	; (400fb4 <SystemCoreClockUpdate+0x100>)
  400f28:	601a      	str	r2, [r3, #0]
  400f2a:	e012      	b.n	400f52 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f2c:	4a23      	ldr	r2, [pc, #140]	; (400fbc <SystemCoreClockUpdate+0x108>)
  400f2e:	4b21      	ldr	r3, [pc, #132]	; (400fb4 <SystemCoreClockUpdate+0x100>)
  400f30:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400f32:	4b1e      	ldr	r3, [pc, #120]	; (400fac <SystemCoreClockUpdate+0xf8>)
  400f34:	6a1b      	ldr	r3, [r3, #32]
  400f36:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f3a:	2b10      	cmp	r3, #16
  400f3c:	d002      	beq.n	400f44 <SystemCoreClockUpdate+0x90>
  400f3e:	2b20      	cmp	r3, #32
  400f40:	d004      	beq.n	400f4c <SystemCoreClockUpdate+0x98>
  400f42:	e006      	b.n	400f52 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400f44:	4a1e      	ldr	r2, [pc, #120]	; (400fc0 <SystemCoreClockUpdate+0x10c>)
  400f46:	4b1b      	ldr	r3, [pc, #108]	; (400fb4 <SystemCoreClockUpdate+0x100>)
  400f48:	601a      	str	r2, [r3, #0]
					break;
  400f4a:	e002      	b.n	400f52 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400f4c:	4a1a      	ldr	r2, [pc, #104]	; (400fb8 <SystemCoreClockUpdate+0x104>)
  400f4e:	4b19      	ldr	r3, [pc, #100]	; (400fb4 <SystemCoreClockUpdate+0x100>)
  400f50:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400f52:	4b16      	ldr	r3, [pc, #88]	; (400fac <SystemCoreClockUpdate+0xf8>)
  400f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f56:	f003 0303 	and.w	r3, r3, #3
  400f5a:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400f5c:	4b13      	ldr	r3, [pc, #76]	; (400fac <SystemCoreClockUpdate+0xf8>)
  400f5e:	bf07      	ittee	eq
  400f60:	6a98      	ldreq	r0, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400f62:	6a99      	ldreq	r1, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400f64:	6ad8      	ldrne	r0, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400f66:	6ad9      	ldrne	r1, [r3, #44]	; 0x2c
  400f68:	4b12      	ldr	r3, [pc, #72]	; (400fb4 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400f6a:	f3c0 400a 	ubfx	r0, r0, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400f6e:	681a      	ldr	r2, [r3, #0]
  400f70:	fb00 2202 	mla	r2, r0, r2, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  400f74:	b2c9      	uxtb	r1, r1
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400f76:	fbb2 f2f1 	udiv	r2, r2, r1
  400f7a:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400f7c:	4b0b      	ldr	r3, [pc, #44]	; (400fac <SystemCoreClockUpdate+0xf8>)
  400f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f80:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f84:	2b70      	cmp	r3, #112	; 0x70
  400f86:	d107      	bne.n	400f98 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400f88:	4b0a      	ldr	r3, [pc, #40]	; (400fb4 <SystemCoreClockUpdate+0x100>)
  400f8a:	681a      	ldr	r2, [r3, #0]
  400f8c:	490d      	ldr	r1, [pc, #52]	; (400fc4 <SystemCoreClockUpdate+0x110>)
  400f8e:	fba1 0202 	umull	r0, r2, r1, r2
  400f92:	0852      	lsrs	r2, r2, #1
  400f94:	601a      	str	r2, [r3, #0]
  400f96:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400f98:	4b04      	ldr	r3, [pc, #16]	; (400fac <SystemCoreClockUpdate+0xf8>)
  400f9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400f9c:	4b05      	ldr	r3, [pc, #20]	; (400fb4 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400f9e:	f3c1 1102 	ubfx	r1, r1, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400fa2:	681a      	ldr	r2, [r3, #0]
  400fa4:	40ca      	lsrs	r2, r1
  400fa6:	601a      	str	r2, [r3, #0]
  400fa8:	4770      	bx	lr
  400faa:	bf00      	nop
  400fac:	400e0400 	.word	0x400e0400
  400fb0:	400e1410 	.word	0x400e1410
  400fb4:	20000408 	.word	0x20000408
  400fb8:	00b71b00 	.word	0x00b71b00
  400fbc:	003d0900 	.word	0x003d0900
  400fc0:	007a1200 	.word	0x007a1200
  400fc4:	aaaaaaab 	.word	0xaaaaaaab

00400fc8 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400fc8:	4b1a      	ldr	r3, [pc, #104]	; (401034 <system_init_flash+0x6c>)
  400fca:	4298      	cmp	r0, r3
  400fcc:	d807      	bhi.n	400fde <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400fce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400fd2:	4a19      	ldr	r2, [pc, #100]	; (401038 <system_init_flash+0x70>)
  400fd4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400fd6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400fda:	6013      	str	r3, [r2, #0]
  400fdc:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400fde:	4b17      	ldr	r3, [pc, #92]	; (40103c <system_init_flash+0x74>)
  400fe0:	4298      	cmp	r0, r3
  400fe2:	d806      	bhi.n	400ff2 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400fe4:	4b16      	ldr	r3, [pc, #88]	; (401040 <system_init_flash+0x78>)
  400fe6:	4a14      	ldr	r2, [pc, #80]	; (401038 <system_init_flash+0x70>)
  400fe8:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400fea:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400fee:	6013      	str	r3, [r2, #0]
  400ff0:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400ff2:	4b14      	ldr	r3, [pc, #80]	; (401044 <system_init_flash+0x7c>)
  400ff4:	4298      	cmp	r0, r3
  400ff6:	d806      	bhi.n	401006 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ff8:	4b13      	ldr	r3, [pc, #76]	; (401048 <system_init_flash+0x80>)
  400ffa:	4a0f      	ldr	r2, [pc, #60]	; (401038 <system_init_flash+0x70>)
  400ffc:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ffe:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401002:	6013      	str	r3, [r2, #0]
  401004:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401006:	4b11      	ldr	r3, [pc, #68]	; (40104c <system_init_flash+0x84>)
  401008:	4298      	cmp	r0, r3
  40100a:	d806      	bhi.n	40101a <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40100c:	4b10      	ldr	r3, [pc, #64]	; (401050 <system_init_flash+0x88>)
  40100e:	4a0a      	ldr	r2, [pc, #40]	; (401038 <system_init_flash+0x70>)
  401010:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401012:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401016:	6013      	str	r3, [r2, #0]
  401018:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40101a:	4b0e      	ldr	r3, [pc, #56]	; (401054 <system_init_flash+0x8c>)
  40101c:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40101e:	bf94      	ite	ls
  401020:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401024:	4b0c      	ldrhi	r3, [pc, #48]	; (401058 <system_init_flash+0x90>)
  401026:	4a04      	ldr	r2, [pc, #16]	; (401038 <system_init_flash+0x70>)
  401028:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40102a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40102e:	6013      	str	r3, [r2, #0]
  401030:	4770      	bx	lr
  401032:	bf00      	nop
  401034:	01312cff 	.word	0x01312cff
  401038:	400e0a00 	.word	0x400e0a00
  40103c:	026259ff 	.word	0x026259ff
  401040:	04000100 	.word	0x04000100
  401044:	039386ff 	.word	0x039386ff
  401048:	04000200 	.word	0x04000200
  40104c:	04c4b3ff 	.word	0x04c4b3ff
  401050:	04000300 	.word	0x04000300
  401054:	05f5e0ff 	.word	0x05f5e0ff
  401058:	04000500 	.word	0x04000500

0040105c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40105c:	4b09      	ldr	r3, [pc, #36]	; (401084 <_sbrk+0x28>)
  40105e:	681b      	ldr	r3, [r3, #0]
  401060:	b913      	cbnz	r3, 401068 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  401062:	4a09      	ldr	r2, [pc, #36]	; (401088 <_sbrk+0x2c>)
  401064:	4b07      	ldr	r3, [pc, #28]	; (401084 <_sbrk+0x28>)
  401066:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401068:	4b06      	ldr	r3, [pc, #24]	; (401084 <_sbrk+0x28>)
  40106a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40106c:	181a      	adds	r2, r3, r0
  40106e:	4907      	ldr	r1, [pc, #28]	; (40108c <_sbrk+0x30>)
  401070:	4291      	cmp	r1, r2
  401072:	db04      	blt.n	40107e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  401074:	4610      	mov	r0, r2
  401076:	4a03      	ldr	r2, [pc, #12]	; (401084 <_sbrk+0x28>)
  401078:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40107a:	4618      	mov	r0, r3
  40107c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  40107e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  401082:	4770      	bx	lr
  401084:	20000d60 	.word	0x20000d60
  401088:	20003da0 	.word	0x20003da0
  40108c:	20027ffc 	.word	0x20027ffc

00401090 <Button1_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void Button1_Handler(uint32_t id, uint32_t mask)
{
	if ((PIN_PUSHBUTTON_1_ID == id) && (PIN_PUSHBUTTON_1_MASK == mask))
  401090:	280b      	cmp	r0, #11
  401092:	d104      	bne.n	40109e <Button1_Handler+0xe>
  401094:	2901      	cmp	r1, #1
  401096:	d102      	bne.n	40109e <Button1_Handler+0xe>
static void ProcessButtonEvt(uint8_t uc_button)
{
	if ((uc_button >= DOOR_PRESSED_MIN) && 
	    (uc_button <= DOOR_PRESSED_MAX))
	{
		g_door_pressed = uc_button;
  401098:	2201      	movs	r2, #1
  40109a:	4b01      	ldr	r3, [pc, #4]	; (4010a0 <Button1_Handler+0x10>)
  40109c:	601a      	str	r2, [r3, #0]
  40109e:	4770      	bx	lr
  4010a0:	2000040c 	.word	0x2000040c

004010a4 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  4010a4:	b570      	push	{r4, r5, r6, lr}
  4010a6:	b082      	sub	sp, #8
  4010a8:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4010aa:	ac02      	add	r4, sp, #8
  4010ac:	2302      	movs	r3, #2
  4010ae:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  4010b2:	4d09      	ldr	r5, [pc, #36]	; (4010d8 <ssd1306_write_command+0x34>)
  4010b4:	4628      	mov	r0, r5
  4010b6:	4621      	mov	r1, r4
  4010b8:	4b08      	ldr	r3, [pc, #32]	; (4010dc <ssd1306_write_command+0x38>)
  4010ba:	4798      	blx	r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4010bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4010c0:	4b07      	ldr	r3, [pc, #28]	; (4010e0 <ssd1306_write_command+0x3c>)
  4010c2:	635a      	str	r2, [r3, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4010c4:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  4010c6:	2056      	movs	r0, #86	; 0x56
  4010c8:	4b06      	ldr	r3, [pc, #24]	; (4010e4 <ssd1306_write_command+0x40>)
  4010ca:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4010cc:	4628      	mov	r0, r5
  4010ce:	4621      	mov	r1, r4
  4010d0:	4b05      	ldr	r3, [pc, #20]	; (4010e8 <ssd1306_write_command+0x44>)
  4010d2:	4798      	blx	r3
#endif
}
  4010d4:	b002      	add	sp, #8
  4010d6:	bd70      	pop	{r4, r5, r6, pc}
  4010d8:	40008000 	.word	0x40008000
  4010dc:	00400499 	.word	0x00400499
  4010e0:	400e1200 	.word	0x400e1200
  4010e4:	20000001 	.word	0x20000001
  4010e8:	004004c9 	.word	0x004004c9

004010ec <ssd1306_draw_door>:

}


static void ssd1306_draw_door(door_coordinates door, uint8_t open)
{
  4010ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010f0:	b08d      	sub	sp, #52	; 0x34
  4010f2:	ac06      	add	r4, sp, #24
  4010f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  4010f8:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
  4010fc:	9204      	str	r2, [sp, #16]
  4010fe:	9001      	str	r0, [sp, #4]
  401100:	9a07      	ldr	r2, [sp, #28]
  401102:	9205      	str	r2, [sp, #20]
  401104:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
	uint8_t i = door.col;
	uint8_t page_start = door.page;
	
	for( i = door.col; i < (door.col+door.width); ++i )
  401108:	fa5f fb80 	uxtb.w	fp, r0
  40110c:	46d8      	mov	r8, fp
  40110e:	9b08      	ldr	r3, [sp, #32]
  401110:	4602      	mov	r2, r0
  401112:	441a      	add	r2, r3
  401114:	9203      	str	r2, [sp, #12]
  401116:	4593      	cmp	fp, r2
  401118:	f080 8083 	bcs.w	401222 <ssd1306_draw_door+0x136>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40111c:	4e42      	ldr	r6, [pc, #264]	; (401228 <ssd1306_draw_door+0x13c>)
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  40111e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 401234 <ssd1306_draw_door+0x148>
	{
		for (page_start = door.page; page_start <= door.height; ++page_start) 
  401122:	9b05      	ldr	r3, [sp, #20]
  401124:	b2dc      	uxtb	r4, r3
  401126:	4627      	mov	r7, r4
  401128:	45a2      	cmp	sl, r4
  40112a:	d32e      	bcc.n	40118a <ssd1306_draw_door+0x9e>
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  40112c:	f3cb 1302 	ubfx	r3, fp, #4, #3
  401130:	f043 0310 	orr.w	r3, r3, #16
  401134:	9302      	str	r3, [sp, #8]
		{
			uint8_t edge = (i == door.col) || (i == (door.col+door.width-1));
  401136:	9a01      	ldr	r2, [sp, #4]
  401138:	4542      	cmp	r2, r8
  40113a:	d02f      	beq.n	40119c <ssd1306_draw_door+0xb0>
  40113c:	9a03      	ldr	r2, [sp, #12]
  40113e:	1e53      	subs	r3, r2, #1
			if( !open || edge || (page_start == door.page) || (page_start == door.height) )
  401140:	9a04      	ldr	r2, [sp, #16]
  401142:	2a00      	cmp	r2, #0
  401144:	d04f      	beq.n	4011e6 <ssd1306_draw_door+0xfa>
  401146:	4543      	cmp	r3, r8
  401148:	d036      	beq.n	4011b8 <ssd1306_draw_door+0xcc>
  40114a:	9b05      	ldr	r3, [sp, #20]
  40114c:	42bb      	cmp	r3, r7
  40114e:	d055      	beq.n	4011fc <ssd1306_draw_door+0x110>
  401150:	45ba      	cmp	sl, r7
  401152:	d115      	bne.n	401180 <ssd1306_draw_door+0x94>
  401154:	e03b      	b.n	4011ce <ssd1306_draw_door+0xe2>
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  401156:	ad0c      	add	r5, sp, #48	; 0x30
  401158:	2302      	movs	r3, #2
  40115a:	f845 3d04 	str.w	r3, [r5, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40115e:	4648      	mov	r0, r9
  401160:	4629      	mov	r1, r5
  401162:	4a32      	ldr	r2, [pc, #200]	; (40122c <ssd1306_draw_door+0x140>)
  401164:	4790      	blx	r2
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401166:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  40116a:	4a31      	ldr	r2, [pc, #196]	; (401230 <ssd1306_draw_door+0x144>)
  40116c:	6313      	str	r3, [r2, #48]	; 0x30
  40116e:	4b31      	ldr	r3, [pc, #196]	; (401234 <ssd1306_draw_door+0x148>)
  401170:	60df      	str	r7, [r3, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  401172:	2056      	movs	r0, #86	; 0x56
  401174:	4b30      	ldr	r3, [pc, #192]	; (401238 <ssd1306_draw_door+0x14c>)
  401176:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  401178:	4648      	mov	r0, r9
  40117a:	4629      	mov	r1, r5
  40117c:	4b2f      	ldr	r3, [pc, #188]	; (40123c <ssd1306_draw_door+0x150>)
  40117e:	4798      	blx	r3
	uint8_t i = door.col;
	uint8_t page_start = door.page;
	
	for( i = door.col; i < (door.col+door.width); ++i )
	{
		for (page_start = door.page; page_start <= door.height; ++page_start) 
  401180:	3401      	adds	r4, #1
  401182:	b2e4      	uxtb	r4, r4
  401184:	4627      	mov	r7, r4
  401186:	45a2      	cmp	sl, r4
  401188:	d2d5      	bcs.n	401136 <ssd1306_draw_door+0x4a>
static void ssd1306_draw_door(door_coordinates door, uint8_t open)
{
	uint8_t i = door.col;
	uint8_t page_start = door.page;
	
	for( i = door.col; i < (door.col+door.width); ++i )
  40118a:	f10b 0b01 	add.w	fp, fp, #1
  40118e:	fa5f fb8b 	uxtb.w	fp, fp
  401192:	46d8      	mov	r8, fp
  401194:	9a03      	ldr	r2, [sp, #12]
  401196:	4593      	cmp	fp, r2
  401198:	d3c3      	bcc.n	401122 <ssd1306_draw_door+0x36>
  40119a:	e042      	b.n	401222 <ssd1306_draw_door+0x136>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40119c:	f004 0007 	and.w	r0, r4, #7
  4011a0:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4011a4:	47b0      	blx	r6
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4011a6:	9802      	ldr	r0, [sp, #8]
  4011a8:	47b0      	blx	r6
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4011aa:	f00b 000f 	and.w	r0, fp, #15
  4011ae:	47b0      	blx	r6
			if( !open || edge || (page_start == door.page) || (page_start == door.height) )
			{
				ssd1306_set_page_address(page_start);
				ssd1306_set_column_address(i);
				uint8_t data = 0xff;
				if( open && !edge && (page_start == door.page) )
  4011b0:	9b04      	ldr	r3, [sp, #16]
  4011b2:	2b00      	cmp	r3, #0
  4011b4:	d131      	bne.n	40121a <ssd1306_draw_door+0x12e>
  4011b6:	e032      	b.n	40121e <ssd1306_draw_door+0x132>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4011b8:	f004 0007 	and.w	r0, r4, #7
  4011bc:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4011c0:	47b0      	blx	r6
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4011c2:	9802      	ldr	r0, [sp, #8]
  4011c4:	47b0      	blx	r6
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4011c6:	f00b 000f 	and.w	r0, fp, #15
  4011ca:	47b0      	blx	r6
  4011cc:	e025      	b.n	40121a <ssd1306_draw_door+0x12e>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4011ce:	f004 0007 	and.w	r0, r4, #7
  4011d2:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4011d6:	47b0      	blx	r6
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4011d8:	9802      	ldr	r0, [sp, #8]
  4011da:	47b0      	blx	r6
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4011dc:	f00b 000f 	and.w	r0, fp, #15
  4011e0:	47b0      	blx	r6
				{
					data = 0x01;
				}
				if( open && !edge && (page_start == door.height) )
				{
					data = 0x80;
  4011e2:	2780      	movs	r7, #128	; 0x80
  4011e4:	e7b7      	b.n	401156 <ssd1306_draw_door+0x6a>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4011e6:	f004 0007 	and.w	r0, r4, #7
  4011ea:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4011ee:	47b0      	blx	r6
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4011f0:	9802      	ldr	r0, [sp, #8]
  4011f2:	47b0      	blx	r6
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4011f4:	f00b 000f 	and.w	r0, fp, #15
  4011f8:	47b0      	blx	r6
  4011fa:	e010      	b.n	40121e <ssd1306_draw_door+0x132>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4011fc:	f004 0007 	and.w	r0, r4, #7
  401200:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  401204:	47b0      	blx	r6
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  401206:	9802      	ldr	r0, [sp, #8]
  401208:	47b0      	blx	r6
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  40120a:	f00b 000f 	and.w	r0, fp, #15
  40120e:	47b0      	blx	r6
				ssd1306_set_page_address(page_start);
				ssd1306_set_column_address(i);
				uint8_t data = 0xff;
				if( open && !edge && (page_start == door.page) )
				{
					data = 0x01;
  401210:	45ba      	cmp	sl, r7
  401212:	bf0c      	ite	eq
  401214:	2780      	moveq	r7, #128	; 0x80
  401216:	2701      	movne	r7, #1
  401218:	e79d      	b.n	401156 <ssd1306_draw_door+0x6a>

}


static void ssd1306_draw_door(door_coordinates door, uint8_t open)
{
  40121a:	27ff      	movs	r7, #255	; 0xff
  40121c:	e79b      	b.n	401156 <ssd1306_draw_door+0x6a>
  40121e:	27ff      	movs	r7, #255	; 0xff
  401220:	e799      	b.n	401156 <ssd1306_draw_door+0x6a>
				}
				ssd1306_write_data(data);
			}
		}
	}
}
  401222:	b00d      	add	sp, #52	; 0x34
  401224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401228:	004010a5 	.word	0x004010a5
  40122c:	00400499 	.word	0x00400499
  401230:	400e1200 	.word	0x400e1200
  401234:	40008000 	.word	0x40008000
  401238:	20000001 	.word	0x20000001
  40123c:	004004c9 	.word	0x004004c9

00401240 <Button3_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void Button3_Handler(uint32_t id, uint32_t mask)
{
	if ((PIN_PUSHBUTTON_3_ID == id) && (PIN_PUSHBUTTON_3_MASK == mask))
  401240:	280d      	cmp	r0, #13
  401242:	d105      	bne.n	401250 <Button3_Handler+0x10>
  401244:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  401248:	d102      	bne.n	401250 <Button3_Handler+0x10>
static void ProcessButtonEvt(uint8_t uc_button)
{
	if ((uc_button >= DOOR_PRESSED_MIN) && 
	    (uc_button <= DOOR_PRESSED_MAX))
	{
		g_door_pressed = uc_button;
  40124a:	2203      	movs	r2, #3
  40124c:	4b01      	ldr	r3, [pc, #4]	; (401254 <Button3_Handler+0x14>)
  40124e:	601a      	str	r2, [r3, #0]
  401250:	4770      	bx	lr
  401252:	bf00      	nop
  401254:	2000040c 	.word	0x2000040c

00401258 <Button2_Handler>:
 * \param id The button ID.
 * \param mask The button mask.
 */
static void Button2_Handler(uint32_t id, uint32_t mask)
{
	if ((PIN_PUSHBUTTON_2_ID == id) && (PIN_PUSHBUTTON_2_MASK == mask))
  401258:	280d      	cmp	r0, #13
  40125a:	d105      	bne.n	401268 <Button2_Handler+0x10>
  40125c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401260:	d102      	bne.n	401268 <Button2_Handler+0x10>
static void ProcessButtonEvt(uint8_t uc_button)
{
	if ((uc_button >= DOOR_PRESSED_MIN) && 
	    (uc_button <= DOOR_PRESSED_MAX))
	{
		g_door_pressed = uc_button;
  401262:	2202      	movs	r2, #2
  401264:	4b01      	ldr	r3, [pc, #4]	; (40126c <Button2_Handler+0x14>)
  401266:	601a      	str	r2, [r3, #0]
  401268:	4770      	bx	lr
  40126a:	bf00      	nop
  40126c:	2000040c 	.word	0x2000040c

00401270 <pick_open_door>:
	uint32_t winning_door;
	
} monty_hall_state;
	
uint32_t pick_open_door( uint32_t winning_door, uint32_t first_door )
{
  401270:	b538      	push	{r3, r4, r5, lr}
  401272:	460c      	mov	r4, r1
	uint32_t open_door = DOOR_NOT_PRESSED;
	if( first_door != winning_door )
  401274:	4281      	cmp	r1, r0
  401276:	d014      	beq.n	4012a2 <pick_open_door+0x32>
	{
		// Since the winning door is not the selected door,
		//  we need simply pick the opposite unselected door
		//  There is probably a more efficient algorithm for this,
		//  but this will work for now.
		if (first_door == 1)
  401278:	2901      	cmp	r1, #1
  40127a:	d104      	bne.n	401286 <pick_open_door+0x16>
		{
			if (winning_door == 2)
			{
				open_door = 3;
  40127c:	2802      	cmp	r0, #2
  40127e:	bf14      	ite	ne
  401280:	2502      	movne	r5, #2
  401282:	2503      	moveq	r5, #3
  401284:	e01c      	b.n	4012c0 <pick_open_door+0x50>
			else
			{
				open_door = 2;
			}
		}
		else if (first_door == 2)
  401286:	2902      	cmp	r1, #2
  401288:	d104      	bne.n	401294 <pick_open_door+0x24>
		{
			if (winning_door == 3)
			{
				open_door = 1;
  40128a:	2803      	cmp	r0, #3
  40128c:	bf14      	ite	ne
  40128e:	2503      	movne	r5, #3
  401290:	2501      	moveq	r5, #1
  401292:	e015      	b.n	4012c0 <pick_open_door+0x50>
			else
			{
				open_door = 3;
			}
		}
		else if (first_door == 3)
  401294:	2903      	cmp	r1, #3
  401296:	d112      	bne.n	4012be <pick_open_door+0x4e>
		{
			if (winning_door == 1)
			{
				open_door = 2;
  401298:	2801      	cmp	r0, #1
  40129a:	bf14      	ite	ne
  40129c:	2501      	movne	r5, #1
  40129e:	2502      	moveq	r5, #2
  4012a0:	e00e      	b.n	4012c0 <pick_open_door+0x50>
			}
		}
	}
	else
	{
		open_door = 1;
  4012a2:	2901      	cmp	r1, #1
  4012a4:	bf0c      	ite	eq
  4012a6:	2502      	moveq	r5, #2
  4012a8:	2501      	movne	r5, #1
			open_door++;
		}
		
		// Since Monty can open either door, we need to randomly select
		//  a door.
		int random_value = rand();
  4012aa:	4b06      	ldr	r3, [pc, #24]	; (4012c4 <pick_open_door+0x54>)
  4012ac:	4798      	blx	r3
		if( random_value & 0x1 )
  4012ae:	f010 0f01 	tst.w	r0, #1
		{
			open_door++;
  4012b2:	bf18      	it	ne
  4012b4:	3501      	addne	r5, #1
		}
		if( open_door == winning_door )
  4012b6:	42a5      	cmp	r5, r4
  4012b8:	d102      	bne.n	4012c0 <pick_open_door+0x50>
		{
			// we can't pick this door, since it is the winning one
			open_door++;
  4012ba:	3501      	adds	r5, #1
  4012bc:	e000      	b.n	4012c0 <pick_open_door+0x50>
	
} monty_hall_state;
	
uint32_t pick_open_door( uint32_t winning_door, uint32_t first_door )
{
	uint32_t open_door = DOOR_NOT_PRESSED;
  4012be:	2504      	movs	r5, #4
			// we can't pick this door, since it is the winning one
			open_door++;
		}
	}
	return open_door;
}
  4012c0:	4628      	mov	r0, r5
  4012c2:	bd38      	pop	{r3, r4, r5, pc}
  4012c4:	00402009 	.word	0x00402009

004012c8 <handle_door_press>:

int32_t handle_door_press( monty_hall_state *p_game_state, uint32_t new_door_press )
{
  4012c8:	b538      	push	{r3, r4, r5, lr}
  4012ca:	460d      	mov	r5, r1
	if( p_game_state == NULL )
  4012cc:	4604      	mov	r4, r0
  4012ce:	2800      	cmp	r0, #0
  4012d0:	d03b      	beq.n	40134a <handle_door_press+0x82>
	{
		return -1;
	}
	
	switch( p_game_state->state )
  4012d2:	7c03      	ldrb	r3, [r0, #16]
  4012d4:	b113      	cbz	r3, 4012dc <handle_door_press+0x14>
  4012d6:	2b01      	cmp	r3, #1
  4012d8:	d015      	beq.n	401306 <handle_door_press+0x3e>
  4012da:	e033      	b.n	401344 <handle_door_press+0x7c>
	{
		case MONTY_GAME_STARTED:
		{
			p_game_state->winning_door = (rand() % 3) + 1;
  4012dc:	4b1e      	ldr	r3, [pc, #120]	; (401358 <handle_door_press+0x90>)
  4012de:	4798      	blx	r3
  4012e0:	4b1e      	ldr	r3, [pc, #120]	; (40135c <handle_door_press+0x94>)
  4012e2:	fb83 2300 	smull	r2, r3, r3, r0
  4012e6:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  4012ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4012ee:	1ac0      	subs	r0, r0, r3
  4012f0:	3001      	adds	r0, #1
  4012f2:	61e0      	str	r0, [r4, #28]
			p_game_state->first_door = new_door_press;
  4012f4:	6165      	str	r5, [r4, #20]
			p_game_state->state = FIRST_DOOR_OPEN;
  4012f6:	2301      	movs	r3, #1
  4012f8:	7423      	strb	r3, [r4, #16]
			p_game_state->open_door = pick_open_door( p_game_state->winning_door, new_door_press );
  4012fa:	4629      	mov	r1, r5
  4012fc:	4b18      	ldr	r3, [pc, #96]	; (401360 <handle_door_press+0x98>)
  4012fe:	4798      	blx	r3
  401300:	61a0      	str	r0, [r4, #24]
		{
			p_game_state->state = MONTY_GAME_STARTED;
			break;
		}
	}
	return 0;
  401302:	2000      	movs	r0, #0
		{
			p_game_state->winning_door = (rand() % 3) + 1;
			p_game_state->first_door = new_door_press;
			p_game_state->state = FIRST_DOOR_OPEN;
			p_game_state->open_door = pick_open_door( p_game_state->winning_door, new_door_press );
			break;
  401304:	bd38      	pop	{r3, r4, r5, pc}
		}
		case FIRST_DOOR_OPEN:
		{
			if( p_game_state->open_door == new_door_press )
  401306:	6983      	ldr	r3, [r0, #24]
  401308:	428b      	cmp	r3, r1
  40130a:	d021      	beq.n	401350 <handle_door_press+0x88>
			{
				// Invalid button press, stay in this state and wait for another press
				return -1;
			}
			if( p_game_state->winning_door == new_door_press )
  40130c:	69c3      	ldr	r3, [r0, #28]
  40130e:	428b      	cmp	r3, r1
  401310:	d105      	bne.n	40131e <handle_door_press+0x56>
			{
				p_game_state->state = GAME_OVER_WON;
  401312:	2302      	movs	r3, #2
  401314:	7403      	strb	r3, [r0, #16]
				p_game_state->times_won++;
  401316:	68c3      	ldr	r3, [r0, #12]
  401318:	3301      	adds	r3, #1
  40131a:	60c3      	str	r3, [r0, #12]
  40131c:	e001      	b.n	401322 <handle_door_press+0x5a>
			}
			else
			{
				p_game_state->state = GAME_OVER_LOST;
  40131e:	2303      	movs	r3, #3
  401320:	7403      	strb	r3, [r0, #16]
			}
			if( p_game_state->first_door != new_door_press )
  401322:	6963      	ldr	r3, [r4, #20]
  401324:	42ab      	cmp	r3, r5
  401326:	d008      	beq.n	40133a <handle_door_press+0x72>
			{
				p_game_state->times_switched++;
  401328:	6863      	ldr	r3, [r4, #4]
  40132a:	3301      	adds	r3, #1
  40132c:	6063      	str	r3, [r4, #4]
				if( p_game_state->state == GAME_OVER_WON )
  40132e:	7c23      	ldrb	r3, [r4, #16]
  401330:	2b02      	cmp	r3, #2
  401332:	d102      	bne.n	40133a <handle_door_press+0x72>
				{
					p_game_state->times_switched_won++;
  401334:	68a3      	ldr	r3, [r4, #8]
  401336:	3301      	adds	r3, #1
  401338:	60a3      	str	r3, [r4, #8]
				}
			}
			p_game_state->number_of_games++;
  40133a:	6823      	ldr	r3, [r4, #0]
  40133c:	3301      	adds	r3, #1
  40133e:	6023      	str	r3, [r4, #0]
		{
			p_game_state->state = MONTY_GAME_STARTED;
			break;
		}
	}
	return 0;
  401340:	2000      	movs	r0, #0
				{
					p_game_state->times_switched_won++;
				}
			}
			p_game_state->number_of_games++;
			break;
  401342:	bd38      	pop	{r3, r4, r5, pc}
		}
		default:
		case GAME_OVER_LOST:
		case GAME_OVER_WON:
		{
			p_game_state->state = MONTY_GAME_STARTED;
  401344:	2000      	movs	r0, #0
  401346:	7420      	strb	r0, [r4, #16]
			break;
  401348:	bd38      	pop	{r3, r4, r5, pc}

int32_t handle_door_press( monty_hall_state *p_game_state, uint32_t new_door_press )
{
	if( p_game_state == NULL )
	{
		return -1;
  40134a:	f04f 30ff 	mov.w	r0, #4294967295
  40134e:	bd38      	pop	{r3, r4, r5, pc}
		case FIRST_DOOR_OPEN:
		{
			if( p_game_state->open_door == new_door_press )
			{
				// Invalid button press, stay in this state and wait for another press
				return -1;
  401350:	f04f 30ff 	mov.w	r0, #4294967295
			p_game_state->state = MONTY_GAME_STARTED;
			break;
		}
	}
	return 0;
}
  401354:	bd38      	pop	{r3, r4, r5, pc}
  401356:	bf00      	nop
  401358:	00402009 	.word	0x00402009
  40135c:	55555556 	.word	0x55555556
  401360:	00401271 	.word	0x00401271

00401364 <sam4s_console_uart_init>:

/**
 * \brief Initializes the UART for transmitting characters
 */
sam4s_console_uart_init()
{
  401364:	b510      	push	{r4, lr}
  401366:	b084      	sub	sp, #16
	pmc_enable_periph_clk(ID_UART1);
  401368:	2009      	movs	r0, #9
  40136a:	4b0b      	ldr	r3, [pc, #44]	; (401398 <sam4s_console_uart_init+0x34>)
  40136c:	4798      	blx	r3
    const sam_uart_opt_t uart_console_settings = {
  40136e:	4b0b      	ldr	r3, [pc, #44]	; (40139c <sam4s_console_uart_init+0x38>)
  401370:	9301      	str	r3, [sp, #4]
  401372:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  401376:	9302      	str	r3, [sp, #8]
  401378:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40137c:	9303      	str	r3, [sp, #12]
        sysclk_get_cpu_hz(),
        9600,
        UART_MR_PAR_NO
    };

    uart_init(UART1,&uart_console_settings);
  40137e:	4c08      	ldr	r4, [pc, #32]	; (4013a0 <sam4s_console_uart_init+0x3c>)
  401380:	4620      	mov	r0, r4
  401382:	a901      	add	r1, sp, #4
  401384:	4b07      	ldr	r3, [pc, #28]	; (4013a4 <sam4s_console_uart_init+0x40>)
  401386:	4798      	blx	r3
    uart_enable_tx(UART1);                 
  401388:	4620      	mov	r0, r4
  40138a:	4b07      	ldr	r3, [pc, #28]	; (4013a8 <sam4s_console_uart_init+0x44>)
  40138c:	4798      	blx	r3
    uart_enable(UART1);
  40138e:	4620      	mov	r0, r4
  401390:	4b06      	ldr	r3, [pc, #24]	; (4013ac <sam4s_console_uart_init+0x48>)
  401392:	4798      	blx	r3
}
  401394:	b004      	add	sp, #16
  401396:	bd10      	pop	{r4, pc}
  401398:	00400ba1 	.word	0x00400ba1
  40139c:	07270e00 	.word	0x07270e00
  4013a0:	400e0800 	.word	0x400e0800
  4013a4:	00400d99 	.word	0x00400d99
  4013a8:	00400dd1 	.word	0x00400dd1
  4013ac:	00400dd9 	.word	0x00400dd9

004013b0 <print_uart>:
 * \param p_string - buffer of characters to transmit
 * \param max_len - maximum number of characters that may be in the buffer
 * \param uart_timeout_cnt - number of times to try to write to the UART before timing out
 */
void print_uart( char * p_string, uint32_t max_len, uint32_t uart_timeout_cnt )
{
  4013b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4013b4:	4607      	mov	r7, r0
  4013b6:	4616      	mov	r6, r2
    uint32_t len = strnlen(p_string, max_len);
  4013b8:	4b13      	ldr	r3, [pc, #76]	; (401408 <print_uart+0x58>)
  4013ba:	4798      	blx	r3
    for( uint32_t i = 0; i < len; i++ )
  4013bc:	4682      	mov	sl, r0
  4013be:	b198      	cbz	r0, 4013e8 <print_uart+0x38>
  4013c0:	2500      	movs	r5, #0
    {
        for( uint32_t count = 0; count < uart_timeout_cnt; count++ )
        {
            if( uart_write(UART1, p_string[i]) == 0 )
  4013c2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 40140c <print_uart+0x5c>
  4013c6:	f8df 8048 	ldr.w	r8, [pc, #72]	; 401410 <print_uart+0x60>
  4013ca:	e009      	b.n	4013e0 <print_uart+0x30>
  4013cc:	4640      	mov	r0, r8
  4013ce:	5d79      	ldrb	r1, [r7, r5]
  4013d0:	47c8      	blx	r9
  4013d2:	b110      	cbz	r0, 4013da <print_uart+0x2a>
void print_uart( char * p_string, uint32_t max_len, uint32_t uart_timeout_cnt )
{
    uint32_t len = strnlen(p_string, max_len);
    for( uint32_t i = 0; i < len; i++ )
    {
        for( uint32_t count = 0; count < uart_timeout_cnt; count++ )
  4013d4:	3401      	adds	r4, #1
  4013d6:	42b4      	cmp	r4, r6
  4013d8:	d1f8      	bne.n	4013cc <print_uart+0x1c>
 * \param uart_timeout_cnt - number of times to try to write to the UART before timing out
 */
void print_uart( char * p_string, uint32_t max_len, uint32_t uart_timeout_cnt )
{
    uint32_t len = strnlen(p_string, max_len);
    for( uint32_t i = 0; i < len; i++ )
  4013da:	3501      	adds	r5, #1
  4013dc:	4555      	cmp	r5, sl
  4013de:	d003      	beq.n	4013e8 <print_uart+0x38>
    {
        for( uint32_t count = 0; count < uart_timeout_cnt; count++ )
  4013e0:	2e00      	cmp	r6, #0
  4013e2:	d0fa      	beq.n	4013da <print_uart+0x2a>
  4013e4:	2400      	movs	r4, #0
  4013e6:	e7f1      	b.n	4013cc <print_uart+0x1c>
            {
                break;
            }
        }
    }
    for( uint32_t count = 0; count < uart_timeout_cnt; count++ )
  4013e8:	b15e      	cbz	r6, 401402 <print_uart+0x52>
  4013ea:	2400      	movs	r4, #0
    {
        if( uart_write(UART1, '\n') == 0 )
  4013ec:	f8df 8020 	ldr.w	r8, [pc, #32]	; 401410 <print_uart+0x60>
  4013f0:	270a      	movs	r7, #10
  4013f2:	4d06      	ldr	r5, [pc, #24]	; (40140c <print_uart+0x5c>)
  4013f4:	4640      	mov	r0, r8
  4013f6:	4639      	mov	r1, r7
  4013f8:	47a8      	blx	r5
  4013fa:	b110      	cbz	r0, 401402 <print_uart+0x52>
            {
                break;
            }
        }
    }
    for( uint32_t count = 0; count < uart_timeout_cnt; count++ )
  4013fc:	3401      	adds	r4, #1
  4013fe:	42b4      	cmp	r4, r6
  401400:	d1f8      	bne.n	4013f4 <print_uart+0x44>
  401402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401406:	bf00      	nop
  401408:	004020dd 	.word	0x004020dd
  40140c:	00400de1 	.word	0x00400de1
  401410:	400e0800 	.word	0x400e0800

00401414 <main>:
    }
}


int main(void)
{
  401414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401418:	b0bb      	sub	sp, #236	; 0xec
	const uint32_t max_disp_string = 120;
    const uint32_t max_uart_tries  = 1000000;
    char result_disp[max_disp_string];

	// Initialize clocks.
	sysclk_init();
  40141a:	4b8b      	ldr	r3, [pc, #556]	; (401648 <main+0x234>)
  40141c:	4798      	blx	r3

	// Initialize GPIO states.
	board_init();
  40141e:	4b8b      	ldr	r3, [pc, #556]	; (40164c <main+0x238>)
  401420:	4798      	blx	r3

	// Initialize at30tse.
	at30tse_init();
  401422:	4b8b      	ldr	r3, [pc, #556]	; (401650 <main+0x23c>)
  401424:	4798      	blx	r3
 * pressed or released.
 */
static void configure_buttons(void)
{
	/* Configure Pushbutton 1. */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_1_ID);
  401426:	200b      	movs	r0, #11
  401428:	f8df a290 	ldr.w	sl, [pc, #656]	; 4016bc <main+0x2a8>
  40142c:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  40142e:	4c89      	ldr	r4, [pc, #548]	; (401654 <main+0x240>)
  401430:	4620      	mov	r0, r4
  401432:	2101      	movs	r1, #1
  401434:	220a      	movs	r2, #10
  401436:	f8df 9288 	ldr.w	r9, [pc, #648]	; 4016c0 <main+0x2ac>
  40143a:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  40143c:	4b86      	ldr	r3, [pc, #536]	; (401658 <main+0x244>)
  40143e:	9300      	str	r3, [sp, #0]
  401440:	4620      	mov	r0, r4
  401442:	210b      	movs	r1, #11
  401444:	2201      	movs	r2, #1
  401446:	2379      	movs	r3, #121	; 0x79
  401448:	f8df 8278 	ldr.w	r8, [pc, #632]	; 4016c4 <main+0x2b0>
  40144c:	47c0      	blx	r8
  40144e:	4f83      	ldr	r7, [pc, #524]	; (40165c <main+0x248>)
  401450:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401454:	603b      	str	r3, [r7, #0]
			PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, Button1_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_1_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO, (IRQn_Type) PIN_PUSHBUTTON_1_ID, IRQ_PRIOR_PIO);
  401456:	4620      	mov	r0, r4
  401458:	210b      	movs	r1, #11
  40145a:	2200      	movs	r2, #0
  40145c:	4e80      	ldr	r6, [pc, #512]	; (401660 <main+0x24c>)
  40145e:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  401460:	4620      	mov	r0, r4
  401462:	2101      	movs	r1, #1
  401464:	4d7f      	ldr	r5, [pc, #508]	; (401664 <main+0x250>)
  401466:	47a8      	blx	r5

	/* Configure Pushbutton 2. */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_2_ID);
  401468:	200d      	movs	r0, #13
  40146a:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK, 10);
  40146c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  401470:	4620      	mov	r0, r4
  401472:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401476:	220a      	movs	r2, #10
  401478:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_ID,
  40147a:	4b7b      	ldr	r3, [pc, #492]	; (401668 <main+0x254>)
  40147c:	9300      	str	r3, [sp, #0]
  40147e:	4620      	mov	r0, r4
  401480:	210d      	movs	r1, #13
  401482:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401486:	2379      	movs	r3, #121	; 0x79
  401488:	47c0      	blx	r8
  40148a:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  40148e:	f8c7 b000 	str.w	fp, [r7]
			PIN_PUSHBUTTON_2_MASK, PIN_PUSHBUTTON_2_ATTR, Button2_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_2_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_2_PIO, (IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
  401492:	4620      	mov	r0, r4
  401494:	210d      	movs	r1, #13
  401496:	2200      	movs	r2, #0
  401498:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
  40149a:	4620      	mov	r0, r4
  40149c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4014a0:	47a8      	blx	r5

	/* Configure Pushbutton 3. */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_3_ID);
  4014a2:	200d      	movs	r0, #13
  4014a4:	47d0      	blx	sl
	pio_set_debounce_filter(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK, 10);
  4014a6:	4620      	mov	r0, r4
  4014a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4014ac:	220a      	movs	r2, #10
  4014ae:	47c8      	blx	r9
	pio_handler_set(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_ID,
  4014b0:	4b6e      	ldr	r3, [pc, #440]	; (40166c <main+0x258>)
  4014b2:	9300      	str	r3, [sp, #0]
  4014b4:	4620      	mov	r0, r4
  4014b6:	210d      	movs	r1, #13
  4014b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4014bc:	2379      	movs	r3, #121	; 0x79
  4014be:	47c0      	blx	r8
  4014c0:	f8c7 b000 	str.w	fp, [r7]
			PIN_PUSHBUTTON_3_MASK, PIN_PUSHBUTTON_3_ATTR, Button3_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_3_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_3_PIO, (IRQn_Type) PIN_PUSHBUTTON_3_ID, IRQ_PRIOR_PIO);
  4014c4:	4620      	mov	r0, r4
  4014c6:	210d      	movs	r1, #13
  4014c8:	2200      	movs	r2, #0
  4014ca:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK);
  4014cc:	4620      	mov	r0, r4
  4014ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4014d2:	47a8      	blx	r5

	// Configure IO1 buttons.
	configure_buttons();

	// Start the UART
	sam4s_console_uart_init();
  4014d4:	4b66      	ldr	r3, [pc, #408]	; (401670 <main+0x25c>)
  4014d6:	4798      	blx	r3
	
	// Initialize SPI and SSD1306 controller.
	ssd1306_init();
  4014d8:	4b66      	ldr	r3, [pc, #408]	; (401674 <main+0x260>)
  4014da:	4798      	blx	r3
  4014dc:	2400      	movs	r4, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4014de:	4e66      	ldr	r6, [pc, #408]	; (401678 <main+0x264>)
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  4014e0:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 40169c <main+0x288>
  4014e4:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 4016c8 <main+0x2b4>
  4014e8:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 4016cc <main+0x2b8>
  4014ec:	46c8      	mov	r8, r9
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4014ee:	f004 0007 	and.w	r0, r4, #7
  4014f2:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4014f6:	47b0      	blx	r6
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4014f8:	2010      	movs	r0, #16
  4014fa:	47b0      	blx	r6
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4014fc:	2000      	movs	r0, #0
  4014fe:	47b0      	blx	r6
  401500:	2780      	movs	r7, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  401502:	ad3a      	add	r5, sp, #232	; 0xe8
  401504:	2302      	movs	r3, #2
  401506:	f845 3dcc 	str.w	r3, [r5, #-204]!
	spi_select_device(SSD1306_SPI, &device);
  40150a:	4640      	mov	r0, r8
  40150c:	4629      	mov	r1, r5
  40150e:	47d8      	blx	fp
  401510:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  401514:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
  401518:	2300      	movs	r3, #0
  40151a:	f8c9 300c 	str.w	r3, [r9, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  40151e:	2056      	movs	r0, #86	; 0x56
  401520:	4b56      	ldr	r3, [pc, #344]	; (40167c <main+0x268>)
  401522:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  401524:	4640      	mov	r0, r8
  401526:	4629      	mov	r1, r5
  401528:	4b55      	ldr	r3, [pc, #340]	; (401680 <main+0x26c>)
  40152a:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  40152c:	3f01      	subs	r7, #1
  40152e:	d1e8      	bne.n	401502 <main+0xee>
  401530:	3401      	adds	r4, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  401532:	2c04      	cmp	r4, #4
  401534:	d1db      	bne.n	4014ee <main+0xda>
	ssd1306_clear();


	monty_hall_state game_state = { 0, 0, 0, 0, MONTY_GAME_STARTED,
  401536:	4f53      	ldr	r7, [pc, #332]	; (401684 <main+0x270>)
  401538:	ac14      	add	r4, sp, #80	; 0x50
  40153a:	463d      	mov	r5, r7
  40153c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40153e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401540:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  401544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								DOOR_NOT_PRESSED, DOOR_NOT_PRESSED, DOOR_NOT_PRESSED };
								
    print_uart( "Press a button to open a door", max_disp_string, max_uart_tries );
  401548:	4d4f      	ldr	r5, [pc, #316]	; (401688 <main+0x274>)
  40154a:	4628      	mov	r0, r5
  40154c:	2178      	movs	r1, #120	; 0x78
  40154e:	4a4f      	ldr	r2, [pc, #316]	; (40168c <main+0x278>)
  401550:	4b4f      	ldr	r3, [pc, #316]	; (401690 <main+0x27c>)
  401552:	4798      	blx	r3
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  401554:	20b0      	movs	r0, #176	; 0xb0
  401556:	4c48      	ldr	r4, [pc, #288]	; (401678 <main+0x264>)
  401558:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  40155a:	2010      	movs	r0, #16
  40155c:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  40155e:	2000      	movs	r0, #0
  401560:	47a0      	blx	r4
	ssd1306_set_page_address(0);
	ssd1306_set_column_address(0);
	ssd1306_write_text("Press a button to open a door");
  401562:	4628      	mov	r0, r5
  401564:	4b4b      	ldr	r3, [pc, #300]	; (401694 <main+0x280>)
  401566:	4798      	blx	r3
	
	door_coordinates door1_coord = { 10, 2, 10, 3 };
  401568:	ae10      	add	r6, sp, #64	; 0x40
  40156a:	f107 0320 	add.w	r3, r7, #32
  40156e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401570:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	door_coordinates door2_coord = { 60, 2, 10, 3 };
  401574:	ad0c      	add	r5, sp, #48	; 0x30
  401576:	f107 0330 	add.w	r3, r7, #48	; 0x30
  40157a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40157c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	door_coordinates door3_coord = { 110, 2, 10, 3 };
  401580:	ac08      	add	r4, sp, #32
  401582:	3740      	adds	r7, #64	; 0x40
  401584:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
  401588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	ssd1306_draw_door( door1_coord, false );
  40158c:	2700      	movs	r7, #0
  40158e:	9700      	str	r7, [sp, #0]
  401590:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  401594:	4e40      	ldr	r6, [pc, #256]	; (401698 <main+0x284>)
  401596:	47b0      	blx	r6
	ssd1306_draw_door( door2_coord, true );
  401598:	2301      	movs	r3, #1
  40159a:	9300      	str	r3, [sp, #0]
  40159c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  4015a0:	47b0      	blx	r6
	ssd1306_draw_door( door3_coord, false );
  4015a2:	9700      	str	r7, [sp, #0]
  4015a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  4015a8:	47b0      	blx	r6
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  4015aa:	4f3c      	ldr	r7, [pc, #240]	; (40169c <main+0x288>)
  4015ac:	f8df 911c 	ldr.w	r9, [pc, #284]	; 4016cc <main+0x2b8>
  4015b0:	463e      	mov	r6, r7
	
	for( ;; )
	{
		int32_t result = 0;
		if( g_door_pressed != DOOR_NOT_PRESSED )
  4015b2:	4b3b      	ldr	r3, [pc, #236]	; (4016a0 <main+0x28c>)
  4015b4:	681b      	ldr	r3, [r3, #0]
  4015b6:	2b04      	cmp	r3, #4
  4015b8:	f000 80d7 	beq.w	40176a <main+0x356>
		{
			uint32_t game_over = false;
			result = handle_door_press( &game_state, g_door_pressed );
  4015bc:	4c38      	ldr	r4, [pc, #224]	; (4016a0 <main+0x28c>)
  4015be:	6821      	ldr	r1, [r4, #0]
  4015c0:	a814      	add	r0, sp, #80	; 0x50
  4015c2:	4b38      	ldr	r3, [pc, #224]	; (4016a4 <main+0x290>)
  4015c4:	4798      	blx	r3
			g_door_pressed = DOOR_NOT_PRESSED;
  4015c6:	2304      	movs	r3, #4
  4015c8:	6023      	str	r3, [r4, #0]
			if( game_state.state == FIRST_DOOR_OPEN )
  4015ca:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
  4015ce:	2b01      	cmp	r3, #1
  4015d0:	d110      	bne.n	4015f4 <main+0x1e0>
			{
				if( result == 0 )
  4015d2:	2800      	cmp	r0, #0
  4015d4:	f040 80f6 	bne.w	4017c4 <main+0x3b0>
				{
					sprintf( result_disp, "Game State %d: selected door %d open door %d", 
  4015d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4015da:	9300      	str	r3, [sp, #0]
  4015dc:	a81c      	add	r0, sp, #112	; 0x70
  4015de:	4932      	ldr	r1, [pc, #200]	; (4016a8 <main+0x294>)
  4015e0:	2201      	movs	r2, #1
  4015e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4015e4:	4c31      	ldr	r4, [pc, #196]	; (4016ac <main+0x298>)
  4015e6:	47a0      	blx	r4
						     game_state.state,
							 game_state.first_door,
							 game_state.open_door );
					print_uart( result_disp, max_disp_string, max_uart_tries );
  4015e8:	a81c      	add	r0, sp, #112	; 0x70
  4015ea:	2178      	movs	r1, #120	; 0x78
  4015ec:	4a27      	ldr	r2, [pc, #156]	; (40168c <main+0x278>)
  4015ee:	4b28      	ldr	r3, [pc, #160]	; (401690 <main+0x27c>)
  4015f0:	4798      	blx	r3
  4015f2:	e0e7      	b.n	4017c4 <main+0x3b0>
				}
			}
			else if( game_state.state == GAME_OVER_WON )
  4015f4:	2b02      	cmp	r3, #2
  4015f6:	d10d      	bne.n	401614 <main+0x200>
			{
				sprintf( result_disp, "Won: Game State %d: selected door %d open door %d", 
  4015f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4015fa:	9300      	str	r3, [sp, #0]
  4015fc:	a81c      	add	r0, sp, #112	; 0x70
  4015fe:	492c      	ldr	r1, [pc, #176]	; (4016b0 <main+0x29c>)
  401600:	2202      	movs	r2, #2
  401602:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401604:	4c29      	ldr	r4, [pc, #164]	; (4016ac <main+0x298>)
  401606:	47a0      	blx	r4
				         game_state.state,
						 game_state.first_door,
						 game_state.open_door );
				print_uart( result_disp, max_disp_string, max_uart_tries );
  401608:	a81c      	add	r0, sp, #112	; 0x70
  40160a:	2178      	movs	r1, #120	; 0x78
  40160c:	4a1f      	ldr	r2, [pc, #124]	; (40168c <main+0x278>)
  40160e:	4b20      	ldr	r3, [pc, #128]	; (401690 <main+0x27c>)
  401610:	4798      	blx	r3
  401612:	e0ae      	b.n	401772 <main+0x35e>
				game_over = true;
			}
			else if( game_state.state == GAME_OVER_LOST )
  401614:	2b03      	cmp	r3, #3
  401616:	d10d      	bne.n	401634 <main+0x220>
			{
				sprintf( result_disp, "Lost: Game State %d: selected door %d open door %d", 
  401618:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40161a:	9300      	str	r3, [sp, #0]
  40161c:	a81c      	add	r0, sp, #112	; 0x70
  40161e:	4925      	ldr	r1, [pc, #148]	; (4016b4 <main+0x2a0>)
  401620:	2203      	movs	r2, #3
  401622:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401624:	4c21      	ldr	r4, [pc, #132]	; (4016ac <main+0x298>)
  401626:	47a0      	blx	r4
				         game_state.state,
						 game_state.first_door,
						 game_state.open_door );
				print_uart( result_disp, max_disp_string, max_uart_tries );
  401628:	a81c      	add	r0, sp, #112	; 0x70
  40162a:	2178      	movs	r1, #120	; 0x78
  40162c:	4a17      	ldr	r2, [pc, #92]	; (40168c <main+0x278>)
  40162e:	4b18      	ldr	r3, [pc, #96]	; (401690 <main+0x27c>)
  401630:	4798      	blx	r3
  401632:	e09e      	b.n	401772 <main+0x35e>
				game_over = true;
			}
			else if( game_state.state == MONTY_GAME_STARTED )
  401634:	2b00      	cmp	r3, #0
  401636:	f040 80c5 	bne.w	4017c4 <main+0x3b0>
			{
				print_uart( "Press a button to select a door", max_disp_string, max_uart_tries );
  40163a:	481f      	ldr	r0, [pc, #124]	; (4016b8 <main+0x2a4>)
  40163c:	2178      	movs	r1, #120	; 0x78
  40163e:	4a13      	ldr	r2, [pc, #76]	; (40168c <main+0x278>)
  401640:	4b13      	ldr	r3, [pc, #76]	; (401690 <main+0x27c>)
  401642:	4798      	blx	r3
  401644:	e0be      	b.n	4017c4 <main+0x3b0>
  401646:	bf00      	nop
  401648:	00400365 	.word	0x00400365
  40164c:	004004e9 	.word	0x004004e9
  401650:	0040032d 	.word	0x0040032d
  401654:	400e0e00 	.word	0x400e0e00
  401658:	00401091 	.word	0x00401091
  40165c:	e000e100 	.word	0xe000e100
  401660:	00400a2d 	.word	0x00400a2d
  401664:	00400731 	.word	0x00400731
  401668:	00401259 	.word	0x00401259
  40166c:	00401241 	.word	0x00401241
  401670:	00401365 	.word	0x00401365
  401674:	004001c5 	.word	0x004001c5
  401678:	004010a5 	.word	0x004010a5
  40167c:	20000001 	.word	0x20000001
  401680:	004004c9 	.word	0x004004c9
  401684:	00406074 	.word	0x00406074
  401688:	004060c4 	.word	0x004060c4
  40168c:	000f4240 	.word	0x000f4240
  401690:	004013b1 	.word	0x004013b1
  401694:	0040027d 	.word	0x0040027d
  401698:	004010ed 	.word	0x004010ed
  40169c:	40008000 	.word	0x40008000
  4016a0:	2000040c 	.word	0x2000040c
  4016a4:	004012c9 	.word	0x004012c9
  4016a8:	004060e4 	.word	0x004060e4
  4016ac:	00402085 	.word	0x00402085
  4016b0:	00406114 	.word	0x00406114
  4016b4:	00406148 	.word	0x00406148
  4016b8:	0040617c 	.word	0x0040617c
  4016bc:	00400ba1 	.word	0x00400ba1
  4016c0:	004005f9 	.word	0x004005f9
  4016c4:	004009b5 	.word	0x004009b5
  4016c8:	00400499 	.word	0x00400499
  4016cc:	400e1200 	.word	0x400e1200
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4016d0:	f00a 0007 	and.w	r0, sl, #7
  4016d4:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4016d8:	47d8      	blx	fp
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4016da:	2010      	movs	r0, #16
  4016dc:	47d8      	blx	fp
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4016de:	2000      	movs	r0, #0
  4016e0:	47d8      	blx	fp
  4016e2:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4016e4:	ac3a      	add	r4, sp, #232	; 0xe8
  4016e6:	2302      	movs	r3, #2
  4016e8:	f844 3dcc 	str.w	r3, [r4, #-204]!
	spi_select_device(SSD1306_SPI, &device);
  4016ec:	4630      	mov	r0, r6
  4016ee:	4621      	mov	r1, r4
  4016f0:	47c0      	blx	r8
  4016f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4016f6:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
  4016fa:	2300      	movs	r3, #0
  4016fc:	60fb      	str	r3, [r7, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4016fe:	2056      	movs	r0, #86	; 0x56
  401700:	4b35      	ldr	r3, [pc, #212]	; (4017d8 <main+0x3c4>)
  401702:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  401704:	4630      	mov	r0, r6
  401706:	4621      	mov	r1, r4
  401708:	4b34      	ldr	r3, [pc, #208]	; (4017dc <main+0x3c8>)
  40170a:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  40170c:	3d01      	subs	r5, #1
  40170e:	d1e9      	bne.n	4016e4 <main+0x2d0>
  401710:	f10a 0a01 	add.w	sl, sl, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  401714:	f1ba 0f04 	cmp.w	sl, #4
  401718:	d1da      	bne.n	4016d0 <main+0x2bc>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40171a:	20b0      	movs	r0, #176	; 0xb0
  40171c:	4c30      	ldr	r4, [pc, #192]	; (4017e0 <main+0x3cc>)
  40171e:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  401720:	2010      	movs	r0, #16
  401722:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  401724:	2000      	movs	r0, #0
  401726:	47a0      	blx	r4
			
			// Clear screen.
			ssd1306_clear();
			ssd1306_set_page_address(0);
			ssd1306_set_column_address(0);
			ssd1306_write_text(result_disp);
  401728:	a81c      	add	r0, sp, #112	; 0x70
  40172a:	4b2e      	ldr	r3, [pc, #184]	; (4017e4 <main+0x3d0>)
  40172c:	4798      	blx	r3

			if( !game_over )			
  40172e:	9b05      	ldr	r3, [sp, #20]
  401730:	b9db      	cbnz	r3, 40176a <main+0x356>
			{
				ssd1306_draw_door( door1_coord, (game_state.open_door == 1) );
  401732:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  401734:	2b01      	cmp	r3, #1
  401736:	bf14      	ite	ne
  401738:	2300      	movne	r3, #0
  40173a:	2301      	moveq	r3, #1
  40173c:	9300      	str	r3, [sp, #0]
  40173e:	ab10      	add	r3, sp, #64	; 0x40
  401740:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401742:	4c29      	ldr	r4, [pc, #164]	; (4017e8 <main+0x3d4>)
  401744:	47a0      	blx	r4
				ssd1306_draw_door( door2_coord, (game_state.open_door == 2) );
  401746:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  401748:	2b02      	cmp	r3, #2
  40174a:	bf14      	ite	ne
  40174c:	2300      	movne	r3, #0
  40174e:	2301      	moveq	r3, #1
  401750:	9300      	str	r3, [sp, #0]
  401752:	ab0c      	add	r3, sp, #48	; 0x30
  401754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401756:	47a0      	blx	r4
				ssd1306_draw_door( door3_coord, (game_state.open_door == 3) );
  401758:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40175a:	2b03      	cmp	r3, #3
  40175c:	bf14      	ite	ne
  40175e:	2300      	movne	r3, #0
  401760:	2301      	moveq	r3, #1
  401762:	9300      	str	r3, [sp, #0]
  401764:	ab08      	add	r3, sp, #32
  401766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401768:	47a0      	blx	r4
			}
		}


		/* Wait and stop screen flickers. */
		delay_ms(50);
  40176a:	4820      	ldr	r0, [pc, #128]	; (4017ec <main+0x3d8>)
  40176c:	4b1a      	ldr	r3, [pc, #104]	; (4017d8 <main+0x3c4>)
  40176e:	4798      	blx	r3
	}
  401770:	e71f      	b.n	4015b2 <main+0x19e>
				print_uart( "Press a button to select a door", max_disp_string, max_uart_tries );

			}
			if( game_over )
			{
				uint32_t win_pct = (game_state.times_won * 100) / game_state.number_of_games;
  401772:	9c17      	ldr	r4, [sp, #92]	; 0x5c
  401774:	9a14      	ldr	r2, [sp, #80]	; 0x50
				uint32_t switching_win_pct = (game_state.times_switched_won * 100) / game_state.times_switched;
  401776:	9816      	ldr	r0, [sp, #88]	; 0x58
  401778:	9b15      	ldr	r3, [sp, #84]	; 0x54
				print_uart( "Press a button to select a door", max_disp_string, max_uart_tries );

			}
			if( game_over )
			{
				uint32_t win_pct = (game_state.times_won * 100) / game_state.number_of_games;
  40177a:	2164      	movs	r1, #100	; 0x64
  40177c:	fb01 f504 	mul.w	r5, r1, r4
  401780:	fbb5 f5f2 	udiv	r5, r5, r2
				uint32_t switching_win_pct = (game_state.times_switched_won * 100) / game_state.times_switched;
				uint32_t staying_win_pct = ((game_state.times_won-game_state.times_switched_won) * 100) 
				                           / (game_state.number_of_games-game_state.times_switched);
				sprintf( result_disp, "Games Played: %d, Switch Count %d, Games Win %d%%, Switch Win %d%% Stay Win %d%%",
  401784:	9500      	str	r5, [sp, #0]

			}
			if( game_over )
			{
				uint32_t win_pct = (game_state.times_won * 100) / game_state.number_of_games;
				uint32_t switching_win_pct = (game_state.times_switched_won * 100) / game_state.times_switched;
  401786:	fb01 f500 	mul.w	r5, r1, r0
  40178a:	fbb5 f5f3 	udiv	r5, r5, r3
				uint32_t staying_win_pct = ((game_state.times_won-game_state.times_switched_won) * 100) 
				                           / (game_state.number_of_games-game_state.times_switched);
				sprintf( result_disp, "Games Played: %d, Switch Count %d, Games Win %d%%, Switch Win %d%% Stay Win %d%%",
  40178e:	9501      	str	r5, [sp, #4]
			}
			if( game_over )
			{
				uint32_t win_pct = (game_state.times_won * 100) / game_state.number_of_games;
				uint32_t switching_win_pct = (game_state.times_switched_won * 100) / game_state.times_switched;
				uint32_t staying_win_pct = ((game_state.times_won-game_state.times_switched_won) * 100) 
  401790:	1a20      	subs	r0, r4, r0
  401792:	fb01 f100 	mul.w	r1, r1, r0
				                           / (game_state.number_of_games-game_state.times_switched);
  401796:	1ad0      	subs	r0, r2, r3
			}
			if( game_over )
			{
				uint32_t win_pct = (game_state.times_won * 100) / game_state.number_of_games;
				uint32_t switching_win_pct = (game_state.times_switched_won * 100) / game_state.times_switched;
				uint32_t staying_win_pct = ((game_state.times_won-game_state.times_switched_won) * 100) 
  401798:	fbb1 f1f0 	udiv	r1, r1, r0
				                           / (game_state.number_of_games-game_state.times_switched);
				sprintf( result_disp, "Games Played: %d, Switch Count %d, Games Win %d%%, Switch Win %d%% Stay Win %d%%",
  40179c:	9102      	str	r1, [sp, #8]
  40179e:	a81c      	add	r0, sp, #112	; 0x70
  4017a0:	4913      	ldr	r1, [pc, #76]	; (4017f0 <main+0x3dc>)
  4017a2:	4c14      	ldr	r4, [pc, #80]	; (4017f4 <main+0x3e0>)
  4017a4:	47a0      	blx	r4
				         game_state.number_of_games,
						 game_state.times_switched,
						 win_pct,
						 switching_win_pct,
						 staying_win_pct );
				print_uart( result_disp, max_disp_string, max_uart_tries );
  4017a6:	4d14      	ldr	r5, [pc, #80]	; (4017f8 <main+0x3e4>)
  4017a8:	a81c      	add	r0, sp, #112	; 0x70
  4017aa:	2178      	movs	r1, #120	; 0x78
  4017ac:	462a      	mov	r2, r5
  4017ae:	4c13      	ldr	r4, [pc, #76]	; (4017fc <main+0x3e8>)
  4017b0:	47a0      	blx	r4
				print_uart( "Press a button to play again", max_disp_string, max_uart_tries );
  4017b2:	4813      	ldr	r0, [pc, #76]	; (401800 <main+0x3ec>)
  4017b4:	2178      	movs	r1, #120	; 0x78
  4017b6:	462a      	mov	r2, r5
  4017b8:	47a0      	blx	r4
				game_state.open_door = DOOR_NOT_PRESSED;
  4017ba:	2304      	movs	r3, #4
  4017bc:	931a      	str	r3, [sp, #104]	; 0x68
  4017be:	2301      	movs	r3, #1
  4017c0:	9305      	str	r3, [sp, #20]
  4017c2:	e001      	b.n	4017c8 <main+0x3b4>
  4017c4:	2300      	movs	r3, #0
  4017c6:	9305      	str	r3, [sp, #20]
  4017c8:	f04f 0a00 	mov.w	sl, #0
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4017cc:	f8df b010 	ldr.w	fp, [pc, #16]	; 4017e0 <main+0x3cc>
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  4017d0:	f8df 8030 	ldr.w	r8, [pc, #48]	; 401804 <main+0x3f0>
  4017d4:	e77c      	b.n	4016d0 <main+0x2bc>
  4017d6:	bf00      	nop
  4017d8:	20000001 	.word	0x20000001
  4017dc:	004004c9 	.word	0x004004c9
  4017e0:	004010a5 	.word	0x004010a5
  4017e4:	0040027d 	.word	0x0040027d
  4017e8:	004010ed 	.word	0x004010ed
  4017ec:	00068a1c 	.word	0x00068a1c
  4017f0:	0040619c 	.word	0x0040619c
  4017f4:	00402085 	.word	0x00402085
  4017f8:	000f4240 	.word	0x000f4240
  4017fc:	004013b1 	.word	0x004013b1
  401800:	004061f0 	.word	0x004061f0
  401804:	00400499 	.word	0x00400499

00401808 <__aeabi_drsub>:
  401808:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40180c:	e002      	b.n	401814 <__adddf3>
  40180e:	bf00      	nop

00401810 <__aeabi_dsub>:
  401810:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401814 <__adddf3>:
  401814:	b530      	push	{r4, r5, lr}
  401816:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40181a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40181e:	ea94 0f05 	teq	r4, r5
  401822:	bf08      	it	eq
  401824:	ea90 0f02 	teqeq	r0, r2
  401828:	bf1f      	itttt	ne
  40182a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40182e:	ea55 0c02 	orrsne.w	ip, r5, r2
  401832:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401836:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40183a:	f000 80e2 	beq.w	401a02 <__adddf3+0x1ee>
  40183e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401842:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401846:	bfb8      	it	lt
  401848:	426d      	neglt	r5, r5
  40184a:	dd0c      	ble.n	401866 <__adddf3+0x52>
  40184c:	442c      	add	r4, r5
  40184e:	ea80 0202 	eor.w	r2, r0, r2
  401852:	ea81 0303 	eor.w	r3, r1, r3
  401856:	ea82 0000 	eor.w	r0, r2, r0
  40185a:	ea83 0101 	eor.w	r1, r3, r1
  40185e:	ea80 0202 	eor.w	r2, r0, r2
  401862:	ea81 0303 	eor.w	r3, r1, r3
  401866:	2d36      	cmp	r5, #54	; 0x36
  401868:	bf88      	it	hi
  40186a:	bd30      	pophi	{r4, r5, pc}
  40186c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401870:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401874:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401878:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40187c:	d002      	beq.n	401884 <__adddf3+0x70>
  40187e:	4240      	negs	r0, r0
  401880:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401884:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401888:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40188c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401890:	d002      	beq.n	401898 <__adddf3+0x84>
  401892:	4252      	negs	r2, r2
  401894:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401898:	ea94 0f05 	teq	r4, r5
  40189c:	f000 80a7 	beq.w	4019ee <__adddf3+0x1da>
  4018a0:	f1a4 0401 	sub.w	r4, r4, #1
  4018a4:	f1d5 0e20 	rsbs	lr, r5, #32
  4018a8:	db0d      	blt.n	4018c6 <__adddf3+0xb2>
  4018aa:	fa02 fc0e 	lsl.w	ip, r2, lr
  4018ae:	fa22 f205 	lsr.w	r2, r2, r5
  4018b2:	1880      	adds	r0, r0, r2
  4018b4:	f141 0100 	adc.w	r1, r1, #0
  4018b8:	fa03 f20e 	lsl.w	r2, r3, lr
  4018bc:	1880      	adds	r0, r0, r2
  4018be:	fa43 f305 	asr.w	r3, r3, r5
  4018c2:	4159      	adcs	r1, r3
  4018c4:	e00e      	b.n	4018e4 <__adddf3+0xd0>
  4018c6:	f1a5 0520 	sub.w	r5, r5, #32
  4018ca:	f10e 0e20 	add.w	lr, lr, #32
  4018ce:	2a01      	cmp	r2, #1
  4018d0:	fa03 fc0e 	lsl.w	ip, r3, lr
  4018d4:	bf28      	it	cs
  4018d6:	f04c 0c02 	orrcs.w	ip, ip, #2
  4018da:	fa43 f305 	asr.w	r3, r3, r5
  4018de:	18c0      	adds	r0, r0, r3
  4018e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4018e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4018e8:	d507      	bpl.n	4018fa <__adddf3+0xe6>
  4018ea:	f04f 0e00 	mov.w	lr, #0
  4018ee:	f1dc 0c00 	rsbs	ip, ip, #0
  4018f2:	eb7e 0000 	sbcs.w	r0, lr, r0
  4018f6:	eb6e 0101 	sbc.w	r1, lr, r1
  4018fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4018fe:	d31b      	bcc.n	401938 <__adddf3+0x124>
  401900:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401904:	d30c      	bcc.n	401920 <__adddf3+0x10c>
  401906:	0849      	lsrs	r1, r1, #1
  401908:	ea5f 0030 	movs.w	r0, r0, rrx
  40190c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401910:	f104 0401 	add.w	r4, r4, #1
  401914:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401918:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40191c:	f080 809a 	bcs.w	401a54 <__adddf3+0x240>
  401920:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401924:	bf08      	it	eq
  401926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40192a:	f150 0000 	adcs.w	r0, r0, #0
  40192e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401932:	ea41 0105 	orr.w	r1, r1, r5
  401936:	bd30      	pop	{r4, r5, pc}
  401938:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40193c:	4140      	adcs	r0, r0
  40193e:	eb41 0101 	adc.w	r1, r1, r1
  401942:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401946:	f1a4 0401 	sub.w	r4, r4, #1
  40194a:	d1e9      	bne.n	401920 <__adddf3+0x10c>
  40194c:	f091 0f00 	teq	r1, #0
  401950:	bf04      	itt	eq
  401952:	4601      	moveq	r1, r0
  401954:	2000      	moveq	r0, #0
  401956:	fab1 f381 	clz	r3, r1
  40195a:	bf08      	it	eq
  40195c:	3320      	addeq	r3, #32
  40195e:	f1a3 030b 	sub.w	r3, r3, #11
  401962:	f1b3 0220 	subs.w	r2, r3, #32
  401966:	da0c      	bge.n	401982 <__adddf3+0x16e>
  401968:	320c      	adds	r2, #12
  40196a:	dd08      	ble.n	40197e <__adddf3+0x16a>
  40196c:	f102 0c14 	add.w	ip, r2, #20
  401970:	f1c2 020c 	rsb	r2, r2, #12
  401974:	fa01 f00c 	lsl.w	r0, r1, ip
  401978:	fa21 f102 	lsr.w	r1, r1, r2
  40197c:	e00c      	b.n	401998 <__adddf3+0x184>
  40197e:	f102 0214 	add.w	r2, r2, #20
  401982:	bfd8      	it	le
  401984:	f1c2 0c20 	rsble	ip, r2, #32
  401988:	fa01 f102 	lsl.w	r1, r1, r2
  40198c:	fa20 fc0c 	lsr.w	ip, r0, ip
  401990:	bfdc      	itt	le
  401992:	ea41 010c 	orrle.w	r1, r1, ip
  401996:	4090      	lslle	r0, r2
  401998:	1ae4      	subs	r4, r4, r3
  40199a:	bfa2      	ittt	ge
  40199c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4019a0:	4329      	orrge	r1, r5
  4019a2:	bd30      	popge	{r4, r5, pc}
  4019a4:	ea6f 0404 	mvn.w	r4, r4
  4019a8:	3c1f      	subs	r4, #31
  4019aa:	da1c      	bge.n	4019e6 <__adddf3+0x1d2>
  4019ac:	340c      	adds	r4, #12
  4019ae:	dc0e      	bgt.n	4019ce <__adddf3+0x1ba>
  4019b0:	f104 0414 	add.w	r4, r4, #20
  4019b4:	f1c4 0220 	rsb	r2, r4, #32
  4019b8:	fa20 f004 	lsr.w	r0, r0, r4
  4019bc:	fa01 f302 	lsl.w	r3, r1, r2
  4019c0:	ea40 0003 	orr.w	r0, r0, r3
  4019c4:	fa21 f304 	lsr.w	r3, r1, r4
  4019c8:	ea45 0103 	orr.w	r1, r5, r3
  4019cc:	bd30      	pop	{r4, r5, pc}
  4019ce:	f1c4 040c 	rsb	r4, r4, #12
  4019d2:	f1c4 0220 	rsb	r2, r4, #32
  4019d6:	fa20 f002 	lsr.w	r0, r0, r2
  4019da:	fa01 f304 	lsl.w	r3, r1, r4
  4019de:	ea40 0003 	orr.w	r0, r0, r3
  4019e2:	4629      	mov	r1, r5
  4019e4:	bd30      	pop	{r4, r5, pc}
  4019e6:	fa21 f004 	lsr.w	r0, r1, r4
  4019ea:	4629      	mov	r1, r5
  4019ec:	bd30      	pop	{r4, r5, pc}
  4019ee:	f094 0f00 	teq	r4, #0
  4019f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4019f6:	bf06      	itte	eq
  4019f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4019fc:	3401      	addeq	r4, #1
  4019fe:	3d01      	subne	r5, #1
  401a00:	e74e      	b.n	4018a0 <__adddf3+0x8c>
  401a02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401a06:	bf18      	it	ne
  401a08:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401a0c:	d029      	beq.n	401a62 <__adddf3+0x24e>
  401a0e:	ea94 0f05 	teq	r4, r5
  401a12:	bf08      	it	eq
  401a14:	ea90 0f02 	teqeq	r0, r2
  401a18:	d005      	beq.n	401a26 <__adddf3+0x212>
  401a1a:	ea54 0c00 	orrs.w	ip, r4, r0
  401a1e:	bf04      	itt	eq
  401a20:	4619      	moveq	r1, r3
  401a22:	4610      	moveq	r0, r2
  401a24:	bd30      	pop	{r4, r5, pc}
  401a26:	ea91 0f03 	teq	r1, r3
  401a2a:	bf1e      	ittt	ne
  401a2c:	2100      	movne	r1, #0
  401a2e:	2000      	movne	r0, #0
  401a30:	bd30      	popne	{r4, r5, pc}
  401a32:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401a36:	d105      	bne.n	401a44 <__adddf3+0x230>
  401a38:	0040      	lsls	r0, r0, #1
  401a3a:	4149      	adcs	r1, r1
  401a3c:	bf28      	it	cs
  401a3e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401a42:	bd30      	pop	{r4, r5, pc}
  401a44:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401a48:	bf3c      	itt	cc
  401a4a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  401a4e:	bd30      	popcc	{r4, r5, pc}
  401a50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401a54:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401a58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401a5c:	f04f 0000 	mov.w	r0, #0
  401a60:	bd30      	pop	{r4, r5, pc}
  401a62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401a66:	bf1a      	itte	ne
  401a68:	4619      	movne	r1, r3
  401a6a:	4610      	movne	r0, r2
  401a6c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401a70:	bf1c      	itt	ne
  401a72:	460b      	movne	r3, r1
  401a74:	4602      	movne	r2, r0
  401a76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401a7a:	bf06      	itte	eq
  401a7c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401a80:	ea91 0f03 	teqeq	r1, r3
  401a84:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401a88:	bd30      	pop	{r4, r5, pc}
  401a8a:	bf00      	nop

00401a8c <__aeabi_ui2d>:
  401a8c:	f090 0f00 	teq	r0, #0
  401a90:	bf04      	itt	eq
  401a92:	2100      	moveq	r1, #0
  401a94:	4770      	bxeq	lr
  401a96:	b530      	push	{r4, r5, lr}
  401a98:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401a9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401aa0:	f04f 0500 	mov.w	r5, #0
  401aa4:	f04f 0100 	mov.w	r1, #0
  401aa8:	e750      	b.n	40194c <__adddf3+0x138>
  401aaa:	bf00      	nop

00401aac <__aeabi_i2d>:
  401aac:	f090 0f00 	teq	r0, #0
  401ab0:	bf04      	itt	eq
  401ab2:	2100      	moveq	r1, #0
  401ab4:	4770      	bxeq	lr
  401ab6:	b530      	push	{r4, r5, lr}
  401ab8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401abc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401ac0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401ac4:	bf48      	it	mi
  401ac6:	4240      	negmi	r0, r0
  401ac8:	f04f 0100 	mov.w	r1, #0
  401acc:	e73e      	b.n	40194c <__adddf3+0x138>
  401ace:	bf00      	nop

00401ad0 <__aeabi_f2d>:
  401ad0:	0042      	lsls	r2, r0, #1
  401ad2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401ad6:	ea4f 0131 	mov.w	r1, r1, rrx
  401ada:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401ade:	bf1f      	itttt	ne
  401ae0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401ae4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401ae8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401aec:	4770      	bxne	lr
  401aee:	f092 0f00 	teq	r2, #0
  401af2:	bf14      	ite	ne
  401af4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401af8:	4770      	bxeq	lr
  401afa:	b530      	push	{r4, r5, lr}
  401afc:	f44f 7460 	mov.w	r4, #896	; 0x380
  401b00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401b04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401b08:	e720      	b.n	40194c <__adddf3+0x138>
  401b0a:	bf00      	nop

00401b0c <__aeabi_ul2d>:
  401b0c:	ea50 0201 	orrs.w	r2, r0, r1
  401b10:	bf08      	it	eq
  401b12:	4770      	bxeq	lr
  401b14:	b530      	push	{r4, r5, lr}
  401b16:	f04f 0500 	mov.w	r5, #0
  401b1a:	e00a      	b.n	401b32 <__aeabi_l2d+0x16>

00401b1c <__aeabi_l2d>:
  401b1c:	ea50 0201 	orrs.w	r2, r0, r1
  401b20:	bf08      	it	eq
  401b22:	4770      	bxeq	lr
  401b24:	b530      	push	{r4, r5, lr}
  401b26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  401b2a:	d502      	bpl.n	401b32 <__aeabi_l2d+0x16>
  401b2c:	4240      	negs	r0, r0
  401b2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401b32:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401b36:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401b3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  401b3e:	f43f aedc 	beq.w	4018fa <__adddf3+0xe6>
  401b42:	f04f 0203 	mov.w	r2, #3
  401b46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401b4a:	bf18      	it	ne
  401b4c:	3203      	addne	r2, #3
  401b4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401b52:	bf18      	it	ne
  401b54:	3203      	addne	r2, #3
  401b56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  401b5a:	f1c2 0320 	rsb	r3, r2, #32
  401b5e:	fa00 fc03 	lsl.w	ip, r0, r3
  401b62:	fa20 f002 	lsr.w	r0, r0, r2
  401b66:	fa01 fe03 	lsl.w	lr, r1, r3
  401b6a:	ea40 000e 	orr.w	r0, r0, lr
  401b6e:	fa21 f102 	lsr.w	r1, r1, r2
  401b72:	4414      	add	r4, r2
  401b74:	e6c1      	b.n	4018fa <__adddf3+0xe6>
  401b76:	bf00      	nop

00401b78 <__aeabi_dmul>:
  401b78:	b570      	push	{r4, r5, r6, lr}
  401b7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401b7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401b82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401b86:	bf1d      	ittte	ne
  401b88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401b8c:	ea94 0f0c 	teqne	r4, ip
  401b90:	ea95 0f0c 	teqne	r5, ip
  401b94:	f000 f8de 	bleq	401d54 <__aeabi_dmul+0x1dc>
  401b98:	442c      	add	r4, r5
  401b9a:	ea81 0603 	eor.w	r6, r1, r3
  401b9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  401ba2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  401ba6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  401baa:	bf18      	it	ne
  401bac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  401bb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401bb8:	d038      	beq.n	401c2c <__aeabi_dmul+0xb4>
  401bba:	fba0 ce02 	umull	ip, lr, r0, r2
  401bbe:	f04f 0500 	mov.w	r5, #0
  401bc2:	fbe1 e502 	umlal	lr, r5, r1, r2
  401bc6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  401bca:	fbe0 e503 	umlal	lr, r5, r0, r3
  401bce:	f04f 0600 	mov.w	r6, #0
  401bd2:	fbe1 5603 	umlal	r5, r6, r1, r3
  401bd6:	f09c 0f00 	teq	ip, #0
  401bda:	bf18      	it	ne
  401bdc:	f04e 0e01 	orrne.w	lr, lr, #1
  401be0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  401be4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  401be8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  401bec:	d204      	bcs.n	401bf8 <__aeabi_dmul+0x80>
  401bee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  401bf2:	416d      	adcs	r5, r5
  401bf4:	eb46 0606 	adc.w	r6, r6, r6
  401bf8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  401bfc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  401c00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  401c04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  401c08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  401c0c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401c10:	bf88      	it	hi
  401c12:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401c16:	d81e      	bhi.n	401c56 <__aeabi_dmul+0xde>
  401c18:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  401c1c:	bf08      	it	eq
  401c1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  401c22:	f150 0000 	adcs.w	r0, r0, #0
  401c26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401c2a:	bd70      	pop	{r4, r5, r6, pc}
  401c2c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  401c30:	ea46 0101 	orr.w	r1, r6, r1
  401c34:	ea40 0002 	orr.w	r0, r0, r2
  401c38:	ea81 0103 	eor.w	r1, r1, r3
  401c3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  401c40:	bfc2      	ittt	gt
  401c42:	ebd4 050c 	rsbsgt	r5, r4, ip
  401c46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401c4a:	bd70      	popgt	{r4, r5, r6, pc}
  401c4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401c50:	f04f 0e00 	mov.w	lr, #0
  401c54:	3c01      	subs	r4, #1
  401c56:	f300 80ab 	bgt.w	401db0 <__aeabi_dmul+0x238>
  401c5a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  401c5e:	bfde      	ittt	le
  401c60:	2000      	movle	r0, #0
  401c62:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  401c66:	bd70      	pople	{r4, r5, r6, pc}
  401c68:	f1c4 0400 	rsb	r4, r4, #0
  401c6c:	3c20      	subs	r4, #32
  401c6e:	da35      	bge.n	401cdc <__aeabi_dmul+0x164>
  401c70:	340c      	adds	r4, #12
  401c72:	dc1b      	bgt.n	401cac <__aeabi_dmul+0x134>
  401c74:	f104 0414 	add.w	r4, r4, #20
  401c78:	f1c4 0520 	rsb	r5, r4, #32
  401c7c:	fa00 f305 	lsl.w	r3, r0, r5
  401c80:	fa20 f004 	lsr.w	r0, r0, r4
  401c84:	fa01 f205 	lsl.w	r2, r1, r5
  401c88:	ea40 0002 	orr.w	r0, r0, r2
  401c8c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  401c90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401c94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401c98:	fa21 f604 	lsr.w	r6, r1, r4
  401c9c:	eb42 0106 	adc.w	r1, r2, r6
  401ca0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401ca4:	bf08      	it	eq
  401ca6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401caa:	bd70      	pop	{r4, r5, r6, pc}
  401cac:	f1c4 040c 	rsb	r4, r4, #12
  401cb0:	f1c4 0520 	rsb	r5, r4, #32
  401cb4:	fa00 f304 	lsl.w	r3, r0, r4
  401cb8:	fa20 f005 	lsr.w	r0, r0, r5
  401cbc:	fa01 f204 	lsl.w	r2, r1, r4
  401cc0:	ea40 0002 	orr.w	r0, r0, r2
  401cc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401cc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401ccc:	f141 0100 	adc.w	r1, r1, #0
  401cd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401cd4:	bf08      	it	eq
  401cd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401cda:	bd70      	pop	{r4, r5, r6, pc}
  401cdc:	f1c4 0520 	rsb	r5, r4, #32
  401ce0:	fa00 f205 	lsl.w	r2, r0, r5
  401ce4:	ea4e 0e02 	orr.w	lr, lr, r2
  401ce8:	fa20 f304 	lsr.w	r3, r0, r4
  401cec:	fa01 f205 	lsl.w	r2, r1, r5
  401cf0:	ea43 0302 	orr.w	r3, r3, r2
  401cf4:	fa21 f004 	lsr.w	r0, r1, r4
  401cf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401cfc:	fa21 f204 	lsr.w	r2, r1, r4
  401d00:	ea20 0002 	bic.w	r0, r0, r2
  401d04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  401d08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401d0c:	bf08      	it	eq
  401d0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401d12:	bd70      	pop	{r4, r5, r6, pc}
  401d14:	f094 0f00 	teq	r4, #0
  401d18:	d10f      	bne.n	401d3a <__aeabi_dmul+0x1c2>
  401d1a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  401d1e:	0040      	lsls	r0, r0, #1
  401d20:	eb41 0101 	adc.w	r1, r1, r1
  401d24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401d28:	bf08      	it	eq
  401d2a:	3c01      	subeq	r4, #1
  401d2c:	d0f7      	beq.n	401d1e <__aeabi_dmul+0x1a6>
  401d2e:	ea41 0106 	orr.w	r1, r1, r6
  401d32:	f095 0f00 	teq	r5, #0
  401d36:	bf18      	it	ne
  401d38:	4770      	bxne	lr
  401d3a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  401d3e:	0052      	lsls	r2, r2, #1
  401d40:	eb43 0303 	adc.w	r3, r3, r3
  401d44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  401d48:	bf08      	it	eq
  401d4a:	3d01      	subeq	r5, #1
  401d4c:	d0f7      	beq.n	401d3e <__aeabi_dmul+0x1c6>
  401d4e:	ea43 0306 	orr.w	r3, r3, r6
  401d52:	4770      	bx	lr
  401d54:	ea94 0f0c 	teq	r4, ip
  401d58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401d5c:	bf18      	it	ne
  401d5e:	ea95 0f0c 	teqne	r5, ip
  401d62:	d00c      	beq.n	401d7e <__aeabi_dmul+0x206>
  401d64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401d68:	bf18      	it	ne
  401d6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401d6e:	d1d1      	bne.n	401d14 <__aeabi_dmul+0x19c>
  401d70:	ea81 0103 	eor.w	r1, r1, r3
  401d74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401d78:	f04f 0000 	mov.w	r0, #0
  401d7c:	bd70      	pop	{r4, r5, r6, pc}
  401d7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401d82:	bf06      	itte	eq
  401d84:	4610      	moveq	r0, r2
  401d86:	4619      	moveq	r1, r3
  401d88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401d8c:	d019      	beq.n	401dc2 <__aeabi_dmul+0x24a>
  401d8e:	ea94 0f0c 	teq	r4, ip
  401d92:	d102      	bne.n	401d9a <__aeabi_dmul+0x222>
  401d94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  401d98:	d113      	bne.n	401dc2 <__aeabi_dmul+0x24a>
  401d9a:	ea95 0f0c 	teq	r5, ip
  401d9e:	d105      	bne.n	401dac <__aeabi_dmul+0x234>
  401da0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  401da4:	bf1c      	itt	ne
  401da6:	4610      	movne	r0, r2
  401da8:	4619      	movne	r1, r3
  401daa:	d10a      	bne.n	401dc2 <__aeabi_dmul+0x24a>
  401dac:	ea81 0103 	eor.w	r1, r1, r3
  401db0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401db4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401db8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401dbc:	f04f 0000 	mov.w	r0, #0
  401dc0:	bd70      	pop	{r4, r5, r6, pc}
  401dc2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401dc6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  401dca:	bd70      	pop	{r4, r5, r6, pc}

00401dcc <__aeabi_ddiv>:
  401dcc:	b570      	push	{r4, r5, r6, lr}
  401dce:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401dd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401dd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401dda:	bf1d      	ittte	ne
  401ddc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401de0:	ea94 0f0c 	teqne	r4, ip
  401de4:	ea95 0f0c 	teqne	r5, ip
  401de8:	f000 f8a7 	bleq	401f3a <__aeabi_ddiv+0x16e>
  401dec:	eba4 0405 	sub.w	r4, r4, r5
  401df0:	ea81 0e03 	eor.w	lr, r1, r3
  401df4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401df8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401dfc:	f000 8088 	beq.w	401f10 <__aeabi_ddiv+0x144>
  401e00:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401e04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  401e08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  401e0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  401e10:	ea4f 2202 	mov.w	r2, r2, lsl #8
  401e14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  401e18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  401e1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  401e20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  401e24:	429d      	cmp	r5, r3
  401e26:	bf08      	it	eq
  401e28:	4296      	cmpeq	r6, r2
  401e2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  401e2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  401e32:	d202      	bcs.n	401e3a <__aeabi_ddiv+0x6e>
  401e34:	085b      	lsrs	r3, r3, #1
  401e36:	ea4f 0232 	mov.w	r2, r2, rrx
  401e3a:	1ab6      	subs	r6, r6, r2
  401e3c:	eb65 0503 	sbc.w	r5, r5, r3
  401e40:	085b      	lsrs	r3, r3, #1
  401e42:	ea4f 0232 	mov.w	r2, r2, rrx
  401e46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  401e4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  401e4e:	ebb6 0e02 	subs.w	lr, r6, r2
  401e52:	eb75 0e03 	sbcs.w	lr, r5, r3
  401e56:	bf22      	ittt	cs
  401e58:	1ab6      	subcs	r6, r6, r2
  401e5a:	4675      	movcs	r5, lr
  401e5c:	ea40 000c 	orrcs.w	r0, r0, ip
  401e60:	085b      	lsrs	r3, r3, #1
  401e62:	ea4f 0232 	mov.w	r2, r2, rrx
  401e66:	ebb6 0e02 	subs.w	lr, r6, r2
  401e6a:	eb75 0e03 	sbcs.w	lr, r5, r3
  401e6e:	bf22      	ittt	cs
  401e70:	1ab6      	subcs	r6, r6, r2
  401e72:	4675      	movcs	r5, lr
  401e74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  401e78:	085b      	lsrs	r3, r3, #1
  401e7a:	ea4f 0232 	mov.w	r2, r2, rrx
  401e7e:	ebb6 0e02 	subs.w	lr, r6, r2
  401e82:	eb75 0e03 	sbcs.w	lr, r5, r3
  401e86:	bf22      	ittt	cs
  401e88:	1ab6      	subcs	r6, r6, r2
  401e8a:	4675      	movcs	r5, lr
  401e8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  401e90:	085b      	lsrs	r3, r3, #1
  401e92:	ea4f 0232 	mov.w	r2, r2, rrx
  401e96:	ebb6 0e02 	subs.w	lr, r6, r2
  401e9a:	eb75 0e03 	sbcs.w	lr, r5, r3
  401e9e:	bf22      	ittt	cs
  401ea0:	1ab6      	subcs	r6, r6, r2
  401ea2:	4675      	movcs	r5, lr
  401ea4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  401ea8:	ea55 0e06 	orrs.w	lr, r5, r6
  401eac:	d018      	beq.n	401ee0 <__aeabi_ddiv+0x114>
  401eae:	ea4f 1505 	mov.w	r5, r5, lsl #4
  401eb2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  401eb6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  401eba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  401ebe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  401ec2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  401ec6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  401eca:	d1c0      	bne.n	401e4e <__aeabi_ddiv+0x82>
  401ecc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401ed0:	d10b      	bne.n	401eea <__aeabi_ddiv+0x11e>
  401ed2:	ea41 0100 	orr.w	r1, r1, r0
  401ed6:	f04f 0000 	mov.w	r0, #0
  401eda:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  401ede:	e7b6      	b.n	401e4e <__aeabi_ddiv+0x82>
  401ee0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401ee4:	bf04      	itt	eq
  401ee6:	4301      	orreq	r1, r0
  401ee8:	2000      	moveq	r0, #0
  401eea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401eee:	bf88      	it	hi
  401ef0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401ef4:	f63f aeaf 	bhi.w	401c56 <__aeabi_dmul+0xde>
  401ef8:	ebb5 0c03 	subs.w	ip, r5, r3
  401efc:	bf04      	itt	eq
  401efe:	ebb6 0c02 	subseq.w	ip, r6, r2
  401f02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401f06:	f150 0000 	adcs.w	r0, r0, #0
  401f0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401f0e:	bd70      	pop	{r4, r5, r6, pc}
  401f10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  401f14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  401f18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  401f1c:	bfc2      	ittt	gt
  401f1e:	ebd4 050c 	rsbsgt	r5, r4, ip
  401f22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401f26:	bd70      	popgt	{r4, r5, r6, pc}
  401f28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401f2c:	f04f 0e00 	mov.w	lr, #0
  401f30:	3c01      	subs	r4, #1
  401f32:	e690      	b.n	401c56 <__aeabi_dmul+0xde>
  401f34:	ea45 0e06 	orr.w	lr, r5, r6
  401f38:	e68d      	b.n	401c56 <__aeabi_dmul+0xde>
  401f3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401f3e:	ea94 0f0c 	teq	r4, ip
  401f42:	bf08      	it	eq
  401f44:	ea95 0f0c 	teqeq	r5, ip
  401f48:	f43f af3b 	beq.w	401dc2 <__aeabi_dmul+0x24a>
  401f4c:	ea94 0f0c 	teq	r4, ip
  401f50:	d10a      	bne.n	401f68 <__aeabi_ddiv+0x19c>
  401f52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401f56:	f47f af34 	bne.w	401dc2 <__aeabi_dmul+0x24a>
  401f5a:	ea95 0f0c 	teq	r5, ip
  401f5e:	f47f af25 	bne.w	401dac <__aeabi_dmul+0x234>
  401f62:	4610      	mov	r0, r2
  401f64:	4619      	mov	r1, r3
  401f66:	e72c      	b.n	401dc2 <__aeabi_dmul+0x24a>
  401f68:	ea95 0f0c 	teq	r5, ip
  401f6c:	d106      	bne.n	401f7c <__aeabi_ddiv+0x1b0>
  401f6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  401f72:	f43f aefd 	beq.w	401d70 <__aeabi_dmul+0x1f8>
  401f76:	4610      	mov	r0, r2
  401f78:	4619      	mov	r1, r3
  401f7a:	e722      	b.n	401dc2 <__aeabi_dmul+0x24a>
  401f7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401f80:	bf18      	it	ne
  401f82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401f86:	f47f aec5 	bne.w	401d14 <__aeabi_dmul+0x19c>
  401f8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  401f8e:	f47f af0d 	bne.w	401dac <__aeabi_dmul+0x234>
  401f92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  401f96:	f47f aeeb 	bne.w	401d70 <__aeabi_dmul+0x1f8>
  401f9a:	e712      	b.n	401dc2 <__aeabi_dmul+0x24a>

00401f9c <__libc_init_array>:
  401f9c:	b570      	push	{r4, r5, r6, lr}
  401f9e:	4b0e      	ldr	r3, [pc, #56]	; (401fd8 <__libc_init_array+0x3c>)
  401fa0:	4d0e      	ldr	r5, [pc, #56]	; (401fdc <__libc_init_array+0x40>)
  401fa2:	1aed      	subs	r5, r5, r3
  401fa4:	10ad      	asrs	r5, r5, #2
  401fa6:	2400      	movs	r4, #0
  401fa8:	461e      	mov	r6, r3
  401faa:	42ac      	cmp	r4, r5
  401fac:	d004      	beq.n	401fb8 <__libc_init_array+0x1c>
  401fae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  401fb2:	4790      	blx	r2
  401fb4:	3401      	adds	r4, #1
  401fb6:	e7f8      	b.n	401faa <__libc_init_array+0xe>
  401fb8:	f004 fa06 	bl	4063c8 <_init>
  401fbc:	4d08      	ldr	r5, [pc, #32]	; (401fe0 <__libc_init_array+0x44>)
  401fbe:	4b09      	ldr	r3, [pc, #36]	; (401fe4 <__libc_init_array+0x48>)
  401fc0:	1aed      	subs	r5, r5, r3
  401fc2:	10ad      	asrs	r5, r5, #2
  401fc4:	2400      	movs	r4, #0
  401fc6:	461e      	mov	r6, r3
  401fc8:	42ac      	cmp	r4, r5
  401fca:	d004      	beq.n	401fd6 <__libc_init_array+0x3a>
  401fcc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  401fd0:	4790      	blx	r2
  401fd2:	3401      	adds	r4, #1
  401fd4:	e7f8      	b.n	401fc8 <__libc_init_array+0x2c>
  401fd6:	bd70      	pop	{r4, r5, r6, pc}
  401fd8:	004063d4 	.word	0x004063d4
  401fdc:	004063d4 	.word	0x004063d4
  401fe0:	004063dc 	.word	0x004063dc
  401fe4:	004063d4 	.word	0x004063d4

00401fe8 <memset>:
  401fe8:	4402      	add	r2, r0
  401fea:	4603      	mov	r3, r0
  401fec:	4293      	cmp	r3, r2
  401fee:	d002      	beq.n	401ff6 <memset+0xe>
  401ff0:	f803 1b01 	strb.w	r1, [r3], #1
  401ff4:	e7fa      	b.n	401fec <memset+0x4>
  401ff6:	4770      	bx	lr

00401ff8 <srand>:
  401ff8:	4b02      	ldr	r3, [pc, #8]	; (402004 <srand+0xc>)
  401ffa:	681b      	ldr	r3, [r3, #0]
  401ffc:	2100      	movs	r1, #0
  401ffe:	e9c3 012a 	strd	r0, r1, [r3, #168]	; 0xa8
  402002:	4770      	bx	lr
  402004:	20000410 	.word	0x20000410

00402008 <rand>:
  402008:	b510      	push	{r4, lr}
  40200a:	4b0b      	ldr	r3, [pc, #44]	; (402038 <rand+0x30>)
  40200c:	4c0b      	ldr	r4, [pc, #44]	; (40203c <rand+0x34>)
  40200e:	6819      	ldr	r1, [r3, #0]
  402010:	4b0b      	ldr	r3, [pc, #44]	; (402040 <rand+0x38>)
  402012:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
  402016:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
  40201a:	4354      	muls	r4, r2
  40201c:	fb03 4000 	mla	r0, r3, r0, r4
  402020:	fba2 2303 	umull	r2, r3, r2, r3
  402024:	3201      	adds	r2, #1
  402026:	4403      	add	r3, r0
  402028:	f143 0300 	adc.w	r3, r3, #0
  40202c:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
  402030:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
  402034:	bd10      	pop	{r4, pc}
  402036:	bf00      	nop
  402038:	20000410 	.word	0x20000410
  40203c:	5851f42d 	.word	0x5851f42d
  402040:	4c957f2d 	.word	0x4c957f2d

00402044 <_sprintf_r>:
  402044:	b40c      	push	{r2, r3}
  402046:	b510      	push	{r4, lr}
  402048:	b09c      	sub	sp, #112	; 0x70
  40204a:	ab1e      	add	r3, sp, #120	; 0x78
  40204c:	9102      	str	r1, [sp, #8]
  40204e:	9106      	str	r1, [sp, #24]
  402050:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402054:	9104      	str	r1, [sp, #16]
  402056:	9107      	str	r1, [sp, #28]
  402058:	f64f 71ff 	movw	r1, #65535	; 0xffff
  40205c:	f853 2b04 	ldr.w	r2, [r3], #4
  402060:	f8ad 1016 	strh.w	r1, [sp, #22]
  402064:	f44f 7402 	mov.w	r4, #520	; 0x208
  402068:	a902      	add	r1, sp, #8
  40206a:	9301      	str	r3, [sp, #4]
  40206c:	f8ad 4014 	strh.w	r4, [sp, #20]
  402070:	f000 f842 	bl	4020f8 <_svfprintf_r>
  402074:	9b02      	ldr	r3, [sp, #8]
  402076:	2200      	movs	r2, #0
  402078:	701a      	strb	r2, [r3, #0]
  40207a:	b01c      	add	sp, #112	; 0x70
  40207c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402080:	b002      	add	sp, #8
  402082:	4770      	bx	lr

00402084 <sprintf>:
  402084:	b40e      	push	{r1, r2, r3}
  402086:	b500      	push	{lr}
  402088:	b09c      	sub	sp, #112	; 0x70
  40208a:	f44f 7102 	mov.w	r1, #520	; 0x208
  40208e:	f8ad 1014 	strh.w	r1, [sp, #20]
  402092:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402096:	9104      	str	r1, [sp, #16]
  402098:	9107      	str	r1, [sp, #28]
  40209a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  40209e:	ab1d      	add	r3, sp, #116	; 0x74
  4020a0:	f8ad 1016 	strh.w	r1, [sp, #22]
  4020a4:	4908      	ldr	r1, [pc, #32]	; (4020c8 <sprintf+0x44>)
  4020a6:	f853 2b04 	ldr.w	r2, [r3], #4
  4020aa:	9002      	str	r0, [sp, #8]
  4020ac:	9006      	str	r0, [sp, #24]
  4020ae:	6808      	ldr	r0, [r1, #0]
  4020b0:	9301      	str	r3, [sp, #4]
  4020b2:	a902      	add	r1, sp, #8
  4020b4:	f000 f820 	bl	4020f8 <_svfprintf_r>
  4020b8:	9b02      	ldr	r3, [sp, #8]
  4020ba:	2200      	movs	r2, #0
  4020bc:	701a      	strb	r2, [r3, #0]
  4020be:	b01c      	add	sp, #112	; 0x70
  4020c0:	f85d eb04 	ldr.w	lr, [sp], #4
  4020c4:	b003      	add	sp, #12
  4020c6:	4770      	bx	lr
  4020c8:	20000410 	.word	0x20000410

004020cc <strlen>:
  4020cc:	4603      	mov	r3, r0
  4020ce:	f813 2b01 	ldrb.w	r2, [r3], #1
  4020d2:	2a00      	cmp	r2, #0
  4020d4:	d1fb      	bne.n	4020ce <strlen+0x2>
  4020d6:	1a18      	subs	r0, r3, r0
  4020d8:	3801      	subs	r0, #1
  4020da:	4770      	bx	lr

004020dc <strnlen>:
  4020dc:	b510      	push	{r4, lr}
  4020de:	4603      	mov	r3, r0
  4020e0:	4401      	add	r1, r0
  4020e2:	428b      	cmp	r3, r1
  4020e4:	461a      	mov	r2, r3
  4020e6:	d101      	bne.n	4020ec <strnlen+0x10>
  4020e8:	1a10      	subs	r0, r2, r0
  4020ea:	bd10      	pop	{r4, pc}
  4020ec:	7814      	ldrb	r4, [r2, #0]
  4020ee:	3301      	adds	r3, #1
  4020f0:	2c00      	cmp	r4, #0
  4020f2:	d1f6      	bne.n	4020e2 <strnlen+0x6>
  4020f4:	e7f8      	b.n	4020e8 <strnlen+0xc>
	...

004020f8 <_svfprintf_r>:
  4020f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4020fc:	b0c3      	sub	sp, #268	; 0x10c
  4020fe:	468b      	mov	fp, r1
  402100:	4698      	mov	r8, r3
  402102:	920b      	str	r2, [sp, #44]	; 0x2c
  402104:	4682      	mov	sl, r0
  402106:	f001 ff27 	bl	403f58 <_localeconv_r>
  40210a:	6800      	ldr	r0, [r0, #0]
  40210c:	9018      	str	r0, [sp, #96]	; 0x60
  40210e:	f7ff ffdd 	bl	4020cc <strlen>
  402112:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402116:	9010      	str	r0, [sp, #64]	; 0x40
  402118:	0619      	lsls	r1, r3, #24
  40211a:	d515      	bpl.n	402148 <_svfprintf_r+0x50>
  40211c:	f8db 3010 	ldr.w	r3, [fp, #16]
  402120:	b993      	cbnz	r3, 402148 <_svfprintf_r+0x50>
  402122:	4650      	mov	r0, sl
  402124:	2140      	movs	r1, #64	; 0x40
  402126:	f001 ff29 	bl	403f7c <_malloc_r>
  40212a:	f8cb 0000 	str.w	r0, [fp]
  40212e:	f8cb 0010 	str.w	r0, [fp, #16]
  402132:	b930      	cbnz	r0, 402142 <_svfprintf_r+0x4a>
  402134:	230c      	movs	r3, #12
  402136:	f8ca 3000 	str.w	r3, [sl]
  40213a:	f04f 30ff 	mov.w	r0, #4294967295
  40213e:	f000 bf6c 	b.w	40301a <_svfprintf_r+0xf22>
  402142:	2340      	movs	r3, #64	; 0x40
  402144:	f8cb 3014 	str.w	r3, [fp, #20]
  402148:	2400      	movs	r4, #0
  40214a:	2500      	movs	r5, #0
  40214c:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  402150:	2300      	movs	r3, #0
  402152:	ae32      	add	r6, sp, #200	; 0xc8
  402154:	9625      	str	r6, [sp, #148]	; 0x94
  402156:	9327      	str	r3, [sp, #156]	; 0x9c
  402158:	9326      	str	r3, [sp, #152]	; 0x98
  40215a:	9309      	str	r3, [sp, #36]	; 0x24
  40215c:	931b      	str	r3, [sp, #108]	; 0x6c
  40215e:	931a      	str	r3, [sp, #104]	; 0x68
  402160:	930f      	str	r3, [sp, #60]	; 0x3c
  402162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402164:	461c      	mov	r4, r3
  402166:	f813 2b01 	ldrb.w	r2, [r3], #1
  40216a:	b91a      	cbnz	r2, 402174 <_svfprintf_r+0x7c>
  40216c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40216e:	1a25      	subs	r5, r4, r0
  402170:	d103      	bne.n	40217a <_svfprintf_r+0x82>
  402172:	e01b      	b.n	4021ac <_svfprintf_r+0xb4>
  402174:	2a25      	cmp	r2, #37	; 0x25
  402176:	d1f5      	bne.n	402164 <_svfprintf_r+0x6c>
  402178:	e7f8      	b.n	40216c <_svfprintf_r+0x74>
  40217a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40217c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40217e:	442b      	add	r3, r5
  402180:	9327      	str	r3, [sp, #156]	; 0x9c
  402182:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402184:	3301      	adds	r3, #1
  402186:	2b07      	cmp	r3, #7
  402188:	e886 0022 	stmia.w	r6, {r1, r5}
  40218c:	9326      	str	r3, [sp, #152]	; 0x98
  40218e:	dc01      	bgt.n	402194 <_svfprintf_r+0x9c>
  402190:	3608      	adds	r6, #8
  402192:	e008      	b.n	4021a6 <_svfprintf_r+0xae>
  402194:	4650      	mov	r0, sl
  402196:	4659      	mov	r1, fp
  402198:	aa25      	add	r2, sp, #148	; 0x94
  40219a:	f002 fefd 	bl	404f98 <__ssprint_r>
  40219e:	2800      	cmp	r0, #0
  4021a0:	f040 8733 	bne.w	40300a <_svfprintf_r+0xf12>
  4021a4:	ae32      	add	r6, sp, #200	; 0xc8
  4021a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4021a8:	442a      	add	r2, r5
  4021aa:	920f      	str	r2, [sp, #60]	; 0x3c
  4021ac:	7823      	ldrb	r3, [r4, #0]
  4021ae:	2b00      	cmp	r3, #0
  4021b0:	f000 8724 	beq.w	402ffc <_svfprintf_r+0xf04>
  4021b4:	2300      	movs	r3, #0
  4021b6:	3401      	adds	r4, #1
  4021b8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4021bc:	f04f 39ff 	mov.w	r9, #4294967295
  4021c0:	930e      	str	r3, [sp, #56]	; 0x38
  4021c2:	461f      	mov	r7, r3
  4021c4:	1c65      	adds	r5, r4, #1
  4021c6:	7824      	ldrb	r4, [r4, #0]
  4021c8:	950b      	str	r5, [sp, #44]	; 0x2c
  4021ca:	9408      	str	r4, [sp, #32]
  4021cc:	9c08      	ldr	r4, [sp, #32]
  4021ce:	f1a4 0220 	sub.w	r2, r4, #32
  4021d2:	2a58      	cmp	r2, #88	; 0x58
  4021d4:	f200 8384 	bhi.w	4028e0 <_svfprintf_r+0x7e8>
  4021d8:	e8df f012 	tbh	[pc, r2, lsl #1]
  4021dc:	0382006d 	.word	0x0382006d
  4021e0:	00710382 	.word	0x00710382
  4021e4:	03820382 	.word	0x03820382
  4021e8:	03820382 	.word	0x03820382
  4021ec:	03820382 	.word	0x03820382
  4021f0:	0059005b 	.word	0x0059005b
  4021f4:	00770382 	.word	0x00770382
  4021f8:	0382007a 	.word	0x0382007a
  4021fc:	00a300a0 	.word	0x00a300a0
  402200:	00a300a3 	.word	0x00a300a3
  402204:	00a300a3 	.word	0x00a300a3
  402208:	00a300a3 	.word	0x00a300a3
  40220c:	00a300a3 	.word	0x00a300a3
  402210:	03820382 	.word	0x03820382
  402214:	03820382 	.word	0x03820382
  402218:	03820382 	.word	0x03820382
  40221c:	03820382 	.word	0x03820382
  402220:	03820382 	.word	0x03820382
  402224:	00ff00d4 	.word	0x00ff00d4
  402228:	00ff0382 	.word	0x00ff0382
  40222c:	03820382 	.word	0x03820382
  402230:	03820382 	.word	0x03820382
  402234:	038200b7 	.word	0x038200b7
  402238:	026a0382 	.word	0x026a0382
  40223c:	03820382 	.word	0x03820382
  402240:	03820382 	.word	0x03820382
  402244:	02ba0382 	.word	0x02ba0382
  402248:	03820382 	.word	0x03820382
  40224c:	03820068 	.word	0x03820068
  402250:	03820382 	.word	0x03820382
  402254:	03820382 	.word	0x03820382
  402258:	03820382 	.word	0x03820382
  40225c:	03820382 	.word	0x03820382
  402260:	00ca0382 	.word	0x00ca0382
  402264:	00ff0065 	.word	0x00ff0065
  402268:	00ff00ff 	.word	0x00ff00ff
  40226c:	006500ba 	.word	0x006500ba
  402270:	03820382 	.word	0x03820382
  402274:	038200bd 	.word	0x038200bd
  402278:	026c024b 	.word	0x026c024b
  40227c:	00c7028b 	.word	0x00c7028b
  402280:	029d0382 	.word	0x029d0382
  402284:	02bc0382 	.word	0x02bc0382
  402288:	03820382 	.word	0x03820382
  40228c:	02d7      	.short	0x02d7
  40228e:	232b      	movs	r3, #43	; 0x2b
  402290:	e007      	b.n	4022a2 <_svfprintf_r+0x1aa>
  402292:	f8d8 5000 	ldr.w	r5, [r8]
  402296:	950e      	str	r5, [sp, #56]	; 0x38
  402298:	2d00      	cmp	r5, #0
  40229a:	f108 0204 	add.w	r2, r8, #4
  40229e:	db11      	blt.n	4022c4 <_svfprintf_r+0x1cc>
  4022a0:	4690      	mov	r8, r2
  4022a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4022a4:	e78e      	b.n	4021c4 <_svfprintf_r+0xcc>
  4022a6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4022aa:	e06f      	b.n	40238c <_svfprintf_r+0x294>
  4022ac:	4cab      	ldr	r4, [pc, #684]	; (40255c <_svfprintf_r+0x464>)
  4022ae:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4022b2:	941b      	str	r4, [sp, #108]	; 0x6c
  4022b4:	e26d      	b.n	402792 <_svfprintf_r+0x69a>
  4022b6:	2b00      	cmp	r3, #0
  4022b8:	bf08      	it	eq
  4022ba:	2320      	moveq	r3, #32
  4022bc:	e7f1      	b.n	4022a2 <_svfprintf_r+0x1aa>
  4022be:	f047 0701 	orr.w	r7, r7, #1
  4022c2:	e7ee      	b.n	4022a2 <_svfprintf_r+0x1aa>
  4022c4:	426d      	negs	r5, r5
  4022c6:	950e      	str	r5, [sp, #56]	; 0x38
  4022c8:	4690      	mov	r8, r2
  4022ca:	f047 0704 	orr.w	r7, r7, #4
  4022ce:	e7e8      	b.n	4022a2 <_svfprintf_r+0x1aa>
  4022d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4022d2:	7825      	ldrb	r5, [r4, #0]
  4022d4:	9508      	str	r5, [sp, #32]
  4022d6:	2d2a      	cmp	r5, #42	; 0x2a
  4022d8:	f104 0201 	add.w	r2, r4, #1
  4022dc:	d002      	beq.n	4022e4 <_svfprintf_r+0x1ec>
  4022de:	f04f 0900 	mov.w	r9, #0
  4022e2:	e00b      	b.n	4022fc <_svfprintf_r+0x204>
  4022e4:	f8d8 9000 	ldr.w	r9, [r8]
  4022e8:	920b      	str	r2, [sp, #44]	; 0x2c
  4022ea:	f108 0104 	add.w	r1, r8, #4
  4022ee:	f1b9 0f00 	cmp.w	r9, #0
  4022f2:	4688      	mov	r8, r1
  4022f4:	dad5      	bge.n	4022a2 <_svfprintf_r+0x1aa>
  4022f6:	f04f 39ff 	mov.w	r9, #4294967295
  4022fa:	e7d2      	b.n	4022a2 <_svfprintf_r+0x1aa>
  4022fc:	9d08      	ldr	r5, [sp, #32]
  4022fe:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
  402302:	2909      	cmp	r1, #9
  402304:	d806      	bhi.n	402314 <_svfprintf_r+0x21c>
  402306:	200a      	movs	r0, #10
  402308:	f812 4b01 	ldrb.w	r4, [r2], #1
  40230c:	9408      	str	r4, [sp, #32]
  40230e:	fb00 1909 	mla	r9, r0, r9, r1
  402312:	e7f3      	b.n	4022fc <_svfprintf_r+0x204>
  402314:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
  402318:	920b      	str	r2, [sp, #44]	; 0x2c
  40231a:	e757      	b.n	4021cc <_svfprintf_r+0xd4>
  40231c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  402320:	e7bf      	b.n	4022a2 <_svfprintf_r+0x1aa>
  402322:	2400      	movs	r4, #0
  402324:	940e      	str	r4, [sp, #56]	; 0x38
  402326:	9d08      	ldr	r5, [sp, #32]
  402328:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40232a:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
  40232e:	210a      	movs	r1, #10
  402330:	fb01 2404 	mla	r4, r1, r4, r2
  402334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402336:	940e      	str	r4, [sp, #56]	; 0x38
  402338:	f812 5b01 	ldrb.w	r5, [r2], #1
  40233c:	9508      	str	r5, [sp, #32]
  40233e:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
  402342:	2909      	cmp	r1, #9
  402344:	d8e8      	bhi.n	402318 <_svfprintf_r+0x220>
  402346:	920b      	str	r2, [sp, #44]	; 0x2c
  402348:	e7ed      	b.n	402326 <_svfprintf_r+0x22e>
  40234a:	f047 0708 	orr.w	r7, r7, #8
  40234e:	e7a8      	b.n	4022a2 <_svfprintf_r+0x1aa>
  402350:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  402354:	e7a5      	b.n	4022a2 <_svfprintf_r+0x1aa>
  402356:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  402358:	7822      	ldrb	r2, [r4, #0]
  40235a:	2a6c      	cmp	r2, #108	; 0x6c
  40235c:	d102      	bne.n	402364 <_svfprintf_r+0x26c>
  40235e:	3401      	adds	r4, #1
  402360:	940b      	str	r4, [sp, #44]	; 0x2c
  402362:	e002      	b.n	40236a <_svfprintf_r+0x272>
  402364:	f047 0710 	orr.w	r7, r7, #16
  402368:	e79b      	b.n	4022a2 <_svfprintf_r+0x1aa>
  40236a:	f047 0720 	orr.w	r7, r7, #32
  40236e:	e798      	b.n	4022a2 <_svfprintf_r+0x1aa>
  402370:	f8d8 3000 	ldr.w	r3, [r8]
  402374:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  402378:	2500      	movs	r5, #0
  40237a:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  40237e:	f108 0804 	add.w	r8, r8, #4
  402382:	e2b8      	b.n	4028f6 <_svfprintf_r+0x7fe>
  402384:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402388:	f047 0710 	orr.w	r7, r7, #16
  40238c:	06ba      	lsls	r2, r7, #26
  40238e:	d508      	bpl.n	4023a2 <_svfprintf_r+0x2aa>
  402390:	f108 0807 	add.w	r8, r8, #7
  402394:	f028 0307 	bic.w	r3, r8, #7
  402398:	f103 0808 	add.w	r8, r3, #8
  40239c:	e9d3 4500 	ldrd	r4, r5, [r3]
  4023a0:	e00f      	b.n	4023c2 <_svfprintf_r+0x2ca>
  4023a2:	f017 0f10 	tst.w	r7, #16
  4023a6:	f108 0304 	add.w	r3, r8, #4
  4023aa:	d002      	beq.n	4023b2 <_svfprintf_r+0x2ba>
  4023ac:	f8d8 4000 	ldr.w	r4, [r8]
  4023b0:	e005      	b.n	4023be <_svfprintf_r+0x2c6>
  4023b2:	f8d8 4000 	ldr.w	r4, [r8]
  4023b6:	f017 0f40 	tst.w	r7, #64	; 0x40
  4023ba:	bf18      	it	ne
  4023bc:	b224      	sxthne	r4, r4
  4023be:	17e5      	asrs	r5, r4, #31
  4023c0:	4698      	mov	r8, r3
  4023c2:	2c00      	cmp	r4, #0
  4023c4:	f175 0100 	sbcs.w	r1, r5, #0
  4023c8:	f280 820e 	bge.w	4027e8 <_svfprintf_r+0x6f0>
  4023cc:	232d      	movs	r3, #45	; 0x2d
  4023ce:	4264      	negs	r4, r4
  4023d0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4023d4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4023d8:	e206      	b.n	4027e8 <_svfprintf_r+0x6f0>
  4023da:	9c08      	ldr	r4, [sp, #32]
  4023dc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4023e0:	f108 0807 	add.w	r8, r8, #7
  4023e4:	f028 0307 	bic.w	r3, r8, #7
  4023e8:	970a      	str	r7, [sp, #40]	; 0x28
  4023ea:	9411      	str	r4, [sp, #68]	; 0x44
  4023ec:	e9d3 4500 	ldrd	r4, r5, [r3]
  4023f0:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  4023f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4023f8:	f103 0808 	add.w	r8, r3, #8
  4023fc:	f002 fd90 	bl	404f20 <__fpclassifyd>
  402400:	2801      	cmp	r0, #1
  402402:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  402406:	d114      	bne.n	402432 <_svfprintf_r+0x33a>
  402408:	2200      	movs	r2, #0
  40240a:	2300      	movs	r3, #0
  40240c:	f003 fb0c 	bl	405a28 <__aeabi_dcmplt>
  402410:	b110      	cbz	r0, 402418 <_svfprintf_r+0x320>
  402412:	232d      	movs	r3, #45	; 0x2d
  402414:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402418:	9d08      	ldr	r5, [sp, #32]
  40241a:	4b51      	ldr	r3, [pc, #324]	; (402560 <_svfprintf_r+0x468>)
  40241c:	4a51      	ldr	r2, [pc, #324]	; (402564 <_svfprintf_r+0x46c>)
  40241e:	2d47      	cmp	r5, #71	; 0x47
  402420:	bfd8      	it	le
  402422:	461a      	movle	r2, r3
  402424:	9207      	str	r2, [sp, #28]
  402426:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40242a:	f04f 0903 	mov.w	r9, #3
  40242e:	2500      	movs	r5, #0
  402430:	e268      	b.n	402904 <_svfprintf_r+0x80c>
  402432:	f002 fd75 	bl	404f20 <__fpclassifyd>
  402436:	b958      	cbnz	r0, 402450 <_svfprintf_r+0x358>
  402438:	4b4b      	ldr	r3, [pc, #300]	; (402568 <_svfprintf_r+0x470>)
  40243a:	4a4c      	ldr	r2, [pc, #304]	; (40256c <_svfprintf_r+0x474>)
  40243c:	9c08      	ldr	r4, [sp, #32]
  40243e:	2c47      	cmp	r4, #71	; 0x47
  402440:	bfd8      	it	le
  402442:	461a      	movle	r2, r3
  402444:	9207      	str	r2, [sp, #28]
  402446:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40244a:	f04f 0903 	mov.w	r9, #3
  40244e:	e258      	b.n	402902 <_svfprintf_r+0x80a>
  402450:	f1b9 3fff 	cmp.w	r9, #4294967295
  402454:	d00a      	beq.n	40246c <_svfprintf_r+0x374>
  402456:	9d08      	ldr	r5, [sp, #32]
  402458:	f025 0320 	bic.w	r3, r5, #32
  40245c:	2b47      	cmp	r3, #71	; 0x47
  40245e:	d107      	bne.n	402470 <_svfprintf_r+0x378>
  402460:	f1b9 0f00 	cmp.w	r9, #0
  402464:	bf08      	it	eq
  402466:	f04f 0901 	moveq.w	r9, #1
  40246a:	e001      	b.n	402470 <_svfprintf_r+0x378>
  40246c:	f04f 0906 	mov.w	r9, #6
  402470:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  402474:	2b00      	cmp	r3, #0
  402476:	f447 7780 	orr.w	r7, r7, #256	; 0x100
  40247a:	da08      	bge.n	40248e <_svfprintf_r+0x396>
  40247c:	990d      	ldr	r1, [sp, #52]	; 0x34
  40247e:	980c      	ldr	r0, [sp, #48]	; 0x30
  402480:	9012      	str	r0, [sp, #72]	; 0x48
  402482:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  402486:	242d      	movs	r4, #45	; 0x2d
  402488:	9113      	str	r1, [sp, #76]	; 0x4c
  40248a:	9419      	str	r4, [sp, #100]	; 0x64
  40248c:	e005      	b.n	40249a <_svfprintf_r+0x3a2>
  40248e:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
  402492:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  402496:	2500      	movs	r5, #0
  402498:	9519      	str	r5, [sp, #100]	; 0x64
  40249a:	9d08      	ldr	r5, [sp, #32]
  40249c:	f025 0420 	bic.w	r4, r5, #32
  4024a0:	2c46      	cmp	r4, #70	; 0x46
  4024a2:	d004      	beq.n	4024ae <_svfprintf_r+0x3b6>
  4024a4:	2c45      	cmp	r4, #69	; 0x45
  4024a6:	d105      	bne.n	4024b4 <_svfprintf_r+0x3bc>
  4024a8:	f109 0501 	add.w	r5, r9, #1
  4024ac:	e003      	b.n	4024b6 <_svfprintf_r+0x3be>
  4024ae:	464d      	mov	r5, r9
  4024b0:	2303      	movs	r3, #3
  4024b2:	e001      	b.n	4024b8 <_svfprintf_r+0x3c0>
  4024b4:	464d      	mov	r5, r9
  4024b6:	2302      	movs	r3, #2
  4024b8:	e88d 0028 	stmia.w	sp, {r3, r5}
  4024bc:	ab1f      	add	r3, sp, #124	; 0x7c
  4024be:	9302      	str	r3, [sp, #8]
  4024c0:	ab20      	add	r3, sp, #128	; 0x80
  4024c2:	9303      	str	r3, [sp, #12]
  4024c4:	ab23      	add	r3, sp, #140	; 0x8c
  4024c6:	9304      	str	r3, [sp, #16]
  4024c8:	4650      	mov	r0, sl
  4024ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  4024ce:	f000 fe48 	bl	403162 <_dtoa_r>
  4024d2:	2c47      	cmp	r4, #71	; 0x47
  4024d4:	9007      	str	r0, [sp, #28]
  4024d6:	d10a      	bne.n	4024ee <_svfprintf_r+0x3f6>
  4024d8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4024da:	07c3      	lsls	r3, r0, #31
  4024dc:	d407      	bmi.n	4024ee <_svfprintf_r+0x3f6>
  4024de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4024e0:	9d07      	ldr	r5, [sp, #28]
  4024e2:	2c47      	cmp	r4, #71	; 0x47
  4024e4:	ebc5 0303 	rsb	r3, r5, r3
  4024e8:	9309      	str	r3, [sp, #36]	; 0x24
  4024ea:	d141      	bne.n	402570 <_svfprintf_r+0x478>
  4024ec:	e02d      	b.n	40254a <_svfprintf_r+0x452>
  4024ee:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4024f2:	2c46      	cmp	r4, #70	; 0x46
  4024f4:	44ac      	add	ip, r5
  4024f6:	d113      	bne.n	402520 <_svfprintf_r+0x428>
  4024f8:	9807      	ldr	r0, [sp, #28]
  4024fa:	7803      	ldrb	r3, [r0, #0]
  4024fc:	2b30      	cmp	r3, #48	; 0x30
  4024fe:	d10d      	bne.n	40251c <_svfprintf_r+0x424>
  402500:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  402504:	2200      	movs	r2, #0
  402506:	2300      	movs	r3, #0
  402508:	f8cd c018 	str.w	ip, [sp, #24]
  40250c:	f003 fa82 	bl	405a14 <__aeabi_dcmpeq>
  402510:	f8dd c018 	ldr.w	ip, [sp, #24]
  402514:	b910      	cbnz	r0, 40251c <_svfprintf_r+0x424>
  402516:	f1c5 0501 	rsb	r5, r5, #1
  40251a:	951f      	str	r5, [sp, #124]	; 0x7c
  40251c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40251e:	449c      	add	ip, r3
  402520:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  402524:	2200      	movs	r2, #0
  402526:	2300      	movs	r3, #0
  402528:	f8cd c018 	str.w	ip, [sp, #24]
  40252c:	f003 fa72 	bl	405a14 <__aeabi_dcmpeq>
  402530:	f8dd c018 	ldr.w	ip, [sp, #24]
  402534:	b108      	cbz	r0, 40253a <_svfprintf_r+0x442>
  402536:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
  40253a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40253c:	4563      	cmp	r3, ip
  40253e:	d2ce      	bcs.n	4024de <_svfprintf_r+0x3e6>
  402540:	1c5a      	adds	r2, r3, #1
  402542:	9223      	str	r2, [sp, #140]	; 0x8c
  402544:	2230      	movs	r2, #48	; 0x30
  402546:	701a      	strb	r2, [r3, #0]
  402548:	e7f7      	b.n	40253a <_svfprintf_r+0x442>
  40254a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40254c:	1cdc      	adds	r4, r3, #3
  40254e:	db01      	blt.n	402554 <_svfprintf_r+0x45c>
  402550:	454b      	cmp	r3, r9
  402552:	dd6c      	ble.n	40262e <_svfprintf_r+0x536>
  402554:	9c08      	ldr	r4, [sp, #32]
  402556:	3c02      	subs	r4, #2
  402558:	9408      	str	r4, [sp, #32]
  40255a:	e00c      	b.n	402576 <_svfprintf_r+0x47e>
  40255c:	00406246 	.word	0x00406246
  402560:	00406236 	.word	0x00406236
  402564:	0040623a 	.word	0x0040623a
  402568:	0040623e 	.word	0x0040623e
  40256c:	00406242 	.word	0x00406242
  402570:	9d08      	ldr	r5, [sp, #32]
  402572:	2d65      	cmp	r5, #101	; 0x65
  402574:	dc42      	bgt.n	4025fc <_svfprintf_r+0x504>
  402576:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402578:	9c08      	ldr	r4, [sp, #32]
  40257a:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
  40257e:	3b01      	subs	r3, #1
  402580:	2b00      	cmp	r3, #0
  402582:	931f      	str	r3, [sp, #124]	; 0x7c
  402584:	bfba      	itte	lt
  402586:	425b      	neglt	r3, r3
  402588:	222d      	movlt	r2, #45	; 0x2d
  40258a:	222b      	movge	r2, #43	; 0x2b
  40258c:	2b09      	cmp	r3, #9
  40258e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  402592:	dd1c      	ble.n	4025ce <_svfprintf_r+0x4d6>
  402594:	f10d 0292 	add.w	r2, sp, #146	; 0x92
  402598:	200a      	movs	r0, #10
  40259a:	fb93 f1f0 	sdiv	r1, r3, r0
  40259e:	fb00 3311 	mls	r3, r0, r1, r3
  4025a2:	3330      	adds	r3, #48	; 0x30
  4025a4:	2909      	cmp	r1, #9
  4025a6:	4614      	mov	r4, r2
  4025a8:	f802 3901 	strb.w	r3, [r2], #-1
  4025ac:	460b      	mov	r3, r1
  4025ae:	dcf3      	bgt.n	402598 <_svfprintf_r+0x4a0>
  4025b0:	f101 0330 	add.w	r3, r1, #48	; 0x30
  4025b4:	f804 3d01 	strb.w	r3, [r4, #-1]!
  4025b8:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4025bc:	f10d 0293 	add.w	r2, sp, #147	; 0x93
  4025c0:	4294      	cmp	r4, r2
  4025c2:	d20b      	bcs.n	4025dc <_svfprintf_r+0x4e4>
  4025c4:	f814 2b01 	ldrb.w	r2, [r4], #1
  4025c8:	f803 2b01 	strb.w	r2, [r3], #1
  4025cc:	e7f6      	b.n	4025bc <_svfprintf_r+0x4c4>
  4025ce:	2230      	movs	r2, #48	; 0x30
  4025d0:	4413      	add	r3, r2
  4025d2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4025d6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4025da:	ab22      	add	r3, sp, #136	; 0x88
  4025dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4025de:	aa21      	add	r2, sp, #132	; 0x84
  4025e0:	1a9a      	subs	r2, r3, r2
  4025e2:	4691      	mov	r9, r2
  4025e4:	2d01      	cmp	r5, #1
  4025e6:	921a      	str	r2, [sp, #104]	; 0x68
  4025e8:	44a9      	add	r9, r5
  4025ea:	dc03      	bgt.n	4025f4 <_svfprintf_r+0x4fc>
  4025ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4025ee:	f015 0401 	ands.w	r4, r5, #1
  4025f2:	d037      	beq.n	402664 <_svfprintf_r+0x56c>
  4025f4:	f109 0901 	add.w	r9, r9, #1
  4025f8:	2400      	movs	r4, #0
  4025fa:	e033      	b.n	402664 <_svfprintf_r+0x56c>
  4025fc:	9c08      	ldr	r4, [sp, #32]
  4025fe:	2c66      	cmp	r4, #102	; 0x66
  402600:	d115      	bne.n	40262e <_svfprintf_r+0x536>
  402602:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402604:	2b00      	cmp	r3, #0
  402606:	dd09      	ble.n	40261c <_svfprintf_r+0x524>
  402608:	f1b9 0f00 	cmp.w	r9, #0
  40260c:	d102      	bne.n	402614 <_svfprintf_r+0x51c>
  40260e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  402610:	07e8      	lsls	r0, r5, #31
  402612:	d523      	bpl.n	40265c <_svfprintf_r+0x564>
  402614:	f109 0901 	add.w	r9, r9, #1
  402618:	444b      	add	r3, r9
  40261a:	e01f      	b.n	40265c <_svfprintf_r+0x564>
  40261c:	f1b9 0f00 	cmp.w	r9, #0
  402620:	d102      	bne.n	402628 <_svfprintf_r+0x530>
  402622:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  402624:	07e1      	lsls	r1, r4, #31
  402626:	d515      	bpl.n	402654 <_svfprintf_r+0x55c>
  402628:	f109 0302 	add.w	r3, r9, #2
  40262c:	e016      	b.n	40265c <_svfprintf_r+0x564>
  40262e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402630:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402632:	42ab      	cmp	r3, r5
  402634:	db04      	blt.n	402640 <_svfprintf_r+0x548>
  402636:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  402638:	07e2      	lsls	r2, r4, #31
  40263a:	d50d      	bpl.n	402658 <_svfprintf_r+0x560>
  40263c:	3301      	adds	r3, #1
  40263e:	e006      	b.n	40264e <_svfprintf_r+0x556>
  402640:	2b00      	cmp	r3, #0
  402642:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402644:	bfd4      	ite	le
  402646:	f1c3 0302 	rsble	r3, r3, #2
  40264a:	2301      	movgt	r3, #1
  40264c:	4423      	add	r3, r4
  40264e:	2567      	movs	r5, #103	; 0x67
  402650:	9511      	str	r5, [sp, #68]	; 0x44
  402652:	e003      	b.n	40265c <_svfprintf_r+0x564>
  402654:	2301      	movs	r3, #1
  402656:	e001      	b.n	40265c <_svfprintf_r+0x564>
  402658:	2467      	movs	r4, #103	; 0x67
  40265a:	9411      	str	r4, [sp, #68]	; 0x44
  40265c:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40265e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  402660:	9508      	str	r5, [sp, #32]
  402662:	4699      	mov	r9, r3
  402664:	9d19      	ldr	r5, [sp, #100]	; 0x64
  402666:	b115      	cbz	r5, 40266e <_svfprintf_r+0x576>
  402668:	232d      	movs	r3, #45	; 0x2d
  40266a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40266e:	2500      	movs	r5, #0
  402670:	e149      	b.n	402906 <_svfprintf_r+0x80e>
  402672:	f017 0f20 	tst.w	r7, #32
  402676:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40267a:	f108 0104 	add.w	r1, r8, #4
  40267e:	d008      	beq.n	402692 <_svfprintf_r+0x59a>
  402680:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  402682:	f8d8 0000 	ldr.w	r0, [r8]
  402686:	17e5      	asrs	r5, r4, #31
  402688:	4622      	mov	r2, r4
  40268a:	462b      	mov	r3, r5
  40268c:	e9c0 2300 	strd	r2, r3, [r0]
  402690:	e00c      	b.n	4026ac <_svfprintf_r+0x5b4>
  402692:	06fb      	lsls	r3, r7, #27
  402694:	d406      	bmi.n	4026a4 <_svfprintf_r+0x5ac>
  402696:	067d      	lsls	r5, r7, #25
  402698:	d504      	bpl.n	4026a4 <_svfprintf_r+0x5ac>
  40269a:	f8d8 3000 	ldr.w	r3, [r8]
  40269e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4026a0:	801c      	strh	r4, [r3, #0]
  4026a2:	e003      	b.n	4026ac <_svfprintf_r+0x5b4>
  4026a4:	f8d8 3000 	ldr.w	r3, [r8]
  4026a8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4026aa:	601d      	str	r5, [r3, #0]
  4026ac:	4688      	mov	r8, r1
  4026ae:	e558      	b.n	402162 <_svfprintf_r+0x6a>
  4026b0:	f047 0710 	orr.w	r7, r7, #16
  4026b4:	f017 0320 	ands.w	r3, r7, #32
  4026b8:	d009      	beq.n	4026ce <_svfprintf_r+0x5d6>
  4026ba:	f108 0807 	add.w	r8, r8, #7
  4026be:	f028 0307 	bic.w	r3, r8, #7
  4026c2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4026c6:	f103 0808 	add.w	r8, r3, #8
  4026ca:	2300      	movs	r3, #0
  4026cc:	e088      	b.n	4027e0 <_svfprintf_r+0x6e8>
  4026ce:	f017 0110 	ands.w	r1, r7, #16
  4026d2:	f108 0204 	add.w	r2, r8, #4
  4026d6:	d107      	bne.n	4026e8 <_svfprintf_r+0x5f0>
  4026d8:	f017 0340 	ands.w	r3, r7, #64	; 0x40
  4026dc:	d004      	beq.n	4026e8 <_svfprintf_r+0x5f0>
  4026de:	f8b8 4000 	ldrh.w	r4, [r8]
  4026e2:	2500      	movs	r5, #0
  4026e4:	4690      	mov	r8, r2
  4026e6:	e7f0      	b.n	4026ca <_svfprintf_r+0x5d2>
  4026e8:	f8d8 4000 	ldr.w	r4, [r8]
  4026ec:	2500      	movs	r5, #0
  4026ee:	4690      	mov	r8, r2
  4026f0:	e076      	b.n	4027e0 <_svfprintf_r+0x6e8>
  4026f2:	2330      	movs	r3, #48	; 0x30
  4026f4:	2278      	movs	r2, #120	; 0x78
  4026f6:	48a8      	ldr	r0, [pc, #672]	; (402998 <_svfprintf_r+0x8a0>)
  4026f8:	f8d8 4000 	ldr.w	r4, [r8]
  4026fc:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  402700:	2500      	movs	r5, #0
  402702:	f047 0702 	orr.w	r7, r7, #2
  402706:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  40270a:	f108 0804 	add.w	r8, r8, #4
  40270e:	901b      	str	r0, [sp, #108]	; 0x6c
  402710:	2302      	movs	r3, #2
  402712:	9208      	str	r2, [sp, #32]
  402714:	e064      	b.n	4027e0 <_svfprintf_r+0x6e8>
  402716:	4643      	mov	r3, r8
  402718:	2500      	movs	r5, #0
  40271a:	681b      	ldr	r3, [r3, #0]
  40271c:	9307      	str	r3, [sp, #28]
  40271e:	45a9      	cmp	r9, r5
  402720:	f108 0804 	add.w	r8, r8, #4
  402724:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  402728:	db0d      	blt.n	402746 <_svfprintf_r+0x64e>
  40272a:	4618      	mov	r0, r3
  40272c:	4629      	mov	r1, r5
  40272e:	464a      	mov	r2, r9
  402730:	f001 fe2e 	bl	404390 <memchr>
  402734:	2800      	cmp	r0, #0
  402736:	f000 80e4 	beq.w	402902 <_svfprintf_r+0x80a>
  40273a:	9c07      	ldr	r4, [sp, #28]
  40273c:	1b00      	subs	r0, r0, r4
  40273e:	4548      	cmp	r0, r9
  402740:	bfb8      	it	lt
  402742:	4681      	movlt	r9, r0
  402744:	e0de      	b.n	402904 <_svfprintf_r+0x80c>
  402746:	9807      	ldr	r0, [sp, #28]
  402748:	f7ff fcc0 	bl	4020cc <strlen>
  40274c:	4681      	mov	r9, r0
  40274e:	e0d9      	b.n	402904 <_svfprintf_r+0x80c>
  402750:	f047 0710 	orr.w	r7, r7, #16
  402754:	06bc      	lsls	r4, r7, #26
  402756:	d508      	bpl.n	40276a <_svfprintf_r+0x672>
  402758:	f108 0807 	add.w	r8, r8, #7
  40275c:	f028 0307 	bic.w	r3, r8, #7
  402760:	f103 0808 	add.w	r8, r3, #8
  402764:	e9d3 4500 	ldrd	r4, r5, [r3]
  402768:	e00d      	b.n	402786 <_svfprintf_r+0x68e>
  40276a:	f017 0f10 	tst.w	r7, #16
  40276e:	f108 0304 	add.w	r3, r8, #4
  402772:	d104      	bne.n	40277e <_svfprintf_r+0x686>
  402774:	0678      	lsls	r0, r7, #25
  402776:	d502      	bpl.n	40277e <_svfprintf_r+0x686>
  402778:	f8b8 4000 	ldrh.w	r4, [r8]
  40277c:	e001      	b.n	402782 <_svfprintf_r+0x68a>
  40277e:	f8d8 4000 	ldr.w	r4, [r8]
  402782:	2500      	movs	r5, #0
  402784:	4698      	mov	r8, r3
  402786:	2301      	movs	r3, #1
  402788:	e02a      	b.n	4027e0 <_svfprintf_r+0x6e8>
  40278a:	4d83      	ldr	r5, [pc, #524]	; (402998 <_svfprintf_r+0x8a0>)
  40278c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402790:	951b      	str	r5, [sp, #108]	; 0x6c
  402792:	06b9      	lsls	r1, r7, #26
  402794:	d508      	bpl.n	4027a8 <_svfprintf_r+0x6b0>
  402796:	f108 0807 	add.w	r8, r8, #7
  40279a:	f028 0307 	bic.w	r3, r8, #7
  40279e:	f103 0808 	add.w	r8, r3, #8
  4027a2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4027a6:	e00d      	b.n	4027c4 <_svfprintf_r+0x6cc>
  4027a8:	f017 0f10 	tst.w	r7, #16
  4027ac:	f108 0304 	add.w	r3, r8, #4
  4027b0:	d104      	bne.n	4027bc <_svfprintf_r+0x6c4>
  4027b2:	067a      	lsls	r2, r7, #25
  4027b4:	d502      	bpl.n	4027bc <_svfprintf_r+0x6c4>
  4027b6:	f8b8 4000 	ldrh.w	r4, [r8]
  4027ba:	e001      	b.n	4027c0 <_svfprintf_r+0x6c8>
  4027bc:	f8d8 4000 	ldr.w	r4, [r8]
  4027c0:	2500      	movs	r5, #0
  4027c2:	4698      	mov	r8, r3
  4027c4:	07fb      	lsls	r3, r7, #31
  4027c6:	d50a      	bpl.n	4027de <_svfprintf_r+0x6e6>
  4027c8:	ea54 0005 	orrs.w	r0, r4, r5
  4027cc:	d007      	beq.n	4027de <_svfprintf_r+0x6e6>
  4027ce:	2330      	movs	r3, #48	; 0x30
  4027d0:	9908      	ldr	r1, [sp, #32]
  4027d2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4027d6:	f88d 1079 	strb.w	r1, [sp, #121]	; 0x79
  4027da:	f047 0702 	orr.w	r7, r7, #2
  4027de:	2302      	movs	r3, #2
  4027e0:	2200      	movs	r2, #0
  4027e2:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
  4027e6:	e000      	b.n	4027ea <_svfprintf_r+0x6f2>
  4027e8:	2301      	movs	r3, #1
  4027ea:	f1b9 0f00 	cmp.w	r9, #0
  4027ee:	bfa8      	it	ge
  4027f0:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
  4027f4:	ea54 0205 	orrs.w	r2, r4, r5
  4027f8:	d102      	bne.n	402800 <_svfprintf_r+0x708>
  4027fa:	f1b9 0f00 	cmp.w	r9, #0
  4027fe:	d05a      	beq.n	4028b6 <_svfprintf_r+0x7be>
  402800:	2b01      	cmp	r3, #1
  402802:	d01f      	beq.n	402844 <_svfprintf_r+0x74c>
  402804:	2b02      	cmp	r3, #2
  402806:	f10d 03c7 	add.w	r3, sp, #199	; 0xc7
  40280a:	d041      	beq.n	402890 <_svfprintf_r+0x798>
  40280c:	08e1      	lsrs	r1, r4, #3
  40280e:	ea41 7045 	orr.w	r0, r1, r5, lsl #29
  402812:	08e9      	lsrs	r1, r5, #3
  402814:	9014      	str	r0, [sp, #80]	; 0x50
  402816:	9115      	str	r1, [sp, #84]	; 0x54
  402818:	f004 0207 	and.w	r2, r4, #7
  40281c:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  402820:	3230      	adds	r2, #48	; 0x30
  402822:	ea54 0005 	orrs.w	r0, r4, r5
  402826:	9307      	str	r3, [sp, #28]
  402828:	701a      	strb	r2, [r3, #0]
  40282a:	f103 33ff 	add.w	r3, r3, #4294967295
  40282e:	d1ed      	bne.n	40280c <_svfprintf_r+0x714>
  402830:	07f8      	lsls	r0, r7, #31
  402832:	9907      	ldr	r1, [sp, #28]
  402834:	d54c      	bpl.n	4028d0 <_svfprintf_r+0x7d8>
  402836:	2a30      	cmp	r2, #48	; 0x30
  402838:	d04a      	beq.n	4028d0 <_svfprintf_r+0x7d8>
  40283a:	9307      	str	r3, [sp, #28]
  40283c:	2330      	movs	r3, #48	; 0x30
  40283e:	f801 3c01 	strb.w	r3, [r1, #-1]
  402842:	e045      	b.n	4028d0 <_svfprintf_r+0x7d8>
  402844:	2d00      	cmp	r5, #0
  402846:	bf08      	it	eq
  402848:	2c0a      	cmpeq	r4, #10
  40284a:	d205      	bcs.n	402858 <_svfprintf_r+0x760>
  40284c:	3430      	adds	r4, #48	; 0x30
  40284e:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
  402852:	f10d 04c7 	add.w	r4, sp, #199	; 0xc7
  402856:	e03a      	b.n	4028ce <_svfprintf_r+0x7d6>
  402858:	f10d 00c7 	add.w	r0, sp, #199	; 0xc7
  40285c:	900a      	str	r0, [sp, #40]	; 0x28
  40285e:	990a      	ldr	r1, [sp, #40]	; 0x28
  402860:	9107      	str	r1, [sp, #28]
  402862:	4620      	mov	r0, r4
  402864:	4629      	mov	r1, r5
  402866:	220a      	movs	r2, #10
  402868:	2300      	movs	r3, #0
  40286a:	f003 f92d 	bl	405ac8 <__aeabi_uldivmod>
  40286e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402870:	3230      	adds	r2, #48	; 0x30
  402872:	f803 2901 	strb.w	r2, [r3], #-1
  402876:	4620      	mov	r0, r4
  402878:	930a      	str	r3, [sp, #40]	; 0x28
  40287a:	4629      	mov	r1, r5
  40287c:	220a      	movs	r2, #10
  40287e:	2300      	movs	r3, #0
  402880:	f003 f922 	bl	405ac8 <__aeabi_uldivmod>
  402884:	4604      	mov	r4, r0
  402886:	460d      	mov	r5, r1
  402888:	ea54 0005 	orrs.w	r0, r4, r5
  40288c:	d1e7      	bne.n	40285e <_svfprintf_r+0x766>
  40288e:	e01f      	b.n	4028d0 <_svfprintf_r+0x7d8>
  402890:	f004 020f 	and.w	r2, r4, #15
  402894:	991b      	ldr	r1, [sp, #108]	; 0x6c
  402896:	9307      	str	r3, [sp, #28]
  402898:	5c8a      	ldrb	r2, [r1, r2]
  40289a:	f803 2901 	strb.w	r2, [r3], #-1
  40289e:	0922      	lsrs	r2, r4, #4
  4028a0:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
  4028a4:	0929      	lsrs	r1, r5, #4
  4028a6:	9016      	str	r0, [sp, #88]	; 0x58
  4028a8:	9117      	str	r1, [sp, #92]	; 0x5c
  4028aa:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  4028ae:	ea54 0205 	orrs.w	r2, r4, r5
  4028b2:	d1ed      	bne.n	402890 <_svfprintf_r+0x798>
  4028b4:	e00c      	b.n	4028d0 <_svfprintf_r+0x7d8>
  4028b6:	b933      	cbnz	r3, 4028c6 <_svfprintf_r+0x7ce>
  4028b8:	07fb      	lsls	r3, r7, #31
  4028ba:	d507      	bpl.n	4028cc <_svfprintf_r+0x7d4>
  4028bc:	ac42      	add	r4, sp, #264	; 0x108
  4028be:	2330      	movs	r3, #48	; 0x30
  4028c0:	f804 3d41 	strb.w	r3, [r4, #-65]!
  4028c4:	e003      	b.n	4028ce <_svfprintf_r+0x7d6>
  4028c6:	ad32      	add	r5, sp, #200	; 0xc8
  4028c8:	9507      	str	r5, [sp, #28]
  4028ca:	e001      	b.n	4028d0 <_svfprintf_r+0x7d8>
  4028cc:	ac32      	add	r4, sp, #200	; 0xc8
  4028ce:	9407      	str	r4, [sp, #28]
  4028d0:	9c07      	ldr	r4, [sp, #28]
  4028d2:	464d      	mov	r5, r9
  4028d4:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4028d8:	ebc4 0909 	rsb	r9, r4, r9
  4028dc:	2400      	movs	r4, #0
  4028de:	e012      	b.n	402906 <_svfprintf_r+0x80e>
  4028e0:	9d08      	ldr	r5, [sp, #32]
  4028e2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4028e6:	2d00      	cmp	r5, #0
  4028e8:	f000 8388 	beq.w	402ffc <_svfprintf_r+0xf04>
  4028ec:	f88d 50a0 	strb.w	r5, [sp, #160]	; 0xa0
  4028f0:	2500      	movs	r5, #0
  4028f2:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  4028f6:	a828      	add	r0, sp, #160	; 0xa0
  4028f8:	f04f 0901 	mov.w	r9, #1
  4028fc:	462c      	mov	r4, r5
  4028fe:	9007      	str	r0, [sp, #28]
  402900:	e001      	b.n	402906 <_svfprintf_r+0x80e>
  402902:	4605      	mov	r5, r0
  402904:	462c      	mov	r4, r5
  402906:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
  40290a:	45a9      	cmp	r9, r5
  40290c:	bfac      	ite	ge
  40290e:	4649      	movge	r1, r9
  402910:	4629      	movlt	r1, r5
  402912:	910a      	str	r1, [sp, #40]	; 0x28
  402914:	b10b      	cbz	r3, 40291a <_svfprintf_r+0x822>
  402916:	3101      	adds	r1, #1
  402918:	910a      	str	r1, [sp, #40]	; 0x28
  40291a:	f017 0302 	ands.w	r3, r7, #2
  40291e:	9311      	str	r3, [sp, #68]	; 0x44
  402920:	d002      	beq.n	402928 <_svfprintf_r+0x830>
  402922:	980a      	ldr	r0, [sp, #40]	; 0x28
  402924:	3002      	adds	r0, #2
  402926:	900a      	str	r0, [sp, #40]	; 0x28
  402928:	f017 0384 	ands.w	r3, r7, #132	; 0x84
  40292c:	9319      	str	r3, [sp, #100]	; 0x64
  40292e:	d140      	bne.n	4029b2 <_svfprintf_r+0x8ba>
  402930:	980e      	ldr	r0, [sp, #56]	; 0x38
  402932:	990a      	ldr	r1, [sp, #40]	; 0x28
  402934:	ebc1 0c00 	rsb	ip, r1, r0
  402938:	f1bc 0f00 	cmp.w	ip, #0
  40293c:	dd39      	ble.n	4029b2 <_svfprintf_r+0x8ba>
  40293e:	4b17      	ldr	r3, [pc, #92]	; (40299c <_svfprintf_r+0x8a4>)
  402940:	6033      	str	r3, [r6, #0]
  402942:	f1bc 0f10 	cmp.w	ip, #16
  402946:	dd1b      	ble.n	402980 <_svfprintf_r+0x888>
  402948:	2310      	movs	r3, #16
  40294a:	6073      	str	r3, [r6, #4]
  40294c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40294e:	3310      	adds	r3, #16
  402950:	9327      	str	r3, [sp, #156]	; 0x9c
  402952:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402954:	3301      	adds	r3, #1
  402956:	2b07      	cmp	r3, #7
  402958:	9326      	str	r3, [sp, #152]	; 0x98
  40295a:	dc01      	bgt.n	402960 <_svfprintf_r+0x868>
  40295c:	3608      	adds	r6, #8
  40295e:	e00c      	b.n	40297a <_svfprintf_r+0x882>
  402960:	4650      	mov	r0, sl
  402962:	4659      	mov	r1, fp
  402964:	aa25      	add	r2, sp, #148	; 0x94
  402966:	f8cd c018 	str.w	ip, [sp, #24]
  40296a:	f002 fb15 	bl	404f98 <__ssprint_r>
  40296e:	f8dd c018 	ldr.w	ip, [sp, #24]
  402972:	2800      	cmp	r0, #0
  402974:	f040 8349 	bne.w	40300a <_svfprintf_r+0xf12>
  402978:	ae32      	add	r6, sp, #200	; 0xc8
  40297a:	f1ac 0c10 	sub.w	ip, ip, #16
  40297e:	e7de      	b.n	40293e <_svfprintf_r+0x846>
  402980:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402982:	f8c6 c004 	str.w	ip, [r6, #4]
  402986:	4463      	add	r3, ip
  402988:	9327      	str	r3, [sp, #156]	; 0x9c
  40298a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40298c:	3301      	adds	r3, #1
  40298e:	2b07      	cmp	r3, #7
  402990:	9326      	str	r3, [sp, #152]	; 0x98
  402992:	dc05      	bgt.n	4029a0 <_svfprintf_r+0x8a8>
  402994:	3608      	adds	r6, #8
  402996:	e00c      	b.n	4029b2 <_svfprintf_r+0x8ba>
  402998:	00406257 	.word	0x00406257
  40299c:	00406216 	.word	0x00406216
  4029a0:	4650      	mov	r0, sl
  4029a2:	4659      	mov	r1, fp
  4029a4:	aa25      	add	r2, sp, #148	; 0x94
  4029a6:	f002 faf7 	bl	404f98 <__ssprint_r>
  4029aa:	2800      	cmp	r0, #0
  4029ac:	f040 832d 	bne.w	40300a <_svfprintf_r+0xf12>
  4029b0:	ae32      	add	r6, sp, #200	; 0xc8
  4029b2:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
  4029b6:	b1bb      	cbz	r3, 4029e8 <_svfprintf_r+0x8f0>
  4029b8:	f10d 0377 	add.w	r3, sp, #119	; 0x77
  4029bc:	6033      	str	r3, [r6, #0]
  4029be:	2301      	movs	r3, #1
  4029c0:	6073      	str	r3, [r6, #4]
  4029c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4029c4:	3301      	adds	r3, #1
  4029c6:	9327      	str	r3, [sp, #156]	; 0x9c
  4029c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4029ca:	3301      	adds	r3, #1
  4029cc:	2b07      	cmp	r3, #7
  4029ce:	9326      	str	r3, [sp, #152]	; 0x98
  4029d0:	dc01      	bgt.n	4029d6 <_svfprintf_r+0x8de>
  4029d2:	3608      	adds	r6, #8
  4029d4:	e008      	b.n	4029e8 <_svfprintf_r+0x8f0>
  4029d6:	4650      	mov	r0, sl
  4029d8:	4659      	mov	r1, fp
  4029da:	aa25      	add	r2, sp, #148	; 0x94
  4029dc:	f002 fadc 	bl	404f98 <__ssprint_r>
  4029e0:	2800      	cmp	r0, #0
  4029e2:	f040 8312 	bne.w	40300a <_svfprintf_r+0xf12>
  4029e6:	ae32      	add	r6, sp, #200	; 0xc8
  4029e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4029ea:	b1b3      	cbz	r3, 402a1a <_svfprintf_r+0x922>
  4029ec:	ab1e      	add	r3, sp, #120	; 0x78
  4029ee:	6033      	str	r3, [r6, #0]
  4029f0:	2302      	movs	r3, #2
  4029f2:	6073      	str	r3, [r6, #4]
  4029f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4029f6:	3302      	adds	r3, #2
  4029f8:	9327      	str	r3, [sp, #156]	; 0x9c
  4029fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4029fc:	3301      	adds	r3, #1
  4029fe:	2b07      	cmp	r3, #7
  402a00:	9326      	str	r3, [sp, #152]	; 0x98
  402a02:	dc01      	bgt.n	402a08 <_svfprintf_r+0x910>
  402a04:	3608      	adds	r6, #8
  402a06:	e008      	b.n	402a1a <_svfprintf_r+0x922>
  402a08:	4650      	mov	r0, sl
  402a0a:	4659      	mov	r1, fp
  402a0c:	aa25      	add	r2, sp, #148	; 0x94
  402a0e:	f002 fac3 	bl	404f98 <__ssprint_r>
  402a12:	2800      	cmp	r0, #0
  402a14:	f040 82f9 	bne.w	40300a <_svfprintf_r+0xf12>
  402a18:	ae32      	add	r6, sp, #200	; 0xc8
  402a1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  402a1c:	2b80      	cmp	r3, #128	; 0x80
  402a1e:	d13c      	bne.n	402a9a <_svfprintf_r+0x9a2>
  402a20:	980e      	ldr	r0, [sp, #56]	; 0x38
  402a22:	990a      	ldr	r1, [sp, #40]	; 0x28
  402a24:	ebc1 0c00 	rsb	ip, r1, r0
  402a28:	f1bc 0f00 	cmp.w	ip, #0
  402a2c:	dd35      	ble.n	402a9a <_svfprintf_r+0x9a2>
  402a2e:	4b9c      	ldr	r3, [pc, #624]	; (402ca0 <_svfprintf_r+0xba8>)
  402a30:	6033      	str	r3, [r6, #0]
  402a32:	f1bc 0f10 	cmp.w	ip, #16
  402a36:	dd1b      	ble.n	402a70 <_svfprintf_r+0x978>
  402a38:	2310      	movs	r3, #16
  402a3a:	6073      	str	r3, [r6, #4]
  402a3c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402a3e:	3310      	adds	r3, #16
  402a40:	9327      	str	r3, [sp, #156]	; 0x9c
  402a42:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402a44:	3301      	adds	r3, #1
  402a46:	2b07      	cmp	r3, #7
  402a48:	9326      	str	r3, [sp, #152]	; 0x98
  402a4a:	dc01      	bgt.n	402a50 <_svfprintf_r+0x958>
  402a4c:	3608      	adds	r6, #8
  402a4e:	e00c      	b.n	402a6a <_svfprintf_r+0x972>
  402a50:	4650      	mov	r0, sl
  402a52:	4659      	mov	r1, fp
  402a54:	aa25      	add	r2, sp, #148	; 0x94
  402a56:	f8cd c018 	str.w	ip, [sp, #24]
  402a5a:	f002 fa9d 	bl	404f98 <__ssprint_r>
  402a5e:	f8dd c018 	ldr.w	ip, [sp, #24]
  402a62:	2800      	cmp	r0, #0
  402a64:	f040 82d1 	bne.w	40300a <_svfprintf_r+0xf12>
  402a68:	ae32      	add	r6, sp, #200	; 0xc8
  402a6a:	f1ac 0c10 	sub.w	ip, ip, #16
  402a6e:	e7de      	b.n	402a2e <_svfprintf_r+0x936>
  402a70:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402a72:	f8c6 c004 	str.w	ip, [r6, #4]
  402a76:	4463      	add	r3, ip
  402a78:	9327      	str	r3, [sp, #156]	; 0x9c
  402a7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402a7c:	3301      	adds	r3, #1
  402a7e:	2b07      	cmp	r3, #7
  402a80:	9326      	str	r3, [sp, #152]	; 0x98
  402a82:	dc01      	bgt.n	402a88 <_svfprintf_r+0x990>
  402a84:	3608      	adds	r6, #8
  402a86:	e008      	b.n	402a9a <_svfprintf_r+0x9a2>
  402a88:	4650      	mov	r0, sl
  402a8a:	4659      	mov	r1, fp
  402a8c:	aa25      	add	r2, sp, #148	; 0x94
  402a8e:	f002 fa83 	bl	404f98 <__ssprint_r>
  402a92:	2800      	cmp	r0, #0
  402a94:	f040 82b9 	bne.w	40300a <_svfprintf_r+0xf12>
  402a98:	ae32      	add	r6, sp, #200	; 0xc8
  402a9a:	ebc9 0505 	rsb	r5, r9, r5
  402a9e:	2d00      	cmp	r5, #0
  402aa0:	dd2e      	ble.n	402b00 <_svfprintf_r+0xa08>
  402aa2:	4b7f      	ldr	r3, [pc, #508]	; (402ca0 <_svfprintf_r+0xba8>)
  402aa4:	6033      	str	r3, [r6, #0]
  402aa6:	2d10      	cmp	r5, #16
  402aa8:	dd16      	ble.n	402ad8 <_svfprintf_r+0x9e0>
  402aaa:	2310      	movs	r3, #16
  402aac:	6073      	str	r3, [r6, #4]
  402aae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402ab0:	3310      	adds	r3, #16
  402ab2:	9327      	str	r3, [sp, #156]	; 0x9c
  402ab4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402ab6:	3301      	adds	r3, #1
  402ab8:	2b07      	cmp	r3, #7
  402aba:	9326      	str	r3, [sp, #152]	; 0x98
  402abc:	dc01      	bgt.n	402ac2 <_svfprintf_r+0x9ca>
  402abe:	3608      	adds	r6, #8
  402ac0:	e008      	b.n	402ad4 <_svfprintf_r+0x9dc>
  402ac2:	4650      	mov	r0, sl
  402ac4:	4659      	mov	r1, fp
  402ac6:	aa25      	add	r2, sp, #148	; 0x94
  402ac8:	f002 fa66 	bl	404f98 <__ssprint_r>
  402acc:	2800      	cmp	r0, #0
  402ace:	f040 829c 	bne.w	40300a <_svfprintf_r+0xf12>
  402ad2:	ae32      	add	r6, sp, #200	; 0xc8
  402ad4:	3d10      	subs	r5, #16
  402ad6:	e7e4      	b.n	402aa2 <_svfprintf_r+0x9aa>
  402ad8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402ada:	6075      	str	r5, [r6, #4]
  402adc:	441d      	add	r5, r3
  402ade:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402ae0:	9527      	str	r5, [sp, #156]	; 0x9c
  402ae2:	3301      	adds	r3, #1
  402ae4:	2b07      	cmp	r3, #7
  402ae6:	9326      	str	r3, [sp, #152]	; 0x98
  402ae8:	dc01      	bgt.n	402aee <_svfprintf_r+0x9f6>
  402aea:	3608      	adds	r6, #8
  402aec:	e008      	b.n	402b00 <_svfprintf_r+0xa08>
  402aee:	4650      	mov	r0, sl
  402af0:	4659      	mov	r1, fp
  402af2:	aa25      	add	r2, sp, #148	; 0x94
  402af4:	f002 fa50 	bl	404f98 <__ssprint_r>
  402af8:	2800      	cmp	r0, #0
  402afa:	f040 8286 	bne.w	40300a <_svfprintf_r+0xf12>
  402afe:	ae32      	add	r6, sp, #200	; 0xc8
  402b00:	05fd      	lsls	r5, r7, #23
  402b02:	d405      	bmi.n	402b10 <_svfprintf_r+0xa18>
  402b04:	9c07      	ldr	r4, [sp, #28]
  402b06:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402b08:	e886 0210 	stmia.w	r6, {r4, r9}
  402b0c:	444b      	add	r3, r9
  402b0e:	e0da      	b.n	402cc6 <_svfprintf_r+0xbce>
  402b10:	9d08      	ldr	r5, [sp, #32]
  402b12:	2d65      	cmp	r5, #101	; 0x65
  402b14:	f340 81a7 	ble.w	402e66 <_svfprintf_r+0xd6e>
  402b18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  402b1c:	2200      	movs	r2, #0
  402b1e:	2300      	movs	r3, #0
  402b20:	f002 ff78 	bl	405a14 <__aeabi_dcmpeq>
  402b24:	2800      	cmp	r0, #0
  402b26:	d059      	beq.n	402bdc <_svfprintf_r+0xae4>
  402b28:	4b5e      	ldr	r3, [pc, #376]	; (402ca4 <_svfprintf_r+0xbac>)
  402b2a:	6033      	str	r3, [r6, #0]
  402b2c:	2301      	movs	r3, #1
  402b2e:	6073      	str	r3, [r6, #4]
  402b30:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402b32:	3301      	adds	r3, #1
  402b34:	9327      	str	r3, [sp, #156]	; 0x9c
  402b36:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b38:	3301      	adds	r3, #1
  402b3a:	2b07      	cmp	r3, #7
  402b3c:	9326      	str	r3, [sp, #152]	; 0x98
  402b3e:	dc01      	bgt.n	402b44 <_svfprintf_r+0xa4c>
  402b40:	3608      	adds	r6, #8
  402b42:	e008      	b.n	402b56 <_svfprintf_r+0xa5e>
  402b44:	4650      	mov	r0, sl
  402b46:	4659      	mov	r1, fp
  402b48:	aa25      	add	r2, sp, #148	; 0x94
  402b4a:	f002 fa25 	bl	404f98 <__ssprint_r>
  402b4e:	2800      	cmp	r0, #0
  402b50:	f040 825b 	bne.w	40300a <_svfprintf_r+0xf12>
  402b54:	ae32      	add	r6, sp, #200	; 0xc8
  402b56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402b58:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402b5a:	42a3      	cmp	r3, r4
  402b5c:	db02      	blt.n	402b64 <_svfprintf_r+0xa6c>
  402b5e:	07fc      	lsls	r4, r7, #31
  402b60:	f140 8202 	bpl.w	402f68 <_svfprintf_r+0xe70>
  402b64:	9c10      	ldr	r4, [sp, #64]	; 0x40
  402b66:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402b68:	9d18      	ldr	r5, [sp, #96]	; 0x60
  402b6a:	6035      	str	r5, [r6, #0]
  402b6c:	4423      	add	r3, r4
  402b6e:	9327      	str	r3, [sp, #156]	; 0x9c
  402b70:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b72:	6074      	str	r4, [r6, #4]
  402b74:	3301      	adds	r3, #1
  402b76:	2b07      	cmp	r3, #7
  402b78:	9326      	str	r3, [sp, #152]	; 0x98
  402b7a:	dc01      	bgt.n	402b80 <_svfprintf_r+0xa88>
  402b7c:	3608      	adds	r6, #8
  402b7e:	e008      	b.n	402b92 <_svfprintf_r+0xa9a>
  402b80:	4650      	mov	r0, sl
  402b82:	4659      	mov	r1, fp
  402b84:	aa25      	add	r2, sp, #148	; 0x94
  402b86:	f002 fa07 	bl	404f98 <__ssprint_r>
  402b8a:	2800      	cmp	r0, #0
  402b8c:	f040 823d 	bne.w	40300a <_svfprintf_r+0xf12>
  402b90:	ae32      	add	r6, sp, #200	; 0xc8
  402b92:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402b94:	1e6c      	subs	r4, r5, #1
  402b96:	2c00      	cmp	r4, #0
  402b98:	f340 81e6 	ble.w	402f68 <_svfprintf_r+0xe70>
  402b9c:	4b40      	ldr	r3, [pc, #256]	; (402ca0 <_svfprintf_r+0xba8>)
  402b9e:	6033      	str	r3, [r6, #0]
  402ba0:	2c10      	cmp	r4, #16
  402ba2:	dd16      	ble.n	402bd2 <_svfprintf_r+0xada>
  402ba4:	2310      	movs	r3, #16
  402ba6:	6073      	str	r3, [r6, #4]
  402ba8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402baa:	3310      	adds	r3, #16
  402bac:	9327      	str	r3, [sp, #156]	; 0x9c
  402bae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402bb0:	3301      	adds	r3, #1
  402bb2:	2b07      	cmp	r3, #7
  402bb4:	9326      	str	r3, [sp, #152]	; 0x98
  402bb6:	dc01      	bgt.n	402bbc <_svfprintf_r+0xac4>
  402bb8:	3608      	adds	r6, #8
  402bba:	e008      	b.n	402bce <_svfprintf_r+0xad6>
  402bbc:	4650      	mov	r0, sl
  402bbe:	4659      	mov	r1, fp
  402bc0:	aa25      	add	r2, sp, #148	; 0x94
  402bc2:	f002 f9e9 	bl	404f98 <__ssprint_r>
  402bc6:	2800      	cmp	r0, #0
  402bc8:	f040 821f 	bne.w	40300a <_svfprintf_r+0xf12>
  402bcc:	ae32      	add	r6, sp, #200	; 0xc8
  402bce:	3c10      	subs	r4, #16
  402bd0:	e7e4      	b.n	402b9c <_svfprintf_r+0xaa4>
  402bd2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402bd4:	6074      	str	r4, [r6, #4]
  402bd6:	441c      	add	r4, r3
  402bd8:	9427      	str	r4, [sp, #156]	; 0x9c
  402bda:	e134      	b.n	402e46 <_svfprintf_r+0xd4e>
  402bdc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402bde:	2b00      	cmp	r3, #0
  402be0:	dc73      	bgt.n	402cca <_svfprintf_r+0xbd2>
  402be2:	4b30      	ldr	r3, [pc, #192]	; (402ca4 <_svfprintf_r+0xbac>)
  402be4:	6033      	str	r3, [r6, #0]
  402be6:	2301      	movs	r3, #1
  402be8:	6073      	str	r3, [r6, #4]
  402bea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402bec:	3301      	adds	r3, #1
  402bee:	9327      	str	r3, [sp, #156]	; 0x9c
  402bf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402bf2:	3301      	adds	r3, #1
  402bf4:	2b07      	cmp	r3, #7
  402bf6:	9326      	str	r3, [sp, #152]	; 0x98
  402bf8:	dc01      	bgt.n	402bfe <_svfprintf_r+0xb06>
  402bfa:	3608      	adds	r6, #8
  402bfc:	e008      	b.n	402c10 <_svfprintf_r+0xb18>
  402bfe:	4650      	mov	r0, sl
  402c00:	4659      	mov	r1, fp
  402c02:	aa25      	add	r2, sp, #148	; 0x94
  402c04:	f002 f9c8 	bl	404f98 <__ssprint_r>
  402c08:	2800      	cmp	r0, #0
  402c0a:	f040 81fe 	bne.w	40300a <_svfprintf_r+0xf12>
  402c0e:	ae32      	add	r6, sp, #200	; 0xc8
  402c10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402c12:	b923      	cbnz	r3, 402c1e <_svfprintf_r+0xb26>
  402c14:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402c16:	b914      	cbnz	r4, 402c1e <_svfprintf_r+0xb26>
  402c18:	07f8      	lsls	r0, r7, #31
  402c1a:	f140 81a5 	bpl.w	402f68 <_svfprintf_r+0xe70>
  402c1e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  402c20:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402c22:	9d18      	ldr	r5, [sp, #96]	; 0x60
  402c24:	6035      	str	r5, [r6, #0]
  402c26:	4423      	add	r3, r4
  402c28:	9327      	str	r3, [sp, #156]	; 0x9c
  402c2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402c2c:	6074      	str	r4, [r6, #4]
  402c2e:	3301      	adds	r3, #1
  402c30:	2b07      	cmp	r3, #7
  402c32:	9326      	str	r3, [sp, #152]	; 0x98
  402c34:	dc01      	bgt.n	402c3a <_svfprintf_r+0xb42>
  402c36:	3608      	adds	r6, #8
  402c38:	e008      	b.n	402c4c <_svfprintf_r+0xb54>
  402c3a:	4650      	mov	r0, sl
  402c3c:	4659      	mov	r1, fp
  402c3e:	aa25      	add	r2, sp, #148	; 0x94
  402c40:	f002 f9aa 	bl	404f98 <__ssprint_r>
  402c44:	2800      	cmp	r0, #0
  402c46:	f040 81e0 	bne.w	40300a <_svfprintf_r+0xf12>
  402c4a:	ae32      	add	r6, sp, #200	; 0xc8
  402c4c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  402c4e:	4264      	negs	r4, r4
  402c50:	2c00      	cmp	r4, #0
  402c52:	dd32      	ble.n	402cba <_svfprintf_r+0xbc2>
  402c54:	4b12      	ldr	r3, [pc, #72]	; (402ca0 <_svfprintf_r+0xba8>)
  402c56:	6033      	str	r3, [r6, #0]
  402c58:	2c10      	cmp	r4, #16
  402c5a:	dd16      	ble.n	402c8a <_svfprintf_r+0xb92>
  402c5c:	2310      	movs	r3, #16
  402c5e:	6073      	str	r3, [r6, #4]
  402c60:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402c62:	3310      	adds	r3, #16
  402c64:	9327      	str	r3, [sp, #156]	; 0x9c
  402c66:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402c68:	3301      	adds	r3, #1
  402c6a:	2b07      	cmp	r3, #7
  402c6c:	9326      	str	r3, [sp, #152]	; 0x98
  402c6e:	dc01      	bgt.n	402c74 <_svfprintf_r+0xb7c>
  402c70:	3608      	adds	r6, #8
  402c72:	e008      	b.n	402c86 <_svfprintf_r+0xb8e>
  402c74:	4650      	mov	r0, sl
  402c76:	4659      	mov	r1, fp
  402c78:	aa25      	add	r2, sp, #148	; 0x94
  402c7a:	f002 f98d 	bl	404f98 <__ssprint_r>
  402c7e:	2800      	cmp	r0, #0
  402c80:	f040 81c3 	bne.w	40300a <_svfprintf_r+0xf12>
  402c84:	ae32      	add	r6, sp, #200	; 0xc8
  402c86:	3c10      	subs	r4, #16
  402c88:	e7e4      	b.n	402c54 <_svfprintf_r+0xb5c>
  402c8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402c8c:	6074      	str	r4, [r6, #4]
  402c8e:	441c      	add	r4, r3
  402c90:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402c92:	9427      	str	r4, [sp, #156]	; 0x9c
  402c94:	3301      	adds	r3, #1
  402c96:	2b07      	cmp	r3, #7
  402c98:	9326      	str	r3, [sp, #152]	; 0x98
  402c9a:	dc05      	bgt.n	402ca8 <_svfprintf_r+0xbb0>
  402c9c:	3608      	adds	r6, #8
  402c9e:	e00c      	b.n	402cba <_svfprintf_r+0xbc2>
  402ca0:	00406226 	.word	0x00406226
  402ca4:	00406268 	.word	0x00406268
  402ca8:	4650      	mov	r0, sl
  402caa:	4659      	mov	r1, fp
  402cac:	aa25      	add	r2, sp, #148	; 0x94
  402cae:	f002 f973 	bl	404f98 <__ssprint_r>
  402cb2:	2800      	cmp	r0, #0
  402cb4:	f040 81a9 	bne.w	40300a <_svfprintf_r+0xf12>
  402cb8:	ae32      	add	r6, sp, #200	; 0xc8
  402cba:	9d07      	ldr	r5, [sp, #28]
  402cbc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402cbe:	6035      	str	r5, [r6, #0]
  402cc0:	6074      	str	r4, [r6, #4]
  402cc2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402cc4:	4423      	add	r3, r4
  402cc6:	9327      	str	r3, [sp, #156]	; 0x9c
  402cc8:	e0bd      	b.n	402e46 <_svfprintf_r+0xd4e>
  402cca:	9809      	ldr	r0, [sp, #36]	; 0x24
  402ccc:	9d07      	ldr	r5, [sp, #28]
  402cce:	4681      	mov	r9, r0
  402cd0:	45a1      	cmp	r9, r4
  402cd2:	bfa8      	it	ge
  402cd4:	46a1      	movge	r9, r4
  402cd6:	f1b9 0f00 	cmp.w	r9, #0
  402cda:	4405      	add	r5, r0
  402cdc:	dd15      	ble.n	402d0a <_svfprintf_r+0xc12>
  402cde:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402ce0:	9907      	ldr	r1, [sp, #28]
  402ce2:	444b      	add	r3, r9
  402ce4:	9327      	str	r3, [sp, #156]	; 0x9c
  402ce6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402ce8:	3301      	adds	r3, #1
  402cea:	2b07      	cmp	r3, #7
  402cec:	e886 0202 	stmia.w	r6, {r1, r9}
  402cf0:	9326      	str	r3, [sp, #152]	; 0x98
  402cf2:	dc01      	bgt.n	402cf8 <_svfprintf_r+0xc00>
  402cf4:	3608      	adds	r6, #8
  402cf6:	e008      	b.n	402d0a <_svfprintf_r+0xc12>
  402cf8:	4650      	mov	r0, sl
  402cfa:	4659      	mov	r1, fp
  402cfc:	aa25      	add	r2, sp, #148	; 0x94
  402cfe:	f002 f94b 	bl	404f98 <__ssprint_r>
  402d02:	2800      	cmp	r0, #0
  402d04:	f040 8181 	bne.w	40300a <_svfprintf_r+0xf12>
  402d08:	ae32      	add	r6, sp, #200	; 0xc8
  402d0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  402d0e:	ebc9 0904 	rsb	r9, r9, r4
  402d12:	f1b9 0f00 	cmp.w	r9, #0
  402d16:	dd31      	ble.n	402d7c <_svfprintf_r+0xc84>
  402d18:	4b9a      	ldr	r3, [pc, #616]	; (402f84 <_svfprintf_r+0xe8c>)
  402d1a:	6033      	str	r3, [r6, #0]
  402d1c:	f1b9 0f10 	cmp.w	r9, #16
  402d20:	dd17      	ble.n	402d52 <_svfprintf_r+0xc5a>
  402d22:	2310      	movs	r3, #16
  402d24:	6073      	str	r3, [r6, #4]
  402d26:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402d28:	3310      	adds	r3, #16
  402d2a:	9327      	str	r3, [sp, #156]	; 0x9c
  402d2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d2e:	3301      	adds	r3, #1
  402d30:	2b07      	cmp	r3, #7
  402d32:	9326      	str	r3, [sp, #152]	; 0x98
  402d34:	dc01      	bgt.n	402d3a <_svfprintf_r+0xc42>
  402d36:	3608      	adds	r6, #8
  402d38:	e008      	b.n	402d4c <_svfprintf_r+0xc54>
  402d3a:	4650      	mov	r0, sl
  402d3c:	4659      	mov	r1, fp
  402d3e:	aa25      	add	r2, sp, #148	; 0x94
  402d40:	f002 f92a 	bl	404f98 <__ssprint_r>
  402d44:	2800      	cmp	r0, #0
  402d46:	f040 8160 	bne.w	40300a <_svfprintf_r+0xf12>
  402d4a:	ae32      	add	r6, sp, #200	; 0xc8
  402d4c:	f1a9 0910 	sub.w	r9, r9, #16
  402d50:	e7e2      	b.n	402d18 <_svfprintf_r+0xc20>
  402d52:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402d54:	f8c6 9004 	str.w	r9, [r6, #4]
  402d58:	444b      	add	r3, r9
  402d5a:	9327      	str	r3, [sp, #156]	; 0x9c
  402d5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d5e:	3301      	adds	r3, #1
  402d60:	2b07      	cmp	r3, #7
  402d62:	9326      	str	r3, [sp, #152]	; 0x98
  402d64:	dc01      	bgt.n	402d6a <_svfprintf_r+0xc72>
  402d66:	3608      	adds	r6, #8
  402d68:	e008      	b.n	402d7c <_svfprintf_r+0xc84>
  402d6a:	4650      	mov	r0, sl
  402d6c:	4659      	mov	r1, fp
  402d6e:	aa25      	add	r2, sp, #148	; 0x94
  402d70:	f002 f912 	bl	404f98 <__ssprint_r>
  402d74:	2800      	cmp	r0, #0
  402d76:	f040 8148 	bne.w	40300a <_svfprintf_r+0xf12>
  402d7a:	ae32      	add	r6, sp, #200	; 0xc8
  402d7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402d7e:	9809      	ldr	r0, [sp, #36]	; 0x24
  402d80:	9a07      	ldr	r2, [sp, #28]
  402d82:	4283      	cmp	r3, r0
  402d84:	4414      	add	r4, r2
  402d86:	db01      	blt.n	402d8c <_svfprintf_r+0xc94>
  402d88:	07f9      	lsls	r1, r7, #31
  402d8a:	d516      	bpl.n	402dba <_svfprintf_r+0xcc2>
  402d8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  402d8e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402d90:	9918      	ldr	r1, [sp, #96]	; 0x60
  402d92:	6031      	str	r1, [r6, #0]
  402d94:	4413      	add	r3, r2
  402d96:	9327      	str	r3, [sp, #156]	; 0x9c
  402d98:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d9a:	6072      	str	r2, [r6, #4]
  402d9c:	3301      	adds	r3, #1
  402d9e:	2b07      	cmp	r3, #7
  402da0:	9326      	str	r3, [sp, #152]	; 0x98
  402da2:	dc01      	bgt.n	402da8 <_svfprintf_r+0xcb0>
  402da4:	3608      	adds	r6, #8
  402da6:	e008      	b.n	402dba <_svfprintf_r+0xcc2>
  402da8:	4650      	mov	r0, sl
  402daa:	4659      	mov	r1, fp
  402dac:	aa25      	add	r2, sp, #148	; 0x94
  402dae:	f002 f8f3 	bl	404f98 <__ssprint_r>
  402db2:	2800      	cmp	r0, #0
  402db4:	f040 8129 	bne.w	40300a <_svfprintf_r+0xf12>
  402db8:	ae32      	add	r6, sp, #200	; 0xc8
  402dba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
  402dbe:	1b2d      	subs	r5, r5, r4
  402dc0:	1ac3      	subs	r3, r0, r3
  402dc2:	429d      	cmp	r5, r3
  402dc4:	bfa8      	it	ge
  402dc6:	461d      	movge	r5, r3
  402dc8:	2d00      	cmp	r5, #0
  402dca:	dd14      	ble.n	402df6 <_svfprintf_r+0xcfe>
  402dcc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402dce:	442b      	add	r3, r5
  402dd0:	9327      	str	r3, [sp, #156]	; 0x9c
  402dd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402dd4:	3301      	adds	r3, #1
  402dd6:	2b07      	cmp	r3, #7
  402dd8:	e886 0030 	stmia.w	r6, {r4, r5}
  402ddc:	9326      	str	r3, [sp, #152]	; 0x98
  402dde:	dc01      	bgt.n	402de4 <_svfprintf_r+0xcec>
  402de0:	3608      	adds	r6, #8
  402de2:	e008      	b.n	402df6 <_svfprintf_r+0xcfe>
  402de4:	4650      	mov	r0, sl
  402de6:	4659      	mov	r1, fp
  402de8:	aa25      	add	r2, sp, #148	; 0x94
  402dea:	f002 f8d5 	bl	404f98 <__ssprint_r>
  402dee:	2800      	cmp	r0, #0
  402df0:	f040 810b 	bne.w	40300a <_svfprintf_r+0xf12>
  402df4:	ae32      	add	r6, sp, #200	; 0xc8
  402df6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402df8:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402dfa:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  402dfe:	1ae3      	subs	r3, r4, r3
  402e00:	1b5d      	subs	r5, r3, r5
  402e02:	2d00      	cmp	r5, #0
  402e04:	f340 80b0 	ble.w	402f68 <_svfprintf_r+0xe70>
  402e08:	4b5e      	ldr	r3, [pc, #376]	; (402f84 <_svfprintf_r+0xe8c>)
  402e0a:	6033      	str	r3, [r6, #0]
  402e0c:	2d10      	cmp	r5, #16
  402e0e:	dd16      	ble.n	402e3e <_svfprintf_r+0xd46>
  402e10:	2310      	movs	r3, #16
  402e12:	6073      	str	r3, [r6, #4]
  402e14:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402e16:	3310      	adds	r3, #16
  402e18:	9327      	str	r3, [sp, #156]	; 0x9c
  402e1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e1c:	3301      	adds	r3, #1
  402e1e:	2b07      	cmp	r3, #7
  402e20:	9326      	str	r3, [sp, #152]	; 0x98
  402e22:	dc01      	bgt.n	402e28 <_svfprintf_r+0xd30>
  402e24:	3608      	adds	r6, #8
  402e26:	e008      	b.n	402e3a <_svfprintf_r+0xd42>
  402e28:	4650      	mov	r0, sl
  402e2a:	4659      	mov	r1, fp
  402e2c:	aa25      	add	r2, sp, #148	; 0x94
  402e2e:	f002 f8b3 	bl	404f98 <__ssprint_r>
  402e32:	2800      	cmp	r0, #0
  402e34:	f040 80e9 	bne.w	40300a <_svfprintf_r+0xf12>
  402e38:	ae32      	add	r6, sp, #200	; 0xc8
  402e3a:	3d10      	subs	r5, #16
  402e3c:	e7e4      	b.n	402e08 <_svfprintf_r+0xd10>
  402e3e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402e40:	6075      	str	r5, [r6, #4]
  402e42:	441d      	add	r5, r3
  402e44:	9527      	str	r5, [sp, #156]	; 0x9c
  402e46:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e48:	3301      	adds	r3, #1
  402e4a:	2b07      	cmp	r3, #7
  402e4c:	9326      	str	r3, [sp, #152]	; 0x98
  402e4e:	f340 808a 	ble.w	402f66 <_svfprintf_r+0xe6e>
  402e52:	4650      	mov	r0, sl
  402e54:	4659      	mov	r1, fp
  402e56:	aa25      	add	r2, sp, #148	; 0x94
  402e58:	f002 f89e 	bl	404f98 <__ssprint_r>
  402e5c:	2800      	cmp	r0, #0
  402e5e:	f040 80d4 	bne.w	40300a <_svfprintf_r+0xf12>
  402e62:	ae32      	add	r6, sp, #200	; 0xc8
  402e64:	e080      	b.n	402f68 <_svfprintf_r+0xe70>
  402e66:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402e68:	2d01      	cmp	r5, #1
  402e6a:	dc01      	bgt.n	402e70 <_svfprintf_r+0xd78>
  402e6c:	07fa      	lsls	r2, r7, #31
  402e6e:	d56d      	bpl.n	402f4c <_svfprintf_r+0xe54>
  402e70:	2301      	movs	r3, #1
  402e72:	6073      	str	r3, [r6, #4]
  402e74:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402e76:	9c07      	ldr	r4, [sp, #28]
  402e78:	6034      	str	r4, [r6, #0]
  402e7a:	3301      	adds	r3, #1
  402e7c:	9327      	str	r3, [sp, #156]	; 0x9c
  402e7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e80:	3301      	adds	r3, #1
  402e82:	2b07      	cmp	r3, #7
  402e84:	9326      	str	r3, [sp, #152]	; 0x98
  402e86:	dc01      	bgt.n	402e8c <_svfprintf_r+0xd94>
  402e88:	3608      	adds	r6, #8
  402e8a:	e008      	b.n	402e9e <_svfprintf_r+0xda6>
  402e8c:	4650      	mov	r0, sl
  402e8e:	4659      	mov	r1, fp
  402e90:	aa25      	add	r2, sp, #148	; 0x94
  402e92:	f002 f881 	bl	404f98 <__ssprint_r>
  402e96:	2800      	cmp	r0, #0
  402e98:	f040 80b7 	bne.w	40300a <_svfprintf_r+0xf12>
  402e9c:	ae32      	add	r6, sp, #200	; 0xc8
  402e9e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  402ea0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402ea2:	9d18      	ldr	r5, [sp, #96]	; 0x60
  402ea4:	6035      	str	r5, [r6, #0]
  402ea6:	4423      	add	r3, r4
  402ea8:	9327      	str	r3, [sp, #156]	; 0x9c
  402eaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402eac:	6074      	str	r4, [r6, #4]
  402eae:	3301      	adds	r3, #1
  402eb0:	2b07      	cmp	r3, #7
  402eb2:	9326      	str	r3, [sp, #152]	; 0x98
  402eb4:	dc01      	bgt.n	402eba <_svfprintf_r+0xdc2>
  402eb6:	3608      	adds	r6, #8
  402eb8:	e008      	b.n	402ecc <_svfprintf_r+0xdd4>
  402eba:	4650      	mov	r0, sl
  402ebc:	4659      	mov	r1, fp
  402ebe:	aa25      	add	r2, sp, #148	; 0x94
  402ec0:	f002 f86a 	bl	404f98 <__ssprint_r>
  402ec4:	2800      	cmp	r0, #0
  402ec6:	f040 80a0 	bne.w	40300a <_svfprintf_r+0xf12>
  402eca:	ae32      	add	r6, sp, #200	; 0xc8
  402ecc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  402ed0:	2200      	movs	r2, #0
  402ed2:	2300      	movs	r3, #0
  402ed4:	f002 fd9e 	bl	405a14 <__aeabi_dcmpeq>
  402ed8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  402eda:	1e6c      	subs	r4, r5, #1
  402edc:	b940      	cbnz	r0, 402ef0 <_svfprintf_r+0xdf8>
  402ede:	9d07      	ldr	r5, [sp, #28]
  402ee0:	1c6b      	adds	r3, r5, #1
  402ee2:	e886 0018 	stmia.w	r6, {r3, r4}
  402ee6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402ee8:	9c09      	ldr	r4, [sp, #36]	; 0x24
  402eea:	3b01      	subs	r3, #1
  402eec:	4423      	add	r3, r4
  402eee:	e033      	b.n	402f58 <_svfprintf_r+0xe60>
  402ef0:	2c00      	cmp	r4, #0
  402ef2:	dd34      	ble.n	402f5e <_svfprintf_r+0xe66>
  402ef4:	4b23      	ldr	r3, [pc, #140]	; (402f84 <_svfprintf_r+0xe8c>)
  402ef6:	6033      	str	r3, [r6, #0]
  402ef8:	2c10      	cmp	r4, #16
  402efa:	dd15      	ble.n	402f28 <_svfprintf_r+0xe30>
  402efc:	2310      	movs	r3, #16
  402efe:	6073      	str	r3, [r6, #4]
  402f00:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402f02:	3310      	adds	r3, #16
  402f04:	9327      	str	r3, [sp, #156]	; 0x9c
  402f06:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f08:	3301      	adds	r3, #1
  402f0a:	2b07      	cmp	r3, #7
  402f0c:	9326      	str	r3, [sp, #152]	; 0x98
  402f0e:	dc01      	bgt.n	402f14 <_svfprintf_r+0xe1c>
  402f10:	3608      	adds	r6, #8
  402f12:	e007      	b.n	402f24 <_svfprintf_r+0xe2c>
  402f14:	4650      	mov	r0, sl
  402f16:	4659      	mov	r1, fp
  402f18:	aa25      	add	r2, sp, #148	; 0x94
  402f1a:	f002 f83d 	bl	404f98 <__ssprint_r>
  402f1e:	2800      	cmp	r0, #0
  402f20:	d173      	bne.n	40300a <_svfprintf_r+0xf12>
  402f22:	ae32      	add	r6, sp, #200	; 0xc8
  402f24:	3c10      	subs	r4, #16
  402f26:	e7e5      	b.n	402ef4 <_svfprintf_r+0xdfc>
  402f28:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402f2a:	6074      	str	r4, [r6, #4]
  402f2c:	441c      	add	r4, r3
  402f2e:	9427      	str	r4, [sp, #156]	; 0x9c
  402f30:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f32:	3301      	adds	r3, #1
  402f34:	2b07      	cmp	r3, #7
  402f36:	9326      	str	r3, [sp, #152]	; 0x98
  402f38:	dd10      	ble.n	402f5c <_svfprintf_r+0xe64>
  402f3a:	4650      	mov	r0, sl
  402f3c:	4659      	mov	r1, fp
  402f3e:	aa25      	add	r2, sp, #148	; 0x94
  402f40:	f002 f82a 	bl	404f98 <__ssprint_r>
  402f44:	2800      	cmp	r0, #0
  402f46:	d160      	bne.n	40300a <_svfprintf_r+0xf12>
  402f48:	ae32      	add	r6, sp, #200	; 0xc8
  402f4a:	e008      	b.n	402f5e <_svfprintf_r+0xe66>
  402f4c:	2301      	movs	r3, #1
  402f4e:	6073      	str	r3, [r6, #4]
  402f50:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402f52:	9d07      	ldr	r5, [sp, #28]
  402f54:	6035      	str	r5, [r6, #0]
  402f56:	3301      	adds	r3, #1
  402f58:	9327      	str	r3, [sp, #156]	; 0x9c
  402f5a:	e7e9      	b.n	402f30 <_svfprintf_r+0xe38>
  402f5c:	3608      	adds	r6, #8
  402f5e:	ab21      	add	r3, sp, #132	; 0x84
  402f60:	6033      	str	r3, [r6, #0]
  402f62:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  402f64:	e6ac      	b.n	402cc0 <_svfprintf_r+0xbc8>
  402f66:	3608      	adds	r6, #8
  402f68:	077b      	lsls	r3, r7, #29
  402f6a:	d40d      	bmi.n	402f88 <_svfprintf_r+0xe90>
  402f6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402f6e:	980a      	ldr	r0, [sp, #40]	; 0x28
  402f70:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  402f72:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402f74:	42a0      	cmp	r0, r4
  402f76:	bfac      	ite	ge
  402f78:	182d      	addge	r5, r5, r0
  402f7a:	192d      	addlt	r5, r5, r4
  402f7c:	950f      	str	r5, [sp, #60]	; 0x3c
  402f7e:	2b00      	cmp	r3, #0
  402f80:	d037      	beq.n	402ff2 <_svfprintf_r+0xefa>
  402f82:	e030      	b.n	402fe6 <_svfprintf_r+0xeee>
  402f84:	00406226 	.word	0x00406226
  402f88:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  402f8a:	980a      	ldr	r0, [sp, #40]	; 0x28
  402f8c:	1a2c      	subs	r4, r5, r0
  402f8e:	2c00      	cmp	r4, #0
  402f90:	ddec      	ble.n	402f6c <_svfprintf_r+0xe74>
  402f92:	4b23      	ldr	r3, [pc, #140]	; (403020 <_svfprintf_r+0xf28>)
  402f94:	6033      	str	r3, [r6, #0]
  402f96:	2c10      	cmp	r4, #16
  402f98:	dd14      	ble.n	402fc4 <_svfprintf_r+0xecc>
  402f9a:	2310      	movs	r3, #16
  402f9c:	6073      	str	r3, [r6, #4]
  402f9e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402fa0:	3310      	adds	r3, #16
  402fa2:	9327      	str	r3, [sp, #156]	; 0x9c
  402fa4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402fa6:	3301      	adds	r3, #1
  402fa8:	2b07      	cmp	r3, #7
  402faa:	9326      	str	r3, [sp, #152]	; 0x98
  402fac:	dc01      	bgt.n	402fb2 <_svfprintf_r+0xeba>
  402fae:	3608      	adds	r6, #8
  402fb0:	e006      	b.n	402fc0 <_svfprintf_r+0xec8>
  402fb2:	4650      	mov	r0, sl
  402fb4:	4659      	mov	r1, fp
  402fb6:	aa25      	add	r2, sp, #148	; 0x94
  402fb8:	f001 ffee 	bl	404f98 <__ssprint_r>
  402fbc:	bb28      	cbnz	r0, 40300a <_svfprintf_r+0xf12>
  402fbe:	ae32      	add	r6, sp, #200	; 0xc8
  402fc0:	3c10      	subs	r4, #16
  402fc2:	e7e6      	b.n	402f92 <_svfprintf_r+0xe9a>
  402fc4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402fc6:	6074      	str	r4, [r6, #4]
  402fc8:	441c      	add	r4, r3
  402fca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402fcc:	9427      	str	r4, [sp, #156]	; 0x9c
  402fce:	3301      	adds	r3, #1
  402fd0:	2b07      	cmp	r3, #7
  402fd2:	9326      	str	r3, [sp, #152]	; 0x98
  402fd4:	ddca      	ble.n	402f6c <_svfprintf_r+0xe74>
  402fd6:	4650      	mov	r0, sl
  402fd8:	4659      	mov	r1, fp
  402fda:	aa25      	add	r2, sp, #148	; 0x94
  402fdc:	f001 ffdc 	bl	404f98 <__ssprint_r>
  402fe0:	2800      	cmp	r0, #0
  402fe2:	d0c3      	beq.n	402f6c <_svfprintf_r+0xe74>
  402fe4:	e011      	b.n	40300a <_svfprintf_r+0xf12>
  402fe6:	4650      	mov	r0, sl
  402fe8:	4659      	mov	r1, fp
  402fea:	aa25      	add	r2, sp, #148	; 0x94
  402fec:	f001 ffd4 	bl	404f98 <__ssprint_r>
  402ff0:	b958      	cbnz	r0, 40300a <_svfprintf_r+0xf12>
  402ff2:	2300      	movs	r3, #0
  402ff4:	9326      	str	r3, [sp, #152]	; 0x98
  402ff6:	ae32      	add	r6, sp, #200	; 0xc8
  402ff8:	f7ff b8b3 	b.w	402162 <_svfprintf_r+0x6a>
  402ffc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402ffe:	b123      	cbz	r3, 40300a <_svfprintf_r+0xf12>
  403000:	4650      	mov	r0, sl
  403002:	4659      	mov	r1, fp
  403004:	aa25      	add	r2, sp, #148	; 0x94
  403006:	f001 ffc7 	bl	404f98 <__ssprint_r>
  40300a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40300e:	980f      	ldr	r0, [sp, #60]	; 0x3c
  403010:	f013 0f40 	tst.w	r3, #64	; 0x40
  403014:	bf18      	it	ne
  403016:	f04f 30ff 	movne.w	r0, #4294967295
  40301a:	b043      	add	sp, #268	; 0x10c
  40301c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403020:	00406216 	.word	0x00406216

00403024 <register_fini>:
  403024:	4b02      	ldr	r3, [pc, #8]	; (403030 <register_fini+0xc>)
  403026:	b113      	cbz	r3, 40302e <register_fini+0xa>
  403028:	4802      	ldr	r0, [pc, #8]	; (403034 <register_fini+0x10>)
  40302a:	f000 b805 	b.w	403038 <atexit>
  40302e:	4770      	bx	lr
  403030:	00000000 	.word	0x00000000
  403034:	00403cc1 	.word	0x00403cc1

00403038 <atexit>:
  403038:	4601      	mov	r1, r0
  40303a:	2000      	movs	r0, #0
  40303c:	4602      	mov	r2, r0
  40303e:	4603      	mov	r3, r0
  403040:	f002 bc18 	b.w	405874 <__register_exitproc>
  403044:	0000      	movs	r0, r0
	...

00403048 <quorem>:
  403048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40304c:	6903      	ldr	r3, [r0, #16]
  40304e:	690c      	ldr	r4, [r1, #16]
  403050:	42a3      	cmp	r3, r4
  403052:	4680      	mov	r8, r0
  403054:	f2c0 8081 	blt.w	40315a <quorem+0x112>
  403058:	3c01      	subs	r4, #1
  40305a:	f101 0714 	add.w	r7, r1, #20
  40305e:	00a2      	lsls	r2, r4, #2
  403060:	f100 0514 	add.w	r5, r0, #20
  403064:	4691      	mov	r9, r2
  403066:	9200      	str	r2, [sp, #0]
  403068:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
  40306c:	442a      	add	r2, r5
  40306e:	9201      	str	r2, [sp, #4]
  403070:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
  403074:	3601      	adds	r6, #1
  403076:	fbb2 f6f6 	udiv	r6, r2, r6
  40307a:	44b9      	add	r9, r7
  40307c:	2e00      	cmp	r6, #0
  40307e:	d03a      	beq.n	4030f6 <quorem+0xae>
  403080:	f04f 0e00 	mov.w	lr, #0
  403084:	463a      	mov	r2, r7
  403086:	4628      	mov	r0, r5
  403088:	46f3      	mov	fp, lr
  40308a:	f852 cb04 	ldr.w	ip, [r2], #4
  40308e:	6803      	ldr	r3, [r0, #0]
  403090:	fa1f fa8c 	uxth.w	sl, ip
  403094:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  403098:	fb0a ea06 	mla	sl, sl, r6, lr
  40309c:	fb0c fc06 	mul.w	ip, ip, r6
  4030a0:	eb0c 4c1a 	add.w	ip, ip, sl, lsr #16
  4030a4:	fa1f fa8a 	uxth.w	sl, sl
  4030a8:	ebca 0a0b 	rsb	sl, sl, fp
  4030ac:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
  4030b0:	fa1f fc8c 	uxth.w	ip, ip
  4030b4:	fa1a fa83 	uxtah	sl, sl, r3
  4030b8:	ebcc 4c13 	rsb	ip, ip, r3, lsr #16
  4030bc:	eb0c 4c2a 	add.w	ip, ip, sl, asr #16
  4030c0:	fa1f fa8a 	uxth.w	sl, sl
  4030c4:	ea4a 4a0c 	orr.w	sl, sl, ip, lsl #16
  4030c8:	454a      	cmp	r2, r9
  4030ca:	ea4f 4b2c 	mov.w	fp, ip, asr #16
  4030ce:	f840 ab04 	str.w	sl, [r0], #4
  4030d2:	d9da      	bls.n	40308a <quorem+0x42>
  4030d4:	9a00      	ldr	r2, [sp, #0]
  4030d6:	58ab      	ldr	r3, [r5, r2]
  4030d8:	b96b      	cbnz	r3, 4030f6 <quorem+0xae>
  4030da:	9a01      	ldr	r2, [sp, #4]
  4030dc:	1f13      	subs	r3, r2, #4
  4030de:	42ab      	cmp	r3, r5
  4030e0:	461a      	mov	r2, r3
  4030e2:	d802      	bhi.n	4030ea <quorem+0xa2>
  4030e4:	f8c8 4010 	str.w	r4, [r8, #16]
  4030e8:	e005      	b.n	4030f6 <quorem+0xae>
  4030ea:	6812      	ldr	r2, [r2, #0]
  4030ec:	3b04      	subs	r3, #4
  4030ee:	2a00      	cmp	r2, #0
  4030f0:	d1f8      	bne.n	4030e4 <quorem+0x9c>
  4030f2:	3c01      	subs	r4, #1
  4030f4:	e7f3      	b.n	4030de <quorem+0x96>
  4030f6:	4640      	mov	r0, r8
  4030f8:	f001 fbab 	bl	404852 <__mcmp>
  4030fc:	2800      	cmp	r0, #0
  4030fe:	db2a      	blt.n	403156 <quorem+0x10e>
  403100:	3601      	adds	r6, #1
  403102:	462b      	mov	r3, r5
  403104:	2000      	movs	r0, #0
  403106:	f857 cb04 	ldr.w	ip, [r7], #4
  40310a:	681a      	ldr	r2, [r3, #0]
  40310c:	fa1f f18c 	uxth.w	r1, ip
  403110:	1a41      	subs	r1, r0, r1
  403112:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  403116:	fa11 f182 	uxtah	r1, r1, r2
  40311a:	ebcc 4212 	rsb	r2, ip, r2, lsr #16
  40311e:	eb02 4221 	add.w	r2, r2, r1, asr #16
  403122:	b289      	uxth	r1, r1
  403124:	1410      	asrs	r0, r2, #16
  403126:	454f      	cmp	r7, r9
  403128:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  40312c:	f843 2b04 	str.w	r2, [r3], #4
  403130:	d9e9      	bls.n	403106 <quorem+0xbe>
  403132:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
  403136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
  40313a:	b962      	cbnz	r2, 403156 <quorem+0x10e>
  40313c:	3b04      	subs	r3, #4
  40313e:	42ab      	cmp	r3, r5
  403140:	461a      	mov	r2, r3
  403142:	d802      	bhi.n	40314a <quorem+0x102>
  403144:	f8c8 4010 	str.w	r4, [r8, #16]
  403148:	e005      	b.n	403156 <quorem+0x10e>
  40314a:	6812      	ldr	r2, [r2, #0]
  40314c:	3b04      	subs	r3, #4
  40314e:	2a00      	cmp	r2, #0
  403150:	d1f8      	bne.n	403144 <quorem+0xfc>
  403152:	3c01      	subs	r4, #1
  403154:	e7f3      	b.n	40313e <quorem+0xf6>
  403156:	4630      	mov	r0, r6
  403158:	e000      	b.n	40315c <quorem+0x114>
  40315a:	2000      	movs	r0, #0
  40315c:	b003      	add	sp, #12
  40315e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00403162 <_dtoa_r>:
  403162:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403166:	6c01      	ldr	r1, [r0, #64]	; 0x40
  403168:	b09b      	sub	sp, #108	; 0x6c
  40316a:	4682      	mov	sl, r0
  40316c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40316e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  403172:	b151      	cbz	r1, 40318a <_dtoa_r+0x28>
  403174:	6c43      	ldr	r3, [r0, #68]	; 0x44
  403176:	604b      	str	r3, [r1, #4]
  403178:	2201      	movs	r2, #1
  40317a:	fa02 f303 	lsl.w	r3, r2, r3
  40317e:	608b      	str	r3, [r1, #8]
  403180:	f001 f962 	bl	404448 <_Bfree>
  403184:	2300      	movs	r3, #0
  403186:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
  40318a:	9805      	ldr	r0, [sp, #20]
  40318c:	2800      	cmp	r0, #0
  40318e:	da05      	bge.n	40319c <_dtoa_r+0x3a>
  403190:	2301      	movs	r3, #1
  403192:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
  403196:	6023      	str	r3, [r4, #0]
  403198:	9105      	str	r1, [sp, #20]
  40319a:	e001      	b.n	4031a0 <_dtoa_r+0x3e>
  40319c:	2300      	movs	r3, #0
  40319e:	6023      	str	r3, [r4, #0]
  4031a0:	9f05      	ldr	r7, [sp, #20]
  4031a2:	4a9b      	ldr	r2, [pc, #620]	; (403410 <_dtoa_r+0x2ae>)
  4031a4:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
  4031a8:	0d1b      	lsrs	r3, r3, #20
  4031aa:	051b      	lsls	r3, r3, #20
  4031ac:	4293      	cmp	r3, r2
  4031ae:	d11d      	bne.n	4031ec <_dtoa_r+0x8a>
  4031b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4031b2:	f242 730f 	movw	r3, #9999	; 0x270f
  4031b6:	6013      	str	r3, [r2, #0]
  4031b8:	9b04      	ldr	r3, [sp, #16]
  4031ba:	b943      	cbnz	r3, 4031ce <_dtoa_r+0x6c>
  4031bc:	4b95      	ldr	r3, [pc, #596]	; (403414 <_dtoa_r+0x2b2>)
  4031be:	4a96      	ldr	r2, [pc, #600]	; (403418 <_dtoa_r+0x2b6>)
  4031c0:	f3c7 0013 	ubfx	r0, r7, #0, #20
  4031c4:	2800      	cmp	r0, #0
  4031c6:	bf0c      	ite	eq
  4031c8:	4610      	moveq	r0, r2
  4031ca:	4618      	movne	r0, r3
  4031cc:	e000      	b.n	4031d0 <_dtoa_r+0x6e>
  4031ce:	4891      	ldr	r0, [pc, #580]	; (403414 <_dtoa_r+0x2b2>)
  4031d0:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  4031d2:	2f00      	cmp	r7, #0
  4031d4:	f000 856d 	beq.w	403cb2 <_dtoa_r+0xb50>
  4031d8:	78c3      	ldrb	r3, [r0, #3]
  4031da:	b113      	cbz	r3, 4031e2 <_dtoa_r+0x80>
  4031dc:	f100 0308 	add.w	r3, r0, #8
  4031e0:	e000      	b.n	4031e4 <_dtoa_r+0x82>
  4031e2:	1cc3      	adds	r3, r0, #3
  4031e4:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  4031e6:	603b      	str	r3, [r7, #0]
  4031e8:	f000 bd63 	b.w	403cb2 <_dtoa_r+0xb50>
  4031ec:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4031f0:	2200      	movs	r2, #0
  4031f2:	4620      	mov	r0, r4
  4031f4:	4629      	mov	r1, r5
  4031f6:	2300      	movs	r3, #0
  4031f8:	f002 fc0c 	bl	405a14 <__aeabi_dcmpeq>
  4031fc:	4680      	mov	r8, r0
  4031fe:	b158      	cbz	r0, 403218 <_dtoa_r+0xb6>
  403200:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403202:	2301      	movs	r3, #1
  403204:	603b      	str	r3, [r7, #0]
  403206:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  403208:	2f00      	cmp	r7, #0
  40320a:	f000 854f 	beq.w	403cac <_dtoa_r+0xb4a>
  40320e:	4883      	ldr	r0, [pc, #524]	; (40341c <_dtoa_r+0x2ba>)
  403210:	6038      	str	r0, [r7, #0]
  403212:	3801      	subs	r0, #1
  403214:	f000 bd4d 	b.w	403cb2 <_dtoa_r+0xb50>
  403218:	ab19      	add	r3, sp, #100	; 0x64
  40321a:	9300      	str	r3, [sp, #0]
  40321c:	ab18      	add	r3, sp, #96	; 0x60
  40321e:	9301      	str	r3, [sp, #4]
  403220:	4650      	mov	r0, sl
  403222:	4622      	mov	r2, r4
  403224:	462b      	mov	r3, r5
  403226:	f001 fc04 	bl	404a32 <__d2b>
  40322a:	f3c7 560a 	ubfx	r6, r7, #20, #11
  40322e:	4683      	mov	fp, r0
  403230:	b15e      	cbz	r6, 40324a <_dtoa_r+0xe8>
  403232:	f3c5 0313 	ubfx	r3, r5, #0, #20
  403236:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40323a:	4620      	mov	r0, r4
  40323c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403240:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  403244:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  403248:	e01c      	b.n	403284 <_dtoa_r+0x122>
  40324a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40324c:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40324e:	441e      	add	r6, r3
  403250:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  403254:	429e      	cmp	r6, r3
  403256:	db09      	blt.n	40326c <_dtoa_r+0x10a>
  403258:	9904      	ldr	r1, [sp, #16]
  40325a:	331f      	adds	r3, #31
  40325c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  403260:	1b9b      	subs	r3, r3, r6
  403262:	fa21 f000 	lsr.w	r0, r1, r0
  403266:	409f      	lsls	r7, r3
  403268:	4338      	orrs	r0, r7
  40326a:	e004      	b.n	403276 <_dtoa_r+0x114>
  40326c:	486c      	ldr	r0, [pc, #432]	; (403420 <_dtoa_r+0x2be>)
  40326e:	9a04      	ldr	r2, [sp, #16]
  403270:	1b80      	subs	r0, r0, r6
  403272:	fa02 f000 	lsl.w	r0, r2, r0
  403276:	f7fe fc09 	bl	401a8c <__aeabi_ui2d>
  40327a:	2701      	movs	r7, #1
  40327c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403280:	3e01      	subs	r6, #1
  403282:	9715      	str	r7, [sp, #84]	; 0x54
  403284:	2200      	movs	r2, #0
  403286:	4b67      	ldr	r3, [pc, #412]	; (403424 <_dtoa_r+0x2c2>)
  403288:	f7fe fac2 	bl	401810 <__aeabi_dsub>
  40328c:	a35a      	add	r3, pc, #360	; (adr r3, 4033f8 <_dtoa_r+0x296>)
  40328e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403292:	f7fe fc71 	bl	401b78 <__aeabi_dmul>
  403296:	a35a      	add	r3, pc, #360	; (adr r3, 403400 <_dtoa_r+0x29e>)
  403298:	e9d3 2300 	ldrd	r2, r3, [r3]
  40329c:	f7fe faba 	bl	401814 <__adddf3>
  4032a0:	4604      	mov	r4, r0
  4032a2:	4630      	mov	r0, r6
  4032a4:	460d      	mov	r5, r1
  4032a6:	f7fe fc01 	bl	401aac <__aeabi_i2d>
  4032aa:	a357      	add	r3, pc, #348	; (adr r3, 403408 <_dtoa_r+0x2a6>)
  4032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4032b0:	f7fe fc62 	bl	401b78 <__aeabi_dmul>
  4032b4:	4602      	mov	r2, r0
  4032b6:	460b      	mov	r3, r1
  4032b8:	4620      	mov	r0, r4
  4032ba:	4629      	mov	r1, r5
  4032bc:	f7fe faaa 	bl	401814 <__adddf3>
  4032c0:	4604      	mov	r4, r0
  4032c2:	460d      	mov	r5, r1
  4032c4:	f002 fbd8 	bl	405a78 <__aeabi_d2iz>
  4032c8:	4629      	mov	r1, r5
  4032ca:	4681      	mov	r9, r0
  4032cc:	2200      	movs	r2, #0
  4032ce:	4620      	mov	r0, r4
  4032d0:	2300      	movs	r3, #0
  4032d2:	f002 fba9 	bl	405a28 <__aeabi_dcmplt>
  4032d6:	b158      	cbz	r0, 4032f0 <_dtoa_r+0x18e>
  4032d8:	4648      	mov	r0, r9
  4032da:	f7fe fbe7 	bl	401aac <__aeabi_i2d>
  4032de:	4602      	mov	r2, r0
  4032e0:	460b      	mov	r3, r1
  4032e2:	4620      	mov	r0, r4
  4032e4:	4629      	mov	r1, r5
  4032e6:	f002 fb95 	bl	405a14 <__aeabi_dcmpeq>
  4032ea:	b908      	cbnz	r0, 4032f0 <_dtoa_r+0x18e>
  4032ec:	f109 39ff 	add.w	r9, r9, #4294967295
  4032f0:	f1b9 0f16 	cmp.w	r9, #22
  4032f4:	d80d      	bhi.n	403312 <_dtoa_r+0x1b0>
  4032f6:	4b4c      	ldr	r3, [pc, #304]	; (403428 <_dtoa_r+0x2c6>)
  4032f8:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  4032fc:	e9d3 0100 	ldrd	r0, r1, [r3]
  403300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403304:	f002 fbae 	bl	405a64 <__aeabi_dcmpgt>
  403308:	b130      	cbz	r0, 403318 <_dtoa_r+0x1b6>
  40330a:	f109 39ff 	add.w	r9, r9, #4294967295
  40330e:	2700      	movs	r7, #0
  403310:	e000      	b.n	403314 <_dtoa_r+0x1b2>
  403312:	2701      	movs	r7, #1
  403314:	9714      	str	r7, [sp, #80]	; 0x50
  403316:	e000      	b.n	40331a <_dtoa_r+0x1b8>
  403318:	9014      	str	r0, [sp, #80]	; 0x50
  40331a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40331c:	1b9e      	subs	r6, r3, r6
  40331e:	3e01      	subs	r6, #1
  403320:	960a      	str	r6, [sp, #40]	; 0x28
  403322:	d504      	bpl.n	40332e <_dtoa_r+0x1cc>
  403324:	4277      	negs	r7, r6
  403326:	9708      	str	r7, [sp, #32]
  403328:	2700      	movs	r7, #0
  40332a:	970a      	str	r7, [sp, #40]	; 0x28
  40332c:	e001      	b.n	403332 <_dtoa_r+0x1d0>
  40332e:	2700      	movs	r7, #0
  403330:	9708      	str	r7, [sp, #32]
  403332:	f1b9 0f00 	cmp.w	r9, #0
  403336:	db07      	blt.n	403348 <_dtoa_r+0x1e6>
  403338:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40333a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  40333e:	444f      	add	r7, r9
  403340:	970a      	str	r7, [sp, #40]	; 0x28
  403342:	2700      	movs	r7, #0
  403344:	970e      	str	r7, [sp, #56]	; 0x38
  403346:	e008      	b.n	40335a <_dtoa_r+0x1f8>
  403348:	9f08      	ldr	r7, [sp, #32]
  40334a:	ebc9 0707 	rsb	r7, r9, r7
  40334e:	9708      	str	r7, [sp, #32]
  403350:	f1c9 0700 	rsb	r7, r9, #0
  403354:	970e      	str	r7, [sp, #56]	; 0x38
  403356:	2700      	movs	r7, #0
  403358:	9711      	str	r7, [sp, #68]	; 0x44
  40335a:	9f24      	ldr	r7, [sp, #144]	; 0x90
  40335c:	2f09      	cmp	r7, #9
  40335e:	d828      	bhi.n	4033b2 <_dtoa_r+0x250>
  403360:	2f05      	cmp	r7, #5
  403362:	bfc4      	itt	gt
  403364:	3f04      	subgt	r7, #4
  403366:	9724      	strgt	r7, [sp, #144]	; 0x90
  403368:	9f24      	ldr	r7, [sp, #144]	; 0x90
  40336a:	f1a7 0302 	sub.w	r3, r7, #2
  40336e:	bfcc      	ite	gt
  403370:	2400      	movgt	r4, #0
  403372:	2401      	movle	r4, #1
  403374:	2b03      	cmp	r3, #3
  403376:	d821      	bhi.n	4033bc <_dtoa_r+0x25a>
  403378:	e8df f003 	tbb	[pc, r3]
  40337c:	04020f06 	.word	0x04020f06
  403380:	2701      	movs	r7, #1
  403382:	e002      	b.n	40338a <_dtoa_r+0x228>
  403384:	2701      	movs	r7, #1
  403386:	e009      	b.n	40339c <_dtoa_r+0x23a>
  403388:	2700      	movs	r7, #0
  40338a:	970f      	str	r7, [sp, #60]	; 0x3c
  40338c:	9f25      	ldr	r7, [sp, #148]	; 0x94
  40338e:	2f00      	cmp	r7, #0
  403390:	dd1e      	ble.n	4033d0 <_dtoa_r+0x26e>
  403392:	970b      	str	r7, [sp, #44]	; 0x2c
  403394:	9707      	str	r7, [sp, #28]
  403396:	463b      	mov	r3, r7
  403398:	e01f      	b.n	4033da <_dtoa_r+0x278>
  40339a:	2700      	movs	r7, #0
  40339c:	970f      	str	r7, [sp, #60]	; 0x3c
  40339e:	9f25      	ldr	r7, [sp, #148]	; 0x94
  4033a0:	444f      	add	r7, r9
  4033a2:	970b      	str	r7, [sp, #44]	; 0x2c
  4033a4:	3701      	adds	r7, #1
  4033a6:	463b      	mov	r3, r7
  4033a8:	9707      	str	r7, [sp, #28]
  4033aa:	2b01      	cmp	r3, #1
  4033ac:	bfb8      	it	lt
  4033ae:	2301      	movlt	r3, #1
  4033b0:	e013      	b.n	4033da <_dtoa_r+0x278>
  4033b2:	2401      	movs	r4, #1
  4033b4:	2700      	movs	r7, #0
  4033b6:	9724      	str	r7, [sp, #144]	; 0x90
  4033b8:	940f      	str	r4, [sp, #60]	; 0x3c
  4033ba:	e001      	b.n	4033c0 <_dtoa_r+0x25e>
  4033bc:	2701      	movs	r7, #1
  4033be:	970f      	str	r7, [sp, #60]	; 0x3c
  4033c0:	f04f 37ff 	mov.w	r7, #4294967295
  4033c4:	970b      	str	r7, [sp, #44]	; 0x2c
  4033c6:	9707      	str	r7, [sp, #28]
  4033c8:	2700      	movs	r7, #0
  4033ca:	2312      	movs	r3, #18
  4033cc:	9725      	str	r7, [sp, #148]	; 0x94
  4033ce:	e004      	b.n	4033da <_dtoa_r+0x278>
  4033d0:	2701      	movs	r7, #1
  4033d2:	970b      	str	r7, [sp, #44]	; 0x2c
  4033d4:	9707      	str	r7, [sp, #28]
  4033d6:	463b      	mov	r3, r7
  4033d8:	9725      	str	r7, [sp, #148]	; 0x94
  4033da:	2200      	movs	r2, #0
  4033dc:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
  4033e0:	2204      	movs	r2, #4
  4033e2:	f102 0114 	add.w	r1, r2, #20
  4033e6:	4299      	cmp	r1, r3
  4033e8:	d820      	bhi.n	40342c <_dtoa_r+0x2ca>
  4033ea:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
  4033ee:	3101      	adds	r1, #1
  4033f0:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
  4033f4:	0052      	lsls	r2, r2, #1
  4033f6:	e7f4      	b.n	4033e2 <_dtoa_r+0x280>
  4033f8:	636f4361 	.word	0x636f4361
  4033fc:	3fd287a7 	.word	0x3fd287a7
  403400:	8b60c8b3 	.word	0x8b60c8b3
  403404:	3fc68a28 	.word	0x3fc68a28
  403408:	509f79fb 	.word	0x509f79fb
  40340c:	3fd34413 	.word	0x3fd34413
  403410:	7ff00000 	.word	0x7ff00000
  403414:	00406273 	.word	0x00406273
  403418:	0040626a 	.word	0x0040626a
  40341c:	00406269 	.word	0x00406269
  403420:	fffffbee 	.word	0xfffffbee
  403424:	3ff80000 	.word	0x3ff80000
  403428:	00406290 	.word	0x00406290
  40342c:	4650      	mov	r0, sl
  40342e:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
  403432:	f000 ffe3 	bl	4043fc <_Balloc>
  403436:	9f07      	ldr	r7, [sp, #28]
  403438:	9009      	str	r0, [sp, #36]	; 0x24
  40343a:	2f0e      	cmp	r7, #14
  40343c:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
  403440:	f200 816a 	bhi.w	403718 <_dtoa_r+0x5b6>
  403444:	2c00      	cmp	r4, #0
  403446:	f000 8167 	beq.w	403718 <_dtoa_r+0x5b6>
  40344a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40344e:	f1b9 0f00 	cmp.w	r9, #0
  403452:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  403456:	dd31      	ble.n	4034bc <_dtoa_r+0x35a>
  403458:	4a80      	ldr	r2, [pc, #512]	; (40365c <_dtoa_r+0x4fa>)
  40345a:	f009 030f 	and.w	r3, r9, #15
  40345e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  403462:	e9d3 0100 	ldrd	r0, r1, [r3]
  403466:	ea4f 1429 	mov.w	r4, r9, asr #4
  40346a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40346e:	06e0      	lsls	r0, r4, #27
  403470:	d50c      	bpl.n	40348c <_dtoa_r+0x32a>
  403472:	4b7b      	ldr	r3, [pc, #492]	; (403660 <_dtoa_r+0x4fe>)
  403474:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  403478:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40347c:	f7fe fca6 	bl	401dcc <__aeabi_ddiv>
  403480:	f004 040f 	and.w	r4, r4, #15
  403484:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403488:	2703      	movs	r7, #3
  40348a:	e000      	b.n	40348e <_dtoa_r+0x32c>
  40348c:	2702      	movs	r7, #2
  40348e:	4d74      	ldr	r5, [pc, #464]	; (403660 <_dtoa_r+0x4fe>)
  403490:	b16c      	cbz	r4, 4034ae <_dtoa_r+0x34c>
  403492:	07e1      	lsls	r1, r4, #31
  403494:	d508      	bpl.n	4034a8 <_dtoa_r+0x346>
  403496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  40349a:	e9d5 2300 	ldrd	r2, r3, [r5]
  40349e:	f7fe fb6b 	bl	401b78 <__aeabi_dmul>
  4034a2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4034a6:	3701      	adds	r7, #1
  4034a8:	1064      	asrs	r4, r4, #1
  4034aa:	3508      	adds	r5, #8
  4034ac:	e7f0      	b.n	403490 <_dtoa_r+0x32e>
  4034ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4034b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  4034b6:	f7fe fc89 	bl	401dcc <__aeabi_ddiv>
  4034ba:	e01b      	b.n	4034f4 <_dtoa_r+0x392>
  4034bc:	f1c9 0400 	rsb	r4, r9, #0
  4034c0:	b1dc      	cbz	r4, 4034fa <_dtoa_r+0x398>
  4034c2:	4b66      	ldr	r3, [pc, #408]	; (40365c <_dtoa_r+0x4fa>)
  4034c4:	4d66      	ldr	r5, [pc, #408]	; (403660 <_dtoa_r+0x4fe>)
  4034c6:	f004 020f 	and.w	r2, r4, #15
  4034ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4034ce:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4034d6:	f7fe fb4f 	bl	401b78 <__aeabi_dmul>
  4034da:	1124      	asrs	r4, r4, #4
  4034dc:	2702      	movs	r7, #2
  4034de:	b14c      	cbz	r4, 4034f4 <_dtoa_r+0x392>
  4034e0:	07e2      	lsls	r2, r4, #31
  4034e2:	d504      	bpl.n	4034ee <_dtoa_r+0x38c>
  4034e4:	e9d5 2300 	ldrd	r2, r3, [r5]
  4034e8:	3701      	adds	r7, #1
  4034ea:	f7fe fb45 	bl	401b78 <__aeabi_dmul>
  4034ee:	1064      	asrs	r4, r4, #1
  4034f0:	3508      	adds	r5, #8
  4034f2:	e7f4      	b.n	4034de <_dtoa_r+0x37c>
  4034f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4034f8:	e000      	b.n	4034fc <_dtoa_r+0x39a>
  4034fa:	2702      	movs	r7, #2
  4034fc:	9914      	ldr	r1, [sp, #80]	; 0x50
  4034fe:	b1e9      	cbz	r1, 40353c <_dtoa_r+0x3da>
  403500:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  403504:	2200      	movs	r2, #0
  403506:	4620      	mov	r0, r4
  403508:	4629      	mov	r1, r5
  40350a:	4b56      	ldr	r3, [pc, #344]	; (403664 <_dtoa_r+0x502>)
  40350c:	f002 fa8c 	bl	405a28 <__aeabi_dcmplt>
  403510:	b1c8      	cbz	r0, 403546 <_dtoa_r+0x3e4>
  403512:	9a07      	ldr	r2, [sp, #28]
  403514:	b1e2      	cbz	r2, 403550 <_dtoa_r+0x3ee>
  403516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403518:	2b00      	cmp	r3, #0
  40351a:	f340 80f9 	ble.w	403710 <_dtoa_r+0x5ae>
  40351e:	f109 30ff 	add.w	r0, r9, #4294967295
  403522:	9010      	str	r0, [sp, #64]	; 0x40
  403524:	4629      	mov	r1, r5
  403526:	4620      	mov	r0, r4
  403528:	2200      	movs	r2, #0
  40352a:	4b4f      	ldr	r3, [pc, #316]	; (403668 <_dtoa_r+0x506>)
  40352c:	f7fe fb24 	bl	401b78 <__aeabi_dmul>
  403530:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403534:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403536:	910c      	str	r1, [sp, #48]	; 0x30
  403538:	3701      	adds	r7, #1
  40353a:	e00d      	b.n	403558 <_dtoa_r+0x3f6>
  40353c:	9a07      	ldr	r2, [sp, #28]
  40353e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  403542:	920c      	str	r2, [sp, #48]	; 0x30
  403544:	e008      	b.n	403558 <_dtoa_r+0x3f6>
  403546:	9b07      	ldr	r3, [sp, #28]
  403548:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  40354c:	930c      	str	r3, [sp, #48]	; 0x30
  40354e:	e003      	b.n	403558 <_dtoa_r+0x3f6>
  403550:	9807      	ldr	r0, [sp, #28]
  403552:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  403556:	900c      	str	r0, [sp, #48]	; 0x30
  403558:	4638      	mov	r0, r7
  40355a:	f7fe faa7 	bl	401aac <__aeabi_i2d>
  40355e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403562:	f7fe fb09 	bl	401b78 <__aeabi_dmul>
  403566:	2200      	movs	r2, #0
  403568:	4b40      	ldr	r3, [pc, #256]	; (40366c <_dtoa_r+0x50a>)
  40356a:	f7fe f953 	bl	401814 <__adddf3>
  40356e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403570:	4604      	mov	r4, r0
  403572:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  403576:	b9cf      	cbnz	r7, 4035ac <_dtoa_r+0x44a>
  403578:	2200      	movs	r2, #0
  40357a:	4b3d      	ldr	r3, [pc, #244]	; (403670 <_dtoa_r+0x50e>)
  40357c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403580:	f7fe f946 	bl	401810 <__aeabi_dsub>
  403584:	4622      	mov	r2, r4
  403586:	462b      	mov	r3, r5
  403588:	4606      	mov	r6, r0
  40358a:	460f      	mov	r7, r1
  40358c:	f002 fa6a 	bl	405a64 <__aeabi_dcmpgt>
  403590:	2800      	cmp	r0, #0
  403592:	f040 8252 	bne.w	403a3a <_dtoa_r+0x8d8>
  403596:	4622      	mov	r2, r4
  403598:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  40359c:	4630      	mov	r0, r6
  40359e:	4639      	mov	r1, r7
  4035a0:	f002 fa42 	bl	405a28 <__aeabi_dcmplt>
  4035a4:	2800      	cmp	r0, #0
  4035a6:	f040 823e 	bne.w	403a26 <_dtoa_r+0x8c4>
  4035aa:	e0b1      	b.n	403710 <_dtoa_r+0x5ae>
  4035ac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4035ae:	4b2b      	ldr	r3, [pc, #172]	; (40365c <_dtoa_r+0x4fa>)
  4035b0:	1e7a      	subs	r2, r7, #1
  4035b2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  4035b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4035b8:	2f00      	cmp	r7, #0
  4035ba:	d05d      	beq.n	403678 <_dtoa_r+0x516>
  4035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4035c0:	2000      	movs	r0, #0
  4035c2:	492c      	ldr	r1, [pc, #176]	; (403674 <_dtoa_r+0x512>)
  4035c4:	f7fe fc02 	bl	401dcc <__aeabi_ddiv>
  4035c8:	4622      	mov	r2, r4
  4035ca:	462b      	mov	r3, r5
  4035cc:	f7fe f920 	bl	401810 <__aeabi_dsub>
  4035d0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  4035d4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  4035d8:	4604      	mov	r4, r0
  4035da:	460d      	mov	r5, r1
  4035dc:	4639      	mov	r1, r7
  4035de:	4630      	mov	r0, r6
  4035e0:	f002 fa4a 	bl	405a78 <__aeabi_d2iz>
  4035e4:	9002      	str	r0, [sp, #8]
  4035e6:	f7fe fa61 	bl	401aac <__aeabi_i2d>
  4035ea:	4602      	mov	r2, r0
  4035ec:	460b      	mov	r3, r1
  4035ee:	4630      	mov	r0, r6
  4035f0:	4639      	mov	r1, r7
  4035f2:	f7fe f90d 	bl	401810 <__aeabi_dsub>
  4035f6:	f8dd c008 	ldr.w	ip, [sp, #8]
  4035fa:	f10c 0330 	add.w	r3, ip, #48	; 0x30
  4035fe:	f808 3b01 	strb.w	r3, [r8], #1
  403602:	4622      	mov	r2, r4
  403604:	462b      	mov	r3, r5
  403606:	4606      	mov	r6, r0
  403608:	460f      	mov	r7, r1
  40360a:	f002 fa0d 	bl	405a28 <__aeabi_dcmplt>
  40360e:	2800      	cmp	r0, #0
  403610:	f040 833a 	bne.w	403c88 <_dtoa_r+0xb26>
  403614:	4632      	mov	r2, r6
  403616:	463b      	mov	r3, r7
  403618:	2000      	movs	r0, #0
  40361a:	4912      	ldr	r1, [pc, #72]	; (403664 <_dtoa_r+0x502>)
  40361c:	f7fe f8f8 	bl	401810 <__aeabi_dsub>
  403620:	4622      	mov	r2, r4
  403622:	462b      	mov	r3, r5
  403624:	f002 fa00 	bl	405a28 <__aeabi_dcmplt>
  403628:	2800      	cmp	r0, #0
  40362a:	f040 80d4 	bne.w	4037d6 <_dtoa_r+0x674>
  40362e:	9809      	ldr	r0, [sp, #36]	; 0x24
  403630:	990c      	ldr	r1, [sp, #48]	; 0x30
  403632:	ebc0 0308 	rsb	r3, r0, r8
  403636:	428b      	cmp	r3, r1
  403638:	da6a      	bge.n	403710 <_dtoa_r+0x5ae>
  40363a:	4620      	mov	r0, r4
  40363c:	4629      	mov	r1, r5
  40363e:	2200      	movs	r2, #0
  403640:	4b09      	ldr	r3, [pc, #36]	; (403668 <_dtoa_r+0x506>)
  403642:	f7fe fa99 	bl	401b78 <__aeabi_dmul>
  403646:	2200      	movs	r2, #0
  403648:	4604      	mov	r4, r0
  40364a:	460d      	mov	r5, r1
  40364c:	4630      	mov	r0, r6
  40364e:	4639      	mov	r1, r7
  403650:	4b05      	ldr	r3, [pc, #20]	; (403668 <_dtoa_r+0x506>)
  403652:	f7fe fa91 	bl	401b78 <__aeabi_dmul>
  403656:	4606      	mov	r6, r0
  403658:	460f      	mov	r7, r1
  40365a:	e7bf      	b.n	4035dc <_dtoa_r+0x47a>
  40365c:	00406290 	.word	0x00406290
  403660:	00406380 	.word	0x00406380
  403664:	3ff00000 	.word	0x3ff00000
  403668:	40240000 	.word	0x40240000
  40366c:	401c0000 	.word	0x401c0000
  403670:	40140000 	.word	0x40140000
  403674:	3fe00000 	.word	0x3fe00000
  403678:	4622      	mov	r2, r4
  40367a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40367e:	462b      	mov	r3, r5
  403680:	f7fe fa7a 	bl	401b78 <__aeabi_dmul>
  403684:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  403688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40368a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40368c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  403690:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  403694:	4490      	add	r8, r2
  403696:	4639      	mov	r1, r7
  403698:	4630      	mov	r0, r6
  40369a:	f002 f9ed 	bl	405a78 <__aeabi_d2iz>
  40369e:	4605      	mov	r5, r0
  4036a0:	f7fe fa04 	bl	401aac <__aeabi_i2d>
  4036a4:	3530      	adds	r5, #48	; 0x30
  4036a6:	4602      	mov	r2, r0
  4036a8:	460b      	mov	r3, r1
  4036aa:	4630      	mov	r0, r6
  4036ac:	4639      	mov	r1, r7
  4036ae:	f7fe f8af 	bl	401810 <__aeabi_dsub>
  4036b2:	f804 5b01 	strb.w	r5, [r4], #1
  4036b6:	4544      	cmp	r4, r8
  4036b8:	4606      	mov	r6, r0
  4036ba:	460f      	mov	r7, r1
  4036bc:	d121      	bne.n	403702 <_dtoa_r+0x5a0>
  4036be:	2200      	movs	r2, #0
  4036c0:	4b87      	ldr	r3, [pc, #540]	; (4038e0 <_dtoa_r+0x77e>)
  4036c2:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4036c6:	f7fe f8a5 	bl	401814 <__adddf3>
  4036ca:	4602      	mov	r2, r0
  4036cc:	460b      	mov	r3, r1
  4036ce:	4630      	mov	r0, r6
  4036d0:	4639      	mov	r1, r7
  4036d2:	f002 f9c7 	bl	405a64 <__aeabi_dcmpgt>
  4036d6:	2800      	cmp	r0, #0
  4036d8:	d17d      	bne.n	4037d6 <_dtoa_r+0x674>
  4036da:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4036de:	2000      	movs	r0, #0
  4036e0:	497f      	ldr	r1, [pc, #508]	; (4038e0 <_dtoa_r+0x77e>)
  4036e2:	f7fe f895 	bl	401810 <__aeabi_dsub>
  4036e6:	4602      	mov	r2, r0
  4036e8:	460b      	mov	r3, r1
  4036ea:	4630      	mov	r0, r6
  4036ec:	4639      	mov	r1, r7
  4036ee:	f002 f99b 	bl	405a28 <__aeabi_dcmplt>
  4036f2:	b168      	cbz	r0, 403710 <_dtoa_r+0x5ae>
  4036f4:	46a0      	mov	r8, r4
  4036f6:	3c01      	subs	r4, #1
  4036f8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
  4036fc:	2b30      	cmp	r3, #48	; 0x30
  4036fe:	d0f9      	beq.n	4036f4 <_dtoa_r+0x592>
  403700:	e2c2      	b.n	403c88 <_dtoa_r+0xb26>
  403702:	2200      	movs	r2, #0
  403704:	4b77      	ldr	r3, [pc, #476]	; (4038e4 <_dtoa_r+0x782>)
  403706:	f7fe fa37 	bl	401b78 <__aeabi_dmul>
  40370a:	4606      	mov	r6, r0
  40370c:	460f      	mov	r7, r1
  40370e:	e7c2      	b.n	403696 <_dtoa_r+0x534>
  403710:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  403714:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403718:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40371a:	2b00      	cmp	r3, #0
  40371c:	db7c      	blt.n	403818 <_dtoa_r+0x6b6>
  40371e:	f1b9 0f0e 	cmp.w	r9, #14
  403722:	dc79      	bgt.n	403818 <_dtoa_r+0x6b6>
  403724:	4b70      	ldr	r3, [pc, #448]	; (4038e8 <_dtoa_r+0x786>)
  403726:	9f25      	ldr	r7, [sp, #148]	; 0x94
  403728:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  40372c:	2f00      	cmp	r7, #0
  40372e:	e9d3 4500 	ldrd	r4, r5, [r3]
  403732:	da14      	bge.n	40375e <_dtoa_r+0x5fc>
  403734:	9f07      	ldr	r7, [sp, #28]
  403736:	2f00      	cmp	r7, #0
  403738:	dc11      	bgt.n	40375e <_dtoa_r+0x5fc>
  40373a:	f040 8176 	bne.w	403a2a <_dtoa_r+0x8c8>
  40373e:	4620      	mov	r0, r4
  403740:	4629      	mov	r1, r5
  403742:	2200      	movs	r2, #0
  403744:	4b69      	ldr	r3, [pc, #420]	; (4038ec <_dtoa_r+0x78a>)
  403746:	f7fe fa17 	bl	401b78 <__aeabi_dmul>
  40374a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40374e:	f002 f97f 	bl	405a50 <__aeabi_dcmpge>
  403752:	9d07      	ldr	r5, [sp, #28]
  403754:	462c      	mov	r4, r5
  403756:	2800      	cmp	r0, #0
  403758:	f040 8169 	bne.w	403a2e <_dtoa_r+0x8cc>
  40375c:	e171      	b.n	403a42 <_dtoa_r+0x8e0>
  40375e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  403762:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  403766:	4622      	mov	r2, r4
  403768:	462b      	mov	r3, r5
  40376a:	4630      	mov	r0, r6
  40376c:	4639      	mov	r1, r7
  40376e:	f7fe fb2d 	bl	401dcc <__aeabi_ddiv>
  403772:	f002 f981 	bl	405a78 <__aeabi_d2iz>
  403776:	9004      	str	r0, [sp, #16]
  403778:	f7fe f998 	bl	401aac <__aeabi_i2d>
  40377c:	4622      	mov	r2, r4
  40377e:	462b      	mov	r3, r5
  403780:	f7fe f9fa 	bl	401b78 <__aeabi_dmul>
  403784:	4602      	mov	r2, r0
  403786:	460b      	mov	r3, r1
  403788:	4630      	mov	r0, r6
  40378a:	4639      	mov	r1, r7
  40378c:	f7fe f840 	bl	401810 <__aeabi_dsub>
  403790:	9f04      	ldr	r7, [sp, #16]
  403792:	f107 0630 	add.w	r6, r7, #48	; 0x30
  403796:	f808 6b01 	strb.w	r6, [r8], #1
  40379a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40379c:	ebc7 0608 	rsb	r6, r7, r8
  4037a0:	9f07      	ldr	r7, [sp, #28]
  4037a2:	42be      	cmp	r6, r7
  4037a4:	4602      	mov	r2, r0
  4037a6:	460b      	mov	r3, r1
  4037a8:	d129      	bne.n	4037fe <_dtoa_r+0x69c>
  4037aa:	f7fe f833 	bl	401814 <__adddf3>
  4037ae:	4622      	mov	r2, r4
  4037b0:	462b      	mov	r3, r5
  4037b2:	4606      	mov	r6, r0
  4037b4:	460f      	mov	r7, r1
  4037b6:	f002 f955 	bl	405a64 <__aeabi_dcmpgt>
  4037ba:	b970      	cbnz	r0, 4037da <_dtoa_r+0x678>
  4037bc:	4630      	mov	r0, r6
  4037be:	4639      	mov	r1, r7
  4037c0:	4622      	mov	r2, r4
  4037c2:	462b      	mov	r3, r5
  4037c4:	f002 f926 	bl	405a14 <__aeabi_dcmpeq>
  4037c8:	2800      	cmp	r0, #0
  4037ca:	f000 825f 	beq.w	403c8c <_dtoa_r+0xb2a>
  4037ce:	9f04      	ldr	r7, [sp, #16]
  4037d0:	07fb      	lsls	r3, r7, #31
  4037d2:	d402      	bmi.n	4037da <_dtoa_r+0x678>
  4037d4:	e25a      	b.n	403c8c <_dtoa_r+0xb2a>
  4037d6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  4037da:	4643      	mov	r3, r8
  4037dc:	4698      	mov	r8, r3
  4037de:	3b01      	subs	r3, #1
  4037e0:	f818 2c01 	ldrb.w	r2, [r8, #-1]
  4037e4:	2a39      	cmp	r2, #57	; 0x39
  4037e6:	d106      	bne.n	4037f6 <_dtoa_r+0x694>
  4037e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4037ea:	429f      	cmp	r7, r3
  4037ec:	d1f6      	bne.n	4037dc <_dtoa_r+0x67a>
  4037ee:	2230      	movs	r2, #48	; 0x30
  4037f0:	f109 0901 	add.w	r9, r9, #1
  4037f4:	703a      	strb	r2, [r7, #0]
  4037f6:	781a      	ldrb	r2, [r3, #0]
  4037f8:	3201      	adds	r2, #1
  4037fa:	701a      	strb	r2, [r3, #0]
  4037fc:	e246      	b.n	403c8c <_dtoa_r+0xb2a>
  4037fe:	2200      	movs	r2, #0
  403800:	4b38      	ldr	r3, [pc, #224]	; (4038e4 <_dtoa_r+0x782>)
  403802:	f7fe f9b9 	bl	401b78 <__aeabi_dmul>
  403806:	2200      	movs	r2, #0
  403808:	2300      	movs	r3, #0
  40380a:	4606      	mov	r6, r0
  40380c:	460f      	mov	r7, r1
  40380e:	f002 f901 	bl	405a14 <__aeabi_dcmpeq>
  403812:	2800      	cmp	r0, #0
  403814:	d0a7      	beq.n	403766 <_dtoa_r+0x604>
  403816:	e239      	b.n	403c8c <_dtoa_r+0xb2a>
  403818:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40381a:	2f00      	cmp	r7, #0
  40381c:	d030      	beq.n	403880 <_dtoa_r+0x71e>
  40381e:	9f24      	ldr	r7, [sp, #144]	; 0x90
  403820:	2f01      	cmp	r7, #1
  403822:	dc0a      	bgt.n	40383a <_dtoa_r+0x6d8>
  403824:	9f15      	ldr	r7, [sp, #84]	; 0x54
  403826:	b117      	cbz	r7, 40382e <_dtoa_r+0x6cc>
  403828:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40382c:	e002      	b.n	403834 <_dtoa_r+0x6d2>
  40382e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  403830:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  403834:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  403836:	9e08      	ldr	r6, [sp, #32]
  403838:	e016      	b.n	403868 <_dtoa_r+0x706>
  40383a:	9f07      	ldr	r7, [sp, #28]
  40383c:	1e7d      	subs	r5, r7, #1
  40383e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403840:	42af      	cmp	r7, r5
  403842:	db01      	blt.n	403848 <_dtoa_r+0x6e6>
  403844:	1b7d      	subs	r5, r7, r5
  403846:	e006      	b.n	403856 <_dtoa_r+0x6f4>
  403848:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40384a:	950e      	str	r5, [sp, #56]	; 0x38
  40384c:	1beb      	subs	r3, r5, r7
  40384e:	9f11      	ldr	r7, [sp, #68]	; 0x44
  403850:	441f      	add	r7, r3
  403852:	9711      	str	r7, [sp, #68]	; 0x44
  403854:	2500      	movs	r5, #0
  403856:	9f07      	ldr	r7, [sp, #28]
  403858:	2f00      	cmp	r7, #0
  40385a:	da03      	bge.n	403864 <_dtoa_r+0x702>
  40385c:	9808      	ldr	r0, [sp, #32]
  40385e:	2300      	movs	r3, #0
  403860:	1bc6      	subs	r6, r0, r7
  403862:	e001      	b.n	403868 <_dtoa_r+0x706>
  403864:	9e08      	ldr	r6, [sp, #32]
  403866:	9b07      	ldr	r3, [sp, #28]
  403868:	9f08      	ldr	r7, [sp, #32]
  40386a:	441f      	add	r7, r3
  40386c:	9708      	str	r7, [sp, #32]
  40386e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403870:	4650      	mov	r0, sl
  403872:	441f      	add	r7, r3
  403874:	2101      	movs	r1, #1
  403876:	970a      	str	r7, [sp, #40]	; 0x28
  403878:	f000 feb8 	bl	4045ec <__i2b>
  40387c:	4604      	mov	r4, r0
  40387e:	e002      	b.n	403886 <_dtoa_r+0x724>
  403880:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  403882:	9e08      	ldr	r6, [sp, #32]
  403884:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403886:	b16e      	cbz	r6, 4038a4 <_dtoa_r+0x742>
  403888:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40388a:	2f00      	cmp	r7, #0
  40388c:	dd0a      	ble.n	4038a4 <_dtoa_r+0x742>
  40388e:	463b      	mov	r3, r7
  403890:	9f08      	ldr	r7, [sp, #32]
  403892:	42b3      	cmp	r3, r6
  403894:	bfa8      	it	ge
  403896:	4633      	movge	r3, r6
  403898:	1aff      	subs	r7, r7, r3
  40389a:	9708      	str	r7, [sp, #32]
  40389c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40389e:	1aff      	subs	r7, r7, r3
  4038a0:	1af6      	subs	r6, r6, r3
  4038a2:	970a      	str	r7, [sp, #40]	; 0x28
  4038a4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4038a6:	2f00      	cmp	r7, #0
  4038a8:	dd28      	ble.n	4038fc <_dtoa_r+0x79a>
  4038aa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  4038ac:	b307      	cbz	r7, 4038f0 <_dtoa_r+0x78e>
  4038ae:	2d00      	cmp	r5, #0
  4038b0:	dd10      	ble.n	4038d4 <_dtoa_r+0x772>
  4038b2:	4621      	mov	r1, r4
  4038b4:	462a      	mov	r2, r5
  4038b6:	4650      	mov	r0, sl
  4038b8:	f000 ff39 	bl	40472e <__pow5mult>
  4038bc:	4604      	mov	r4, r0
  4038be:	465a      	mov	r2, fp
  4038c0:	4621      	mov	r1, r4
  4038c2:	4650      	mov	r0, sl
  4038c4:	f000 fe9b 	bl	4045fe <__multiply>
  4038c8:	4659      	mov	r1, fp
  4038ca:	4607      	mov	r7, r0
  4038cc:	4650      	mov	r0, sl
  4038ce:	f000 fdbb 	bl	404448 <_Bfree>
  4038d2:	46bb      	mov	fp, r7
  4038d4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4038d6:	1b7a      	subs	r2, r7, r5
  4038d8:	d010      	beq.n	4038fc <_dtoa_r+0x79a>
  4038da:	4650      	mov	r0, sl
  4038dc:	4659      	mov	r1, fp
  4038de:	e00a      	b.n	4038f6 <_dtoa_r+0x794>
  4038e0:	3fe00000 	.word	0x3fe00000
  4038e4:	40240000 	.word	0x40240000
  4038e8:	00406290 	.word	0x00406290
  4038ec:	40140000 	.word	0x40140000
  4038f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4038f2:	4650      	mov	r0, sl
  4038f4:	4659      	mov	r1, fp
  4038f6:	f000 ff1a 	bl	40472e <__pow5mult>
  4038fa:	4683      	mov	fp, r0
  4038fc:	4650      	mov	r0, sl
  4038fe:	2101      	movs	r1, #1
  403900:	f000 fe74 	bl	4045ec <__i2b>
  403904:	9f11      	ldr	r7, [sp, #68]	; 0x44
  403906:	2f00      	cmp	r7, #0
  403908:	4605      	mov	r5, r0
  40390a:	dd05      	ble.n	403918 <_dtoa_r+0x7b6>
  40390c:	4629      	mov	r1, r5
  40390e:	4650      	mov	r0, sl
  403910:	463a      	mov	r2, r7
  403912:	f000 ff0c 	bl	40472e <__pow5mult>
  403916:	4605      	mov	r5, r0
  403918:	9f24      	ldr	r7, [sp, #144]	; 0x90
  40391a:	2f01      	cmp	r7, #1
  40391c:	dc12      	bgt.n	403944 <_dtoa_r+0x7e2>
  40391e:	9804      	ldr	r0, [sp, #16]
  403920:	b980      	cbnz	r0, 403944 <_dtoa_r+0x7e2>
  403922:	9905      	ldr	r1, [sp, #20]
  403924:	f3c1 0313 	ubfx	r3, r1, #0, #20
  403928:	b973      	cbnz	r3, 403948 <_dtoa_r+0x7e6>
  40392a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  40392e:	0d3f      	lsrs	r7, r7, #20
  403930:	053f      	lsls	r7, r7, #20
  403932:	b157      	cbz	r7, 40394a <_dtoa_r+0x7e8>
  403934:	9f08      	ldr	r7, [sp, #32]
  403936:	3701      	adds	r7, #1
  403938:	9708      	str	r7, [sp, #32]
  40393a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40393c:	3701      	adds	r7, #1
  40393e:	970a      	str	r7, [sp, #40]	; 0x28
  403940:	2701      	movs	r7, #1
  403942:	e002      	b.n	40394a <_dtoa_r+0x7e8>
  403944:	2700      	movs	r7, #0
  403946:	e000      	b.n	40394a <_dtoa_r+0x7e8>
  403948:	9f04      	ldr	r7, [sp, #16]
  40394a:	9811      	ldr	r0, [sp, #68]	; 0x44
  40394c:	b140      	cbz	r0, 403960 <_dtoa_r+0x7fe>
  40394e:	692b      	ldr	r3, [r5, #16]
  403950:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  403954:	6918      	ldr	r0, [r3, #16]
  403956:	f000 fdfc 	bl	404552 <__hi0bits>
  40395a:	f1c0 0020 	rsb	r0, r0, #32
  40395e:	e000      	b.n	403962 <_dtoa_r+0x800>
  403960:	2001      	movs	r0, #1
  403962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403964:	4403      	add	r3, r0
  403966:	f013 031f 	ands.w	r3, r3, #31
  40396a:	d00f      	beq.n	40398c <_dtoa_r+0x82a>
  40396c:	f1c3 0220 	rsb	r2, r3, #32
  403970:	2a04      	cmp	r2, #4
  403972:	dd09      	ble.n	403988 <_dtoa_r+0x826>
  403974:	9908      	ldr	r1, [sp, #32]
  403976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403978:	f1c3 031c 	rsb	r3, r3, #28
  40397c:	4419      	add	r1, r3
  40397e:	441a      	add	r2, r3
  403980:	9108      	str	r1, [sp, #32]
  403982:	441e      	add	r6, r3
  403984:	920a      	str	r2, [sp, #40]	; 0x28
  403986:	e009      	b.n	40399c <_dtoa_r+0x83a>
  403988:	d008      	beq.n	40399c <_dtoa_r+0x83a>
  40398a:	4613      	mov	r3, r2
  40398c:	9808      	ldr	r0, [sp, #32]
  40398e:	990a      	ldr	r1, [sp, #40]	; 0x28
  403990:	331c      	adds	r3, #28
  403992:	4418      	add	r0, r3
  403994:	4419      	add	r1, r3
  403996:	9008      	str	r0, [sp, #32]
  403998:	441e      	add	r6, r3
  40399a:	910a      	str	r1, [sp, #40]	; 0x28
  40399c:	9a08      	ldr	r2, [sp, #32]
  40399e:	2a00      	cmp	r2, #0
  4039a0:	dd04      	ble.n	4039ac <_dtoa_r+0x84a>
  4039a2:	4659      	mov	r1, fp
  4039a4:	4650      	mov	r0, sl
  4039a6:	f000 ff01 	bl	4047ac <__lshift>
  4039aa:	4683      	mov	fp, r0
  4039ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4039ae:	2b00      	cmp	r3, #0
  4039b0:	dd05      	ble.n	4039be <_dtoa_r+0x85c>
  4039b2:	4629      	mov	r1, r5
  4039b4:	4650      	mov	r0, sl
  4039b6:	461a      	mov	r2, r3
  4039b8:	f000 fef8 	bl	4047ac <__lshift>
  4039bc:	4605      	mov	r5, r0
  4039be:	9814      	ldr	r0, [sp, #80]	; 0x50
  4039c0:	b1e0      	cbz	r0, 4039fc <_dtoa_r+0x89a>
  4039c2:	4658      	mov	r0, fp
  4039c4:	4629      	mov	r1, r5
  4039c6:	f000 ff44 	bl	404852 <__mcmp>
  4039ca:	2800      	cmp	r0, #0
  4039cc:	da16      	bge.n	4039fc <_dtoa_r+0x89a>
  4039ce:	4659      	mov	r1, fp
  4039d0:	4650      	mov	r0, sl
  4039d2:	220a      	movs	r2, #10
  4039d4:	2300      	movs	r3, #0
  4039d6:	f000 fd40 	bl	40445a <__multadd>
  4039da:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4039dc:	f109 39ff 	add.w	r9, r9, #4294967295
  4039e0:	4683      	mov	fp, r0
  4039e2:	b149      	cbz	r1, 4039f8 <_dtoa_r+0x896>
  4039e4:	4621      	mov	r1, r4
  4039e6:	220a      	movs	r2, #10
  4039e8:	4650      	mov	r0, sl
  4039ea:	2300      	movs	r3, #0
  4039ec:	f000 fd35 	bl	40445a <__multadd>
  4039f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4039f2:	9207      	str	r2, [sp, #28]
  4039f4:	4604      	mov	r4, r0
  4039f6:	e001      	b.n	4039fc <_dtoa_r+0x89a>
  4039f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4039fa:	9307      	str	r3, [sp, #28]
  4039fc:	9807      	ldr	r0, [sp, #28]
  4039fe:	2800      	cmp	r0, #0
  403a00:	dc29      	bgt.n	403a56 <_dtoa_r+0x8f4>
  403a02:	9924      	ldr	r1, [sp, #144]	; 0x90
  403a04:	2902      	cmp	r1, #2
  403a06:	dd26      	ble.n	403a56 <_dtoa_r+0x8f4>
  403a08:	b988      	cbnz	r0, 403a2e <_dtoa_r+0x8cc>
  403a0a:	4629      	mov	r1, r5
  403a0c:	2205      	movs	r2, #5
  403a0e:	9b07      	ldr	r3, [sp, #28]
  403a10:	4650      	mov	r0, sl
  403a12:	f000 fd22 	bl	40445a <__multadd>
  403a16:	4605      	mov	r5, r0
  403a18:	4629      	mov	r1, r5
  403a1a:	4658      	mov	r0, fp
  403a1c:	f000 ff19 	bl	404852 <__mcmp>
  403a20:	2800      	cmp	r0, #0
  403a22:	dc0e      	bgt.n	403a42 <_dtoa_r+0x8e0>
  403a24:	e003      	b.n	403a2e <_dtoa_r+0x8cc>
  403a26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  403a28:	e000      	b.n	403a2c <_dtoa_r+0x8ca>
  403a2a:	2500      	movs	r5, #0
  403a2c:	462c      	mov	r4, r5
  403a2e:	9f25      	ldr	r7, [sp, #148]	; 0x94
  403a30:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  403a34:	ea6f 0907 	mvn.w	r9, r7
  403a38:	e00a      	b.n	403a50 <_dtoa_r+0x8ee>
  403a3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  403a3c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  403a40:	462c      	mov	r4, r5
  403a42:	9f09      	ldr	r7, [sp, #36]	; 0x24
  403a44:	2331      	movs	r3, #49	; 0x31
  403a46:	f107 0801 	add.w	r8, r7, #1
  403a4a:	703b      	strb	r3, [r7, #0]
  403a4c:	f109 0901 	add.w	r9, r9, #1
  403a50:	4627      	mov	r7, r4
  403a52:	2400      	movs	r4, #0
  403a54:	e107      	b.n	403c66 <_dtoa_r+0xb04>
  403a56:	980f      	ldr	r0, [sp, #60]	; 0x3c
  403a58:	2800      	cmp	r0, #0
  403a5a:	f000 80bb 	beq.w	403bd4 <_dtoa_r+0xa72>
  403a5e:	2e00      	cmp	r6, #0
  403a60:	dd05      	ble.n	403a6e <_dtoa_r+0x90c>
  403a62:	4621      	mov	r1, r4
  403a64:	4650      	mov	r0, sl
  403a66:	4632      	mov	r2, r6
  403a68:	f000 fea0 	bl	4047ac <__lshift>
  403a6c:	4604      	mov	r4, r0
  403a6e:	b19f      	cbz	r7, 403a98 <_dtoa_r+0x936>
  403a70:	6861      	ldr	r1, [r4, #4]
  403a72:	4650      	mov	r0, sl
  403a74:	f000 fcc2 	bl	4043fc <_Balloc>
  403a78:	6922      	ldr	r2, [r4, #16]
  403a7a:	3202      	adds	r2, #2
  403a7c:	4606      	mov	r6, r0
  403a7e:	f104 010c 	add.w	r1, r4, #12
  403a82:	0092      	lsls	r2, r2, #2
  403a84:	300c      	adds	r0, #12
  403a86:	f000 fc92 	bl	4043ae <memcpy>
  403a8a:	4650      	mov	r0, sl
  403a8c:	4631      	mov	r1, r6
  403a8e:	2201      	movs	r2, #1
  403a90:	f000 fe8c 	bl	4047ac <__lshift>
  403a94:	4607      	mov	r7, r0
  403a96:	e000      	b.n	403a9a <_dtoa_r+0x938>
  403a98:	4627      	mov	r7, r4
  403a9a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  403a9c:	4629      	mov	r1, r5
  403a9e:	4658      	mov	r0, fp
  403aa0:	f7ff fad2 	bl	403048 <quorem>
  403aa4:	4621      	mov	r1, r4
  403aa6:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  403aaa:	4680      	mov	r8, r0
  403aac:	4658      	mov	r0, fp
  403aae:	f8cd c008 	str.w	ip, [sp, #8]
  403ab2:	f000 fece 	bl	404852 <__mcmp>
  403ab6:	463a      	mov	r2, r7
  403ab8:	9008      	str	r0, [sp, #32]
  403aba:	4629      	mov	r1, r5
  403abc:	4650      	mov	r0, sl
  403abe:	f000 fee5 	bl	40488c <__mdiff>
  403ac2:	68c3      	ldr	r3, [r0, #12]
  403ac4:	f8dd c008 	ldr.w	ip, [sp, #8]
  403ac8:	4602      	mov	r2, r0
  403aca:	b94b      	cbnz	r3, 403ae0 <_dtoa_r+0x97e>
  403acc:	4611      	mov	r1, r2
  403ace:	4658      	mov	r0, fp
  403ad0:	9203      	str	r2, [sp, #12]
  403ad2:	f000 febe 	bl	404852 <__mcmp>
  403ad6:	9a03      	ldr	r2, [sp, #12]
  403ad8:	f8dd c008 	ldr.w	ip, [sp, #8]
  403adc:	4603      	mov	r3, r0
  403ade:	e000      	b.n	403ae2 <_dtoa_r+0x980>
  403ae0:	2301      	movs	r3, #1
  403ae2:	4650      	mov	r0, sl
  403ae4:	4611      	mov	r1, r2
  403ae6:	9303      	str	r3, [sp, #12]
  403ae8:	f8cd c008 	str.w	ip, [sp, #8]
  403aec:	f000 fcac 	bl	404448 <_Bfree>
  403af0:	9b03      	ldr	r3, [sp, #12]
  403af2:	f8dd c008 	ldr.w	ip, [sp, #8]
  403af6:	b963      	cbnz	r3, 403b12 <_dtoa_r+0x9b0>
  403af8:	9924      	ldr	r1, [sp, #144]	; 0x90
  403afa:	b951      	cbnz	r1, 403b12 <_dtoa_r+0x9b0>
  403afc:	9804      	ldr	r0, [sp, #16]
  403afe:	f000 0201 	and.w	r2, r0, #1
  403b02:	b932      	cbnz	r2, 403b12 <_dtoa_r+0x9b0>
  403b04:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  403b08:	d035      	beq.n	403b76 <_dtoa_r+0xa14>
  403b0a:	9b08      	ldr	r3, [sp, #32]
  403b0c:	2b00      	cmp	r3, #0
  403b0e:	dc24      	bgt.n	403b5a <_dtoa_r+0x9f8>
  403b10:	e025      	b.n	403b5e <_dtoa_r+0x9fc>
  403b12:	9808      	ldr	r0, [sp, #32]
  403b14:	2800      	cmp	r0, #0
  403b16:	da02      	bge.n	403b1e <_dtoa_r+0x9bc>
  403b18:	2b00      	cmp	r3, #0
  403b1a:	dc08      	bgt.n	403b2e <_dtoa_r+0x9cc>
  403b1c:	e01f      	b.n	403b5e <_dtoa_r+0x9fc>
  403b1e:	d123      	bne.n	403b68 <_dtoa_r+0xa06>
  403b20:	9924      	ldr	r1, [sp, #144]	; 0x90
  403b22:	bb09      	cbnz	r1, 403b68 <_dtoa_r+0xa06>
  403b24:	9804      	ldr	r0, [sp, #16]
  403b26:	f000 0201 	and.w	r2, r0, #1
  403b2a:	b9ea      	cbnz	r2, 403b68 <_dtoa_r+0xa06>
  403b2c:	e7f4      	b.n	403b18 <_dtoa_r+0x9b6>
  403b2e:	4659      	mov	r1, fp
  403b30:	2201      	movs	r2, #1
  403b32:	4650      	mov	r0, sl
  403b34:	f8cd c008 	str.w	ip, [sp, #8]
  403b38:	f000 fe38 	bl	4047ac <__lshift>
  403b3c:	4629      	mov	r1, r5
  403b3e:	4683      	mov	fp, r0
  403b40:	f000 fe87 	bl	404852 <__mcmp>
  403b44:	2800      	cmp	r0, #0
  403b46:	f8dd c008 	ldr.w	ip, [sp, #8]
  403b4a:	dc03      	bgt.n	403b54 <_dtoa_r+0x9f2>
  403b4c:	d107      	bne.n	403b5e <_dtoa_r+0x9fc>
  403b4e:	f01c 0f01 	tst.w	ip, #1
  403b52:	d004      	beq.n	403b5e <_dtoa_r+0x9fc>
  403b54:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  403b58:	d00d      	beq.n	403b76 <_dtoa_r+0xa14>
  403b5a:	f108 0c31 	add.w	ip, r8, #49	; 0x31
  403b5e:	f106 0801 	add.w	r8, r6, #1
  403b62:	f886 c000 	strb.w	ip, [r6]
  403b66:	e07e      	b.n	403c66 <_dtoa_r+0xb04>
  403b68:	2b00      	cmp	r3, #0
  403b6a:	f106 0801 	add.w	r8, r6, #1
  403b6e:	dd09      	ble.n	403b84 <_dtoa_r+0xa22>
  403b70:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  403b74:	d103      	bne.n	403b7e <_dtoa_r+0xa1c>
  403b76:	2339      	movs	r3, #57	; 0x39
  403b78:	7033      	strb	r3, [r6, #0]
  403b7a:	3601      	adds	r6, #1
  403b7c:	e05b      	b.n	403c36 <_dtoa_r+0xad4>
  403b7e:	f10c 0301 	add.w	r3, ip, #1
  403b82:	e068      	b.n	403c56 <_dtoa_r+0xaf4>
  403b84:	9909      	ldr	r1, [sp, #36]	; 0x24
  403b86:	9a07      	ldr	r2, [sp, #28]
  403b88:	4646      	mov	r6, r8
  403b8a:	ebc1 0308 	rsb	r3, r1, r8
  403b8e:	4293      	cmp	r3, r2
  403b90:	f806 cc01 	strb.w	ip, [r6, #-1]
  403b94:	d03c      	beq.n	403c10 <_dtoa_r+0xaae>
  403b96:	4659      	mov	r1, fp
  403b98:	220a      	movs	r2, #10
  403b9a:	2300      	movs	r3, #0
  403b9c:	4650      	mov	r0, sl
  403b9e:	f000 fc5c 	bl	40445a <__multadd>
  403ba2:	42bc      	cmp	r4, r7
  403ba4:	4683      	mov	fp, r0
  403ba6:	4621      	mov	r1, r4
  403ba8:	4650      	mov	r0, sl
  403baa:	f04f 020a 	mov.w	r2, #10
  403bae:	f04f 0300 	mov.w	r3, #0
  403bb2:	d104      	bne.n	403bbe <_dtoa_r+0xa5c>
  403bb4:	f000 fc51 	bl	40445a <__multadd>
  403bb8:	4604      	mov	r4, r0
  403bba:	4607      	mov	r7, r0
  403bbc:	e76e      	b.n	403a9c <_dtoa_r+0x93a>
  403bbe:	f000 fc4c 	bl	40445a <__multadd>
  403bc2:	4639      	mov	r1, r7
  403bc4:	4604      	mov	r4, r0
  403bc6:	220a      	movs	r2, #10
  403bc8:	4650      	mov	r0, sl
  403bca:	2300      	movs	r3, #0
  403bcc:	f000 fc45 	bl	40445a <__multadd>
  403bd0:	4607      	mov	r7, r0
  403bd2:	e763      	b.n	403a9c <_dtoa_r+0x93a>
  403bd4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  403bd6:	4658      	mov	r0, fp
  403bd8:	4629      	mov	r1, r5
  403bda:	f7ff fa35 	bl	403048 <quorem>
  403bde:	9f09      	ldr	r7, [sp, #36]	; 0x24
  403be0:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  403be4:	f807 c006 	strb.w	ip, [r7, r6]
  403be8:	9f07      	ldr	r7, [sp, #28]
  403bea:	3601      	adds	r6, #1
  403bec:	42be      	cmp	r6, r7
  403bee:	db07      	blt.n	403c00 <_dtoa_r+0xa9e>
  403bf0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  403bf2:	2f01      	cmp	r7, #1
  403bf4:	bfac      	ite	ge
  403bf6:	19f6      	addge	r6, r6, r7
  403bf8:	3601      	addlt	r6, #1
  403bfa:	4627      	mov	r7, r4
  403bfc:	2400      	movs	r4, #0
  403bfe:	e007      	b.n	403c10 <_dtoa_r+0xaae>
  403c00:	4659      	mov	r1, fp
  403c02:	4650      	mov	r0, sl
  403c04:	220a      	movs	r2, #10
  403c06:	2300      	movs	r3, #0
  403c08:	f000 fc27 	bl	40445a <__multadd>
  403c0c:	4683      	mov	fp, r0
  403c0e:	e7e2      	b.n	403bd6 <_dtoa_r+0xa74>
  403c10:	4659      	mov	r1, fp
  403c12:	2201      	movs	r2, #1
  403c14:	4650      	mov	r0, sl
  403c16:	f8cd c008 	str.w	ip, [sp, #8]
  403c1a:	f000 fdc7 	bl	4047ac <__lshift>
  403c1e:	4629      	mov	r1, r5
  403c20:	4683      	mov	fp, r0
  403c22:	f000 fe16 	bl	404852 <__mcmp>
  403c26:	2800      	cmp	r0, #0
  403c28:	f8dd c008 	ldr.w	ip, [sp, #8]
  403c2c:	dc03      	bgt.n	403c36 <_dtoa_r+0xad4>
  403c2e:	d114      	bne.n	403c5a <_dtoa_r+0xaf8>
  403c30:	f01c 0f01 	tst.w	ip, #1
  403c34:	d011      	beq.n	403c5a <_dtoa_r+0xaf8>
  403c36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  403c3a:	2b39      	cmp	r3, #57	; 0x39
  403c3c:	46b0      	mov	r8, r6
  403c3e:	f106 36ff 	add.w	r6, r6, #4294967295
  403c42:	d107      	bne.n	403c54 <_dtoa_r+0xaf2>
  403c44:	9809      	ldr	r0, [sp, #36]	; 0x24
  403c46:	42b0      	cmp	r0, r6
  403c48:	d1f5      	bne.n	403c36 <_dtoa_r+0xad4>
  403c4a:	2331      	movs	r3, #49	; 0x31
  403c4c:	f109 0901 	add.w	r9, r9, #1
  403c50:	7003      	strb	r3, [r0, #0]
  403c52:	e008      	b.n	403c66 <_dtoa_r+0xb04>
  403c54:	3301      	adds	r3, #1
  403c56:	7033      	strb	r3, [r6, #0]
  403c58:	e005      	b.n	403c66 <_dtoa_r+0xb04>
  403c5a:	46b0      	mov	r8, r6
  403c5c:	3e01      	subs	r6, #1
  403c5e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
  403c62:	2b30      	cmp	r3, #48	; 0x30
  403c64:	d0f9      	beq.n	403c5a <_dtoa_r+0xaf8>
  403c66:	4650      	mov	r0, sl
  403c68:	4629      	mov	r1, r5
  403c6a:	f000 fbed 	bl	404448 <_Bfree>
  403c6e:	b16f      	cbz	r7, 403c8c <_dtoa_r+0xb2a>
  403c70:	b12c      	cbz	r4, 403c7e <_dtoa_r+0xb1c>
  403c72:	42bc      	cmp	r4, r7
  403c74:	d003      	beq.n	403c7e <_dtoa_r+0xb1c>
  403c76:	4650      	mov	r0, sl
  403c78:	4621      	mov	r1, r4
  403c7a:	f000 fbe5 	bl	404448 <_Bfree>
  403c7e:	4650      	mov	r0, sl
  403c80:	4639      	mov	r1, r7
  403c82:	f000 fbe1 	bl	404448 <_Bfree>
  403c86:	e001      	b.n	403c8c <_dtoa_r+0xb2a>
  403c88:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  403c8c:	4650      	mov	r0, sl
  403c8e:	4659      	mov	r1, fp
  403c90:	f000 fbda 	bl	404448 <_Bfree>
  403c94:	2300      	movs	r3, #0
  403c96:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403c98:	f888 3000 	strb.w	r3, [r8]
  403c9c:	f109 0301 	add.w	r3, r9, #1
  403ca0:	603b      	str	r3, [r7, #0]
  403ca2:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  403ca4:	b127      	cbz	r7, 403cb0 <_dtoa_r+0xb4e>
  403ca6:	f8c7 8000 	str.w	r8, [r7]
  403caa:	e001      	b.n	403cb0 <_dtoa_r+0xb4e>
  403cac:	4802      	ldr	r0, [pc, #8]	; (403cb8 <_dtoa_r+0xb56>)
  403cae:	e000      	b.n	403cb2 <_dtoa_r+0xb50>
  403cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
  403cb2:	b01b      	add	sp, #108	; 0x6c
  403cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403cb8:	00406268 	.word	0x00406268
  403cbc:	f3af 8000 	nop.w

00403cc0 <__libc_fini_array>:
  403cc0:	b538      	push	{r3, r4, r5, lr}
  403cc2:	4d08      	ldr	r5, [pc, #32]	; (403ce4 <__libc_fini_array+0x24>)
  403cc4:	4c08      	ldr	r4, [pc, #32]	; (403ce8 <__libc_fini_array+0x28>)
  403cc6:	1b64      	subs	r4, r4, r5
  403cc8:	10a4      	asrs	r4, r4, #2
  403cca:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  403cce:	b124      	cbz	r4, 403cda <__libc_fini_array+0x1a>
  403cd0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  403cd4:	3c01      	subs	r4, #1
  403cd6:	4798      	blx	r3
  403cd8:	e7f9      	b.n	403cce <__libc_fini_array+0xe>
  403cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403cde:	f002 bb7d 	b.w	4063dc <_fini>
  403ce2:	bf00      	nop
  403ce4:	004063e8 	.word	0x004063e8
  403ce8:	004063ec 	.word	0x004063ec

00403cec <_malloc_trim_r>:
  403cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403cee:	4d23      	ldr	r5, [pc, #140]	; (403d7c <_malloc_trim_r+0x90>)
  403cf0:	460e      	mov	r6, r1
  403cf2:	4604      	mov	r4, r0
  403cf4:	f000 fb7f 	bl	4043f6 <__malloc_lock>
  403cf8:	68ab      	ldr	r3, [r5, #8]
  403cfa:	685f      	ldr	r7, [r3, #4]
  403cfc:	f027 0703 	bic.w	r7, r7, #3
  403d00:	1bbe      	subs	r6, r7, r6
  403d02:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
  403d06:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
  403d0a:	f026 060f 	bic.w	r6, r6, #15
  403d0e:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
  403d12:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
  403d16:	da04      	bge.n	403d22 <_malloc_trim_r+0x36>
  403d18:	4620      	mov	r0, r4
  403d1a:	f000 fb6d 	bl	4043f8 <__malloc_unlock>
  403d1e:	2000      	movs	r0, #0
  403d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403d22:	4620      	mov	r0, r4
  403d24:	2100      	movs	r1, #0
  403d26:	f001 f91d 	bl	404f64 <_sbrk_r>
  403d2a:	68ab      	ldr	r3, [r5, #8]
  403d2c:	443b      	add	r3, r7
  403d2e:	4298      	cmp	r0, r3
  403d30:	d1f2      	bne.n	403d18 <_malloc_trim_r+0x2c>
  403d32:	4620      	mov	r0, r4
  403d34:	4271      	negs	r1, r6
  403d36:	f001 f915 	bl	404f64 <_sbrk_r>
  403d3a:	3001      	adds	r0, #1
  403d3c:	d110      	bne.n	403d60 <_malloc_trim_r+0x74>
  403d3e:	4620      	mov	r0, r4
  403d40:	2100      	movs	r1, #0
  403d42:	f001 f90f 	bl	404f64 <_sbrk_r>
  403d46:	68ab      	ldr	r3, [r5, #8]
  403d48:	1ac2      	subs	r2, r0, r3
  403d4a:	2a0f      	cmp	r2, #15
  403d4c:	dde4      	ble.n	403d18 <_malloc_trim_r+0x2c>
  403d4e:	490c      	ldr	r1, [pc, #48]	; (403d80 <_malloc_trim_r+0x94>)
  403d50:	6809      	ldr	r1, [r1, #0]
  403d52:	1a40      	subs	r0, r0, r1
  403d54:	490b      	ldr	r1, [pc, #44]	; (403d84 <_malloc_trim_r+0x98>)
  403d56:	f042 0201 	orr.w	r2, r2, #1
  403d5a:	6008      	str	r0, [r1, #0]
  403d5c:	605a      	str	r2, [r3, #4]
  403d5e:	e7db      	b.n	403d18 <_malloc_trim_r+0x2c>
  403d60:	68ab      	ldr	r3, [r5, #8]
  403d62:	1bbf      	subs	r7, r7, r6
  403d64:	f047 0701 	orr.w	r7, r7, #1
  403d68:	605f      	str	r7, [r3, #4]
  403d6a:	4b06      	ldr	r3, [pc, #24]	; (403d84 <_malloc_trim_r+0x98>)
  403d6c:	681a      	ldr	r2, [r3, #0]
  403d6e:	4620      	mov	r0, r4
  403d70:	1b96      	subs	r6, r2, r6
  403d72:	601e      	str	r6, [r3, #0]
  403d74:	f000 fb40 	bl	4043f8 <__malloc_unlock>
  403d78:	2001      	movs	r0, #1
  403d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403d7c:	200008bc 	.word	0x200008bc
  403d80:	20000cc4 	.word	0x20000cc4
  403d84:	20000d68 	.word	0x20000d68

00403d88 <_free_r>:
  403d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403d8a:	4606      	mov	r6, r0
  403d8c:	460d      	mov	r5, r1
  403d8e:	2900      	cmp	r1, #0
  403d90:	f000 80a9 	beq.w	403ee6 <_free_r+0x15e>
  403d94:	f000 fb2f 	bl	4043f6 <__malloc_lock>
  403d98:	f855 cc04 	ldr.w	ip, [r5, #-4]
  403d9c:	4c52      	ldr	r4, [pc, #328]	; (403ee8 <_free_r+0x160>)
  403d9e:	f1a5 0308 	sub.w	r3, r5, #8
  403da2:	f02c 0201 	bic.w	r2, ip, #1
  403da6:	1898      	adds	r0, r3, r2
  403da8:	68a1      	ldr	r1, [r4, #8]
  403daa:	6847      	ldr	r7, [r0, #4]
  403dac:	4288      	cmp	r0, r1
  403dae:	f027 0703 	bic.w	r7, r7, #3
  403db2:	f00c 0101 	and.w	r1, ip, #1
  403db6:	d11b      	bne.n	403df0 <_free_r+0x68>
  403db8:	443a      	add	r2, r7
  403dba:	b939      	cbnz	r1, 403dcc <_free_r+0x44>
  403dbc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403dc0:	1a5b      	subs	r3, r3, r1
  403dc2:	440a      	add	r2, r1
  403dc4:	6898      	ldr	r0, [r3, #8]
  403dc6:	68d9      	ldr	r1, [r3, #12]
  403dc8:	60c1      	str	r1, [r0, #12]
  403dca:	6088      	str	r0, [r1, #8]
  403dcc:	f042 0101 	orr.w	r1, r2, #1
  403dd0:	6059      	str	r1, [r3, #4]
  403dd2:	60a3      	str	r3, [r4, #8]
  403dd4:	4b45      	ldr	r3, [pc, #276]	; (403eec <_free_r+0x164>)
  403dd6:	681b      	ldr	r3, [r3, #0]
  403dd8:	429a      	cmp	r2, r3
  403dda:	d304      	bcc.n	403de6 <_free_r+0x5e>
  403ddc:	4b44      	ldr	r3, [pc, #272]	; (403ef0 <_free_r+0x168>)
  403dde:	4630      	mov	r0, r6
  403de0:	6819      	ldr	r1, [r3, #0]
  403de2:	f7ff ff83 	bl	403cec <_malloc_trim_r>
  403de6:	4630      	mov	r0, r6
  403de8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  403dec:	f000 bb04 	b.w	4043f8 <__malloc_unlock>
  403df0:	6047      	str	r7, [r0, #4]
  403df2:	b979      	cbnz	r1, 403e14 <_free_r+0x8c>
  403df4:	f855 5c08 	ldr.w	r5, [r5, #-8]
  403df8:	1b5b      	subs	r3, r3, r5
  403dfa:	442a      	add	r2, r5
  403dfc:	689d      	ldr	r5, [r3, #8]
  403dfe:	f104 0c08 	add.w	ip, r4, #8
  403e02:	4565      	cmp	r5, ip
  403e04:	d008      	beq.n	403e18 <_free_r+0x90>
  403e06:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403e0a:	f8c5 c00c 	str.w	ip, [r5, #12]
  403e0e:	f8cc 5008 	str.w	r5, [ip, #8]
  403e12:	e002      	b.n	403e1a <_free_r+0x92>
  403e14:	2100      	movs	r1, #0
  403e16:	e000      	b.n	403e1a <_free_r+0x92>
  403e18:	2101      	movs	r1, #1
  403e1a:	19c5      	adds	r5, r0, r7
  403e1c:	686d      	ldr	r5, [r5, #4]
  403e1e:	07ed      	lsls	r5, r5, #31
  403e20:	d40e      	bmi.n	403e40 <_free_r+0xb8>
  403e22:	443a      	add	r2, r7
  403e24:	6885      	ldr	r5, [r0, #8]
  403e26:	b941      	cbnz	r1, 403e3a <_free_r+0xb2>
  403e28:	4f32      	ldr	r7, [pc, #200]	; (403ef4 <_free_r+0x16c>)
  403e2a:	42bd      	cmp	r5, r7
  403e2c:	d105      	bne.n	403e3a <_free_r+0xb2>
  403e2e:	6163      	str	r3, [r4, #20]
  403e30:	6123      	str	r3, [r4, #16]
  403e32:	2101      	movs	r1, #1
  403e34:	60dd      	str	r5, [r3, #12]
  403e36:	609d      	str	r5, [r3, #8]
  403e38:	e002      	b.n	403e40 <_free_r+0xb8>
  403e3a:	68c0      	ldr	r0, [r0, #12]
  403e3c:	60e8      	str	r0, [r5, #12]
  403e3e:	6085      	str	r5, [r0, #8]
  403e40:	f042 0001 	orr.w	r0, r2, #1
  403e44:	6058      	str	r0, [r3, #4]
  403e46:	509a      	str	r2, [r3, r2]
  403e48:	2900      	cmp	r1, #0
  403e4a:	d1cc      	bne.n	403de6 <_free_r+0x5e>
  403e4c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403e50:	d20e      	bcs.n	403e70 <_free_r+0xe8>
  403e52:	08d2      	lsrs	r2, r2, #3
  403e54:	1091      	asrs	r1, r2, #2
  403e56:	2001      	movs	r0, #1
  403e58:	4088      	lsls	r0, r1
  403e5a:	6861      	ldr	r1, [r4, #4]
  403e5c:	4301      	orrs	r1, r0
  403e5e:	6061      	str	r1, [r4, #4]
  403e60:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
  403e64:	68a2      	ldr	r2, [r4, #8]
  403e66:	609a      	str	r2, [r3, #8]
  403e68:	60dc      	str	r4, [r3, #12]
  403e6a:	60a3      	str	r3, [r4, #8]
  403e6c:	60d3      	str	r3, [r2, #12]
  403e6e:	e7ba      	b.n	403de6 <_free_r+0x5e>
  403e70:	0a51      	lsrs	r1, r2, #9
  403e72:	2904      	cmp	r1, #4
  403e74:	d802      	bhi.n	403e7c <_free_r+0xf4>
  403e76:	0991      	lsrs	r1, r2, #6
  403e78:	3138      	adds	r1, #56	; 0x38
  403e7a:	e015      	b.n	403ea8 <_free_r+0x120>
  403e7c:	2914      	cmp	r1, #20
  403e7e:	d801      	bhi.n	403e84 <_free_r+0xfc>
  403e80:	315b      	adds	r1, #91	; 0x5b
  403e82:	e011      	b.n	403ea8 <_free_r+0x120>
  403e84:	2954      	cmp	r1, #84	; 0x54
  403e86:	d802      	bhi.n	403e8e <_free_r+0x106>
  403e88:	0b11      	lsrs	r1, r2, #12
  403e8a:	316e      	adds	r1, #110	; 0x6e
  403e8c:	e00c      	b.n	403ea8 <_free_r+0x120>
  403e8e:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  403e92:	d802      	bhi.n	403e9a <_free_r+0x112>
  403e94:	0bd1      	lsrs	r1, r2, #15
  403e96:	3177      	adds	r1, #119	; 0x77
  403e98:	e006      	b.n	403ea8 <_free_r+0x120>
  403e9a:	f240 5054 	movw	r0, #1364	; 0x554
  403e9e:	4281      	cmp	r1, r0
  403ea0:	bf9a      	itte	ls
  403ea2:	0c91      	lsrls	r1, r2, #18
  403ea4:	317c      	addls	r1, #124	; 0x7c
  403ea6:	217e      	movhi	r1, #126	; 0x7e
  403ea8:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
  403eac:	480e      	ldr	r0, [pc, #56]	; (403ee8 <_free_r+0x160>)
  403eae:	68a5      	ldr	r5, [r4, #8]
  403eb0:	42a5      	cmp	r5, r4
  403eb2:	d001      	beq.n	403eb8 <_free_r+0x130>
  403eb4:	4629      	mov	r1, r5
  403eb6:	e00b      	b.n	403ed0 <_free_r+0x148>
  403eb8:	2201      	movs	r2, #1
  403eba:	1089      	asrs	r1, r1, #2
  403ebc:	fa02 f101 	lsl.w	r1, r2, r1
  403ec0:	6842      	ldr	r2, [r0, #4]
  403ec2:	430a      	orrs	r2, r1
  403ec4:	6042      	str	r2, [r0, #4]
  403ec6:	4629      	mov	r1, r5
  403ec8:	e008      	b.n	403edc <_free_r+0x154>
  403eca:	6889      	ldr	r1, [r1, #8]
  403ecc:	42a1      	cmp	r1, r4
  403ece:	d004      	beq.n	403eda <_free_r+0x152>
  403ed0:	6848      	ldr	r0, [r1, #4]
  403ed2:	f020 0003 	bic.w	r0, r0, #3
  403ed6:	4282      	cmp	r2, r0
  403ed8:	d3f7      	bcc.n	403eca <_free_r+0x142>
  403eda:	68cd      	ldr	r5, [r1, #12]
  403edc:	60dd      	str	r5, [r3, #12]
  403ede:	6099      	str	r1, [r3, #8]
  403ee0:	60ab      	str	r3, [r5, #8]
  403ee2:	60cb      	str	r3, [r1, #12]
  403ee4:	e77f      	b.n	403de6 <_free_r+0x5e>
  403ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403ee8:	200008bc 	.word	0x200008bc
  403eec:	20000cc8 	.word	0x20000cc8
  403ef0:	20000d64 	.word	0x20000d64
  403ef4:	200008c4 	.word	0x200008c4

00403ef8 <_setlocale_r>:
  403ef8:	b510      	push	{r4, lr}
  403efa:	4614      	mov	r4, r2
  403efc:	b90a      	cbnz	r2, 403f02 <_setlocale_r+0xa>
  403efe:	480b      	ldr	r0, [pc, #44]	; (403f2c <_setlocale_r+0x34>)
  403f00:	bd10      	pop	{r4, pc}
  403f02:	4610      	mov	r0, r2
  403f04:	490a      	ldr	r1, [pc, #40]	; (403f30 <_setlocale_r+0x38>)
  403f06:	f001 f83d 	bl	404f84 <strcmp>
  403f0a:	2800      	cmp	r0, #0
  403f0c:	d0f7      	beq.n	403efe <_setlocale_r+0x6>
  403f0e:	4620      	mov	r0, r4
  403f10:	4906      	ldr	r1, [pc, #24]	; (403f2c <_setlocale_r+0x34>)
  403f12:	f001 f837 	bl	404f84 <strcmp>
  403f16:	2800      	cmp	r0, #0
  403f18:	d0f1      	beq.n	403efe <_setlocale_r+0x6>
  403f1a:	4620      	mov	r0, r4
  403f1c:	4905      	ldr	r1, [pc, #20]	; (403f34 <_setlocale_r+0x3c>)
  403f1e:	f001 f831 	bl	404f84 <strcmp>
  403f22:	2800      	cmp	r0, #0
  403f24:	4801      	ldr	r0, [pc, #4]	; (403f2c <_setlocale_r+0x34>)
  403f26:	bf18      	it	ne
  403f28:	2000      	movne	r0, #0
  403f2a:	bd10      	pop	{r4, pc}
  403f2c:	00406214 	.word	0x00406214
  403f30:	00406277 	.word	0x00406277
  403f34:	0040627e 	.word	0x0040627e

00403f38 <__locale_charset>:
  403f38:	4800      	ldr	r0, [pc, #0]	; (403f3c <__locale_charset+0x4>)
  403f3a:	4770      	bx	lr
  403f3c:	20000840 	.word	0x20000840

00403f40 <__locale_mb_cur_max>:
  403f40:	4b01      	ldr	r3, [pc, #4]	; (403f48 <__locale_mb_cur_max+0x8>)
  403f42:	6a18      	ldr	r0, [r3, #32]
  403f44:	4770      	bx	lr
  403f46:	bf00      	nop
  403f48:	20000840 	.word	0x20000840

00403f4c <__locale_msgcharset>:
  403f4c:	4800      	ldr	r0, [pc, #0]	; (403f50 <__locale_msgcharset+0x4>)
  403f4e:	4770      	bx	lr
  403f50:	20000864 	.word	0x20000864

00403f54 <__locale_cjk_lang>:
  403f54:	2000      	movs	r0, #0
  403f56:	4770      	bx	lr

00403f58 <_localeconv_r>:
  403f58:	4800      	ldr	r0, [pc, #0]	; (403f5c <_localeconv_r+0x4>)
  403f5a:	4770      	bx	lr
  403f5c:	20000884 	.word	0x20000884

00403f60 <setlocale>:
  403f60:	460a      	mov	r2, r1
  403f62:	4903      	ldr	r1, [pc, #12]	; (403f70 <setlocale+0x10>)
  403f64:	4603      	mov	r3, r0
  403f66:	6808      	ldr	r0, [r1, #0]
  403f68:	4619      	mov	r1, r3
  403f6a:	f7ff bfc5 	b.w	403ef8 <_setlocale_r>
  403f6e:	bf00      	nop
  403f70:	20000410 	.word	0x20000410

00403f74 <localeconv>:
  403f74:	4800      	ldr	r0, [pc, #0]	; (403f78 <localeconv+0x4>)
  403f76:	4770      	bx	lr
  403f78:	20000884 	.word	0x20000884

00403f7c <_malloc_r>:
  403f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f80:	f101 040b 	add.w	r4, r1, #11
  403f84:	2c16      	cmp	r4, #22
  403f86:	4607      	mov	r7, r0
  403f88:	d903      	bls.n	403f92 <_malloc_r+0x16>
  403f8a:	f034 0407 	bics.w	r4, r4, #7
  403f8e:	d501      	bpl.n	403f94 <_malloc_r+0x18>
  403f90:	e002      	b.n	403f98 <_malloc_r+0x1c>
  403f92:	2410      	movs	r4, #16
  403f94:	428c      	cmp	r4, r1
  403f96:	d202      	bcs.n	403f9e <_malloc_r+0x22>
  403f98:	230c      	movs	r3, #12
  403f9a:	603b      	str	r3, [r7, #0]
  403f9c:	e1e0      	b.n	404360 <_malloc_r+0x3e4>
  403f9e:	4638      	mov	r0, r7
  403fa0:	f000 fa29 	bl	4043f6 <__malloc_lock>
  403fa4:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  403fa8:	4da4      	ldr	r5, [pc, #656]	; (40423c <_malloc_r+0x2c0>)
  403faa:	d214      	bcs.n	403fd6 <_malloc_r+0x5a>
  403fac:	08e2      	lsrs	r2, r4, #3
  403fae:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
  403fb2:	68de      	ldr	r6, [r3, #12]
  403fb4:	429e      	cmp	r6, r3
  403fb6:	d106      	bne.n	403fc6 <_malloc_r+0x4a>
  403fb8:	f106 0308 	add.w	r3, r6, #8
  403fbc:	6976      	ldr	r6, [r6, #20]
  403fbe:	429e      	cmp	r6, r3
  403fc0:	bf08      	it	eq
  403fc2:	3202      	addeq	r2, #2
  403fc4:	d043      	beq.n	40404e <_malloc_r+0xd2>
  403fc6:	6873      	ldr	r3, [r6, #4]
  403fc8:	68f2      	ldr	r2, [r6, #12]
  403fca:	68b1      	ldr	r1, [r6, #8]
  403fcc:	f023 0303 	bic.w	r3, r3, #3
  403fd0:	60ca      	str	r2, [r1, #12]
  403fd2:	6091      	str	r1, [r2, #8]
  403fd4:	e05d      	b.n	404092 <_malloc_r+0x116>
  403fd6:	0a62      	lsrs	r2, r4, #9
  403fd8:	d01a      	beq.n	404010 <_malloc_r+0x94>
  403fda:	2a04      	cmp	r2, #4
  403fdc:	d802      	bhi.n	403fe4 <_malloc_r+0x68>
  403fde:	09a2      	lsrs	r2, r4, #6
  403fe0:	3238      	adds	r2, #56	; 0x38
  403fe2:	e018      	b.n	404016 <_malloc_r+0x9a>
  403fe4:	2a14      	cmp	r2, #20
  403fe6:	d801      	bhi.n	403fec <_malloc_r+0x70>
  403fe8:	325b      	adds	r2, #91	; 0x5b
  403fea:	e014      	b.n	404016 <_malloc_r+0x9a>
  403fec:	2a54      	cmp	r2, #84	; 0x54
  403fee:	d802      	bhi.n	403ff6 <_malloc_r+0x7a>
  403ff0:	0b22      	lsrs	r2, r4, #12
  403ff2:	326e      	adds	r2, #110	; 0x6e
  403ff4:	e00f      	b.n	404016 <_malloc_r+0x9a>
  403ff6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403ffa:	d802      	bhi.n	404002 <_malloc_r+0x86>
  403ffc:	0be2      	lsrs	r2, r4, #15
  403ffe:	3277      	adds	r2, #119	; 0x77
  404000:	e009      	b.n	404016 <_malloc_r+0x9a>
  404002:	f240 5354 	movw	r3, #1364	; 0x554
  404006:	429a      	cmp	r2, r3
  404008:	d804      	bhi.n	404014 <_malloc_r+0x98>
  40400a:	0ca2      	lsrs	r2, r4, #18
  40400c:	327c      	adds	r2, #124	; 0x7c
  40400e:	e002      	b.n	404016 <_malloc_r+0x9a>
  404010:	223f      	movs	r2, #63	; 0x3f
  404012:	e000      	b.n	404016 <_malloc_r+0x9a>
  404014:	227e      	movs	r2, #126	; 0x7e
  404016:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
  40401a:	68de      	ldr	r6, [r3, #12]
  40401c:	429e      	cmp	r6, r3
  40401e:	d015      	beq.n	40404c <_malloc_r+0xd0>
  404020:	6871      	ldr	r1, [r6, #4]
  404022:	f021 0103 	bic.w	r1, r1, #3
  404026:	1b08      	subs	r0, r1, r4
  404028:	280f      	cmp	r0, #15
  40402a:	dd01      	ble.n	404030 <_malloc_r+0xb4>
  40402c:	3a01      	subs	r2, #1
  40402e:	e00d      	b.n	40404c <_malloc_r+0xd0>
  404030:	2800      	cmp	r0, #0
  404032:	db09      	blt.n	404048 <_malloc_r+0xcc>
  404034:	68f3      	ldr	r3, [r6, #12]
  404036:	68b2      	ldr	r2, [r6, #8]
  404038:	60d3      	str	r3, [r2, #12]
  40403a:	609a      	str	r2, [r3, #8]
  40403c:	1873      	adds	r3, r6, r1
  40403e:	685a      	ldr	r2, [r3, #4]
  404040:	f042 0201 	orr.w	r2, r2, #1
  404044:	605a      	str	r2, [r3, #4]
  404046:	e196      	b.n	404376 <_malloc_r+0x3fa>
  404048:	68f6      	ldr	r6, [r6, #12]
  40404a:	e7e7      	b.n	40401c <_malloc_r+0xa0>
  40404c:	3201      	adds	r2, #1
  40404e:	497b      	ldr	r1, [pc, #492]	; (40423c <_malloc_r+0x2c0>)
  404050:	692e      	ldr	r6, [r5, #16]
  404052:	f101 0008 	add.w	r0, r1, #8
  404056:	4286      	cmp	r6, r0
  404058:	4686      	mov	lr, r0
  40405a:	d06d      	beq.n	404138 <_malloc_r+0x1bc>
  40405c:	6873      	ldr	r3, [r6, #4]
  40405e:	f023 0303 	bic.w	r3, r3, #3
  404062:	ebc4 0c03 	rsb	ip, r4, r3
  404066:	f1bc 0f0f 	cmp.w	ip, #15
  40406a:	dd0d      	ble.n	404088 <_malloc_r+0x10c>
  40406c:	1933      	adds	r3, r6, r4
  40406e:	f04c 0201 	orr.w	r2, ip, #1
  404072:	f044 0401 	orr.w	r4, r4, #1
  404076:	6074      	str	r4, [r6, #4]
  404078:	614b      	str	r3, [r1, #20]
  40407a:	610b      	str	r3, [r1, #16]
  40407c:	60d8      	str	r0, [r3, #12]
  40407e:	6098      	str	r0, [r3, #8]
  404080:	605a      	str	r2, [r3, #4]
  404082:	f843 c00c 	str.w	ip, [r3, ip]
  404086:	e176      	b.n	404376 <_malloc_r+0x3fa>
  404088:	f1bc 0f00 	cmp.w	ip, #0
  40408c:	6148      	str	r0, [r1, #20]
  40408e:	6108      	str	r0, [r1, #16]
  404090:	db01      	blt.n	404096 <_malloc_r+0x11a>
  404092:	4433      	add	r3, r6
  404094:	e7d3      	b.n	40403e <_malloc_r+0xc2>
  404096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40409a:	d211      	bcs.n	4040c0 <_malloc_r+0x144>
  40409c:	08db      	lsrs	r3, r3, #3
  40409e:	1098      	asrs	r0, r3, #2
  4040a0:	f04f 0c01 	mov.w	ip, #1
  4040a4:	fa0c fc00 	lsl.w	ip, ip, r0
  4040a8:	6848      	ldr	r0, [r1, #4]
  4040aa:	ea4c 0000 	orr.w	r0, ip, r0
  4040ae:	6048      	str	r0, [r1, #4]
  4040b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4040b4:	688b      	ldr	r3, [r1, #8]
  4040b6:	60b3      	str	r3, [r6, #8]
  4040b8:	60f1      	str	r1, [r6, #12]
  4040ba:	608e      	str	r6, [r1, #8]
  4040bc:	60de      	str	r6, [r3, #12]
  4040be:	e03b      	b.n	404138 <_malloc_r+0x1bc>
  4040c0:	0a58      	lsrs	r0, r3, #9
  4040c2:	2804      	cmp	r0, #4
  4040c4:	d802      	bhi.n	4040cc <_malloc_r+0x150>
  4040c6:	0998      	lsrs	r0, r3, #6
  4040c8:	3038      	adds	r0, #56	; 0x38
  4040ca:	e015      	b.n	4040f8 <_malloc_r+0x17c>
  4040cc:	2814      	cmp	r0, #20
  4040ce:	d801      	bhi.n	4040d4 <_malloc_r+0x158>
  4040d0:	305b      	adds	r0, #91	; 0x5b
  4040d2:	e011      	b.n	4040f8 <_malloc_r+0x17c>
  4040d4:	2854      	cmp	r0, #84	; 0x54
  4040d6:	d802      	bhi.n	4040de <_malloc_r+0x162>
  4040d8:	0b18      	lsrs	r0, r3, #12
  4040da:	306e      	adds	r0, #110	; 0x6e
  4040dc:	e00c      	b.n	4040f8 <_malloc_r+0x17c>
  4040de:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  4040e2:	d802      	bhi.n	4040ea <_malloc_r+0x16e>
  4040e4:	0bd8      	lsrs	r0, r3, #15
  4040e6:	3077      	adds	r0, #119	; 0x77
  4040e8:	e006      	b.n	4040f8 <_malloc_r+0x17c>
  4040ea:	f240 5154 	movw	r1, #1364	; 0x554
  4040ee:	4288      	cmp	r0, r1
  4040f0:	bf9a      	itte	ls
  4040f2:	0c98      	lsrls	r0, r3, #18
  4040f4:	307c      	addls	r0, #124	; 0x7c
  4040f6:	207e      	movhi	r0, #126	; 0x7e
  4040f8:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
  4040fc:	f8df 813c 	ldr.w	r8, [pc, #316]	; 40423c <_malloc_r+0x2c0>
  404100:	f8dc 1008 	ldr.w	r1, [ip, #8]
  404104:	4561      	cmp	r1, ip
  404106:	d10d      	bne.n	404124 <_malloc_r+0x1a8>
  404108:	2301      	movs	r3, #1
  40410a:	1080      	asrs	r0, r0, #2
  40410c:	fa03 f000 	lsl.w	r0, r3, r0
  404110:	f8d8 3004 	ldr.w	r3, [r8, #4]
  404114:	4303      	orrs	r3, r0
  404116:	f8c8 3004 	str.w	r3, [r8, #4]
  40411a:	460b      	mov	r3, r1
  40411c:	e008      	b.n	404130 <_malloc_r+0x1b4>
  40411e:	6889      	ldr	r1, [r1, #8]
  404120:	4561      	cmp	r1, ip
  404122:	d004      	beq.n	40412e <_malloc_r+0x1b2>
  404124:	6848      	ldr	r0, [r1, #4]
  404126:	f020 0003 	bic.w	r0, r0, #3
  40412a:	4283      	cmp	r3, r0
  40412c:	d3f7      	bcc.n	40411e <_malloc_r+0x1a2>
  40412e:	68cb      	ldr	r3, [r1, #12]
  404130:	60f3      	str	r3, [r6, #12]
  404132:	60b1      	str	r1, [r6, #8]
  404134:	609e      	str	r6, [r3, #8]
  404136:	60ce      	str	r6, [r1, #12]
  404138:	2101      	movs	r1, #1
  40413a:	1093      	asrs	r3, r2, #2
  40413c:	fa01 f303 	lsl.w	r3, r1, r3
  404140:	6869      	ldr	r1, [r5, #4]
  404142:	428b      	cmp	r3, r1
  404144:	d85e      	bhi.n	404204 <_malloc_r+0x288>
  404146:	420b      	tst	r3, r1
  404148:	d106      	bne.n	404158 <_malloc_r+0x1dc>
  40414a:	f022 0203 	bic.w	r2, r2, #3
  40414e:	005b      	lsls	r3, r3, #1
  404150:	420b      	tst	r3, r1
  404152:	f102 0204 	add.w	r2, r2, #4
  404156:	d0fa      	beq.n	40414e <_malloc_r+0x1d2>
  404158:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
  40415c:	4680      	mov	r8, r0
  40415e:	4694      	mov	ip, r2
  404160:	f8d8 600c 	ldr.w	r6, [r8, #12]
  404164:	4546      	cmp	r6, r8
  404166:	d02d      	beq.n	4041c4 <_malloc_r+0x248>
  404168:	6871      	ldr	r1, [r6, #4]
  40416a:	f021 0903 	bic.w	r9, r1, #3
  40416e:	ebc4 0109 	rsb	r1, r4, r9
  404172:	290f      	cmp	r1, #15
  404174:	dd13      	ble.n	40419e <_malloc_r+0x222>
  404176:	1933      	adds	r3, r6, r4
  404178:	f044 0401 	orr.w	r4, r4, #1
  40417c:	68f2      	ldr	r2, [r6, #12]
  40417e:	6074      	str	r4, [r6, #4]
  404180:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404184:	60c2      	str	r2, [r0, #12]
  404186:	6090      	str	r0, [r2, #8]
  404188:	f041 0201 	orr.w	r2, r1, #1
  40418c:	616b      	str	r3, [r5, #20]
  40418e:	612b      	str	r3, [r5, #16]
  404190:	f8c3 e00c 	str.w	lr, [r3, #12]
  404194:	f8c3 e008 	str.w	lr, [r3, #8]
  404198:	605a      	str	r2, [r3, #4]
  40419a:	5059      	str	r1, [r3, r1]
  40419c:	e00c      	b.n	4041b8 <_malloc_r+0x23c>
  40419e:	2900      	cmp	r1, #0
  4041a0:	db0e      	blt.n	4041c0 <_malloc_r+0x244>
  4041a2:	eb06 0109 	add.w	r1, r6, r9
  4041a6:	684b      	ldr	r3, [r1, #4]
  4041a8:	f043 0301 	orr.w	r3, r3, #1
  4041ac:	604b      	str	r3, [r1, #4]
  4041ae:	68f3      	ldr	r3, [r6, #12]
  4041b0:	f856 2f08 	ldr.w	r2, [r6, #8]!
  4041b4:	60d3      	str	r3, [r2, #12]
  4041b6:	609a      	str	r2, [r3, #8]
  4041b8:	4638      	mov	r0, r7
  4041ba:	f000 f91d 	bl	4043f8 <__malloc_unlock>
  4041be:	e0de      	b.n	40437e <_malloc_r+0x402>
  4041c0:	68f6      	ldr	r6, [r6, #12]
  4041c2:	e7cf      	b.n	404164 <_malloc_r+0x1e8>
  4041c4:	f10c 0c01 	add.w	ip, ip, #1
  4041c8:	f01c 0f03 	tst.w	ip, #3
  4041cc:	f108 0808 	add.w	r8, r8, #8
  4041d0:	d1c6      	bne.n	404160 <_malloc_r+0x1e4>
  4041d2:	0791      	lsls	r1, r2, #30
  4041d4:	d104      	bne.n	4041e0 <_malloc_r+0x264>
  4041d6:	686a      	ldr	r2, [r5, #4]
  4041d8:	ea22 0203 	bic.w	r2, r2, r3
  4041dc:	606a      	str	r2, [r5, #4]
  4041de:	e006      	b.n	4041ee <_malloc_r+0x272>
  4041e0:	f1a0 0108 	sub.w	r1, r0, #8
  4041e4:	6800      	ldr	r0, [r0, #0]
  4041e6:	4288      	cmp	r0, r1
  4041e8:	f102 32ff 	add.w	r2, r2, #4294967295
  4041ec:	d0f1      	beq.n	4041d2 <_malloc_r+0x256>
  4041ee:	6869      	ldr	r1, [r5, #4]
  4041f0:	005b      	lsls	r3, r3, #1
  4041f2:	428b      	cmp	r3, r1
  4041f4:	d806      	bhi.n	404204 <_malloc_r+0x288>
  4041f6:	b12b      	cbz	r3, 404204 <_malloc_r+0x288>
  4041f8:	4662      	mov	r2, ip
  4041fa:	420b      	tst	r3, r1
  4041fc:	d1ac      	bne.n	404158 <_malloc_r+0x1dc>
  4041fe:	3204      	adds	r2, #4
  404200:	005b      	lsls	r3, r3, #1
  404202:	e7fa      	b.n	4041fa <_malloc_r+0x27e>
  404204:	f8d5 9008 	ldr.w	r9, [r5, #8]
  404208:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40420c:	f023 0b03 	bic.w	fp, r3, #3
  404210:	45a3      	cmp	fp, r4
  404212:	d304      	bcc.n	40421e <_malloc_r+0x2a2>
  404214:	ebc4 030b 	rsb	r3, r4, fp
  404218:	2b0f      	cmp	r3, #15
  40421a:	f300 80a3 	bgt.w	404364 <_malloc_r+0x3e8>
  40421e:	4908      	ldr	r1, [pc, #32]	; (404240 <_malloc_r+0x2c4>)
  404220:	680a      	ldr	r2, [r1, #0]
  404222:	eb04 0a02 	add.w	sl, r4, r2
  404226:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
  40422a:	3201      	adds	r2, #1
  40422c:	eb09 030b 	add.w	r3, r9, fp
  404230:	4688      	mov	r8, r1
  404232:	d107      	bne.n	404244 <_malloc_r+0x2c8>
  404234:	f10a 0a10 	add.w	sl, sl, #16
  404238:	e00c      	b.n	404254 <_malloc_r+0x2d8>
  40423a:	bf00      	nop
  40423c:	200008bc 	.word	0x200008bc
  404240:	20000d64 	.word	0x20000d64
  404244:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  404248:	f10a 0a0f 	add.w	sl, sl, #15
  40424c:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  404250:	f02a 0a0f 	bic.w	sl, sl, #15
  404254:	4638      	mov	r0, r7
  404256:	4651      	mov	r1, sl
  404258:	9301      	str	r3, [sp, #4]
  40425a:	f000 fe83 	bl	404f64 <_sbrk_r>
  40425e:	1c42      	adds	r2, r0, #1
  404260:	4606      	mov	r6, r0
  404262:	9b01      	ldr	r3, [sp, #4]
  404264:	d06f      	beq.n	404346 <_malloc_r+0x3ca>
  404266:	4298      	cmp	r0, r3
  404268:	d201      	bcs.n	40426e <_malloc_r+0x2f2>
  40426a:	45a9      	cmp	r9, r5
  40426c:	d16b      	bne.n	404346 <_malloc_r+0x3ca>
  40426e:	f8d8 2004 	ldr.w	r2, [r8, #4]
  404272:	429e      	cmp	r6, r3
  404274:	4452      	add	r2, sl
  404276:	f8c8 2004 	str.w	r2, [r8, #4]
  40427a:	d108      	bne.n	40428e <_malloc_r+0x312>
  40427c:	f3c6 010b 	ubfx	r1, r6, #0, #12
  404280:	b929      	cbnz	r1, 40428e <_malloc_r+0x312>
  404282:	68ab      	ldr	r3, [r5, #8]
  404284:	44da      	add	sl, fp
  404286:	f04a 0201 	orr.w	r2, sl, #1
  40428a:	605a      	str	r2, [r3, #4]
  40428c:	e04d      	b.n	40432a <_malloc_r+0x3ae>
  40428e:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
  404292:	3101      	adds	r1, #1
  404294:	d103      	bne.n	40429e <_malloc_r+0x322>
  404296:	4b3c      	ldr	r3, [pc, #240]	; (404388 <_malloc_r+0x40c>)
  404298:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
  40429c:	e003      	b.n	4042a6 <_malloc_r+0x32a>
  40429e:	1af3      	subs	r3, r6, r3
  4042a0:	441a      	add	r2, r3
  4042a2:	f8c8 2004 	str.w	r2, [r8, #4]
  4042a6:	f016 0307 	ands.w	r3, r6, #7
  4042aa:	bf1c      	itt	ne
  4042ac:	f1c3 0308 	rsbne	r3, r3, #8
  4042b0:	18f6      	addne	r6, r6, r3
  4042b2:	44b2      	add	sl, r6
  4042b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4042b8:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  4042bc:	ebca 0a03 	rsb	sl, sl, r3
  4042c0:	4651      	mov	r1, sl
  4042c2:	4638      	mov	r0, r7
  4042c4:	f000 fe4e 	bl	404f64 <_sbrk_r>
  4042c8:	1c43      	adds	r3, r0, #1
  4042ca:	bf04      	itt	eq
  4042cc:	4630      	moveq	r0, r6
  4042ce:	f04f 0a00 	moveq.w	sl, #0
  4042d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4042d6:	60ae      	str	r6, [r5, #8]
  4042d8:	1b80      	subs	r0, r0, r6
  4042da:	4450      	add	r0, sl
  4042dc:	4453      	add	r3, sl
  4042de:	f040 0001 	orr.w	r0, r0, #1
  4042e2:	45a9      	cmp	r9, r5
  4042e4:	f8c8 3004 	str.w	r3, [r8, #4]
  4042e8:	6070      	str	r0, [r6, #4]
  4042ea:	d01e      	beq.n	40432a <_malloc_r+0x3ae>
  4042ec:	f1bb 0f0f 	cmp.w	fp, #15
  4042f0:	d802      	bhi.n	4042f8 <_malloc_r+0x37c>
  4042f2:	2301      	movs	r3, #1
  4042f4:	6073      	str	r3, [r6, #4]
  4042f6:	e026      	b.n	404346 <_malloc_r+0x3ca>
  4042f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4042fc:	f1ab 0b0c 	sub.w	fp, fp, #12
  404300:	f02b 0b07 	bic.w	fp, fp, #7
  404304:	f003 0301 	and.w	r3, r3, #1
  404308:	ea4b 0303 	orr.w	r3, fp, r3
  40430c:	f8c9 3004 	str.w	r3, [r9, #4]
  404310:	eb09 030b 	add.w	r3, r9, fp
  404314:	2205      	movs	r2, #5
  404316:	f1bb 0f0f 	cmp.w	fp, #15
  40431a:	605a      	str	r2, [r3, #4]
  40431c:	609a      	str	r2, [r3, #8]
  40431e:	d904      	bls.n	40432a <_malloc_r+0x3ae>
  404320:	4638      	mov	r0, r7
  404322:	f109 0108 	add.w	r1, r9, #8
  404326:	f7ff fd2f 	bl	403d88 <_free_r>
  40432a:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40432e:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
  404332:	4293      	cmp	r3, r2
  404334:	bf84      	itt	hi
  404336:	4a15      	ldrhi	r2, [pc, #84]	; (40438c <_malloc_r+0x410>)
  404338:	62d3      	strhi	r3, [r2, #44]	; 0x2c
  40433a:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
  40433e:	4293      	cmp	r3, r2
  404340:	bf84      	itt	hi
  404342:	4a12      	ldrhi	r2, [pc, #72]	; (40438c <_malloc_r+0x410>)
  404344:	6313      	strhi	r3, [r2, #48]	; 0x30
  404346:	68ab      	ldr	r3, [r5, #8]
  404348:	685a      	ldr	r2, [r3, #4]
  40434a:	f022 0203 	bic.w	r2, r2, #3
  40434e:	42a2      	cmp	r2, r4
  404350:	ebc4 0302 	rsb	r3, r4, r2
  404354:	d301      	bcc.n	40435a <_malloc_r+0x3de>
  404356:	2b0f      	cmp	r3, #15
  404358:	dc04      	bgt.n	404364 <_malloc_r+0x3e8>
  40435a:	4638      	mov	r0, r7
  40435c:	f000 f84c 	bl	4043f8 <__malloc_unlock>
  404360:	2600      	movs	r6, #0
  404362:	e00c      	b.n	40437e <_malloc_r+0x402>
  404364:	68ae      	ldr	r6, [r5, #8]
  404366:	f044 0201 	orr.w	r2, r4, #1
  40436a:	4434      	add	r4, r6
  40436c:	f043 0301 	orr.w	r3, r3, #1
  404370:	6072      	str	r2, [r6, #4]
  404372:	60ac      	str	r4, [r5, #8]
  404374:	6063      	str	r3, [r4, #4]
  404376:	4638      	mov	r0, r7
  404378:	f000 f83e 	bl	4043f8 <__malloc_unlock>
  40437c:	3608      	adds	r6, #8
  40437e:	4630      	mov	r0, r6
  404380:	b003      	add	sp, #12
  404382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404386:	bf00      	nop
  404388:	200008bc 	.word	0x200008bc
  40438c:	20000d64 	.word	0x20000d64

00404390 <memchr>:
  404390:	b510      	push	{r4, lr}
  404392:	b2c9      	uxtb	r1, r1
  404394:	4402      	add	r2, r0
  404396:	4290      	cmp	r0, r2
  404398:	4603      	mov	r3, r0
  40439a:	d006      	beq.n	4043aa <memchr+0x1a>
  40439c:	781c      	ldrb	r4, [r3, #0]
  40439e:	428c      	cmp	r4, r1
  4043a0:	f100 0001 	add.w	r0, r0, #1
  4043a4:	d1f7      	bne.n	404396 <memchr+0x6>
  4043a6:	4618      	mov	r0, r3
  4043a8:	bd10      	pop	{r4, pc}
  4043aa:	2000      	movs	r0, #0
  4043ac:	bd10      	pop	{r4, pc}

004043ae <memcpy>:
  4043ae:	b510      	push	{r4, lr}
  4043b0:	2300      	movs	r3, #0
  4043b2:	4293      	cmp	r3, r2
  4043b4:	d003      	beq.n	4043be <memcpy+0x10>
  4043b6:	5ccc      	ldrb	r4, [r1, r3]
  4043b8:	54c4      	strb	r4, [r0, r3]
  4043ba:	3301      	adds	r3, #1
  4043bc:	e7f9      	b.n	4043b2 <memcpy+0x4>
  4043be:	bd10      	pop	{r4, pc}

004043c0 <memmove>:
  4043c0:	4281      	cmp	r1, r0
  4043c2:	b570      	push	{r4, r5, r6, lr}
  4043c4:	d301      	bcc.n	4043ca <memmove+0xa>
  4043c6:	2300      	movs	r3, #0
  4043c8:	e00e      	b.n	4043e8 <memmove+0x28>
  4043ca:	188c      	adds	r4, r1, r2
  4043cc:	42a0      	cmp	r0, r4
  4043ce:	d2fa      	bcs.n	4043c6 <memmove+0x6>
  4043d0:	1885      	adds	r5, r0, r2
  4043d2:	4613      	mov	r3, r2
  4043d4:	f113 33ff 	adds.w	r3, r3, #4294967295
  4043d8:	d305      	bcc.n	4043e6 <memmove+0x26>
  4043da:	4251      	negs	r1, r2
  4043dc:	1866      	adds	r6, r4, r1
  4043de:	4429      	add	r1, r5
  4043e0:	5cf6      	ldrb	r6, [r6, r3]
  4043e2:	54ce      	strb	r6, [r1, r3]
  4043e4:	e7f6      	b.n	4043d4 <memmove+0x14>
  4043e6:	bd70      	pop	{r4, r5, r6, pc}
  4043e8:	4293      	cmp	r3, r2
  4043ea:	d003      	beq.n	4043f4 <memmove+0x34>
  4043ec:	5ccc      	ldrb	r4, [r1, r3]
  4043ee:	54c4      	strb	r4, [r0, r3]
  4043f0:	3301      	adds	r3, #1
  4043f2:	e7f9      	b.n	4043e8 <memmove+0x28>
  4043f4:	bd70      	pop	{r4, r5, r6, pc}

004043f6 <__malloc_lock>:
  4043f6:	4770      	bx	lr

004043f8 <__malloc_unlock>:
  4043f8:	4770      	bx	lr
	...

004043fc <_Balloc>:
  4043fc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4043fe:	b570      	push	{r4, r5, r6, lr}
  404400:	4605      	mov	r5, r0
  404402:	460c      	mov	r4, r1
  404404:	b13b      	cbz	r3, 404416 <_Balloc+0x1a>
  404406:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  404408:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  40440c:	b160      	cbz	r0, 404428 <_Balloc+0x2c>
  40440e:	6801      	ldr	r1, [r0, #0]
  404410:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  404414:	e014      	b.n	404440 <_Balloc+0x44>
  404416:	2104      	movs	r1, #4
  404418:	2221      	movs	r2, #33	; 0x21
  40441a:	f001 fa77 	bl	40590c <_calloc_r>
  40441e:	64e8      	str	r0, [r5, #76]	; 0x4c
  404420:	2800      	cmp	r0, #0
  404422:	d1f0      	bne.n	404406 <_Balloc+0xa>
  404424:	2000      	movs	r0, #0
  404426:	bd70      	pop	{r4, r5, r6, pc}
  404428:	2101      	movs	r1, #1
  40442a:	fa01 f604 	lsl.w	r6, r1, r4
  40442e:	1d72      	adds	r2, r6, #5
  404430:	4628      	mov	r0, r5
  404432:	0092      	lsls	r2, r2, #2
  404434:	f001 fa6a 	bl	40590c <_calloc_r>
  404438:	2800      	cmp	r0, #0
  40443a:	d0f3      	beq.n	404424 <_Balloc+0x28>
  40443c:	6044      	str	r4, [r0, #4]
  40443e:	6086      	str	r6, [r0, #8]
  404440:	2200      	movs	r2, #0
  404442:	6102      	str	r2, [r0, #16]
  404444:	60c2      	str	r2, [r0, #12]
  404446:	bd70      	pop	{r4, r5, r6, pc}

00404448 <_Bfree>:
  404448:	b131      	cbz	r1, 404458 <_Bfree+0x10>
  40444a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40444c:	684a      	ldr	r2, [r1, #4]
  40444e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  404452:	6008      	str	r0, [r1, #0]
  404454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  404458:	4770      	bx	lr

0040445a <__multadd>:
  40445a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40445e:	460c      	mov	r4, r1
  404460:	461e      	mov	r6, r3
  404462:	690d      	ldr	r5, [r1, #16]
  404464:	4607      	mov	r7, r0
  404466:	3114      	adds	r1, #20
  404468:	2300      	movs	r3, #0
  40446a:	6808      	ldr	r0, [r1, #0]
  40446c:	fa1f fc80 	uxth.w	ip, r0
  404470:	0c00      	lsrs	r0, r0, #16
  404472:	fb02 6c0c 	mla	ip, r2, ip, r6
  404476:	4350      	muls	r0, r2
  404478:	eb00 401c 	add.w	r0, r0, ip, lsr #16
  40447c:	3301      	adds	r3, #1
  40447e:	fa1f fc8c 	uxth.w	ip, ip
  404482:	0c06      	lsrs	r6, r0, #16
  404484:	42ab      	cmp	r3, r5
  404486:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
  40448a:	f841 0b04 	str.w	r0, [r1], #4
  40448e:	dbec      	blt.n	40446a <__multadd+0x10>
  404490:	b1d6      	cbz	r6, 4044c8 <__multadd+0x6e>
  404492:	68a3      	ldr	r3, [r4, #8]
  404494:	429d      	cmp	r5, r3
  404496:	db12      	blt.n	4044be <__multadd+0x64>
  404498:	6861      	ldr	r1, [r4, #4]
  40449a:	4638      	mov	r0, r7
  40449c:	3101      	adds	r1, #1
  40449e:	f7ff ffad 	bl	4043fc <_Balloc>
  4044a2:	6922      	ldr	r2, [r4, #16]
  4044a4:	3202      	adds	r2, #2
  4044a6:	f104 010c 	add.w	r1, r4, #12
  4044aa:	4680      	mov	r8, r0
  4044ac:	0092      	lsls	r2, r2, #2
  4044ae:	300c      	adds	r0, #12
  4044b0:	f7ff ff7d 	bl	4043ae <memcpy>
  4044b4:	4621      	mov	r1, r4
  4044b6:	4638      	mov	r0, r7
  4044b8:	f7ff ffc6 	bl	404448 <_Bfree>
  4044bc:	4644      	mov	r4, r8
  4044be:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  4044c2:	3501      	adds	r5, #1
  4044c4:	615e      	str	r6, [r3, #20]
  4044c6:	6125      	str	r5, [r4, #16]
  4044c8:	4620      	mov	r0, r4
  4044ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004044ce <__s2b>:
  4044ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4044d2:	4614      	mov	r4, r2
  4044d4:	4698      	mov	r8, r3
  4044d6:	f103 0208 	add.w	r2, r3, #8
  4044da:	2309      	movs	r3, #9
  4044dc:	460d      	mov	r5, r1
  4044de:	fb92 f2f3 	sdiv	r2, r2, r3
  4044e2:	4606      	mov	r6, r0
  4044e4:	2301      	movs	r3, #1
  4044e6:	2100      	movs	r1, #0
  4044e8:	429a      	cmp	r2, r3
  4044ea:	dd02      	ble.n	4044f2 <__s2b+0x24>
  4044ec:	005b      	lsls	r3, r3, #1
  4044ee:	3101      	adds	r1, #1
  4044f0:	e7fa      	b.n	4044e8 <__s2b+0x1a>
  4044f2:	4630      	mov	r0, r6
  4044f4:	f7ff ff82 	bl	4043fc <_Balloc>
  4044f8:	9b08      	ldr	r3, [sp, #32]
  4044fa:	6143      	str	r3, [r0, #20]
  4044fc:	2c09      	cmp	r4, #9
  4044fe:	f04f 0301 	mov.w	r3, #1
  404502:	4601      	mov	r1, r0
  404504:	6103      	str	r3, [r0, #16]
  404506:	dd11      	ble.n	40452c <__s2b+0x5e>
  404508:	f105 0909 	add.w	r9, r5, #9
  40450c:	464f      	mov	r7, r9
  40450e:	4425      	add	r5, r4
  404510:	f817 3b01 	ldrb.w	r3, [r7], #1
  404514:	4630      	mov	r0, r6
  404516:	220a      	movs	r2, #10
  404518:	3b30      	subs	r3, #48	; 0x30
  40451a:	f7ff ff9e 	bl	40445a <__multadd>
  40451e:	42af      	cmp	r7, r5
  404520:	4601      	mov	r1, r0
  404522:	d1f5      	bne.n	404510 <__s2b+0x42>
  404524:	eb09 0704 	add.w	r7, r9, r4
  404528:	3f08      	subs	r7, #8
  40452a:	e002      	b.n	404532 <__s2b+0x64>
  40452c:	f105 070a 	add.w	r7, r5, #10
  404530:	2409      	movs	r4, #9
  404532:	4625      	mov	r5, r4
  404534:	4545      	cmp	r5, r8
  404536:	da09      	bge.n	40454c <__s2b+0x7e>
  404538:	1b3b      	subs	r3, r7, r4
  40453a:	4630      	mov	r0, r6
  40453c:	5d5b      	ldrb	r3, [r3, r5]
  40453e:	220a      	movs	r2, #10
  404540:	3b30      	subs	r3, #48	; 0x30
  404542:	f7ff ff8a 	bl	40445a <__multadd>
  404546:	3501      	adds	r5, #1
  404548:	4601      	mov	r1, r0
  40454a:	e7f3      	b.n	404534 <__s2b+0x66>
  40454c:	4608      	mov	r0, r1
  40454e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00404552 <__hi0bits>:
  404552:	0c03      	lsrs	r3, r0, #16
  404554:	041b      	lsls	r3, r3, #16
  404556:	b913      	cbnz	r3, 40455e <__hi0bits+0xc>
  404558:	0400      	lsls	r0, r0, #16
  40455a:	2310      	movs	r3, #16
  40455c:	e000      	b.n	404560 <__hi0bits+0xe>
  40455e:	2300      	movs	r3, #0
  404560:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  404564:	bf04      	itt	eq
  404566:	0200      	lsleq	r0, r0, #8
  404568:	3308      	addeq	r3, #8
  40456a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40456e:	bf04      	itt	eq
  404570:	0100      	lsleq	r0, r0, #4
  404572:	3304      	addeq	r3, #4
  404574:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  404578:	bf04      	itt	eq
  40457a:	0080      	lsleq	r0, r0, #2
  40457c:	3302      	addeq	r3, #2
  40457e:	2800      	cmp	r0, #0
  404580:	db03      	blt.n	40458a <__hi0bits+0x38>
  404582:	0042      	lsls	r2, r0, #1
  404584:	d503      	bpl.n	40458e <__hi0bits+0x3c>
  404586:	1c58      	adds	r0, r3, #1
  404588:	4770      	bx	lr
  40458a:	4618      	mov	r0, r3
  40458c:	4770      	bx	lr
  40458e:	2020      	movs	r0, #32
  404590:	4770      	bx	lr

00404592 <__lo0bits>:
  404592:	6803      	ldr	r3, [r0, #0]
  404594:	f013 0207 	ands.w	r2, r3, #7
  404598:	d00b      	beq.n	4045b2 <__lo0bits+0x20>
  40459a:	07d9      	lsls	r1, r3, #31
  40459c:	d422      	bmi.n	4045e4 <__lo0bits+0x52>
  40459e:	079a      	lsls	r2, r3, #30
  4045a0:	d503      	bpl.n	4045aa <__lo0bits+0x18>
  4045a2:	085b      	lsrs	r3, r3, #1
  4045a4:	6003      	str	r3, [r0, #0]
  4045a6:	2001      	movs	r0, #1
  4045a8:	4770      	bx	lr
  4045aa:	089b      	lsrs	r3, r3, #2
  4045ac:	6003      	str	r3, [r0, #0]
  4045ae:	2002      	movs	r0, #2
  4045b0:	4770      	bx	lr
  4045b2:	b299      	uxth	r1, r3
  4045b4:	b909      	cbnz	r1, 4045ba <__lo0bits+0x28>
  4045b6:	0c1b      	lsrs	r3, r3, #16
  4045b8:	2210      	movs	r2, #16
  4045ba:	f013 0fff 	tst.w	r3, #255	; 0xff
  4045be:	bf04      	itt	eq
  4045c0:	0a1b      	lsreq	r3, r3, #8
  4045c2:	3208      	addeq	r2, #8
  4045c4:	0719      	lsls	r1, r3, #28
  4045c6:	bf04      	itt	eq
  4045c8:	091b      	lsreq	r3, r3, #4
  4045ca:	3204      	addeq	r2, #4
  4045cc:	0799      	lsls	r1, r3, #30
  4045ce:	bf04      	itt	eq
  4045d0:	089b      	lsreq	r3, r3, #2
  4045d2:	3202      	addeq	r2, #2
  4045d4:	07d9      	lsls	r1, r3, #31
  4045d6:	d402      	bmi.n	4045de <__lo0bits+0x4c>
  4045d8:	085b      	lsrs	r3, r3, #1
  4045da:	d005      	beq.n	4045e8 <__lo0bits+0x56>
  4045dc:	3201      	adds	r2, #1
  4045de:	6003      	str	r3, [r0, #0]
  4045e0:	4610      	mov	r0, r2
  4045e2:	4770      	bx	lr
  4045e4:	2000      	movs	r0, #0
  4045e6:	4770      	bx	lr
  4045e8:	2020      	movs	r0, #32
  4045ea:	4770      	bx	lr

004045ec <__i2b>:
  4045ec:	b510      	push	{r4, lr}
  4045ee:	460c      	mov	r4, r1
  4045f0:	2101      	movs	r1, #1
  4045f2:	f7ff ff03 	bl	4043fc <_Balloc>
  4045f6:	2201      	movs	r2, #1
  4045f8:	6144      	str	r4, [r0, #20]
  4045fa:	6102      	str	r2, [r0, #16]
  4045fc:	bd10      	pop	{r4, pc}

004045fe <__multiply>:
  4045fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404602:	4616      	mov	r6, r2
  404604:	690a      	ldr	r2, [r1, #16]
  404606:	6933      	ldr	r3, [r6, #16]
  404608:	429a      	cmp	r2, r3
  40460a:	b085      	sub	sp, #20
  40460c:	460d      	mov	r5, r1
  40460e:	da01      	bge.n	404614 <__multiply+0x16>
  404610:	4635      	mov	r5, r6
  404612:	460e      	mov	r6, r1
  404614:	f8d5 8010 	ldr.w	r8, [r5, #16]
  404618:	6937      	ldr	r7, [r6, #16]
  40461a:	68ab      	ldr	r3, [r5, #8]
  40461c:	6869      	ldr	r1, [r5, #4]
  40461e:	eb08 0407 	add.w	r4, r8, r7
  404622:	429c      	cmp	r4, r3
  404624:	bfc8      	it	gt
  404626:	3101      	addgt	r1, #1
  404628:	f7ff fee8 	bl	4043fc <_Balloc>
  40462c:	f100 0314 	add.w	r3, r0, #20
  404630:	eb03 0184 	add.w	r1, r3, r4, lsl #2
  404634:	9101      	str	r1, [sp, #4]
  404636:	461a      	mov	r2, r3
  404638:	f8dd a004 	ldr.w	sl, [sp, #4]
  40463c:	4552      	cmp	r2, sl
  40463e:	d203      	bcs.n	404648 <__multiply+0x4a>
  404640:	2100      	movs	r1, #0
  404642:	f842 1b04 	str.w	r1, [r2], #4
  404646:	e7f7      	b.n	404638 <__multiply+0x3a>
  404648:	f105 0114 	add.w	r1, r5, #20
  40464c:	f106 0214 	add.w	r2, r6, #20
  404650:	eb01 0888 	add.w	r8, r1, r8, lsl #2
  404654:	eb02 0787 	add.w	r7, r2, r7, lsl #2
  404658:	f8cd 8008 	str.w	r8, [sp, #8]
  40465c:	9703      	str	r7, [sp, #12]
  40465e:	9e03      	ldr	r6, [sp, #12]
  404660:	42b2      	cmp	r2, r6
  404662:	4615      	mov	r5, r2
  404664:	d256      	bcs.n	404714 <__multiply+0x116>
  404666:	f8b5 c000 	ldrh.w	ip, [r5]
  40466a:	3204      	adds	r2, #4
  40466c:	f1bc 0f00 	cmp.w	ip, #0
  404670:	d025      	beq.n	4046be <__multiply+0xc0>
  404672:	460f      	mov	r7, r1
  404674:	461d      	mov	r5, r3
  404676:	2600      	movs	r6, #0
  404678:	f857 9b04 	ldr.w	r9, [r7], #4
  40467c:	f8d5 8000 	ldr.w	r8, [r5]
  404680:	fa1f fb89 	uxth.w	fp, r9
  404684:	fa1f fa88 	uxth.w	sl, r8
  404688:	fb0c aa0b 	mla	sl, ip, fp, sl
  40468c:	ea4f 4919 	mov.w	r9, r9, lsr #16
  404690:	ea4f 4818 	mov.w	r8, r8, lsr #16
  404694:	44b2      	add	sl, r6
  404696:	fb0c 8809 	mla	r8, ip, r9, r8
  40469a:	eb08 481a 	add.w	r8, r8, sl, lsr #16
  40469e:	fa1f fa8a 	uxth.w	sl, sl
  4046a2:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
  4046a6:	ea4f 4618 	mov.w	r6, r8, lsr #16
  4046aa:	f8dd 8008 	ldr.w	r8, [sp, #8]
  4046ae:	46ab      	mov	fp, r5
  4046b0:	45b8      	cmp	r8, r7
  4046b2:	f84b ab04 	str.w	sl, [fp], #4
  4046b6:	d901      	bls.n	4046bc <__multiply+0xbe>
  4046b8:	465d      	mov	r5, fp
  4046ba:	e7dd      	b.n	404678 <__multiply+0x7a>
  4046bc:	606e      	str	r6, [r5, #4]
  4046be:	f832 8c02 	ldrh.w	r8, [r2, #-2]
  4046c2:	f1b8 0f00 	cmp.w	r8, #0
  4046c6:	d023      	beq.n	404710 <__multiply+0x112>
  4046c8:	681e      	ldr	r6, [r3, #0]
  4046ca:	460f      	mov	r7, r1
  4046cc:	461d      	mov	r5, r3
  4046ce:	f04f 0900 	mov.w	r9, #0
  4046d2:	f8b7 a000 	ldrh.w	sl, [r7]
  4046d6:	f8b5 c002 	ldrh.w	ip, [r5, #2]
  4046da:	fb08 cc0a 	mla	ip, r8, sl, ip
  4046de:	44e1      	add	r9, ip
  4046e0:	b2b6      	uxth	r6, r6
  4046e2:	46ac      	mov	ip, r5
  4046e4:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
  4046e8:	f84c 6b04 	str.w	r6, [ip], #4
  4046ec:	f857 6b04 	ldr.w	r6, [r7], #4
  4046f0:	f8b5 a004 	ldrh.w	sl, [r5, #4]
  4046f4:	0c36      	lsrs	r6, r6, #16
  4046f6:	fb08 a606 	mla	r6, r8, r6, sl
  4046fa:	f8dd a008 	ldr.w	sl, [sp, #8]
  4046fe:	eb06 4619 	add.w	r6, r6, r9, lsr #16
  404702:	4557      	cmp	r7, sl
  404704:	ea4f 4916 	mov.w	r9, r6, lsr #16
  404708:	d201      	bcs.n	40470e <__multiply+0x110>
  40470a:	4665      	mov	r5, ip
  40470c:	e7e1      	b.n	4046d2 <__multiply+0xd4>
  40470e:	606e      	str	r6, [r5, #4]
  404710:	3304      	adds	r3, #4
  404712:	e7a4      	b.n	40465e <__multiply+0x60>
  404714:	9b01      	ldr	r3, [sp, #4]
  404716:	2c00      	cmp	r4, #0
  404718:	dc03      	bgt.n	404722 <__multiply+0x124>
  40471a:	6104      	str	r4, [r0, #16]
  40471c:	b005      	add	sp, #20
  40471e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404722:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  404726:	2a00      	cmp	r2, #0
  404728:	d1f7      	bne.n	40471a <__multiply+0x11c>
  40472a:	3c01      	subs	r4, #1
  40472c:	e7f3      	b.n	404716 <__multiply+0x118>

0040472e <__pow5mult>:
  40472e:	f012 0303 	ands.w	r3, r2, #3
  404732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404736:	4605      	mov	r5, r0
  404738:	460e      	mov	r6, r1
  40473a:	4617      	mov	r7, r2
  40473c:	d007      	beq.n	40474e <__pow5mult+0x20>
  40473e:	3b01      	subs	r3, #1
  404740:	4a19      	ldr	r2, [pc, #100]	; (4047a8 <__pow5mult+0x7a>)
  404742:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  404746:	2300      	movs	r3, #0
  404748:	f7ff fe87 	bl	40445a <__multadd>
  40474c:	4606      	mov	r6, r0
  40474e:	10bf      	asrs	r7, r7, #2
  404750:	d027      	beq.n	4047a2 <__pow5mult+0x74>
  404752:	6cac      	ldr	r4, [r5, #72]	; 0x48
  404754:	b974      	cbnz	r4, 404774 <__pow5mult+0x46>
  404756:	4628      	mov	r0, r5
  404758:	f240 2171 	movw	r1, #625	; 0x271
  40475c:	f7ff ff46 	bl	4045ec <__i2b>
  404760:	2300      	movs	r3, #0
  404762:	64a8      	str	r0, [r5, #72]	; 0x48
  404764:	4604      	mov	r4, r0
  404766:	6003      	str	r3, [r0, #0]
  404768:	e004      	b.n	404774 <__pow5mult+0x46>
  40476a:	107f      	asrs	r7, r7, #1
  40476c:	d019      	beq.n	4047a2 <__pow5mult+0x74>
  40476e:	6820      	ldr	r0, [r4, #0]
  404770:	b170      	cbz	r0, 404790 <__pow5mult+0x62>
  404772:	4604      	mov	r4, r0
  404774:	07fb      	lsls	r3, r7, #31
  404776:	d5f8      	bpl.n	40476a <__pow5mult+0x3c>
  404778:	4631      	mov	r1, r6
  40477a:	4622      	mov	r2, r4
  40477c:	4628      	mov	r0, r5
  40477e:	f7ff ff3e 	bl	4045fe <__multiply>
  404782:	4631      	mov	r1, r6
  404784:	4680      	mov	r8, r0
  404786:	4628      	mov	r0, r5
  404788:	f7ff fe5e 	bl	404448 <_Bfree>
  40478c:	4646      	mov	r6, r8
  40478e:	e7ec      	b.n	40476a <__pow5mult+0x3c>
  404790:	4628      	mov	r0, r5
  404792:	4621      	mov	r1, r4
  404794:	4622      	mov	r2, r4
  404796:	f7ff ff32 	bl	4045fe <__multiply>
  40479a:	2300      	movs	r3, #0
  40479c:	6020      	str	r0, [r4, #0]
  40479e:	6003      	str	r3, [r0, #0]
  4047a0:	e7e7      	b.n	404772 <__pow5mult+0x44>
  4047a2:	4630      	mov	r0, r6
  4047a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4047a8:	00406280 	.word	0x00406280

004047ac <__lshift>:
  4047ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4047b0:	460c      	mov	r4, r1
  4047b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
  4047b6:	6923      	ldr	r3, [r4, #16]
  4047b8:	6849      	ldr	r1, [r1, #4]
  4047ba:	eb0a 0903 	add.w	r9, sl, r3
  4047be:	68a3      	ldr	r3, [r4, #8]
  4047c0:	4680      	mov	r8, r0
  4047c2:	4615      	mov	r5, r2
  4047c4:	f109 0701 	add.w	r7, r9, #1
  4047c8:	429f      	cmp	r7, r3
  4047ca:	dd02      	ble.n	4047d2 <__lshift+0x26>
  4047cc:	3101      	adds	r1, #1
  4047ce:	005b      	lsls	r3, r3, #1
  4047d0:	e7fa      	b.n	4047c8 <__lshift+0x1c>
  4047d2:	4640      	mov	r0, r8
  4047d4:	f7ff fe12 	bl	4043fc <_Balloc>
  4047d8:	2300      	movs	r3, #0
  4047da:	4606      	mov	r6, r0
  4047dc:	f100 0214 	add.w	r2, r0, #20
  4047e0:	4553      	cmp	r3, sl
  4047e2:	da04      	bge.n	4047ee <__lshift+0x42>
  4047e4:	2100      	movs	r1, #0
  4047e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  4047ea:	3301      	adds	r3, #1
  4047ec:	e7f8      	b.n	4047e0 <__lshift+0x34>
  4047ee:	6920      	ldr	r0, [r4, #16]
  4047f0:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
  4047f4:	f104 0314 	add.w	r3, r4, #20
  4047f8:	f015 0c1f 	ands.w	ip, r5, #31
  4047fc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  404800:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
  404804:	d016      	beq.n	404834 <__lshift+0x88>
  404806:	f1cc 0a20 	rsb	sl, ip, #32
  40480a:	2500      	movs	r5, #0
  40480c:	6818      	ldr	r0, [r3, #0]
  40480e:	460a      	mov	r2, r1
  404810:	fa00 f00c 	lsl.w	r0, r0, ip
  404814:	4305      	orrs	r5, r0
  404816:	f842 5b04 	str.w	r5, [r2], #4
  40481a:	f853 5b04 	ldr.w	r5, [r3], #4
  40481e:	4573      	cmp	r3, lr
  404820:	fa25 f50a 	lsr.w	r5, r5, sl
  404824:	d201      	bcs.n	40482a <__lshift+0x7e>
  404826:	4611      	mov	r1, r2
  404828:	e7f0      	b.n	40480c <__lshift+0x60>
  40482a:	604d      	str	r5, [r1, #4]
  40482c:	b145      	cbz	r5, 404840 <__lshift+0x94>
  40482e:	f109 0702 	add.w	r7, r9, #2
  404832:	e005      	b.n	404840 <__lshift+0x94>
  404834:	f853 2b04 	ldr.w	r2, [r3], #4
  404838:	f841 2b04 	str.w	r2, [r1], #4
  40483c:	4573      	cmp	r3, lr
  40483e:	d3f9      	bcc.n	404834 <__lshift+0x88>
  404840:	3f01      	subs	r7, #1
  404842:	4640      	mov	r0, r8
  404844:	6137      	str	r7, [r6, #16]
  404846:	4621      	mov	r1, r4
  404848:	f7ff fdfe 	bl	404448 <_Bfree>
  40484c:	4630      	mov	r0, r6
  40484e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00404852 <__mcmp>:
  404852:	6902      	ldr	r2, [r0, #16]
  404854:	690b      	ldr	r3, [r1, #16]
  404856:	1ad2      	subs	r2, r2, r3
  404858:	b510      	push	{r4, lr}
  40485a:	d113      	bne.n	404884 <__mcmp+0x32>
  40485c:	009c      	lsls	r4, r3, #2
  40485e:	3014      	adds	r0, #20
  404860:	f101 0214 	add.w	r2, r1, #20
  404864:	1903      	adds	r3, r0, r4
  404866:	4422      	add	r2, r4
  404868:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40486c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  404870:	428c      	cmp	r4, r1
  404872:	d003      	beq.n	40487c <__mcmp+0x2a>
  404874:	d208      	bcs.n	404888 <__mcmp+0x36>
  404876:	f04f 30ff 	mov.w	r0, #4294967295
  40487a:	bd10      	pop	{r4, pc}
  40487c:	4298      	cmp	r0, r3
  40487e:	d3f3      	bcc.n	404868 <__mcmp+0x16>
  404880:	2000      	movs	r0, #0
  404882:	bd10      	pop	{r4, pc}
  404884:	4610      	mov	r0, r2
  404886:	bd10      	pop	{r4, pc}
  404888:	2001      	movs	r0, #1
  40488a:	bd10      	pop	{r4, pc}

0040488c <__mdiff>:
  40488c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404890:	4606      	mov	r6, r0
  404892:	460c      	mov	r4, r1
  404894:	4608      	mov	r0, r1
  404896:	4611      	mov	r1, r2
  404898:	4615      	mov	r5, r2
  40489a:	f7ff ffda 	bl	404852 <__mcmp>
  40489e:	1e07      	subs	r7, r0, #0
  4048a0:	d108      	bne.n	4048b4 <__mdiff+0x28>
  4048a2:	4630      	mov	r0, r6
  4048a4:	4639      	mov	r1, r7
  4048a6:	f7ff fda9 	bl	4043fc <_Balloc>
  4048aa:	2301      	movs	r3, #1
  4048ac:	6103      	str	r3, [r0, #16]
  4048ae:	6147      	str	r7, [r0, #20]
  4048b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4048b4:	db01      	blt.n	4048ba <__mdiff+0x2e>
  4048b6:	2700      	movs	r7, #0
  4048b8:	e003      	b.n	4048c2 <__mdiff+0x36>
  4048ba:	4623      	mov	r3, r4
  4048bc:	2701      	movs	r7, #1
  4048be:	462c      	mov	r4, r5
  4048c0:	461d      	mov	r5, r3
  4048c2:	6861      	ldr	r1, [r4, #4]
  4048c4:	4630      	mov	r0, r6
  4048c6:	f7ff fd99 	bl	4043fc <_Balloc>
  4048ca:	6922      	ldr	r2, [r4, #16]
  4048cc:	692b      	ldr	r3, [r5, #16]
  4048ce:	60c7      	str	r7, [r0, #12]
  4048d0:	3414      	adds	r4, #20
  4048d2:	f105 0614 	add.w	r6, r5, #20
  4048d6:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
  4048da:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
  4048de:	f100 0314 	add.w	r3, r0, #20
  4048e2:	2100      	movs	r1, #0
  4048e4:	f854 7b04 	ldr.w	r7, [r4], #4
  4048e8:	f856 9b04 	ldr.w	r9, [r6], #4
  4048ec:	fa11 f187 	uxtah	r1, r1, r7
  4048f0:	fa1f f589 	uxth.w	r5, r9
  4048f4:	ea4f 4919 	mov.w	r9, r9, lsr #16
  4048f8:	ebc5 0801 	rsb	r8, r5, r1
  4048fc:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
  404900:	eb07 4728 	add.w	r7, r7, r8, asr #16
  404904:	fa1f f888 	uxth.w	r8, r8
  404908:	1439      	asrs	r1, r7, #16
  40490a:	45b2      	cmp	sl, r6
  40490c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  404910:	4625      	mov	r5, r4
  404912:	f843 7b04 	str.w	r7, [r3], #4
  404916:	d8e5      	bhi.n	4048e4 <__mdiff+0x58>
  404918:	4565      	cmp	r5, ip
  40491a:	d20d      	bcs.n	404938 <__mdiff+0xac>
  40491c:	f855 4b04 	ldr.w	r4, [r5], #4
  404920:	fa11 f684 	uxtah	r6, r1, r4
  404924:	0c24      	lsrs	r4, r4, #16
  404926:	eb04 4426 	add.w	r4, r4, r6, asr #16
  40492a:	b2b6      	uxth	r6, r6
  40492c:	1421      	asrs	r1, r4, #16
  40492e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
  404932:	f843 4b04 	str.w	r4, [r3], #4
  404936:	e7ef      	b.n	404918 <__mdiff+0x8c>
  404938:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  40493c:	b909      	cbnz	r1, 404942 <__mdiff+0xb6>
  40493e:	3a01      	subs	r2, #1
  404940:	e7fa      	b.n	404938 <__mdiff+0xac>
  404942:	6102      	str	r2, [r0, #16]
  404944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00404948 <__ulp>:
  404948:	4b0f      	ldr	r3, [pc, #60]	; (404988 <__ulp+0x40>)
  40494a:	400b      	ands	r3, r1
  40494c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  404950:	2b00      	cmp	r3, #0
  404952:	dd01      	ble.n	404958 <__ulp+0x10>
  404954:	4619      	mov	r1, r3
  404956:	e009      	b.n	40496c <__ulp+0x24>
  404958:	425b      	negs	r3, r3
  40495a:	151b      	asrs	r3, r3, #20
  40495c:	2b13      	cmp	r3, #19
  40495e:	f04f 0100 	mov.w	r1, #0
  404962:	dc05      	bgt.n	404970 <__ulp+0x28>
  404964:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  404968:	fa42 f103 	asr.w	r1, r2, r3
  40496c:	2000      	movs	r0, #0
  40496e:	4770      	bx	lr
  404970:	2b32      	cmp	r3, #50	; 0x32
  404972:	f04f 0201 	mov.w	r2, #1
  404976:	bfda      	itte	le
  404978:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
  40497c:	fa02 f303 	lslle.w	r3, r2, r3
  404980:	4613      	movgt	r3, r2
  404982:	4618      	mov	r0, r3
  404984:	4770      	bx	lr
  404986:	bf00      	nop
  404988:	7ff00000 	.word	0x7ff00000

0040498c <__b2d>:
  40498c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404990:	6906      	ldr	r6, [r0, #16]
  404992:	f100 0714 	add.w	r7, r0, #20
  404996:	eb07 0686 	add.w	r6, r7, r6, lsl #2
  40499a:	4688      	mov	r8, r1
  40499c:	f856 4c04 	ldr.w	r4, [r6, #-4]
  4049a0:	4620      	mov	r0, r4
  4049a2:	f7ff fdd6 	bl	404552 <__hi0bits>
  4049a6:	f1c0 0320 	rsb	r3, r0, #32
  4049aa:	280a      	cmp	r0, #10
  4049ac:	f1a6 0504 	sub.w	r5, r6, #4
  4049b0:	f8c8 3000 	str.w	r3, [r8]
  4049b4:	dc14      	bgt.n	4049e0 <__b2d+0x54>
  4049b6:	42bd      	cmp	r5, r7
  4049b8:	f1c0 010b 	rsb	r1, r0, #11
  4049bc:	bf88      	it	hi
  4049be:	f856 5c08 	ldrhi.w	r5, [r6, #-8]
  4049c2:	fa24 fc01 	lsr.w	ip, r4, r1
  4049c6:	bf98      	it	ls
  4049c8:	2500      	movls	r5, #0
  4049ca:	3015      	adds	r0, #21
  4049cc:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
  4049d0:	fa25 f101 	lsr.w	r1, r5, r1
  4049d4:	4084      	lsls	r4, r0
  4049d6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  4049da:	ea41 0204 	orr.w	r2, r1, r4
  4049de:	e024      	b.n	404a2a <__b2d+0x9e>
  4049e0:	42bd      	cmp	r5, r7
  4049e2:	bf86      	itte	hi
  4049e4:	f1a6 0508 	subhi.w	r5, r6, #8
  4049e8:	f856 1c08 	ldrhi.w	r1, [r6, #-8]
  4049ec:	2100      	movls	r1, #0
  4049ee:	f1b0 060b 	subs.w	r6, r0, #11
  4049f2:	d015      	beq.n	404a20 <__b2d+0x94>
  4049f4:	40b4      	lsls	r4, r6
  4049f6:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
  4049fa:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
  4049fe:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
  404a02:	fa21 fc00 	lsr.w	ip, r1, r0
  404a06:	42bd      	cmp	r5, r7
  404a08:	ea44 030c 	orr.w	r3, r4, ip
  404a0c:	bf8c      	ite	hi
  404a0e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
  404a12:	2400      	movls	r4, #0
  404a14:	fa24 f000 	lsr.w	r0, r4, r0
  404a18:	40b1      	lsls	r1, r6
  404a1a:	ea40 0201 	orr.w	r2, r0, r1
  404a1e:	e004      	b.n	404a2a <__b2d+0x9e>
  404a20:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
  404a24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  404a28:	460a      	mov	r2, r1
  404a2a:	4610      	mov	r0, r2
  404a2c:	4619      	mov	r1, r3
  404a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404a32 <__d2b>:
  404a32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  404a36:	2101      	movs	r1, #1
  404a38:	461d      	mov	r5, r3
  404a3a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  404a3e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  404a42:	4614      	mov	r4, r2
  404a44:	f7ff fcda 	bl	4043fc <_Balloc>
  404a48:	f3c5 570a 	ubfx	r7, r5, #20, #11
  404a4c:	4606      	mov	r6, r0
  404a4e:	f3c5 0313 	ubfx	r3, r5, #0, #20
  404a52:	b10f      	cbz	r7, 404a58 <__d2b+0x26>
  404a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404a58:	9301      	str	r3, [sp, #4]
  404a5a:	b1d4      	cbz	r4, 404a92 <__d2b+0x60>
  404a5c:	a802      	add	r0, sp, #8
  404a5e:	f840 4d08 	str.w	r4, [r0, #-8]!
  404a62:	4668      	mov	r0, sp
  404a64:	f7ff fd95 	bl	404592 <__lo0bits>
  404a68:	9b00      	ldr	r3, [sp, #0]
  404a6a:	b148      	cbz	r0, 404a80 <__d2b+0x4e>
  404a6c:	9a01      	ldr	r2, [sp, #4]
  404a6e:	f1c0 0120 	rsb	r1, r0, #32
  404a72:	fa02 f101 	lsl.w	r1, r2, r1
  404a76:	430b      	orrs	r3, r1
  404a78:	40c2      	lsrs	r2, r0
  404a7a:	6173      	str	r3, [r6, #20]
  404a7c:	9201      	str	r2, [sp, #4]
  404a7e:	e000      	b.n	404a82 <__d2b+0x50>
  404a80:	6173      	str	r3, [r6, #20]
  404a82:	9b01      	ldr	r3, [sp, #4]
  404a84:	61b3      	str	r3, [r6, #24]
  404a86:	2b00      	cmp	r3, #0
  404a88:	bf0c      	ite	eq
  404a8a:	2401      	moveq	r4, #1
  404a8c:	2402      	movne	r4, #2
  404a8e:	6134      	str	r4, [r6, #16]
  404a90:	e007      	b.n	404aa2 <__d2b+0x70>
  404a92:	a801      	add	r0, sp, #4
  404a94:	f7ff fd7d 	bl	404592 <__lo0bits>
  404a98:	2401      	movs	r4, #1
  404a9a:	9b01      	ldr	r3, [sp, #4]
  404a9c:	6173      	str	r3, [r6, #20]
  404a9e:	6134      	str	r4, [r6, #16]
  404aa0:	3020      	adds	r0, #32
  404aa2:	b13f      	cbz	r7, 404ab4 <__d2b+0x82>
  404aa4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  404aa8:	4407      	add	r7, r0
  404aaa:	f8c9 7000 	str.w	r7, [r9]
  404aae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  404ab2:	e00a      	b.n	404aca <__d2b+0x98>
  404ab4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  404ab8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  404abc:	f8c9 0000 	str.w	r0, [r9]
  404ac0:	6918      	ldr	r0, [r3, #16]
  404ac2:	f7ff fd46 	bl	404552 <__hi0bits>
  404ac6:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  404aca:	f8c8 0000 	str.w	r0, [r8]
  404ace:	4630      	mov	r0, r6
  404ad0:	b003      	add	sp, #12
  404ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00404ad6 <__ratio>:
  404ad6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  404ada:	460e      	mov	r6, r1
  404adc:	4669      	mov	r1, sp
  404ade:	4680      	mov	r8, r0
  404ae0:	f7ff ff54 	bl	40498c <__b2d>
  404ae4:	460d      	mov	r5, r1
  404ae6:	4604      	mov	r4, r0
  404ae8:	a901      	add	r1, sp, #4
  404aea:	4630      	mov	r0, r6
  404aec:	f7ff ff4e 	bl	40498c <__b2d>
  404af0:	9f00      	ldr	r7, [sp, #0]
  404af2:	460b      	mov	r3, r1
  404af4:	9901      	ldr	r1, [sp, #4]
  404af6:	4602      	mov	r2, r0
  404af8:	1a7f      	subs	r7, r7, r1
  404afa:	f8d8 0010 	ldr.w	r0, [r8, #16]
  404afe:	6931      	ldr	r1, [r6, #16]
  404b00:	1a41      	subs	r1, r0, r1
  404b02:	eb07 1141 	add.w	r1, r7, r1, lsl #5
  404b06:	2900      	cmp	r1, #0
  404b08:	bfcc      	ite	gt
  404b0a:	eb05 5501 	addgt.w	r5, r5, r1, lsl #20
  404b0e:	eba3 5301 	suble.w	r3, r3, r1, lsl #20
  404b12:	4620      	mov	r0, r4
  404b14:	4629      	mov	r1, r5
  404b16:	f7fd f959 	bl	401dcc <__aeabi_ddiv>
  404b1a:	b002      	add	sp, #8
  404b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404b20 <_mprec_log10>:
  404b20:	2817      	cmp	r0, #23
  404b22:	b510      	push	{r4, lr}
  404b24:	4604      	mov	r4, r0
  404b26:	dc05      	bgt.n	404b34 <_mprec_log10+0x14>
  404b28:	4b07      	ldr	r3, [pc, #28]	; (404b48 <_mprec_log10+0x28>)
  404b2a:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
  404b2e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  404b32:	bd10      	pop	{r4, pc}
  404b34:	4905      	ldr	r1, [pc, #20]	; (404b4c <_mprec_log10+0x2c>)
  404b36:	2000      	movs	r0, #0
  404b38:	2200      	movs	r2, #0
  404b3a:	4b05      	ldr	r3, [pc, #20]	; (404b50 <_mprec_log10+0x30>)
  404b3c:	f7fd f81c 	bl	401b78 <__aeabi_dmul>
  404b40:	3c01      	subs	r4, #1
  404b42:	d1f9      	bne.n	404b38 <_mprec_log10+0x18>
  404b44:	bd10      	pop	{r4, pc}
  404b46:	bf00      	nop
  404b48:	00406280 	.word	0x00406280
  404b4c:	3ff00000 	.word	0x3ff00000
  404b50:	40240000 	.word	0x40240000

00404b54 <__copybits>:
  404b54:	b510      	push	{r4, lr}
  404b56:	3901      	subs	r1, #1
  404b58:	f102 0314 	add.w	r3, r2, #20
  404b5c:	1149      	asrs	r1, r1, #5
  404b5e:	6912      	ldr	r2, [r2, #16]
  404b60:	3101      	adds	r1, #1
  404b62:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  404b66:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  404b6a:	4293      	cmp	r3, r2
  404b6c:	d204      	bcs.n	404b78 <__copybits+0x24>
  404b6e:	f853 4b04 	ldr.w	r4, [r3], #4
  404b72:	f840 4b04 	str.w	r4, [r0], #4
  404b76:	e7f8      	b.n	404b6a <__copybits+0x16>
  404b78:	4288      	cmp	r0, r1
  404b7a:	d203      	bcs.n	404b84 <__copybits+0x30>
  404b7c:	2300      	movs	r3, #0
  404b7e:	f840 3b04 	str.w	r3, [r0], #4
  404b82:	e7f9      	b.n	404b78 <__copybits+0x24>
  404b84:	bd10      	pop	{r4, pc}

00404b86 <__any_on>:
  404b86:	f100 0214 	add.w	r2, r0, #20
  404b8a:	6900      	ldr	r0, [r0, #16]
  404b8c:	114b      	asrs	r3, r1, #5
  404b8e:	4283      	cmp	r3, r0
  404b90:	b510      	push	{r4, lr}
  404b92:	dc0c      	bgt.n	404bae <__any_on+0x28>
  404b94:	da0c      	bge.n	404bb0 <__any_on+0x2a>
  404b96:	f011 011f 	ands.w	r1, r1, #31
  404b9a:	d009      	beq.n	404bb0 <__any_on+0x2a>
  404b9c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  404ba0:	fa20 f401 	lsr.w	r4, r0, r1
  404ba4:	fa04 f101 	lsl.w	r1, r4, r1
  404ba8:	4281      	cmp	r1, r0
  404baa:	d10e      	bne.n	404bca <__any_on+0x44>
  404bac:	e000      	b.n	404bb0 <__any_on+0x2a>
  404bae:	4603      	mov	r3, r0
  404bb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  404bb4:	4293      	cmp	r3, r2
  404bb6:	4619      	mov	r1, r3
  404bb8:	d905      	bls.n	404bc6 <__any_on+0x40>
  404bba:	f851 1c04 	ldr.w	r1, [r1, #-4]
  404bbe:	3b04      	subs	r3, #4
  404bc0:	2900      	cmp	r1, #0
  404bc2:	d0f7      	beq.n	404bb4 <__any_on+0x2e>
  404bc4:	e001      	b.n	404bca <__any_on+0x44>
  404bc6:	2000      	movs	r0, #0
  404bc8:	bd10      	pop	{r4, pc}
  404bca:	2001      	movs	r0, #1
  404bcc:	bd10      	pop	{r4, pc}
  404bce:	bf00      	nop

00404bd0 <_realloc_r>:
  404bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404bd4:	4681      	mov	r9, r0
  404bd6:	460c      	mov	r4, r1
  404bd8:	b929      	cbnz	r1, 404be6 <_realloc_r+0x16>
  404bda:	4611      	mov	r1, r2
  404bdc:	b003      	add	sp, #12
  404bde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404be2:	f7ff b9cb 	b.w	403f7c <_malloc_r>
  404be6:	9201      	str	r2, [sp, #4]
  404be8:	f7ff fc05 	bl	4043f6 <__malloc_lock>
  404bec:	9a01      	ldr	r2, [sp, #4]
  404bee:	f854 5c04 	ldr.w	r5, [r4, #-4]
  404bf2:	f102 070b 	add.w	r7, r2, #11
  404bf6:	2f16      	cmp	r7, #22
  404bf8:	f1a4 0808 	sub.w	r8, r4, #8
  404bfc:	f025 0603 	bic.w	r6, r5, #3
  404c00:	d903      	bls.n	404c0a <_realloc_r+0x3a>
  404c02:	f037 0707 	bics.w	r7, r7, #7
  404c06:	d501      	bpl.n	404c0c <_realloc_r+0x3c>
  404c08:	e002      	b.n	404c10 <_realloc_r+0x40>
  404c0a:	2710      	movs	r7, #16
  404c0c:	4297      	cmp	r7, r2
  404c0e:	d204      	bcs.n	404c1a <_realloc_r+0x4a>
  404c10:	230c      	movs	r3, #12
  404c12:	f8c9 3000 	str.w	r3, [r9]
  404c16:	2000      	movs	r0, #0
  404c18:	e17e      	b.n	404f18 <_realloc_r+0x348>
  404c1a:	42be      	cmp	r6, r7
  404c1c:	f280 8154 	bge.w	404ec8 <_realloc_r+0x2f8>
  404c20:	49a2      	ldr	r1, [pc, #648]	; (404eac <_realloc_r+0x2dc>)
  404c22:	f8d1 e008 	ldr.w	lr, [r1, #8]
  404c26:	eb08 0306 	add.w	r3, r8, r6
  404c2a:	4573      	cmp	r3, lr
  404c2c:	468b      	mov	fp, r1
  404c2e:	6858      	ldr	r0, [r3, #4]
  404c30:	d005      	beq.n	404c3e <_realloc_r+0x6e>
  404c32:	f020 0101 	bic.w	r1, r0, #1
  404c36:	4419      	add	r1, r3
  404c38:	6849      	ldr	r1, [r1, #4]
  404c3a:	07c9      	lsls	r1, r1, #31
  404c3c:	d425      	bmi.n	404c8a <_realloc_r+0xba>
  404c3e:	f020 0003 	bic.w	r0, r0, #3
  404c42:	4573      	cmp	r3, lr
  404c44:	eb00 0106 	add.w	r1, r0, r6
  404c48:	d117      	bne.n	404c7a <_realloc_r+0xaa>
  404c4a:	f107 0c10 	add.w	ip, r7, #16
  404c4e:	4561      	cmp	r1, ip
  404c50:	db1d      	blt.n	404c8e <_realloc_r+0xbe>
  404c52:	eb08 0507 	add.w	r5, r8, r7
  404c56:	1bc9      	subs	r1, r1, r7
  404c58:	f041 0101 	orr.w	r1, r1, #1
  404c5c:	f8cb 5008 	str.w	r5, [fp, #8]
  404c60:	6069      	str	r1, [r5, #4]
  404c62:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404c66:	f003 0301 	and.w	r3, r3, #1
  404c6a:	431f      	orrs	r7, r3
  404c6c:	4648      	mov	r0, r9
  404c6e:	f844 7c04 	str.w	r7, [r4, #-4]
  404c72:	f7ff fbc1 	bl	4043f8 <__malloc_unlock>
  404c76:	4620      	mov	r0, r4
  404c78:	e14e      	b.n	404f18 <_realloc_r+0x348>
  404c7a:	42b9      	cmp	r1, r7
  404c7c:	db07      	blt.n	404c8e <_realloc_r+0xbe>
  404c7e:	68da      	ldr	r2, [r3, #12]
  404c80:	689b      	ldr	r3, [r3, #8]
  404c82:	460e      	mov	r6, r1
  404c84:	60da      	str	r2, [r3, #12]
  404c86:	6093      	str	r3, [r2, #8]
  404c88:	e11e      	b.n	404ec8 <_realloc_r+0x2f8>
  404c8a:	2000      	movs	r0, #0
  404c8c:	4603      	mov	r3, r0
  404c8e:	07e9      	lsls	r1, r5, #31
  404c90:	f100 80c9 	bmi.w	404e26 <_realloc_r+0x256>
  404c94:	f854 5c08 	ldr.w	r5, [r4, #-8]
  404c98:	ebc5 0508 	rsb	r5, r5, r8
  404c9c:	6869      	ldr	r1, [r5, #4]
  404c9e:	f021 0103 	bic.w	r1, r1, #3
  404ca2:	eb01 0a06 	add.w	sl, r1, r6
  404ca6:	2b00      	cmp	r3, #0
  404ca8:	f000 8088 	beq.w	404dbc <_realloc_r+0x1ec>
  404cac:	4573      	cmp	r3, lr
  404cae:	d14b      	bne.n	404d48 <_realloc_r+0x178>
  404cb0:	eb0a 0300 	add.w	r3, sl, r0
  404cb4:	f107 0110 	add.w	r1, r7, #16
  404cb8:	428b      	cmp	r3, r1
  404cba:	db7f      	blt.n	404dbc <_realloc_r+0x1ec>
  404cbc:	46a8      	mov	r8, r5
  404cbe:	68ea      	ldr	r2, [r5, #12]
  404cc0:	f858 1f08 	ldr.w	r1, [r8, #8]!
  404cc4:	60ca      	str	r2, [r1, #12]
  404cc6:	6091      	str	r1, [r2, #8]
  404cc8:	1f32      	subs	r2, r6, #4
  404cca:	2a24      	cmp	r2, #36	; 0x24
  404ccc:	d825      	bhi.n	404d1a <_realloc_r+0x14a>
  404cce:	2a13      	cmp	r2, #19
  404cd0:	d91b      	bls.n	404d0a <_realloc_r+0x13a>
  404cd2:	6821      	ldr	r1, [r4, #0]
  404cd4:	60a9      	str	r1, [r5, #8]
  404cd6:	6861      	ldr	r1, [r4, #4]
  404cd8:	60e9      	str	r1, [r5, #12]
  404cda:	2a1b      	cmp	r2, #27
  404cdc:	d803      	bhi.n	404ce6 <_realloc_r+0x116>
  404cde:	f105 0210 	add.w	r2, r5, #16
  404ce2:	3408      	adds	r4, #8
  404ce4:	e012      	b.n	404d0c <_realloc_r+0x13c>
  404ce6:	68a1      	ldr	r1, [r4, #8]
  404ce8:	6129      	str	r1, [r5, #16]
  404cea:	68e1      	ldr	r1, [r4, #12]
  404cec:	6169      	str	r1, [r5, #20]
  404cee:	2a24      	cmp	r2, #36	; 0x24
  404cf0:	d003      	beq.n	404cfa <_realloc_r+0x12a>
  404cf2:	f105 0218 	add.w	r2, r5, #24
  404cf6:	3410      	adds	r4, #16
  404cf8:	e008      	b.n	404d0c <_realloc_r+0x13c>
  404cfa:	6922      	ldr	r2, [r4, #16]
  404cfc:	61aa      	str	r2, [r5, #24]
  404cfe:	6961      	ldr	r1, [r4, #20]
  404d00:	61e9      	str	r1, [r5, #28]
  404d02:	f105 0220 	add.w	r2, r5, #32
  404d06:	3418      	adds	r4, #24
  404d08:	e000      	b.n	404d0c <_realloc_r+0x13c>
  404d0a:	4642      	mov	r2, r8
  404d0c:	6821      	ldr	r1, [r4, #0]
  404d0e:	6011      	str	r1, [r2, #0]
  404d10:	6861      	ldr	r1, [r4, #4]
  404d12:	6051      	str	r1, [r2, #4]
  404d14:	68a1      	ldr	r1, [r4, #8]
  404d16:	6091      	str	r1, [r2, #8]
  404d18:	e005      	b.n	404d26 <_realloc_r+0x156>
  404d1a:	4640      	mov	r0, r8
  404d1c:	4621      	mov	r1, r4
  404d1e:	9301      	str	r3, [sp, #4]
  404d20:	f7ff fb4e 	bl	4043c0 <memmove>
  404d24:	9b01      	ldr	r3, [sp, #4]
  404d26:	19ea      	adds	r2, r5, r7
  404d28:	1bdb      	subs	r3, r3, r7
  404d2a:	f043 0301 	orr.w	r3, r3, #1
  404d2e:	f8cb 2008 	str.w	r2, [fp, #8]
  404d32:	6053      	str	r3, [r2, #4]
  404d34:	686b      	ldr	r3, [r5, #4]
  404d36:	f003 0301 	and.w	r3, r3, #1
  404d3a:	431f      	orrs	r7, r3
  404d3c:	4648      	mov	r0, r9
  404d3e:	606f      	str	r7, [r5, #4]
  404d40:	f7ff fb5a 	bl	4043f8 <__malloc_unlock>
  404d44:	4640      	mov	r0, r8
  404d46:	e0e7      	b.n	404f18 <_realloc_r+0x348>
  404d48:	eb0a 0b00 	add.w	fp, sl, r0
  404d4c:	45bb      	cmp	fp, r7
  404d4e:	db35      	blt.n	404dbc <_realloc_r+0x1ec>
  404d50:	68da      	ldr	r2, [r3, #12]
  404d52:	689b      	ldr	r3, [r3, #8]
  404d54:	4628      	mov	r0, r5
  404d56:	60da      	str	r2, [r3, #12]
  404d58:	6093      	str	r3, [r2, #8]
  404d5a:	f850 2f08 	ldr.w	r2, [r0, #8]!
  404d5e:	68eb      	ldr	r3, [r5, #12]
  404d60:	60d3      	str	r3, [r2, #12]
  404d62:	609a      	str	r2, [r3, #8]
  404d64:	1f32      	subs	r2, r6, #4
  404d66:	2a24      	cmp	r2, #36	; 0x24
  404d68:	d823      	bhi.n	404db2 <_realloc_r+0x1e2>
  404d6a:	2a13      	cmp	r2, #19
  404d6c:	d91a      	bls.n	404da4 <_realloc_r+0x1d4>
  404d6e:	6823      	ldr	r3, [r4, #0]
  404d70:	60ab      	str	r3, [r5, #8]
  404d72:	6863      	ldr	r3, [r4, #4]
  404d74:	60eb      	str	r3, [r5, #12]
  404d76:	2a1b      	cmp	r2, #27
  404d78:	d803      	bhi.n	404d82 <_realloc_r+0x1b2>
  404d7a:	f105 0010 	add.w	r0, r5, #16
  404d7e:	3408      	adds	r4, #8
  404d80:	e010      	b.n	404da4 <_realloc_r+0x1d4>
  404d82:	68a3      	ldr	r3, [r4, #8]
  404d84:	612b      	str	r3, [r5, #16]
  404d86:	68e3      	ldr	r3, [r4, #12]
  404d88:	616b      	str	r3, [r5, #20]
  404d8a:	2a24      	cmp	r2, #36	; 0x24
  404d8c:	d003      	beq.n	404d96 <_realloc_r+0x1c6>
  404d8e:	f105 0018 	add.w	r0, r5, #24
  404d92:	3410      	adds	r4, #16
  404d94:	e006      	b.n	404da4 <_realloc_r+0x1d4>
  404d96:	6923      	ldr	r3, [r4, #16]
  404d98:	61ab      	str	r3, [r5, #24]
  404d9a:	6963      	ldr	r3, [r4, #20]
  404d9c:	61eb      	str	r3, [r5, #28]
  404d9e:	f105 0020 	add.w	r0, r5, #32
  404da2:	3418      	adds	r4, #24
  404da4:	6823      	ldr	r3, [r4, #0]
  404da6:	6003      	str	r3, [r0, #0]
  404da8:	6863      	ldr	r3, [r4, #4]
  404daa:	6043      	str	r3, [r0, #4]
  404dac:	68a3      	ldr	r3, [r4, #8]
  404dae:	6083      	str	r3, [r0, #8]
  404db0:	e002      	b.n	404db8 <_realloc_r+0x1e8>
  404db2:	4621      	mov	r1, r4
  404db4:	f7ff fb04 	bl	4043c0 <memmove>
  404db8:	465e      	mov	r6, fp
  404dba:	e02e      	b.n	404e1a <_realloc_r+0x24a>
  404dbc:	45ba      	cmp	sl, r7
  404dbe:	db32      	blt.n	404e26 <_realloc_r+0x256>
  404dc0:	4628      	mov	r0, r5
  404dc2:	68eb      	ldr	r3, [r5, #12]
  404dc4:	f850 2f08 	ldr.w	r2, [r0, #8]!
  404dc8:	60d3      	str	r3, [r2, #12]
  404dca:	609a      	str	r2, [r3, #8]
  404dcc:	1f32      	subs	r2, r6, #4
  404dce:	2a24      	cmp	r2, #36	; 0x24
  404dd0:	d825      	bhi.n	404e1e <_realloc_r+0x24e>
  404dd2:	2a13      	cmp	r2, #19
  404dd4:	d91a      	bls.n	404e0c <_realloc_r+0x23c>
  404dd6:	6823      	ldr	r3, [r4, #0]
  404dd8:	60ab      	str	r3, [r5, #8]
  404dda:	6863      	ldr	r3, [r4, #4]
  404ddc:	60eb      	str	r3, [r5, #12]
  404dde:	2a1b      	cmp	r2, #27
  404de0:	d803      	bhi.n	404dea <_realloc_r+0x21a>
  404de2:	f105 0010 	add.w	r0, r5, #16
  404de6:	3408      	adds	r4, #8
  404de8:	e010      	b.n	404e0c <_realloc_r+0x23c>
  404dea:	68a3      	ldr	r3, [r4, #8]
  404dec:	612b      	str	r3, [r5, #16]
  404dee:	68e3      	ldr	r3, [r4, #12]
  404df0:	616b      	str	r3, [r5, #20]
  404df2:	2a24      	cmp	r2, #36	; 0x24
  404df4:	d003      	beq.n	404dfe <_realloc_r+0x22e>
  404df6:	f105 0018 	add.w	r0, r5, #24
  404dfa:	3410      	adds	r4, #16
  404dfc:	e006      	b.n	404e0c <_realloc_r+0x23c>
  404dfe:	6923      	ldr	r3, [r4, #16]
  404e00:	61ab      	str	r3, [r5, #24]
  404e02:	6963      	ldr	r3, [r4, #20]
  404e04:	61eb      	str	r3, [r5, #28]
  404e06:	f105 0020 	add.w	r0, r5, #32
  404e0a:	3418      	adds	r4, #24
  404e0c:	6823      	ldr	r3, [r4, #0]
  404e0e:	6003      	str	r3, [r0, #0]
  404e10:	6863      	ldr	r3, [r4, #4]
  404e12:	6043      	str	r3, [r0, #4]
  404e14:	68a3      	ldr	r3, [r4, #8]
  404e16:	6083      	str	r3, [r0, #8]
  404e18:	4656      	mov	r6, sl
  404e1a:	46a8      	mov	r8, r5
  404e1c:	e054      	b.n	404ec8 <_realloc_r+0x2f8>
  404e1e:	4621      	mov	r1, r4
  404e20:	f7ff face 	bl	4043c0 <memmove>
  404e24:	e7f8      	b.n	404e18 <_realloc_r+0x248>
  404e26:	4648      	mov	r0, r9
  404e28:	4611      	mov	r1, r2
  404e2a:	f7ff f8a7 	bl	403f7c <_malloc_r>
  404e2e:	4605      	mov	r5, r0
  404e30:	2800      	cmp	r0, #0
  404e32:	d044      	beq.n	404ebe <_realloc_r+0x2ee>
  404e34:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404e38:	f023 0301 	bic.w	r3, r3, #1
  404e3c:	f1a0 0208 	sub.w	r2, r0, #8
  404e40:	4443      	add	r3, r8
  404e42:	429a      	cmp	r2, r3
  404e44:	d105      	bne.n	404e52 <_realloc_r+0x282>
  404e46:	f850 3c04 	ldr.w	r3, [r0, #-4]
  404e4a:	f023 0303 	bic.w	r3, r3, #3
  404e4e:	441e      	add	r6, r3
  404e50:	e03a      	b.n	404ec8 <_realloc_r+0x2f8>
  404e52:	1f32      	subs	r2, r6, #4
  404e54:	2a24      	cmp	r2, #36	; 0x24
  404e56:	d82b      	bhi.n	404eb0 <_realloc_r+0x2e0>
  404e58:	2a13      	cmp	r2, #19
  404e5a:	d91e      	bls.n	404e9a <_realloc_r+0x2ca>
  404e5c:	6823      	ldr	r3, [r4, #0]
  404e5e:	6003      	str	r3, [r0, #0]
  404e60:	6863      	ldr	r3, [r4, #4]
  404e62:	6043      	str	r3, [r0, #4]
  404e64:	2a1b      	cmp	r2, #27
  404e66:	d804      	bhi.n	404e72 <_realloc_r+0x2a2>
  404e68:	f100 0308 	add.w	r3, r0, #8
  404e6c:	f104 0208 	add.w	r2, r4, #8
  404e70:	e015      	b.n	404e9e <_realloc_r+0x2ce>
  404e72:	68a3      	ldr	r3, [r4, #8]
  404e74:	6083      	str	r3, [r0, #8]
  404e76:	68e3      	ldr	r3, [r4, #12]
  404e78:	60c3      	str	r3, [r0, #12]
  404e7a:	2a24      	cmp	r2, #36	; 0x24
  404e7c:	d004      	beq.n	404e88 <_realloc_r+0x2b8>
  404e7e:	f100 0310 	add.w	r3, r0, #16
  404e82:	f104 0210 	add.w	r2, r4, #16
  404e86:	e00a      	b.n	404e9e <_realloc_r+0x2ce>
  404e88:	6923      	ldr	r3, [r4, #16]
  404e8a:	6103      	str	r3, [r0, #16]
  404e8c:	6961      	ldr	r1, [r4, #20]
  404e8e:	6141      	str	r1, [r0, #20]
  404e90:	f100 0318 	add.w	r3, r0, #24
  404e94:	f104 0218 	add.w	r2, r4, #24
  404e98:	e001      	b.n	404e9e <_realloc_r+0x2ce>
  404e9a:	4603      	mov	r3, r0
  404e9c:	4622      	mov	r2, r4
  404e9e:	6811      	ldr	r1, [r2, #0]
  404ea0:	6019      	str	r1, [r3, #0]
  404ea2:	6851      	ldr	r1, [r2, #4]
  404ea4:	6059      	str	r1, [r3, #4]
  404ea6:	6892      	ldr	r2, [r2, #8]
  404ea8:	609a      	str	r2, [r3, #8]
  404eaa:	e004      	b.n	404eb6 <_realloc_r+0x2e6>
  404eac:	200008bc 	.word	0x200008bc
  404eb0:	4621      	mov	r1, r4
  404eb2:	f7ff fa85 	bl	4043c0 <memmove>
  404eb6:	4648      	mov	r0, r9
  404eb8:	4621      	mov	r1, r4
  404eba:	f7fe ff65 	bl	403d88 <_free_r>
  404ebe:	4648      	mov	r0, r9
  404ec0:	f7ff fa9a 	bl	4043f8 <__malloc_unlock>
  404ec4:	4628      	mov	r0, r5
  404ec6:	e027      	b.n	404f18 <_realloc_r+0x348>
  404ec8:	1bf3      	subs	r3, r6, r7
  404eca:	2b0f      	cmp	r3, #15
  404ecc:	f8d8 2004 	ldr.w	r2, [r8, #4]
  404ed0:	d913      	bls.n	404efa <_realloc_r+0x32a>
  404ed2:	eb08 0107 	add.w	r1, r8, r7
  404ed6:	f002 0201 	and.w	r2, r2, #1
  404eda:	4317      	orrs	r7, r2
  404edc:	f043 0201 	orr.w	r2, r3, #1
  404ee0:	440b      	add	r3, r1
  404ee2:	f8c8 7004 	str.w	r7, [r8, #4]
  404ee6:	604a      	str	r2, [r1, #4]
  404ee8:	685a      	ldr	r2, [r3, #4]
  404eea:	f042 0201 	orr.w	r2, r2, #1
  404eee:	605a      	str	r2, [r3, #4]
  404ef0:	4648      	mov	r0, r9
  404ef2:	3108      	adds	r1, #8
  404ef4:	f7fe ff48 	bl	403d88 <_free_r>
  404ef8:	e009      	b.n	404f0e <_realloc_r+0x33e>
  404efa:	f002 0201 	and.w	r2, r2, #1
  404efe:	4332      	orrs	r2, r6
  404f00:	4446      	add	r6, r8
  404f02:	f8c8 2004 	str.w	r2, [r8, #4]
  404f06:	6873      	ldr	r3, [r6, #4]
  404f08:	f043 0301 	orr.w	r3, r3, #1
  404f0c:	6073      	str	r3, [r6, #4]
  404f0e:	4648      	mov	r0, r9
  404f10:	f7ff fa72 	bl	4043f8 <__malloc_unlock>
  404f14:	f108 0008 	add.w	r0, r8, #8
  404f18:	b003      	add	sp, #12
  404f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f1e:	bf00      	nop

00404f20 <__fpclassifyd>:
  404f20:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  404f24:	b510      	push	{r4, lr}
  404f26:	d100      	bne.n	404f2a <__fpclassifyd+0xa>
  404f28:	b178      	cbz	r0, 404f4a <__fpclassifyd+0x2a>
  404f2a:	4a0c      	ldr	r2, [pc, #48]	; (404f5c <__fpclassifyd+0x3c>)
  404f2c:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  404f30:	4294      	cmp	r4, r2
  404f32:	d90c      	bls.n	404f4e <__fpclassifyd+0x2e>
  404f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  404f38:	d30b      	bcc.n	404f52 <__fpclassifyd+0x32>
  404f3a:	4a09      	ldr	r2, [pc, #36]	; (404f60 <__fpclassifyd+0x40>)
  404f3c:	4293      	cmp	r3, r2
  404f3e:	d10a      	bne.n	404f56 <__fpclassifyd+0x36>
  404f40:	f1d0 0001 	rsbs	r0, r0, #1
  404f44:	bf38      	it	cc
  404f46:	2000      	movcc	r0, #0
  404f48:	bd10      	pop	{r4, pc}
  404f4a:	2002      	movs	r0, #2
  404f4c:	bd10      	pop	{r4, pc}
  404f4e:	2004      	movs	r0, #4
  404f50:	bd10      	pop	{r4, pc}
  404f52:	2003      	movs	r0, #3
  404f54:	bd10      	pop	{r4, pc}
  404f56:	2000      	movs	r0, #0
  404f58:	bd10      	pop	{r4, pc}
  404f5a:	bf00      	nop
  404f5c:	7fdfffff 	.word	0x7fdfffff
  404f60:	7ff00000 	.word	0x7ff00000

00404f64 <_sbrk_r>:
  404f64:	b538      	push	{r3, r4, r5, lr}
  404f66:	4c06      	ldr	r4, [pc, #24]	; (404f80 <_sbrk_r+0x1c>)
  404f68:	2300      	movs	r3, #0
  404f6a:	4605      	mov	r5, r0
  404f6c:	4608      	mov	r0, r1
  404f6e:	6023      	str	r3, [r4, #0]
  404f70:	f7fc f874 	bl	40105c <_sbrk>
  404f74:	1c43      	adds	r3, r0, #1
  404f76:	d102      	bne.n	404f7e <_sbrk_r+0x1a>
  404f78:	6823      	ldr	r3, [r4, #0]
  404f7a:	b103      	cbz	r3, 404f7e <_sbrk_r+0x1a>
  404f7c:	602b      	str	r3, [r5, #0]
  404f7e:	bd38      	pop	{r3, r4, r5, pc}
  404f80:	20000d9c 	.word	0x20000d9c

00404f84 <strcmp>:
  404f84:	f810 2b01 	ldrb.w	r2, [r0], #1
  404f88:	f811 3b01 	ldrb.w	r3, [r1], #1
  404f8c:	2a01      	cmp	r2, #1
  404f8e:	bf28      	it	cs
  404f90:	429a      	cmpcs	r2, r3
  404f92:	d0f7      	beq.n	404f84 <strcmp>
  404f94:	1ad0      	subs	r0, r2, r3
  404f96:	4770      	bx	lr

00404f98 <__ssprint_r>:
  404f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404f9c:	4680      	mov	r8, r0
  404f9e:	6890      	ldr	r0, [r2, #8]
  404fa0:	f8d2 9000 	ldr.w	r9, [r2]
  404fa4:	460c      	mov	r4, r1
  404fa6:	4615      	mov	r5, r2
  404fa8:	b118      	cbz	r0, 404fb2 <__ssprint_r+0x1a>
  404faa:	2300      	movs	r3, #0
  404fac:	9301      	str	r3, [sp, #4]
  404fae:	461e      	mov	r6, r3
  404fb0:	e008      	b.n	404fc4 <__ssprint_r+0x2c>
  404fb2:	6050      	str	r0, [r2, #4]
  404fb4:	e066      	b.n	405084 <__ssprint_r+0xec>
  404fb6:	f8d9 3000 	ldr.w	r3, [r9]
  404fba:	f8d9 6004 	ldr.w	r6, [r9, #4]
  404fbe:	9301      	str	r3, [sp, #4]
  404fc0:	f109 0908 	add.w	r9, r9, #8
  404fc4:	2e00      	cmp	r6, #0
  404fc6:	d0f6      	beq.n	404fb6 <__ssprint_r+0x1e>
  404fc8:	68a7      	ldr	r7, [r4, #8]
  404fca:	42be      	cmp	r6, r7
  404fcc:	d347      	bcc.n	40505e <__ssprint_r+0xc6>
  404fce:	89a2      	ldrh	r2, [r4, #12]
  404fd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
  404fd4:	d041      	beq.n	40505a <__ssprint_r+0xc2>
  404fd6:	6823      	ldr	r3, [r4, #0]
  404fd8:	6921      	ldr	r1, [r4, #16]
  404fda:	ebc1 0a03 	rsb	sl, r1, r3
  404fde:	6963      	ldr	r3, [r4, #20]
  404fe0:	2002      	movs	r0, #2
  404fe2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  404fe6:	fb93 fbf0 	sdiv	fp, r3, r0
  404fea:	f10a 0001 	add.w	r0, sl, #1
  404fee:	4430      	add	r0, r6
  404ff0:	4583      	cmp	fp, r0
  404ff2:	bf38      	it	cc
  404ff4:	4683      	movcc	fp, r0
  404ff6:	0553      	lsls	r3, r2, #21
  404ff8:	4640      	mov	r0, r8
  404ffa:	d50f      	bpl.n	40501c <__ssprint_r+0x84>
  404ffc:	4659      	mov	r1, fp
  404ffe:	f7fe ffbd 	bl	403f7c <_malloc_r>
  405002:	4607      	mov	r7, r0
  405004:	b198      	cbz	r0, 40502e <__ssprint_r+0x96>
  405006:	4652      	mov	r2, sl
  405008:	6921      	ldr	r1, [r4, #16]
  40500a:	f7ff f9d0 	bl	4043ae <memcpy>
  40500e:	89a2      	ldrh	r2, [r4, #12]
  405010:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405014:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405018:	81a2      	strh	r2, [r4, #12]
  40501a:	e015      	b.n	405048 <__ssprint_r+0xb0>
  40501c:	465a      	mov	r2, fp
  40501e:	f7ff fdd7 	bl	404bd0 <_realloc_r>
  405022:	4607      	mov	r7, r0
  405024:	b980      	cbnz	r0, 405048 <__ssprint_r+0xb0>
  405026:	4640      	mov	r0, r8
  405028:	6921      	ldr	r1, [r4, #16]
  40502a:	f7fe fead 	bl	403d88 <_free_r>
  40502e:	230c      	movs	r3, #12
  405030:	f8c8 3000 	str.w	r3, [r8]
  405034:	89a3      	ldrh	r3, [r4, #12]
  405036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40503a:	81a3      	strh	r3, [r4, #12]
  40503c:	2300      	movs	r3, #0
  40503e:	60ab      	str	r3, [r5, #8]
  405040:	606b      	str	r3, [r5, #4]
  405042:	f04f 30ff 	mov.w	r0, #4294967295
  405046:	e01d      	b.n	405084 <__ssprint_r+0xec>
  405048:	6127      	str	r7, [r4, #16]
  40504a:	ebca 030b 	rsb	r3, sl, fp
  40504e:	4457      	add	r7, sl
  405050:	6027      	str	r7, [r4, #0]
  405052:	f8c4 b014 	str.w	fp, [r4, #20]
  405056:	4637      	mov	r7, r6
  405058:	60a3      	str	r3, [r4, #8]
  40505a:	42be      	cmp	r6, r7
  40505c:	d200      	bcs.n	405060 <__ssprint_r+0xc8>
  40505e:	4637      	mov	r7, r6
  405060:	463a      	mov	r2, r7
  405062:	6820      	ldr	r0, [r4, #0]
  405064:	9901      	ldr	r1, [sp, #4]
  405066:	f7ff f9ab 	bl	4043c0 <memmove>
  40506a:	68a3      	ldr	r3, [r4, #8]
  40506c:	1bdb      	subs	r3, r3, r7
  40506e:	60a3      	str	r3, [r4, #8]
  405070:	6823      	ldr	r3, [r4, #0]
  405072:	441f      	add	r7, r3
  405074:	68ab      	ldr	r3, [r5, #8]
  405076:	6027      	str	r7, [r4, #0]
  405078:	1b9e      	subs	r6, r3, r6
  40507a:	60ae      	str	r6, [r5, #8]
  40507c:	2e00      	cmp	r6, #0
  40507e:	d19a      	bne.n	404fb6 <__ssprint_r+0x1e>
  405080:	606e      	str	r6, [r5, #4]
  405082:	4630      	mov	r0, r6
  405084:	b003      	add	sp, #12
  405086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040508a <_svfiprintf_r>:
  40508a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40508e:	461e      	mov	r6, r3
  405090:	898b      	ldrh	r3, [r1, #12]
  405092:	b0ad      	sub	sp, #180	; 0xb4
  405094:	4688      	mov	r8, r1
  405096:	0619      	lsls	r1, r3, #24
  405098:	4683      	mov	fp, r0
  40509a:	9202      	str	r2, [sp, #8]
  40509c:	d513      	bpl.n	4050c6 <_svfiprintf_r+0x3c>
  40509e:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4050a2:	b983      	cbnz	r3, 4050c6 <_svfiprintf_r+0x3c>
  4050a4:	2140      	movs	r1, #64	; 0x40
  4050a6:	f7fe ff69 	bl	403f7c <_malloc_r>
  4050aa:	f8c8 0000 	str.w	r0, [r8]
  4050ae:	f8c8 0010 	str.w	r0, [r8, #16]
  4050b2:	b928      	cbnz	r0, 4050c0 <_svfiprintf_r+0x36>
  4050b4:	230c      	movs	r3, #12
  4050b6:	f8cb 3000 	str.w	r3, [fp]
  4050ba:	f04f 30ff 	mov.w	r0, #4294967295
  4050be:	e3d6      	b.n	40586e <_svfiprintf_r+0x7e4>
  4050c0:	2340      	movs	r3, #64	; 0x40
  4050c2:	f8c8 3014 	str.w	r3, [r8, #20]
  4050c6:	2300      	movs	r3, #0
  4050c8:	aa1c      	add	r2, sp, #112	; 0x70
  4050ca:	920f      	str	r2, [sp, #60]	; 0x3c
  4050cc:	9311      	str	r3, [sp, #68]	; 0x44
  4050ce:	9310      	str	r3, [sp, #64]	; 0x40
  4050d0:	4694      	mov	ip, r2
  4050d2:	930a      	str	r3, [sp, #40]	; 0x28
  4050d4:	9305      	str	r3, [sp, #20]
  4050d6:	9b02      	ldr	r3, [sp, #8]
  4050d8:	461c      	mov	r4, r3
  4050da:	f813 2b01 	ldrb.w	r2, [r3], #1
  4050de:	b91a      	cbnz	r2, 4050e8 <_svfiprintf_r+0x5e>
  4050e0:	9802      	ldr	r0, [sp, #8]
  4050e2:	1a25      	subs	r5, r4, r0
  4050e4:	d103      	bne.n	4050ee <_svfiprintf_r+0x64>
  4050e6:	e01d      	b.n	405124 <_svfiprintf_r+0x9a>
  4050e8:	2a25      	cmp	r2, #37	; 0x25
  4050ea:	d1f5      	bne.n	4050d8 <_svfiprintf_r+0x4e>
  4050ec:	e7f8      	b.n	4050e0 <_svfiprintf_r+0x56>
  4050ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4050f0:	9902      	ldr	r1, [sp, #8]
  4050f2:	442b      	add	r3, r5
  4050f4:	9311      	str	r3, [sp, #68]	; 0x44
  4050f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4050f8:	3301      	adds	r3, #1
  4050fa:	2b07      	cmp	r3, #7
  4050fc:	e88c 0022 	stmia.w	ip, {r1, r5}
  405100:	9310      	str	r3, [sp, #64]	; 0x40
  405102:	dc02      	bgt.n	40510a <_svfiprintf_r+0x80>
  405104:	f10c 0c08 	add.w	ip, ip, #8
  405108:	e009      	b.n	40511e <_svfiprintf_r+0x94>
  40510a:	4658      	mov	r0, fp
  40510c:	4641      	mov	r1, r8
  40510e:	aa0f      	add	r2, sp, #60	; 0x3c
  405110:	f7ff ff42 	bl	404f98 <__ssprint_r>
  405114:	2800      	cmp	r0, #0
  405116:	f040 83a2 	bne.w	40585e <_svfiprintf_r+0x7d4>
  40511a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  40511e:	9a05      	ldr	r2, [sp, #20]
  405120:	442a      	add	r2, r5
  405122:	9205      	str	r2, [sp, #20]
  405124:	7823      	ldrb	r3, [r4, #0]
  405126:	2b00      	cmp	r3, #0
  405128:	f000 8392 	beq.w	405850 <_svfiprintf_r+0x7c6>
  40512c:	2200      	movs	r2, #0
  40512e:	3401      	adds	r4, #1
  405130:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405134:	f04f 3aff 	mov.w	sl, #4294967295
  405138:	9204      	str	r2, [sp, #16]
  40513a:	4617      	mov	r7, r2
  40513c:	1c65      	adds	r5, r4, #1
  40513e:	7823      	ldrb	r3, [r4, #0]
  405140:	9502      	str	r5, [sp, #8]
  405142:	2b58      	cmp	r3, #88	; 0x58
  405144:	d065      	beq.n	405212 <_svfiprintf_r+0x188>
  405146:	dc2e      	bgt.n	4051a6 <_svfiprintf_r+0x11c>
  405148:	2b2e      	cmp	r3, #46	; 0x2e
  40514a:	d077      	beq.n	40523c <_svfiprintf_r+0x1b2>
  40514c:	dc12      	bgt.n	405174 <_svfiprintf_r+0xea>
  40514e:	2b2a      	cmp	r3, #42	; 0x2a
  405150:	d067      	beq.n	405222 <_svfiprintf_r+0x198>
  405152:	dc08      	bgt.n	405166 <_svfiprintf_r+0xdc>
  405154:	2b20      	cmp	r3, #32
  405156:	d060      	beq.n	40521a <_svfiprintf_r+0x190>
  405158:	2b23      	cmp	r3, #35	; 0x23
  40515a:	f040 8203 	bne.w	405564 <_svfiprintf_r+0x4da>
  40515e:	f047 0701 	orr.w	r7, r7, #1
  405162:	9c02      	ldr	r4, [sp, #8]
  405164:	e7ea      	b.n	40513c <_svfiprintf_r+0xb2>
  405166:	2b2b      	cmp	r3, #43	; 0x2b
  405168:	d101      	bne.n	40516e <_svfiprintf_r+0xe4>
  40516a:	461a      	mov	r2, r3
  40516c:	e7f9      	b.n	405162 <_svfiprintf_r+0xd8>
  40516e:	2b2d      	cmp	r3, #45	; 0x2d
  405170:	d061      	beq.n	405236 <_svfiprintf_r+0x1ac>
  405172:	e1f7      	b.n	405564 <_svfiprintf_r+0x4da>
  405174:	2b39      	cmp	r3, #57	; 0x39
  405176:	dc08      	bgt.n	40518a <_svfiprintf_r+0x100>
  405178:	2b31      	cmp	r3, #49	; 0x31
  40517a:	f280 8081 	bge.w	405280 <_svfiprintf_r+0x1f6>
  40517e:	2b30      	cmp	r3, #48	; 0x30
  405180:	f040 81f0 	bne.w	405564 <_svfiprintf_r+0x4da>
  405184:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  405188:	e7eb      	b.n	405162 <_svfiprintf_r+0xd8>
  40518a:	2b4f      	cmp	r3, #79	; 0x4f
  40518c:	f000 80e1 	beq.w	405352 <_svfiprintf_r+0x2c8>
  405190:	2b55      	cmp	r3, #85	; 0x55
  405192:	f000 8121 	beq.w	4053d8 <_svfiprintf_r+0x34e>
  405196:	2b44      	cmp	r3, #68	; 0x44
  405198:	f040 81e4 	bne.w	405564 <_svfiprintf_r+0x4da>
  40519c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4051a0:	f047 0710 	orr.w	r7, r7, #16
  4051a4:	e095      	b.n	4052d2 <_svfiprintf_r+0x248>
  4051a6:	2b6e      	cmp	r3, #110	; 0x6e
  4051a8:	f000 80b7 	beq.w	40531a <_svfiprintf_r+0x290>
  4051ac:	dc0d      	bgt.n	4051ca <_svfiprintf_r+0x140>
  4051ae:	2b68      	cmp	r3, #104	; 0x68
  4051b0:	d077      	beq.n	4052a2 <_svfiprintf_r+0x218>
  4051b2:	dc05      	bgt.n	4051c0 <_svfiprintf_r+0x136>
  4051b4:	2b63      	cmp	r3, #99	; 0x63
  4051b6:	f000 8084 	beq.w	4052c2 <_svfiprintf_r+0x238>
  4051ba:	2b64      	cmp	r3, #100	; 0x64
  4051bc:	d026      	beq.n	40520c <_svfiprintf_r+0x182>
  4051be:	e1d1      	b.n	405564 <_svfiprintf_r+0x4da>
  4051c0:	2b69      	cmp	r3, #105	; 0x69
  4051c2:	d023      	beq.n	40520c <_svfiprintf_r+0x182>
  4051c4:	2b6c      	cmp	r3, #108	; 0x6c
  4051c6:	d06f      	beq.n	4052a8 <_svfiprintf_r+0x21e>
  4051c8:	e1cc      	b.n	405564 <_svfiprintf_r+0x4da>
  4051ca:	2b71      	cmp	r3, #113	; 0x71
  4051cc:	d076      	beq.n	4052bc <_svfiprintf_r+0x232>
  4051ce:	dc13      	bgt.n	4051f8 <_svfiprintf_r+0x16e>
  4051d0:	2b6f      	cmp	r3, #111	; 0x6f
  4051d2:	f000 80c0 	beq.w	405356 <_svfiprintf_r+0x2cc>
  4051d6:	2b70      	cmp	r3, #112	; 0x70
  4051d8:	f040 81c4 	bne.w	405564 <_svfiprintf_r+0x4da>
  4051dc:	2330      	movs	r3, #48	; 0x30
  4051de:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  4051e2:	48a0      	ldr	r0, [pc, #640]	; (405464 <_svfiprintf_r+0x3da>)
  4051e4:	6834      	ldr	r4, [r6, #0]
  4051e6:	900a      	str	r0, [sp, #40]	; 0x28
  4051e8:	2378      	movs	r3, #120	; 0x78
  4051ea:	2500      	movs	r5, #0
  4051ec:	f047 0702 	orr.w	r7, r7, #2
  4051f0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  4051f4:	3604      	adds	r6, #4
  4051f6:	e12f      	b.n	405458 <_svfiprintf_r+0x3ce>
  4051f8:	2b75      	cmp	r3, #117	; 0x75
  4051fa:	f000 80ef 	beq.w	4053dc <_svfiprintf_r+0x352>
  4051fe:	2b78      	cmp	r3, #120	; 0x78
  405200:	f000 8104 	beq.w	40540c <_svfiprintf_r+0x382>
  405204:	2b73      	cmp	r3, #115	; 0x73
  405206:	f040 81ad 	bne.w	405564 <_svfiprintf_r+0x4da>
  40520a:	e0c0      	b.n	40538e <_svfiprintf_r+0x304>
  40520c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405210:	e05f      	b.n	4052d2 <_svfiprintf_r+0x248>
  405212:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405216:	4c94      	ldr	r4, [pc, #592]	; (405468 <_svfiprintf_r+0x3de>)
  405218:	e0fb      	b.n	405412 <_svfiprintf_r+0x388>
  40521a:	2a00      	cmp	r2, #0
  40521c:	bf08      	it	eq
  40521e:	2220      	moveq	r2, #32
  405220:	e79f      	b.n	405162 <_svfiprintf_r+0xd8>
  405222:	1d33      	adds	r3, r6, #4
  405224:	6836      	ldr	r6, [r6, #0]
  405226:	9604      	str	r6, [sp, #16]
  405228:	2e00      	cmp	r6, #0
  40522a:	db01      	blt.n	405230 <_svfiprintf_r+0x1a6>
  40522c:	461e      	mov	r6, r3
  40522e:	e798      	b.n	405162 <_svfiprintf_r+0xd8>
  405230:	4275      	negs	r5, r6
  405232:	9504      	str	r5, [sp, #16]
  405234:	461e      	mov	r6, r3
  405236:	f047 0704 	orr.w	r7, r7, #4
  40523a:	e792      	b.n	405162 <_svfiprintf_r+0xd8>
  40523c:	9c02      	ldr	r4, [sp, #8]
  40523e:	7823      	ldrb	r3, [r4, #0]
  405240:	2b2a      	cmp	r3, #42	; 0x2a
  405242:	f104 0101 	add.w	r1, r4, #1
  405246:	d002      	beq.n	40524e <_svfiprintf_r+0x1c4>
  405248:	f04f 0a00 	mov.w	sl, #0
  40524c:	e00a      	b.n	405264 <_svfiprintf_r+0x1da>
  40524e:	f8d6 a000 	ldr.w	sl, [r6]
  405252:	9102      	str	r1, [sp, #8]
  405254:	1d33      	adds	r3, r6, #4
  405256:	f1ba 0f00 	cmp.w	sl, #0
  40525a:	461e      	mov	r6, r3
  40525c:	da81      	bge.n	405162 <_svfiprintf_r+0xd8>
  40525e:	f04f 3aff 	mov.w	sl, #4294967295
  405262:	e77e      	b.n	405162 <_svfiprintf_r+0xd8>
  405264:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  405268:	2809      	cmp	r0, #9
  40526a:	d805      	bhi.n	405278 <_svfiprintf_r+0x1ee>
  40526c:	230a      	movs	r3, #10
  40526e:	fb03 0a0a 	mla	sl, r3, sl, r0
  405272:	f811 3b01 	ldrb.w	r3, [r1], #1
  405276:	e7f5      	b.n	405264 <_svfiprintf_r+0x1da>
  405278:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
  40527c:	9102      	str	r1, [sp, #8]
  40527e:	e760      	b.n	405142 <_svfiprintf_r+0xb8>
  405280:	2500      	movs	r5, #0
  405282:	9504      	str	r5, [sp, #16]
  405284:	9c04      	ldr	r4, [sp, #16]
  405286:	3b30      	subs	r3, #48	; 0x30
  405288:	210a      	movs	r1, #10
  40528a:	fb01 3404 	mla	r4, r1, r4, r3
  40528e:	9902      	ldr	r1, [sp, #8]
  405290:	9404      	str	r4, [sp, #16]
  405292:	f811 3b01 	ldrb.w	r3, [r1], #1
  405296:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40529a:	2809      	cmp	r0, #9
  40529c:	d8ee      	bhi.n	40527c <_svfiprintf_r+0x1f2>
  40529e:	9102      	str	r1, [sp, #8]
  4052a0:	e7f0      	b.n	405284 <_svfiprintf_r+0x1fa>
  4052a2:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  4052a6:	e75c      	b.n	405162 <_svfiprintf_r+0xd8>
  4052a8:	9d02      	ldr	r5, [sp, #8]
  4052aa:	782b      	ldrb	r3, [r5, #0]
  4052ac:	2b6c      	cmp	r3, #108	; 0x6c
  4052ae:	d102      	bne.n	4052b6 <_svfiprintf_r+0x22c>
  4052b0:	3501      	adds	r5, #1
  4052b2:	9502      	str	r5, [sp, #8]
  4052b4:	e002      	b.n	4052bc <_svfiprintf_r+0x232>
  4052b6:	f047 0710 	orr.w	r7, r7, #16
  4052ba:	e752      	b.n	405162 <_svfiprintf_r+0xd8>
  4052bc:	f047 0720 	orr.w	r7, r7, #32
  4052c0:	e74f      	b.n	405162 <_svfiprintf_r+0xd8>
  4052c2:	6833      	ldr	r3, [r6, #0]
  4052c4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  4052c8:	2500      	movs	r5, #0
  4052ca:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4052ce:	3604      	adds	r6, #4
  4052d0:	e152      	b.n	405578 <_svfiprintf_r+0x4ee>
  4052d2:	06ba      	lsls	r2, r7, #26
  4052d4:	d507      	bpl.n	4052e6 <_svfiprintf_r+0x25c>
  4052d6:	3607      	adds	r6, #7
  4052d8:	f026 0307 	bic.w	r3, r6, #7
  4052dc:	f103 0608 	add.w	r6, r3, #8
  4052e0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4052e4:	e00d      	b.n	405302 <_svfiprintf_r+0x278>
  4052e6:	f017 0f10 	tst.w	r7, #16
  4052ea:	f106 0304 	add.w	r3, r6, #4
  4052ee:	d001      	beq.n	4052f4 <_svfiprintf_r+0x26a>
  4052f0:	6834      	ldr	r4, [r6, #0]
  4052f2:	e004      	b.n	4052fe <_svfiprintf_r+0x274>
  4052f4:	6834      	ldr	r4, [r6, #0]
  4052f6:	f017 0f40 	tst.w	r7, #64	; 0x40
  4052fa:	bf18      	it	ne
  4052fc:	b224      	sxthne	r4, r4
  4052fe:	17e5      	asrs	r5, r4, #31
  405300:	461e      	mov	r6, r3
  405302:	2c00      	cmp	r4, #0
  405304:	f175 0000 	sbcs.w	r0, r5, #0
  405308:	f280 80b0 	bge.w	40546c <_svfiprintf_r+0x3e2>
  40530c:	232d      	movs	r3, #45	; 0x2d
  40530e:	4264      	negs	r4, r4
  405310:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405314:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405318:	e0a8      	b.n	40546c <_svfiprintf_r+0x3e2>
  40531a:	f017 0f20 	tst.w	r7, #32
  40531e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405322:	f106 0104 	add.w	r1, r6, #4
  405326:	d007      	beq.n	405338 <_svfiprintf_r+0x2ae>
  405328:	9c05      	ldr	r4, [sp, #20]
  40532a:	6830      	ldr	r0, [r6, #0]
  40532c:	17e5      	asrs	r5, r4, #31
  40532e:	4622      	mov	r2, r4
  405330:	462b      	mov	r3, r5
  405332:	e9c0 2300 	strd	r2, r3, [r0]
  405336:	e00a      	b.n	40534e <_svfiprintf_r+0x2c4>
  405338:	06fb      	lsls	r3, r7, #27
  40533a:	d405      	bmi.n	405348 <_svfiprintf_r+0x2be>
  40533c:	067f      	lsls	r7, r7, #25
  40533e:	d503      	bpl.n	405348 <_svfiprintf_r+0x2be>
  405340:	6833      	ldr	r3, [r6, #0]
  405342:	9c05      	ldr	r4, [sp, #20]
  405344:	801c      	strh	r4, [r3, #0]
  405346:	e002      	b.n	40534e <_svfiprintf_r+0x2c4>
  405348:	6833      	ldr	r3, [r6, #0]
  40534a:	9d05      	ldr	r5, [sp, #20]
  40534c:	601d      	str	r5, [r3, #0]
  40534e:	460e      	mov	r6, r1
  405350:	e6c1      	b.n	4050d6 <_svfiprintf_r+0x4c>
  405352:	f047 0710 	orr.w	r7, r7, #16
  405356:	f017 0320 	ands.w	r3, r7, #32
  40535a:	d008      	beq.n	40536e <_svfiprintf_r+0x2e4>
  40535c:	3607      	adds	r6, #7
  40535e:	f026 0307 	bic.w	r3, r6, #7
  405362:	e9d3 4500 	ldrd	r4, r5, [r3]
  405366:	f103 0608 	add.w	r6, r3, #8
  40536a:	2300      	movs	r3, #0
  40536c:	e075      	b.n	40545a <_svfiprintf_r+0x3d0>
  40536e:	f017 0110 	ands.w	r1, r7, #16
  405372:	f106 0204 	add.w	r2, r6, #4
  405376:	d106      	bne.n	405386 <_svfiprintf_r+0x2fc>
  405378:	f017 0340 	ands.w	r3, r7, #64	; 0x40
  40537c:	d003      	beq.n	405386 <_svfiprintf_r+0x2fc>
  40537e:	8834      	ldrh	r4, [r6, #0]
  405380:	2500      	movs	r5, #0
  405382:	4616      	mov	r6, r2
  405384:	e7f1      	b.n	40536a <_svfiprintf_r+0x2e0>
  405386:	6834      	ldr	r4, [r6, #0]
  405388:	2500      	movs	r5, #0
  40538a:	4616      	mov	r6, r2
  40538c:	e065      	b.n	40545a <_svfiprintf_r+0x3d0>
  40538e:	f8d6 9000 	ldr.w	r9, [r6]
  405392:	2300      	movs	r3, #0
  405394:	459a      	cmp	sl, r3
  405396:	f106 0604 	add.w	r6, r6, #4
  40539a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40539e:	4648      	mov	r0, r9
  4053a0:	db11      	blt.n	4053c6 <_svfiprintf_r+0x33c>
  4053a2:	4619      	mov	r1, r3
  4053a4:	4652      	mov	r2, sl
  4053a6:	f8cd c004 	str.w	ip, [sp, #4]
  4053aa:	f7fe fff1 	bl	404390 <memchr>
  4053ae:	f8dd c004 	ldr.w	ip, [sp, #4]
  4053b2:	2800      	cmp	r0, #0
  4053b4:	f000 80e5 	beq.w	405582 <_svfiprintf_r+0x4f8>
  4053b8:	ebc9 0000 	rsb	r0, r9, r0
  4053bc:	4550      	cmp	r0, sl
  4053be:	bfb8      	it	lt
  4053c0:	4682      	movlt	sl, r0
  4053c2:	2500      	movs	r5, #0
  4053c4:	e0de      	b.n	405584 <_svfiprintf_r+0x4fa>
  4053c6:	f8cd c004 	str.w	ip, [sp, #4]
  4053ca:	f7fc fe7f 	bl	4020cc <strlen>
  4053ce:	2500      	movs	r5, #0
  4053d0:	4682      	mov	sl, r0
  4053d2:	f8dd c004 	ldr.w	ip, [sp, #4]
  4053d6:	e0d5      	b.n	405584 <_svfiprintf_r+0x4fa>
  4053d8:	f047 0710 	orr.w	r7, r7, #16
  4053dc:	06bd      	lsls	r5, r7, #26
  4053de:	d507      	bpl.n	4053f0 <_svfiprintf_r+0x366>
  4053e0:	3607      	adds	r6, #7
  4053e2:	f026 0307 	bic.w	r3, r6, #7
  4053e6:	f103 0608 	add.w	r6, r3, #8
  4053ea:	e9d3 4500 	ldrd	r4, r5, [r3]
  4053ee:	e00b      	b.n	405408 <_svfiprintf_r+0x37e>
  4053f0:	f017 0f10 	tst.w	r7, #16
  4053f4:	f106 0304 	add.w	r3, r6, #4
  4053f8:	d103      	bne.n	405402 <_svfiprintf_r+0x378>
  4053fa:	067c      	lsls	r4, r7, #25
  4053fc:	d501      	bpl.n	405402 <_svfiprintf_r+0x378>
  4053fe:	8834      	ldrh	r4, [r6, #0]
  405400:	e000      	b.n	405404 <_svfiprintf_r+0x37a>
  405402:	6834      	ldr	r4, [r6, #0]
  405404:	2500      	movs	r5, #0
  405406:	461e      	mov	r6, r3
  405408:	2301      	movs	r3, #1
  40540a:	e026      	b.n	40545a <_svfiprintf_r+0x3d0>
  40540c:	4c15      	ldr	r4, [pc, #84]	; (405464 <_svfiprintf_r+0x3da>)
  40540e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405412:	06b8      	lsls	r0, r7, #26
  405414:	940a      	str	r4, [sp, #40]	; 0x28
  405416:	d507      	bpl.n	405428 <_svfiprintf_r+0x39e>
  405418:	3607      	adds	r6, #7
  40541a:	f026 0207 	bic.w	r2, r6, #7
  40541e:	f102 0608 	add.w	r6, r2, #8
  405422:	e9d2 4500 	ldrd	r4, r5, [r2]
  405426:	e00b      	b.n	405440 <_svfiprintf_r+0x3b6>
  405428:	f017 0f10 	tst.w	r7, #16
  40542c:	f106 0204 	add.w	r2, r6, #4
  405430:	d103      	bne.n	40543a <_svfiprintf_r+0x3b0>
  405432:	0679      	lsls	r1, r7, #25
  405434:	d501      	bpl.n	40543a <_svfiprintf_r+0x3b0>
  405436:	8834      	ldrh	r4, [r6, #0]
  405438:	e000      	b.n	40543c <_svfiprintf_r+0x3b2>
  40543a:	6834      	ldr	r4, [r6, #0]
  40543c:	2500      	movs	r5, #0
  40543e:	4616      	mov	r6, r2
  405440:	07fa      	lsls	r2, r7, #31
  405442:	d509      	bpl.n	405458 <_svfiprintf_r+0x3ce>
  405444:	ea54 0005 	orrs.w	r0, r4, r5
  405448:	d006      	beq.n	405458 <_svfiprintf_r+0x3ce>
  40544a:	2230      	movs	r2, #48	; 0x30
  40544c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  405450:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  405454:	f047 0702 	orr.w	r7, r7, #2
  405458:	2302      	movs	r3, #2
  40545a:	2200      	movs	r2, #0
  40545c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405460:	e005      	b.n	40546e <_svfiprintf_r+0x3e4>
  405462:	bf00      	nop
  405464:	00406257 	.word	0x00406257
  405468:	00406246 	.word	0x00406246
  40546c:	2301      	movs	r3, #1
  40546e:	f1ba 0f00 	cmp.w	sl, #0
  405472:	bfa8      	it	ge
  405474:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
  405478:	ea54 0105 	orrs.w	r1, r4, r5
  40547c:	d102      	bne.n	405484 <_svfiprintf_r+0x3fa>
  40547e:	f1ba 0f00 	cmp.w	sl, #0
  405482:	d05e      	beq.n	405542 <_svfiprintf_r+0x4b8>
  405484:	2b01      	cmp	r3, #1
  405486:	d01f      	beq.n	4054c8 <_svfiprintf_r+0x43e>
  405488:	2b02      	cmp	r3, #2
  40548a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
  40548e:	d045      	beq.n	40551c <_svfiprintf_r+0x492>
  405490:	08e0      	lsrs	r0, r4, #3
  405492:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
  405496:	08e8      	lsrs	r0, r5, #3
  405498:	9106      	str	r1, [sp, #24]
  40549a:	9007      	str	r0, [sp, #28]
  40549c:	f004 0207 	and.w	r2, r4, #7
  4054a0:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  4054a4:	3230      	adds	r2, #48	; 0x30
  4054a6:	ea54 0105 	orrs.w	r1, r4, r5
  4054aa:	4699      	mov	r9, r3
  4054ac:	701a      	strb	r2, [r3, #0]
  4054ae:	f103 33ff 	add.w	r3, r3, #4294967295
  4054b2:	d1ed      	bne.n	405490 <_svfiprintf_r+0x406>
  4054b4:	07f8      	lsls	r0, r7, #31
  4054b6:	4649      	mov	r1, r9
  4054b8:	d54e      	bpl.n	405558 <_svfiprintf_r+0x4ce>
  4054ba:	2a30      	cmp	r2, #48	; 0x30
  4054bc:	d04c      	beq.n	405558 <_svfiprintf_r+0x4ce>
  4054be:	4699      	mov	r9, r3
  4054c0:	2330      	movs	r3, #48	; 0x30
  4054c2:	f801 3c01 	strb.w	r3, [r1, #-1]
  4054c6:	e047      	b.n	405558 <_svfiprintf_r+0x4ce>
  4054c8:	2d00      	cmp	r5, #0
  4054ca:	bf08      	it	eq
  4054cc:	2c0a      	cmpeq	r4, #10
  4054ce:	d205      	bcs.n	4054dc <_svfiprintf_r+0x452>
  4054d0:	3430      	adds	r4, #48	; 0x30
  4054d2:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  4054d6:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
  4054da:	e03d      	b.n	405558 <_svfiprintf_r+0x4ce>
  4054dc:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
  4054e0:	9203      	str	r2, [sp, #12]
  4054e2:	4620      	mov	r0, r4
  4054e4:	4629      	mov	r1, r5
  4054e6:	220a      	movs	r2, #10
  4054e8:	2300      	movs	r3, #0
  4054ea:	f8cd c004 	str.w	ip, [sp, #4]
  4054ee:	f000 faeb 	bl	405ac8 <__aeabi_uldivmod>
  4054f2:	9b03      	ldr	r3, [sp, #12]
  4054f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
  4054f8:	3230      	adds	r2, #48	; 0x30
  4054fa:	f803 2901 	strb.w	r2, [r3], #-1
  4054fe:	4620      	mov	r0, r4
  405500:	9303      	str	r3, [sp, #12]
  405502:	4629      	mov	r1, r5
  405504:	220a      	movs	r2, #10
  405506:	2300      	movs	r3, #0
  405508:	f000 fade 	bl	405ac8 <__aeabi_uldivmod>
  40550c:	4604      	mov	r4, r0
  40550e:	460d      	mov	r5, r1
  405510:	ea54 0005 	orrs.w	r0, r4, r5
  405514:	f8dd c004 	ldr.w	ip, [sp, #4]
  405518:	d1e3      	bne.n	4054e2 <_svfiprintf_r+0x458>
  40551a:	e01d      	b.n	405558 <_svfiprintf_r+0x4ce>
  40551c:	f004 020f 	and.w	r2, r4, #15
  405520:	990a      	ldr	r1, [sp, #40]	; 0x28
  405522:	5c8a      	ldrb	r2, [r1, r2]
  405524:	4699      	mov	r9, r3
  405526:	f803 2901 	strb.w	r2, [r3], #-1
  40552a:	0922      	lsrs	r2, r4, #4
  40552c:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
  405530:	0929      	lsrs	r1, r5, #4
  405532:	9008      	str	r0, [sp, #32]
  405534:	9109      	str	r1, [sp, #36]	; 0x24
  405536:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
  40553a:	ea54 0205 	orrs.w	r2, r4, r5
  40553e:	d1ed      	bne.n	40551c <_svfiprintf_r+0x492>
  405540:	e00a      	b.n	405558 <_svfiprintf_r+0x4ce>
  405542:	b93b      	cbnz	r3, 405554 <_svfiprintf_r+0x4ca>
  405544:	07f9      	lsls	r1, r7, #31
  405546:	d505      	bpl.n	405554 <_svfiprintf_r+0x4ca>
  405548:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
  40554c:	2330      	movs	r3, #48	; 0x30
  40554e:	f809 3d41 	strb.w	r3, [r9, #-65]!
  405552:	e001      	b.n	405558 <_svfiprintf_r+0x4ce>
  405554:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405558:	4655      	mov	r5, sl
  40555a:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
  40555e:	ebc9 0a0a 	rsb	sl, r9, sl
  405562:	e00f      	b.n	405584 <_svfiprintf_r+0x4fa>
  405564:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405568:	2b00      	cmp	r3, #0
  40556a:	f000 8171 	beq.w	405850 <_svfiprintf_r+0x7c6>
  40556e:	2500      	movs	r5, #0
  405570:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  405574:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405578:	f04f 0a01 	mov.w	sl, #1
  40557c:	f10d 0948 	add.w	r9, sp, #72	; 0x48
  405580:	e000      	b.n	405584 <_svfiprintf_r+0x4fa>
  405582:	4605      	mov	r5, r0
  405584:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  405588:	45aa      	cmp	sl, r5
  40558a:	bfac      	ite	ge
  40558c:	4654      	movge	r4, sl
  40558e:	462c      	movlt	r4, r5
  405590:	b103      	cbz	r3, 405594 <_svfiprintf_r+0x50a>
  405592:	3401      	adds	r4, #1
  405594:	f017 0302 	ands.w	r3, r7, #2
  405598:	9303      	str	r3, [sp, #12]
  40559a:	bf18      	it	ne
  40559c:	3402      	addne	r4, #2
  40559e:	f017 0384 	ands.w	r3, r7, #132	; 0x84
  4055a2:	930b      	str	r3, [sp, #44]	; 0x2c
  4055a4:	d13b      	bne.n	40561e <_svfiprintf_r+0x594>
  4055a6:	9804      	ldr	r0, [sp, #16]
  4055a8:	1b03      	subs	r3, r0, r4
  4055aa:	2b00      	cmp	r3, #0
  4055ac:	dd37      	ble.n	40561e <_svfiprintf_r+0x594>
  4055ae:	4aa6      	ldr	r2, [pc, #664]	; (405848 <_svfiprintf_r+0x7be>)
  4055b0:	f8cc 2000 	str.w	r2, [ip]
  4055b4:	2b10      	cmp	r3, #16
  4055b6:	dd1b      	ble.n	4055f0 <_svfiprintf_r+0x566>
  4055b8:	2210      	movs	r2, #16
  4055ba:	f8cc 2004 	str.w	r2, [ip, #4]
  4055be:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4055c0:	3210      	adds	r2, #16
  4055c2:	9211      	str	r2, [sp, #68]	; 0x44
  4055c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4055c6:	3201      	adds	r2, #1
  4055c8:	2a07      	cmp	r2, #7
  4055ca:	9210      	str	r2, [sp, #64]	; 0x40
  4055cc:	dc02      	bgt.n	4055d4 <_svfiprintf_r+0x54a>
  4055ce:	f10c 0c08 	add.w	ip, ip, #8
  4055d2:	e00b      	b.n	4055ec <_svfiprintf_r+0x562>
  4055d4:	4658      	mov	r0, fp
  4055d6:	4641      	mov	r1, r8
  4055d8:	aa0f      	add	r2, sp, #60	; 0x3c
  4055da:	9301      	str	r3, [sp, #4]
  4055dc:	f7ff fcdc 	bl	404f98 <__ssprint_r>
  4055e0:	9b01      	ldr	r3, [sp, #4]
  4055e2:	2800      	cmp	r0, #0
  4055e4:	f040 813b 	bne.w	40585e <_svfiprintf_r+0x7d4>
  4055e8:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4055ec:	3b10      	subs	r3, #16
  4055ee:	e7de      	b.n	4055ae <_svfiprintf_r+0x524>
  4055f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4055f2:	f8cc 3004 	str.w	r3, [ip, #4]
  4055f6:	4413      	add	r3, r2
  4055f8:	9311      	str	r3, [sp, #68]	; 0x44
  4055fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4055fc:	3301      	adds	r3, #1
  4055fe:	2b07      	cmp	r3, #7
  405600:	9310      	str	r3, [sp, #64]	; 0x40
  405602:	dc02      	bgt.n	40560a <_svfiprintf_r+0x580>
  405604:	f10c 0c08 	add.w	ip, ip, #8
  405608:	e009      	b.n	40561e <_svfiprintf_r+0x594>
  40560a:	4658      	mov	r0, fp
  40560c:	4641      	mov	r1, r8
  40560e:	aa0f      	add	r2, sp, #60	; 0x3c
  405610:	f7ff fcc2 	bl	404f98 <__ssprint_r>
  405614:	2800      	cmp	r0, #0
  405616:	f040 8122 	bne.w	40585e <_svfiprintf_r+0x7d4>
  40561a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  40561e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  405622:	b1db      	cbz	r3, 40565c <_svfiprintf_r+0x5d2>
  405624:	f10d 0337 	add.w	r3, sp, #55	; 0x37
  405628:	f8cc 3000 	str.w	r3, [ip]
  40562c:	2301      	movs	r3, #1
  40562e:	f8cc 3004 	str.w	r3, [ip, #4]
  405632:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405634:	3301      	adds	r3, #1
  405636:	9311      	str	r3, [sp, #68]	; 0x44
  405638:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40563a:	3301      	adds	r3, #1
  40563c:	2b07      	cmp	r3, #7
  40563e:	9310      	str	r3, [sp, #64]	; 0x40
  405640:	dc02      	bgt.n	405648 <_svfiprintf_r+0x5be>
  405642:	f10c 0c08 	add.w	ip, ip, #8
  405646:	e009      	b.n	40565c <_svfiprintf_r+0x5d2>
  405648:	4658      	mov	r0, fp
  40564a:	4641      	mov	r1, r8
  40564c:	aa0f      	add	r2, sp, #60	; 0x3c
  40564e:	f7ff fca3 	bl	404f98 <__ssprint_r>
  405652:	2800      	cmp	r0, #0
  405654:	f040 8103 	bne.w	40585e <_svfiprintf_r+0x7d4>
  405658:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  40565c:	9b03      	ldr	r3, [sp, #12]
  40565e:	b1d3      	cbz	r3, 405696 <_svfiprintf_r+0x60c>
  405660:	ab0e      	add	r3, sp, #56	; 0x38
  405662:	f8cc 3000 	str.w	r3, [ip]
  405666:	2302      	movs	r3, #2
  405668:	f8cc 3004 	str.w	r3, [ip, #4]
  40566c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40566e:	3302      	adds	r3, #2
  405670:	9311      	str	r3, [sp, #68]	; 0x44
  405672:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405674:	3301      	adds	r3, #1
  405676:	2b07      	cmp	r3, #7
  405678:	9310      	str	r3, [sp, #64]	; 0x40
  40567a:	dc02      	bgt.n	405682 <_svfiprintf_r+0x5f8>
  40567c:	f10c 0c08 	add.w	ip, ip, #8
  405680:	e009      	b.n	405696 <_svfiprintf_r+0x60c>
  405682:	4658      	mov	r0, fp
  405684:	4641      	mov	r1, r8
  405686:	aa0f      	add	r2, sp, #60	; 0x3c
  405688:	f7ff fc86 	bl	404f98 <__ssprint_r>
  40568c:	2800      	cmp	r0, #0
  40568e:	f040 80e6 	bne.w	40585e <_svfiprintf_r+0x7d4>
  405692:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  405696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405698:	2b80      	cmp	r3, #128	; 0x80
  40569a:	d13f      	bne.n	40571c <_svfiprintf_r+0x692>
  40569c:	9b04      	ldr	r3, [sp, #16]
  40569e:	1b1b      	subs	r3, r3, r4
  4056a0:	2b00      	cmp	r3, #0
  4056a2:	9303      	str	r3, [sp, #12]
  4056a4:	dd3a      	ble.n	40571c <_svfiprintf_r+0x692>
  4056a6:	9b03      	ldr	r3, [sp, #12]
  4056a8:	2b10      	cmp	r3, #16
  4056aa:	4b68      	ldr	r3, [pc, #416]	; (40584c <_svfiprintf_r+0x7c2>)
  4056ac:	f8cc 3000 	str.w	r3, [ip]
  4056b0:	dd1b      	ble.n	4056ea <_svfiprintf_r+0x660>
  4056b2:	2310      	movs	r3, #16
  4056b4:	f8cc 3004 	str.w	r3, [ip, #4]
  4056b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4056ba:	3310      	adds	r3, #16
  4056bc:	9311      	str	r3, [sp, #68]	; 0x44
  4056be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4056c0:	3301      	adds	r3, #1
  4056c2:	2b07      	cmp	r3, #7
  4056c4:	9310      	str	r3, [sp, #64]	; 0x40
  4056c6:	dc02      	bgt.n	4056ce <_svfiprintf_r+0x644>
  4056c8:	f10c 0c08 	add.w	ip, ip, #8
  4056cc:	e009      	b.n	4056e2 <_svfiprintf_r+0x658>
  4056ce:	4658      	mov	r0, fp
  4056d0:	4641      	mov	r1, r8
  4056d2:	aa0f      	add	r2, sp, #60	; 0x3c
  4056d4:	f7ff fc60 	bl	404f98 <__ssprint_r>
  4056d8:	2800      	cmp	r0, #0
  4056da:	f040 80c0 	bne.w	40585e <_svfiprintf_r+0x7d4>
  4056de:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4056e2:	9b03      	ldr	r3, [sp, #12]
  4056e4:	3b10      	subs	r3, #16
  4056e6:	9303      	str	r3, [sp, #12]
  4056e8:	e7dd      	b.n	4056a6 <_svfiprintf_r+0x61c>
  4056ea:	9b03      	ldr	r3, [sp, #12]
  4056ec:	f8cc 3004 	str.w	r3, [ip, #4]
  4056f0:	9803      	ldr	r0, [sp, #12]
  4056f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4056f4:	4403      	add	r3, r0
  4056f6:	9311      	str	r3, [sp, #68]	; 0x44
  4056f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4056fa:	3301      	adds	r3, #1
  4056fc:	2b07      	cmp	r3, #7
  4056fe:	9310      	str	r3, [sp, #64]	; 0x40
  405700:	dc02      	bgt.n	405708 <_svfiprintf_r+0x67e>
  405702:	f10c 0c08 	add.w	ip, ip, #8
  405706:	e009      	b.n	40571c <_svfiprintf_r+0x692>
  405708:	4658      	mov	r0, fp
  40570a:	4641      	mov	r1, r8
  40570c:	aa0f      	add	r2, sp, #60	; 0x3c
  40570e:	f7ff fc43 	bl	404f98 <__ssprint_r>
  405712:	2800      	cmp	r0, #0
  405714:	f040 80a3 	bne.w	40585e <_svfiprintf_r+0x7d4>
  405718:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  40571c:	ebca 0505 	rsb	r5, sl, r5
  405720:	2d00      	cmp	r5, #0
  405722:	dd34      	ble.n	40578e <_svfiprintf_r+0x704>
  405724:	4b49      	ldr	r3, [pc, #292]	; (40584c <_svfiprintf_r+0x7c2>)
  405726:	f8cc 3000 	str.w	r3, [ip]
  40572a:	2d10      	cmp	r5, #16
  40572c:	dd19      	ble.n	405762 <_svfiprintf_r+0x6d8>
  40572e:	2310      	movs	r3, #16
  405730:	f8cc 3004 	str.w	r3, [ip, #4]
  405734:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405736:	3310      	adds	r3, #16
  405738:	9311      	str	r3, [sp, #68]	; 0x44
  40573a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40573c:	3301      	adds	r3, #1
  40573e:	2b07      	cmp	r3, #7
  405740:	9310      	str	r3, [sp, #64]	; 0x40
  405742:	dc02      	bgt.n	40574a <_svfiprintf_r+0x6c0>
  405744:	f10c 0c08 	add.w	ip, ip, #8
  405748:	e009      	b.n	40575e <_svfiprintf_r+0x6d4>
  40574a:	4658      	mov	r0, fp
  40574c:	4641      	mov	r1, r8
  40574e:	aa0f      	add	r2, sp, #60	; 0x3c
  405750:	f7ff fc22 	bl	404f98 <__ssprint_r>
  405754:	2800      	cmp	r0, #0
  405756:	f040 8082 	bne.w	40585e <_svfiprintf_r+0x7d4>
  40575a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  40575e:	3d10      	subs	r5, #16
  405760:	e7e0      	b.n	405724 <_svfiprintf_r+0x69a>
  405762:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405764:	f8cc 5004 	str.w	r5, [ip, #4]
  405768:	441d      	add	r5, r3
  40576a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40576c:	9511      	str	r5, [sp, #68]	; 0x44
  40576e:	3301      	adds	r3, #1
  405770:	2b07      	cmp	r3, #7
  405772:	9310      	str	r3, [sp, #64]	; 0x40
  405774:	dc02      	bgt.n	40577c <_svfiprintf_r+0x6f2>
  405776:	f10c 0c08 	add.w	ip, ip, #8
  40577a:	e008      	b.n	40578e <_svfiprintf_r+0x704>
  40577c:	4658      	mov	r0, fp
  40577e:	4641      	mov	r1, r8
  405780:	aa0f      	add	r2, sp, #60	; 0x3c
  405782:	f7ff fc09 	bl	404f98 <__ssprint_r>
  405786:	2800      	cmp	r0, #0
  405788:	d169      	bne.n	40585e <_svfiprintf_r+0x7d4>
  40578a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  40578e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405790:	4453      	add	r3, sl
  405792:	9311      	str	r3, [sp, #68]	; 0x44
  405794:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405796:	3301      	adds	r3, #1
  405798:	2b07      	cmp	r3, #7
  40579a:	e88c 0600 	stmia.w	ip, {r9, sl}
  40579e:	9310      	str	r3, [sp, #64]	; 0x40
  4057a0:	dc02      	bgt.n	4057a8 <_svfiprintf_r+0x71e>
  4057a2:	f10c 0308 	add.w	r3, ip, #8
  4057a6:	e007      	b.n	4057b8 <_svfiprintf_r+0x72e>
  4057a8:	4658      	mov	r0, fp
  4057aa:	4641      	mov	r1, r8
  4057ac:	aa0f      	add	r2, sp, #60	; 0x3c
  4057ae:	f7ff fbf3 	bl	404f98 <__ssprint_r>
  4057b2:	2800      	cmp	r0, #0
  4057b4:	d153      	bne.n	40585e <_svfiprintf_r+0x7d4>
  4057b6:	ab1c      	add	r3, sp, #112	; 0x70
  4057b8:	077a      	lsls	r2, r7, #29
  4057ba:	d40a      	bmi.n	4057d2 <_svfiprintf_r+0x748>
  4057bc:	9d05      	ldr	r5, [sp, #20]
  4057be:	9804      	ldr	r0, [sp, #16]
  4057c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4057c2:	4284      	cmp	r4, r0
  4057c4:	bfac      	ite	ge
  4057c6:	192d      	addge	r5, r5, r4
  4057c8:	182d      	addlt	r5, r5, r0
  4057ca:	9505      	str	r5, [sp, #20]
  4057cc:	2b00      	cmp	r3, #0
  4057ce:	d035      	beq.n	40583c <_svfiprintf_r+0x7b2>
  4057d0:	e02e      	b.n	405830 <_svfiprintf_r+0x7a6>
  4057d2:	9904      	ldr	r1, [sp, #16]
  4057d4:	1b0d      	subs	r5, r1, r4
  4057d6:	2d00      	cmp	r5, #0
  4057d8:	ddf0      	ble.n	4057bc <_svfiprintf_r+0x732>
  4057da:	4a1b      	ldr	r2, [pc, #108]	; (405848 <_svfiprintf_r+0x7be>)
  4057dc:	601a      	str	r2, [r3, #0]
  4057de:	2d10      	cmp	r5, #16
  4057e0:	dd15      	ble.n	40580e <_svfiprintf_r+0x784>
  4057e2:	2210      	movs	r2, #16
  4057e4:	605a      	str	r2, [r3, #4]
  4057e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057e8:	3210      	adds	r2, #16
  4057ea:	9211      	str	r2, [sp, #68]	; 0x44
  4057ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4057ee:	3201      	adds	r2, #1
  4057f0:	2a07      	cmp	r2, #7
  4057f2:	9210      	str	r2, [sp, #64]	; 0x40
  4057f4:	dc01      	bgt.n	4057fa <_svfiprintf_r+0x770>
  4057f6:	3308      	adds	r3, #8
  4057f8:	e007      	b.n	40580a <_svfiprintf_r+0x780>
  4057fa:	4658      	mov	r0, fp
  4057fc:	4641      	mov	r1, r8
  4057fe:	aa0f      	add	r2, sp, #60	; 0x3c
  405800:	f7ff fbca 	bl	404f98 <__ssprint_r>
  405804:	2800      	cmp	r0, #0
  405806:	d12a      	bne.n	40585e <_svfiprintf_r+0x7d4>
  405808:	ab1c      	add	r3, sp, #112	; 0x70
  40580a:	3d10      	subs	r5, #16
  40580c:	e7e5      	b.n	4057da <_svfiprintf_r+0x750>
  40580e:	605d      	str	r5, [r3, #4]
  405810:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405812:	441d      	add	r5, r3
  405814:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405816:	9511      	str	r5, [sp, #68]	; 0x44
  405818:	3301      	adds	r3, #1
  40581a:	2b07      	cmp	r3, #7
  40581c:	9310      	str	r3, [sp, #64]	; 0x40
  40581e:	ddcd      	ble.n	4057bc <_svfiprintf_r+0x732>
  405820:	4658      	mov	r0, fp
  405822:	4641      	mov	r1, r8
  405824:	aa0f      	add	r2, sp, #60	; 0x3c
  405826:	f7ff fbb7 	bl	404f98 <__ssprint_r>
  40582a:	2800      	cmp	r0, #0
  40582c:	d0c6      	beq.n	4057bc <_svfiprintf_r+0x732>
  40582e:	e016      	b.n	40585e <_svfiprintf_r+0x7d4>
  405830:	4658      	mov	r0, fp
  405832:	4641      	mov	r1, r8
  405834:	aa0f      	add	r2, sp, #60	; 0x3c
  405836:	f7ff fbaf 	bl	404f98 <__ssprint_r>
  40583a:	b980      	cbnz	r0, 40585e <_svfiprintf_r+0x7d4>
  40583c:	2300      	movs	r3, #0
  40583e:	9310      	str	r3, [sp, #64]	; 0x40
  405840:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  405844:	e447      	b.n	4050d6 <_svfiprintf_r+0x4c>
  405846:	bf00      	nop
  405848:	004063a8 	.word	0x004063a8
  40584c:	004063b8 	.word	0x004063b8
  405850:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405852:	b123      	cbz	r3, 40585e <_svfiprintf_r+0x7d4>
  405854:	4658      	mov	r0, fp
  405856:	4641      	mov	r1, r8
  405858:	aa0f      	add	r2, sp, #60	; 0x3c
  40585a:	f7ff fb9d 	bl	404f98 <__ssprint_r>
  40585e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  405862:	9805      	ldr	r0, [sp, #20]
  405864:	f013 0f40 	tst.w	r3, #64	; 0x40
  405868:	bf18      	it	ne
  40586a:	f04f 30ff 	movne.w	r0, #4294967295
  40586e:	b02d      	add	sp, #180	; 0xb4
  405870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405874 <__register_exitproc>:
  405874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405878:	4698      	mov	r8, r3
  40587a:	4b22      	ldr	r3, [pc, #136]	; (405904 <__register_exitproc+0x90>)
  40587c:	681c      	ldr	r4, [r3, #0]
  40587e:	4606      	mov	r6, r0
  405880:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
  405884:	460f      	mov	r7, r1
  405886:	4691      	mov	r9, r2
  405888:	b918      	cbnz	r0, 405892 <__register_exitproc+0x1e>
  40588a:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
  40588e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405892:	6843      	ldr	r3, [r0, #4]
  405894:	2b1f      	cmp	r3, #31
  405896:	dd16      	ble.n	4058c6 <__register_exitproc+0x52>
  405898:	4b1b      	ldr	r3, [pc, #108]	; (405908 <__register_exitproc+0x94>)
  40589a:	b91b      	cbnz	r3, 4058a4 <__register_exitproc+0x30>
  40589c:	f04f 30ff 	mov.w	r0, #4294967295
  4058a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4058a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4058a8:	f3af 8000 	nop.w
  4058ac:	2800      	cmp	r0, #0
  4058ae:	d0f5      	beq.n	40589c <__register_exitproc+0x28>
  4058b0:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  4058b4:	6001      	str	r1, [r0, #0]
  4058b6:	2500      	movs	r5, #0
  4058b8:	6045      	str	r5, [r0, #4]
  4058ba:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4058be:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
  4058c2:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
  4058c6:	6844      	ldr	r4, [r0, #4]
  4058c8:	b19e      	cbz	r6, 4058f2 <__register_exitproc+0x7e>
  4058ca:	eb00 0584 	add.w	r5, r0, r4, lsl #2
  4058ce:	2201      	movs	r2, #1
  4058d0:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  4058d4:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
  4058d8:	40a2      	lsls	r2, r4
  4058da:	4311      	orrs	r1, r2
  4058dc:	2e02      	cmp	r6, #2
  4058de:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4058e2:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
  4058e6:	d104      	bne.n	4058f2 <__register_exitproc+0x7e>
  4058e8:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
  4058ec:	431a      	orrs	r2, r3
  4058ee:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
  4058f2:	1c63      	adds	r3, r4, #1
  4058f4:	3402      	adds	r4, #2
  4058f6:	6043      	str	r3, [r0, #4]
  4058f8:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
  4058fc:	2000      	movs	r0, #0
  4058fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405902:	bf00      	nop
  405904:	00406210 	.word	0x00406210
  405908:	00000000 	.word	0x00000000

0040590c <_calloc_r>:
  40590c:	b510      	push	{r4, lr}
  40590e:	4351      	muls	r1, r2
  405910:	f7fe fb34 	bl	403f7c <_malloc_r>
  405914:	4604      	mov	r4, r0
  405916:	b320      	cbz	r0, 405962 <_calloc_r+0x56>
  405918:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40591c:	f022 0203 	bic.w	r2, r2, #3
  405920:	3a04      	subs	r2, #4
  405922:	2a24      	cmp	r2, #36	; 0x24
  405924:	d81a      	bhi.n	40595c <_calloc_r+0x50>
  405926:	2a13      	cmp	r2, #19
  405928:	d912      	bls.n	405950 <_calloc_r+0x44>
  40592a:	2100      	movs	r1, #0
  40592c:	2a1b      	cmp	r2, #27
  40592e:	6001      	str	r1, [r0, #0]
  405930:	6041      	str	r1, [r0, #4]
  405932:	d802      	bhi.n	40593a <_calloc_r+0x2e>
  405934:	f100 0308 	add.w	r3, r0, #8
  405938:	e00b      	b.n	405952 <_calloc_r+0x46>
  40593a:	2a24      	cmp	r2, #36	; 0x24
  40593c:	6081      	str	r1, [r0, #8]
  40593e:	60c1      	str	r1, [r0, #12]
  405940:	bf11      	iteee	ne
  405942:	f100 0310 	addne.w	r3, r0, #16
  405946:	6101      	streq	r1, [r0, #16]
  405948:	f100 0318 	addeq.w	r3, r0, #24
  40594c:	6141      	streq	r1, [r0, #20]
  40594e:	e000      	b.n	405952 <_calloc_r+0x46>
  405950:	4603      	mov	r3, r0
  405952:	2200      	movs	r2, #0
  405954:	601a      	str	r2, [r3, #0]
  405956:	605a      	str	r2, [r3, #4]
  405958:	609a      	str	r2, [r3, #8]
  40595a:	e002      	b.n	405962 <_calloc_r+0x56>
  40595c:	2100      	movs	r1, #0
  40595e:	f7fc fb43 	bl	401fe8 <memset>
  405962:	4620      	mov	r0, r4
  405964:	bd10      	pop	{r4, pc}
	...

00405968 <__gedf2>:
  405968:	f04f 3cff 	mov.w	ip, #4294967295
  40596c:	e006      	b.n	40597c <__cmpdf2+0x4>
  40596e:	bf00      	nop

00405970 <__ledf2>:
  405970:	f04f 0c01 	mov.w	ip, #1
  405974:	e002      	b.n	40597c <__cmpdf2+0x4>
  405976:	bf00      	nop

00405978 <__cmpdf2>:
  405978:	f04f 0c01 	mov.w	ip, #1
  40597c:	f84d cd04 	str.w	ip, [sp, #-4]!
  405980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40598c:	bf18      	it	ne
  40598e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  405992:	d01b      	beq.n	4059cc <__cmpdf2+0x54>
  405994:	b001      	add	sp, #4
  405996:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40599a:	bf0c      	ite	eq
  40599c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4059a0:	ea91 0f03 	teqne	r1, r3
  4059a4:	bf02      	ittt	eq
  4059a6:	ea90 0f02 	teqeq	r0, r2
  4059aa:	2000      	moveq	r0, #0
  4059ac:	4770      	bxeq	lr
  4059ae:	f110 0f00 	cmn.w	r0, #0
  4059b2:	ea91 0f03 	teq	r1, r3
  4059b6:	bf58      	it	pl
  4059b8:	4299      	cmppl	r1, r3
  4059ba:	bf08      	it	eq
  4059bc:	4290      	cmpeq	r0, r2
  4059be:	bf2c      	ite	cs
  4059c0:	17d8      	asrcs	r0, r3, #31
  4059c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4059c6:	f040 0001 	orr.w	r0, r0, #1
  4059ca:	4770      	bx	lr
  4059cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4059d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4059d4:	d102      	bne.n	4059dc <__cmpdf2+0x64>
  4059d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4059da:	d107      	bne.n	4059ec <__cmpdf2+0x74>
  4059dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4059e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4059e4:	d1d6      	bne.n	405994 <__cmpdf2+0x1c>
  4059e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4059ea:	d0d3      	beq.n	405994 <__cmpdf2+0x1c>
  4059ec:	f85d 0b04 	ldr.w	r0, [sp], #4
  4059f0:	4770      	bx	lr
  4059f2:	bf00      	nop

004059f4 <__aeabi_cdrcmple>:
  4059f4:	4684      	mov	ip, r0
  4059f6:	4610      	mov	r0, r2
  4059f8:	4662      	mov	r2, ip
  4059fa:	468c      	mov	ip, r1
  4059fc:	4619      	mov	r1, r3
  4059fe:	4663      	mov	r3, ip
  405a00:	e000      	b.n	405a04 <__aeabi_cdcmpeq>
  405a02:	bf00      	nop

00405a04 <__aeabi_cdcmpeq>:
  405a04:	b501      	push	{r0, lr}
  405a06:	f7ff ffb7 	bl	405978 <__cmpdf2>
  405a0a:	2800      	cmp	r0, #0
  405a0c:	bf48      	it	mi
  405a0e:	f110 0f00 	cmnmi.w	r0, #0
  405a12:	bd01      	pop	{r0, pc}

00405a14 <__aeabi_dcmpeq>:
  405a14:	f84d ed08 	str.w	lr, [sp, #-8]!
  405a18:	f7ff fff4 	bl	405a04 <__aeabi_cdcmpeq>
  405a1c:	bf0c      	ite	eq
  405a1e:	2001      	moveq	r0, #1
  405a20:	2000      	movne	r0, #0
  405a22:	f85d fb08 	ldr.w	pc, [sp], #8
  405a26:	bf00      	nop

00405a28 <__aeabi_dcmplt>:
  405a28:	f84d ed08 	str.w	lr, [sp, #-8]!
  405a2c:	f7ff ffea 	bl	405a04 <__aeabi_cdcmpeq>
  405a30:	bf34      	ite	cc
  405a32:	2001      	movcc	r0, #1
  405a34:	2000      	movcs	r0, #0
  405a36:	f85d fb08 	ldr.w	pc, [sp], #8
  405a3a:	bf00      	nop

00405a3c <__aeabi_dcmple>:
  405a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405a40:	f7ff ffe0 	bl	405a04 <__aeabi_cdcmpeq>
  405a44:	bf94      	ite	ls
  405a46:	2001      	movls	r0, #1
  405a48:	2000      	movhi	r0, #0
  405a4a:	f85d fb08 	ldr.w	pc, [sp], #8
  405a4e:	bf00      	nop

00405a50 <__aeabi_dcmpge>:
  405a50:	f84d ed08 	str.w	lr, [sp, #-8]!
  405a54:	f7ff ffce 	bl	4059f4 <__aeabi_cdrcmple>
  405a58:	bf94      	ite	ls
  405a5a:	2001      	movls	r0, #1
  405a5c:	2000      	movhi	r0, #0
  405a5e:	f85d fb08 	ldr.w	pc, [sp], #8
  405a62:	bf00      	nop

00405a64 <__aeabi_dcmpgt>:
  405a64:	f84d ed08 	str.w	lr, [sp, #-8]!
  405a68:	f7ff ffc4 	bl	4059f4 <__aeabi_cdrcmple>
  405a6c:	bf34      	ite	cc
  405a6e:	2001      	movcc	r0, #1
  405a70:	2000      	movcs	r0, #0
  405a72:	f85d fb08 	ldr.w	pc, [sp], #8
  405a76:	bf00      	nop

00405a78 <__aeabi_d2iz>:
  405a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  405a80:	d215      	bcs.n	405aae <__aeabi_d2iz+0x36>
  405a82:	d511      	bpl.n	405aa8 <__aeabi_d2iz+0x30>
  405a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  405a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  405a8c:	d912      	bls.n	405ab4 <__aeabi_d2iz+0x3c>
  405a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  405a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405a9e:	fa23 f002 	lsr.w	r0, r3, r2
  405aa2:	bf18      	it	ne
  405aa4:	4240      	negne	r0, r0
  405aa6:	4770      	bx	lr
  405aa8:	f04f 0000 	mov.w	r0, #0
  405aac:	4770      	bx	lr
  405aae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  405ab2:	d105      	bne.n	405ac0 <__aeabi_d2iz+0x48>
  405ab4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  405ab8:	bf08      	it	eq
  405aba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405abe:	4770      	bx	lr
  405ac0:	f04f 0000 	mov.w	r0, #0
  405ac4:	4770      	bx	lr
  405ac6:	bf00      	nop

00405ac8 <__aeabi_uldivmod>:
  405ac8:	b94b      	cbnz	r3, 405ade <__aeabi_uldivmod+0x16>
  405aca:	b942      	cbnz	r2, 405ade <__aeabi_uldivmod+0x16>
  405acc:	2900      	cmp	r1, #0
  405ace:	bf08      	it	eq
  405ad0:	2800      	cmpeq	r0, #0
  405ad2:	d002      	beq.n	405ada <__aeabi_uldivmod+0x12>
  405ad4:	f04f 31ff 	mov.w	r1, #4294967295
  405ad8:	4608      	mov	r0, r1
  405ada:	f000 b83b 	b.w	405b54 <__aeabi_idiv0>
  405ade:	b082      	sub	sp, #8
  405ae0:	46ec      	mov	ip, sp
  405ae2:	e92d 5000 	stmdb	sp!, {ip, lr}
  405ae6:	f000 f81d 	bl	405b24 <__gnu_uldivmod_helper>
  405aea:	f8dd e004 	ldr.w	lr, [sp, #4]
  405aee:	b002      	add	sp, #8
  405af0:	bc0c      	pop	{r2, r3}
  405af2:	4770      	bx	lr

00405af4 <__gnu_ldivmod_helper>:
  405af4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  405af8:	9e06      	ldr	r6, [sp, #24]
  405afa:	4614      	mov	r4, r2
  405afc:	461d      	mov	r5, r3
  405afe:	4680      	mov	r8, r0
  405b00:	4689      	mov	r9, r1
  405b02:	f000 f829 	bl	405b58 <__divdi3>
  405b06:	fb04 f301 	mul.w	r3, r4, r1
  405b0a:	fb00 3305 	mla	r3, r0, r5, r3
  405b0e:	fba4 4500 	umull	r4, r5, r4, r0
  405b12:	441d      	add	r5, r3
  405b14:	ebb8 0404 	subs.w	r4, r8, r4
  405b18:	eb69 0505 	sbc.w	r5, r9, r5
  405b1c:	e9c6 4500 	strd	r4, r5, [r6]
  405b20:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00405b24 <__gnu_uldivmod_helper>:
  405b24:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  405b28:	9e06      	ldr	r6, [sp, #24]
  405b2a:	4614      	mov	r4, r2
  405b2c:	4680      	mov	r8, r0
  405b2e:	4689      	mov	r9, r1
  405b30:	461d      	mov	r5, r3
  405b32:	f000 f95d 	bl	405df0 <__udivdi3>
  405b36:	fb00 f505 	mul.w	r5, r0, r5
  405b3a:	fb04 5301 	mla	r3, r4, r1, r5
  405b3e:	fba0 4504 	umull	r4, r5, r0, r4
  405b42:	441d      	add	r5, r3
  405b44:	ebb8 0404 	subs.w	r4, r8, r4
  405b48:	eb69 0505 	sbc.w	r5, r9, r5
  405b4c:	e9c6 4500 	strd	r4, r5, [r6]
  405b50:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00405b54 <__aeabi_idiv0>:
  405b54:	4770      	bx	lr
  405b56:	bf00      	nop

00405b58 <__divdi3>:
  405b58:	2900      	cmp	r1, #0
  405b5a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405b5e:	f2c0 809f 	blt.w	405ca0 <__divdi3+0x148>
  405b62:	2400      	movs	r4, #0
  405b64:	2b00      	cmp	r3, #0
  405b66:	f2c0 8096 	blt.w	405c96 <__divdi3+0x13e>
  405b6a:	4615      	mov	r5, r2
  405b6c:	4606      	mov	r6, r0
  405b6e:	460f      	mov	r7, r1
  405b70:	2b00      	cmp	r3, #0
  405b72:	d13e      	bne.n	405bf2 <__divdi3+0x9a>
  405b74:	428a      	cmp	r2, r1
  405b76:	d957      	bls.n	405c28 <__divdi3+0xd0>
  405b78:	fab2 f382 	clz	r3, r2
  405b7c:	b14b      	cbz	r3, 405b92 <__divdi3+0x3a>
  405b7e:	f1c3 0220 	rsb	r2, r3, #32
  405b82:	fa01 f703 	lsl.w	r7, r1, r3
  405b86:	fa20 f202 	lsr.w	r2, r0, r2
  405b8a:	409d      	lsls	r5, r3
  405b8c:	4317      	orrs	r7, r2
  405b8e:	fa00 f603 	lsl.w	r6, r0, r3
  405b92:	0c29      	lsrs	r1, r5, #16
  405b94:	fbb7 f2f1 	udiv	r2, r7, r1
  405b98:	0c33      	lsrs	r3, r6, #16
  405b9a:	fb01 7c12 	mls	ip, r1, r2, r7
  405b9e:	b2a8      	uxth	r0, r5
  405ba0:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  405ba4:	fb00 f302 	mul.w	r3, r0, r2
  405ba8:	42bb      	cmp	r3, r7
  405baa:	d909      	bls.n	405bc0 <__divdi3+0x68>
  405bac:	197f      	adds	r7, r7, r5
  405bae:	f102 3cff 	add.w	ip, r2, #4294967295
  405bb2:	f080 8101 	bcs.w	405db8 <__divdi3+0x260>
  405bb6:	42bb      	cmp	r3, r7
  405bb8:	f240 80fe 	bls.w	405db8 <__divdi3+0x260>
  405bbc:	3a02      	subs	r2, #2
  405bbe:	442f      	add	r7, r5
  405bc0:	1aff      	subs	r7, r7, r3
  405bc2:	fbb7 f3f1 	udiv	r3, r7, r1
  405bc6:	b2b6      	uxth	r6, r6
  405bc8:	fb01 7113 	mls	r1, r1, r3, r7
  405bcc:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  405bd0:	fb00 f003 	mul.w	r0, r0, r3
  405bd4:	4288      	cmp	r0, r1
  405bd6:	d908      	bls.n	405bea <__divdi3+0x92>
  405bd8:	1949      	adds	r1, r1, r5
  405bda:	f103 37ff 	add.w	r7, r3, #4294967295
  405bde:	f080 80ed 	bcs.w	405dbc <__divdi3+0x264>
  405be2:	4288      	cmp	r0, r1
  405be4:	f240 80ea 	bls.w	405dbc <__divdi3+0x264>
  405be8:	3b02      	subs	r3, #2
  405bea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  405bee:	2300      	movs	r3, #0
  405bf0:	e003      	b.n	405bfa <__divdi3+0xa2>
  405bf2:	428b      	cmp	r3, r1
  405bf4:	d90a      	bls.n	405c0c <__divdi3+0xb4>
  405bf6:	2300      	movs	r3, #0
  405bf8:	461a      	mov	r2, r3
  405bfa:	4610      	mov	r0, r2
  405bfc:	4619      	mov	r1, r3
  405bfe:	b114      	cbz	r4, 405c06 <__divdi3+0xae>
  405c00:	4240      	negs	r0, r0
  405c02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405c06:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405c0a:	4770      	bx	lr
  405c0c:	fab3 f883 	clz	r8, r3
  405c10:	f1b8 0f00 	cmp.w	r8, #0
  405c14:	f040 8084 	bne.w	405d20 <__divdi3+0x1c8>
  405c18:	428b      	cmp	r3, r1
  405c1a:	d302      	bcc.n	405c22 <__divdi3+0xca>
  405c1c:	4282      	cmp	r2, r0
  405c1e:	f200 80de 	bhi.w	405dde <__divdi3+0x286>
  405c22:	2300      	movs	r3, #0
  405c24:	2201      	movs	r2, #1
  405c26:	e7e8      	b.n	405bfa <__divdi3+0xa2>
  405c28:	b912      	cbnz	r2, 405c30 <__divdi3+0xd8>
  405c2a:	2301      	movs	r3, #1
  405c2c:	fbb3 f5f2 	udiv	r5, r3, r2
  405c30:	fab5 f285 	clz	r2, r5
  405c34:	2a00      	cmp	r2, #0
  405c36:	d139      	bne.n	405cac <__divdi3+0x154>
  405c38:	1b7f      	subs	r7, r7, r5
  405c3a:	0c28      	lsrs	r0, r5, #16
  405c3c:	fa1f fc85 	uxth.w	ip, r5
  405c40:	2301      	movs	r3, #1
  405c42:	fbb7 f1f0 	udiv	r1, r7, r0
  405c46:	0c32      	lsrs	r2, r6, #16
  405c48:	fb00 7711 	mls	r7, r0, r1, r7
  405c4c:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  405c50:	fb0c f201 	mul.w	r2, ip, r1
  405c54:	42ba      	cmp	r2, r7
  405c56:	d907      	bls.n	405c68 <__divdi3+0x110>
  405c58:	197f      	adds	r7, r7, r5
  405c5a:	f101 38ff 	add.w	r8, r1, #4294967295
  405c5e:	d202      	bcs.n	405c66 <__divdi3+0x10e>
  405c60:	42ba      	cmp	r2, r7
  405c62:	f200 80c1 	bhi.w	405de8 <__divdi3+0x290>
  405c66:	4641      	mov	r1, r8
  405c68:	1abf      	subs	r7, r7, r2
  405c6a:	fbb7 f2f0 	udiv	r2, r7, r0
  405c6e:	b2b6      	uxth	r6, r6
  405c70:	fb00 7012 	mls	r0, r0, r2, r7
  405c74:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  405c78:	fb0c fc02 	mul.w	ip, ip, r2
  405c7c:	4584      	cmp	ip, r0
  405c7e:	d907      	bls.n	405c90 <__divdi3+0x138>
  405c80:	1940      	adds	r0, r0, r5
  405c82:	f102 37ff 	add.w	r7, r2, #4294967295
  405c86:	d202      	bcs.n	405c8e <__divdi3+0x136>
  405c88:	4584      	cmp	ip, r0
  405c8a:	f200 80ab 	bhi.w	405de4 <__divdi3+0x28c>
  405c8e:	463a      	mov	r2, r7
  405c90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  405c94:	e7b1      	b.n	405bfa <__divdi3+0xa2>
  405c96:	43e4      	mvns	r4, r4
  405c98:	4252      	negs	r2, r2
  405c9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405c9e:	e764      	b.n	405b6a <__divdi3+0x12>
  405ca0:	4240      	negs	r0, r0
  405ca2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405ca6:	f04f 34ff 	mov.w	r4, #4294967295
  405caa:	e75b      	b.n	405b64 <__divdi3+0xc>
  405cac:	4095      	lsls	r5, r2
  405cae:	f1c2 0320 	rsb	r3, r2, #32
  405cb2:	fa27 f103 	lsr.w	r1, r7, r3
  405cb6:	0c28      	lsrs	r0, r5, #16
  405cb8:	fa26 f303 	lsr.w	r3, r6, r3
  405cbc:	4097      	lsls	r7, r2
  405cbe:	fbb1 f8f0 	udiv	r8, r1, r0
  405cc2:	431f      	orrs	r7, r3
  405cc4:	0c3b      	lsrs	r3, r7, #16
  405cc6:	fb00 1118 	mls	r1, r0, r8, r1
  405cca:	fa1f fc85 	uxth.w	ip, r5
  405cce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  405cd2:	fb0c f308 	mul.w	r3, ip, r8
  405cd6:	428b      	cmp	r3, r1
  405cd8:	fa06 f602 	lsl.w	r6, r6, r2
  405cdc:	d908      	bls.n	405cf0 <__divdi3+0x198>
  405cde:	1949      	adds	r1, r1, r5
  405ce0:	f108 32ff 	add.w	r2, r8, #4294967295
  405ce4:	d279      	bcs.n	405dda <__divdi3+0x282>
  405ce6:	428b      	cmp	r3, r1
  405ce8:	d977      	bls.n	405dda <__divdi3+0x282>
  405cea:	f1a8 0802 	sub.w	r8, r8, #2
  405cee:	4429      	add	r1, r5
  405cf0:	1ac9      	subs	r1, r1, r3
  405cf2:	fbb1 f3f0 	udiv	r3, r1, r0
  405cf6:	b2bf      	uxth	r7, r7
  405cf8:	fb00 1113 	mls	r1, r0, r3, r1
  405cfc:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  405d00:	fb0c f203 	mul.w	r2, ip, r3
  405d04:	42ba      	cmp	r2, r7
  405d06:	d907      	bls.n	405d18 <__divdi3+0x1c0>
  405d08:	197f      	adds	r7, r7, r5
  405d0a:	f103 31ff 	add.w	r1, r3, #4294967295
  405d0e:	d260      	bcs.n	405dd2 <__divdi3+0x27a>
  405d10:	42ba      	cmp	r2, r7
  405d12:	d95e      	bls.n	405dd2 <__divdi3+0x27a>
  405d14:	3b02      	subs	r3, #2
  405d16:	442f      	add	r7, r5
  405d18:	1abf      	subs	r7, r7, r2
  405d1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  405d1e:	e790      	b.n	405c42 <__divdi3+0xea>
  405d20:	f1c8 0220 	rsb	r2, r8, #32
  405d24:	fa03 fc08 	lsl.w	ip, r3, r8
  405d28:	fa25 f302 	lsr.w	r3, r5, r2
  405d2c:	ea43 0c0c 	orr.w	ip, r3, ip
  405d30:	ea4f 491c 	mov.w	r9, ip, lsr #16
  405d34:	fa21 f302 	lsr.w	r3, r1, r2
  405d38:	fa01 f708 	lsl.w	r7, r1, r8
  405d3c:	fa20 f202 	lsr.w	r2, r0, r2
  405d40:	fbb3 f1f9 	udiv	r1, r3, r9
  405d44:	4317      	orrs	r7, r2
  405d46:	fb09 3311 	mls	r3, r9, r1, r3
  405d4a:	0c3a      	lsrs	r2, r7, #16
  405d4c:	fa1f fb8c 	uxth.w	fp, ip
  405d50:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  405d54:	fb0b fa01 	mul.w	sl, fp, r1
  405d58:	459a      	cmp	sl, r3
  405d5a:	fa05 f008 	lsl.w	r0, r5, r8
  405d5e:	d908      	bls.n	405d72 <__divdi3+0x21a>
  405d60:	eb13 030c 	adds.w	r3, r3, ip
  405d64:	f101 32ff 	add.w	r2, r1, #4294967295
  405d68:	d235      	bcs.n	405dd6 <__divdi3+0x27e>
  405d6a:	459a      	cmp	sl, r3
  405d6c:	d933      	bls.n	405dd6 <__divdi3+0x27e>
  405d6e:	3902      	subs	r1, #2
  405d70:	4463      	add	r3, ip
  405d72:	ebca 0303 	rsb	r3, sl, r3
  405d76:	fbb3 f2f9 	udiv	r2, r3, r9
  405d7a:	fb09 3312 	mls	r3, r9, r2, r3
  405d7e:	b2bf      	uxth	r7, r7
  405d80:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  405d84:	fb0b f902 	mul.w	r9, fp, r2
  405d88:	45b9      	cmp	r9, r7
  405d8a:	d908      	bls.n	405d9e <__divdi3+0x246>
  405d8c:	eb17 070c 	adds.w	r7, r7, ip
  405d90:	f102 33ff 	add.w	r3, r2, #4294967295
  405d94:	d21b      	bcs.n	405dce <__divdi3+0x276>
  405d96:	45b9      	cmp	r9, r7
  405d98:	d919      	bls.n	405dce <__divdi3+0x276>
  405d9a:	3a02      	subs	r2, #2
  405d9c:	4467      	add	r7, ip
  405d9e:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  405da2:	fba5 0100 	umull	r0, r1, r5, r0
  405da6:	ebc9 0707 	rsb	r7, r9, r7
  405daa:	428f      	cmp	r7, r1
  405dac:	f04f 0300 	mov.w	r3, #0
  405db0:	d30a      	bcc.n	405dc8 <__divdi3+0x270>
  405db2:	d005      	beq.n	405dc0 <__divdi3+0x268>
  405db4:	462a      	mov	r2, r5
  405db6:	e720      	b.n	405bfa <__divdi3+0xa2>
  405db8:	4662      	mov	r2, ip
  405dba:	e701      	b.n	405bc0 <__divdi3+0x68>
  405dbc:	463b      	mov	r3, r7
  405dbe:	e714      	b.n	405bea <__divdi3+0x92>
  405dc0:	fa06 f608 	lsl.w	r6, r6, r8
  405dc4:	4286      	cmp	r6, r0
  405dc6:	d2f5      	bcs.n	405db4 <__divdi3+0x25c>
  405dc8:	1e6a      	subs	r2, r5, #1
  405dca:	2300      	movs	r3, #0
  405dcc:	e715      	b.n	405bfa <__divdi3+0xa2>
  405dce:	461a      	mov	r2, r3
  405dd0:	e7e5      	b.n	405d9e <__divdi3+0x246>
  405dd2:	460b      	mov	r3, r1
  405dd4:	e7a0      	b.n	405d18 <__divdi3+0x1c0>
  405dd6:	4611      	mov	r1, r2
  405dd8:	e7cb      	b.n	405d72 <__divdi3+0x21a>
  405dda:	4690      	mov	r8, r2
  405ddc:	e788      	b.n	405cf0 <__divdi3+0x198>
  405dde:	4643      	mov	r3, r8
  405de0:	4642      	mov	r2, r8
  405de2:	e70a      	b.n	405bfa <__divdi3+0xa2>
  405de4:	3a02      	subs	r2, #2
  405de6:	e753      	b.n	405c90 <__divdi3+0x138>
  405de8:	3902      	subs	r1, #2
  405dea:	442f      	add	r7, r5
  405dec:	e73c      	b.n	405c68 <__divdi3+0x110>
  405dee:	bf00      	nop

00405df0 <__udivdi3>:
  405df0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405df4:	4614      	mov	r4, r2
  405df6:	4605      	mov	r5, r0
  405df8:	460e      	mov	r6, r1
  405dfa:	2b00      	cmp	r3, #0
  405dfc:	d143      	bne.n	405e86 <__udivdi3+0x96>
  405dfe:	428a      	cmp	r2, r1
  405e00:	d953      	bls.n	405eaa <__udivdi3+0xba>
  405e02:	fab2 f782 	clz	r7, r2
  405e06:	b157      	cbz	r7, 405e1e <__udivdi3+0x2e>
  405e08:	f1c7 0620 	rsb	r6, r7, #32
  405e0c:	fa20 f606 	lsr.w	r6, r0, r6
  405e10:	fa01 f307 	lsl.w	r3, r1, r7
  405e14:	fa02 f407 	lsl.w	r4, r2, r7
  405e18:	431e      	orrs	r6, r3
  405e1a:	fa00 f507 	lsl.w	r5, r0, r7
  405e1e:	0c21      	lsrs	r1, r4, #16
  405e20:	fbb6 f2f1 	udiv	r2, r6, r1
  405e24:	0c2b      	lsrs	r3, r5, #16
  405e26:	fb01 6712 	mls	r7, r1, r2, r6
  405e2a:	b2a0      	uxth	r0, r4
  405e2c:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  405e30:	fb00 f302 	mul.w	r3, r0, r2
  405e34:	42b3      	cmp	r3, r6
  405e36:	d909      	bls.n	405e4c <__udivdi3+0x5c>
  405e38:	1936      	adds	r6, r6, r4
  405e3a:	f102 37ff 	add.w	r7, r2, #4294967295
  405e3e:	f080 80f6 	bcs.w	40602e <__udivdi3+0x23e>
  405e42:	42b3      	cmp	r3, r6
  405e44:	f240 80f3 	bls.w	40602e <__udivdi3+0x23e>
  405e48:	3a02      	subs	r2, #2
  405e4a:	4426      	add	r6, r4
  405e4c:	1af6      	subs	r6, r6, r3
  405e4e:	fbb6 f3f1 	udiv	r3, r6, r1
  405e52:	b2ad      	uxth	r5, r5
  405e54:	fb01 6113 	mls	r1, r1, r3, r6
  405e58:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  405e5c:	fb00 f003 	mul.w	r0, r0, r3
  405e60:	4288      	cmp	r0, r1
  405e62:	d908      	bls.n	405e76 <__udivdi3+0x86>
  405e64:	1909      	adds	r1, r1, r4
  405e66:	f103 36ff 	add.w	r6, r3, #4294967295
  405e6a:	f080 80e2 	bcs.w	406032 <__udivdi3+0x242>
  405e6e:	4288      	cmp	r0, r1
  405e70:	f240 80df 	bls.w	406032 <__udivdi3+0x242>
  405e74:	3b02      	subs	r3, #2
  405e76:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  405e7a:	2300      	movs	r3, #0
  405e7c:	4610      	mov	r0, r2
  405e7e:	4619      	mov	r1, r3
  405e80:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405e84:	4770      	bx	lr
  405e86:	428b      	cmp	r3, r1
  405e88:	d84a      	bhi.n	405f20 <__udivdi3+0x130>
  405e8a:	fab3 f683 	clz	r6, r3
  405e8e:	2e00      	cmp	r6, #0
  405e90:	d14d      	bne.n	405f2e <__udivdi3+0x13e>
  405e92:	428b      	cmp	r3, r1
  405e94:	d302      	bcc.n	405e9c <__udivdi3+0xac>
  405e96:	4282      	cmp	r2, r0
  405e98:	f200 80d6 	bhi.w	406048 <__udivdi3+0x258>
  405e9c:	2300      	movs	r3, #0
  405e9e:	2201      	movs	r2, #1
  405ea0:	4610      	mov	r0, r2
  405ea2:	4619      	mov	r1, r3
  405ea4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405ea8:	4770      	bx	lr
  405eaa:	b912      	cbnz	r2, 405eb2 <__udivdi3+0xc2>
  405eac:	2401      	movs	r4, #1
  405eae:	fbb4 f4f2 	udiv	r4, r4, r2
  405eb2:	fab4 f284 	clz	r2, r4
  405eb6:	2a00      	cmp	r2, #0
  405eb8:	d17c      	bne.n	405fb4 <__udivdi3+0x1c4>
  405eba:	1b09      	subs	r1, r1, r4
  405ebc:	0c26      	lsrs	r6, r4, #16
  405ebe:	b2a7      	uxth	r7, r4
  405ec0:	2301      	movs	r3, #1
  405ec2:	fbb1 f0f6 	udiv	r0, r1, r6
  405ec6:	0c2a      	lsrs	r2, r5, #16
  405ec8:	fb06 1110 	mls	r1, r6, r0, r1
  405ecc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  405ed0:	fb07 f200 	mul.w	r2, r7, r0
  405ed4:	428a      	cmp	r2, r1
  405ed6:	d907      	bls.n	405ee8 <__udivdi3+0xf8>
  405ed8:	1909      	adds	r1, r1, r4
  405eda:	f100 3cff 	add.w	ip, r0, #4294967295
  405ede:	d202      	bcs.n	405ee6 <__udivdi3+0xf6>
  405ee0:	428a      	cmp	r2, r1
  405ee2:	f200 80c3 	bhi.w	40606c <__udivdi3+0x27c>
  405ee6:	4660      	mov	r0, ip
  405ee8:	1a89      	subs	r1, r1, r2
  405eea:	fbb1 f2f6 	udiv	r2, r1, r6
  405eee:	b2ad      	uxth	r5, r5
  405ef0:	fb06 1112 	mls	r1, r6, r2, r1
  405ef4:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  405ef8:	fb07 f702 	mul.w	r7, r7, r2
  405efc:	42af      	cmp	r7, r5
  405efe:	d908      	bls.n	405f12 <__udivdi3+0x122>
  405f00:	192c      	adds	r4, r5, r4
  405f02:	f102 31ff 	add.w	r1, r2, #4294967295
  405f06:	f080 8096 	bcs.w	406036 <__udivdi3+0x246>
  405f0a:	42a7      	cmp	r7, r4
  405f0c:	f240 8093 	bls.w	406036 <__udivdi3+0x246>
  405f10:	3a02      	subs	r2, #2
  405f12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  405f16:	4610      	mov	r0, r2
  405f18:	4619      	mov	r1, r3
  405f1a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405f1e:	4770      	bx	lr
  405f20:	2300      	movs	r3, #0
  405f22:	461a      	mov	r2, r3
  405f24:	4610      	mov	r0, r2
  405f26:	4619      	mov	r1, r3
  405f28:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405f2c:	4770      	bx	lr
  405f2e:	f1c6 0520 	rsb	r5, r6, #32
  405f32:	fa22 f405 	lsr.w	r4, r2, r5
  405f36:	40b3      	lsls	r3, r6
  405f38:	431c      	orrs	r4, r3
  405f3a:	ea4f 4814 	mov.w	r8, r4, lsr #16
  405f3e:	fa21 f305 	lsr.w	r3, r1, r5
  405f42:	fa01 f706 	lsl.w	r7, r1, r6
  405f46:	fa20 f505 	lsr.w	r5, r0, r5
  405f4a:	fbb3 fcf8 	udiv	ip, r3, r8
  405f4e:	432f      	orrs	r7, r5
  405f50:	fb08 331c 	mls	r3, r8, ip, r3
  405f54:	0c3d      	lsrs	r5, r7, #16
  405f56:	fa1f fa84 	uxth.w	sl, r4
  405f5a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  405f5e:	fb0a f90c 	mul.w	r9, sl, ip
  405f62:	4599      	cmp	r9, r3
  405f64:	fa02 fb06 	lsl.w	fp, r2, r6
  405f68:	d904      	bls.n	405f74 <__udivdi3+0x184>
  405f6a:	191b      	adds	r3, r3, r4
  405f6c:	f10c 32ff 	add.w	r2, ip, #4294967295
  405f70:	d36d      	bcc.n	40604e <__udivdi3+0x25e>
  405f72:	4694      	mov	ip, r2
  405f74:	ebc9 0303 	rsb	r3, r9, r3
  405f78:	fbb3 f5f8 	udiv	r5, r3, r8
  405f7c:	fb08 3315 	mls	r3, r8, r5, r3
  405f80:	b2bf      	uxth	r7, r7
  405f82:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  405f86:	fb0a f805 	mul.w	r8, sl, r5
  405f8a:	45b8      	cmp	r8, r7
  405f8c:	d904      	bls.n	405f98 <__udivdi3+0x1a8>
  405f8e:	193f      	adds	r7, r7, r4
  405f90:	f105 33ff 	add.w	r3, r5, #4294967295
  405f94:	d361      	bcc.n	40605a <__udivdi3+0x26a>
  405f96:	461d      	mov	r5, r3
  405f98:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  405f9c:	fbac 230b 	umull	r2, r3, ip, fp
  405fa0:	ebc8 0707 	rsb	r7, r8, r7
  405fa4:	429f      	cmp	r7, r3
  405fa6:	f04f 0500 	mov.w	r5, #0
  405faa:	d349      	bcc.n	406040 <__udivdi3+0x250>
  405fac:	d045      	beq.n	40603a <__udivdi3+0x24a>
  405fae:	4662      	mov	r2, ip
  405fb0:	462b      	mov	r3, r5
  405fb2:	e763      	b.n	405e7c <__udivdi3+0x8c>
  405fb4:	4094      	lsls	r4, r2
  405fb6:	f1c2 0320 	rsb	r3, r2, #32
  405fba:	fa21 fc03 	lsr.w	ip, r1, r3
  405fbe:	0c26      	lsrs	r6, r4, #16
  405fc0:	fa20 f303 	lsr.w	r3, r0, r3
  405fc4:	fa01 f502 	lsl.w	r5, r1, r2
  405fc8:	fbbc f8f6 	udiv	r8, ip, r6
  405fcc:	ea43 0105 	orr.w	r1, r3, r5
  405fd0:	0c0b      	lsrs	r3, r1, #16
  405fd2:	fb06 cc18 	mls	ip, r6, r8, ip
  405fd6:	b2a7      	uxth	r7, r4
  405fd8:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  405fdc:	fb07 f308 	mul.w	r3, r7, r8
  405fe0:	4563      	cmp	r3, ip
  405fe2:	fa00 f502 	lsl.w	r5, r0, r2
  405fe6:	d909      	bls.n	405ffc <__udivdi3+0x20c>
  405fe8:	eb1c 0c04 	adds.w	ip, ip, r4
  405fec:	f108 32ff 	add.w	r2, r8, #4294967295
  405ff0:	d23a      	bcs.n	406068 <__udivdi3+0x278>
  405ff2:	4563      	cmp	r3, ip
  405ff4:	d938      	bls.n	406068 <__udivdi3+0x278>
  405ff6:	f1a8 0802 	sub.w	r8, r8, #2
  405ffa:	44a4      	add	ip, r4
  405ffc:	ebc3 0c0c 	rsb	ip, r3, ip
  406000:	fbbc f3f6 	udiv	r3, ip, r6
  406004:	b289      	uxth	r1, r1
  406006:	fb06 cc13 	mls	ip, r6, r3, ip
  40600a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  40600e:	fb07 f203 	mul.w	r2, r7, r3
  406012:	428a      	cmp	r2, r1
  406014:	d907      	bls.n	406026 <__udivdi3+0x236>
  406016:	1909      	adds	r1, r1, r4
  406018:	f103 30ff 	add.w	r0, r3, #4294967295
  40601c:	d222      	bcs.n	406064 <__udivdi3+0x274>
  40601e:	428a      	cmp	r2, r1
  406020:	d920      	bls.n	406064 <__udivdi3+0x274>
  406022:	3b02      	subs	r3, #2
  406024:	4421      	add	r1, r4
  406026:	1a89      	subs	r1, r1, r2
  406028:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40602c:	e749      	b.n	405ec2 <__udivdi3+0xd2>
  40602e:	463a      	mov	r2, r7
  406030:	e70c      	b.n	405e4c <__udivdi3+0x5c>
  406032:	4633      	mov	r3, r6
  406034:	e71f      	b.n	405e76 <__udivdi3+0x86>
  406036:	460a      	mov	r2, r1
  406038:	e76b      	b.n	405f12 <__udivdi3+0x122>
  40603a:	40b0      	lsls	r0, r6
  40603c:	4290      	cmp	r0, r2
  40603e:	d2b6      	bcs.n	405fae <__udivdi3+0x1be>
  406040:	f10c 32ff 	add.w	r2, ip, #4294967295
  406044:	2300      	movs	r3, #0
  406046:	e719      	b.n	405e7c <__udivdi3+0x8c>
  406048:	4633      	mov	r3, r6
  40604a:	4632      	mov	r2, r6
  40604c:	e716      	b.n	405e7c <__udivdi3+0x8c>
  40604e:	4599      	cmp	r9, r3
  406050:	d98f      	bls.n	405f72 <__udivdi3+0x182>
  406052:	f1ac 0c02 	sub.w	ip, ip, #2
  406056:	4423      	add	r3, r4
  406058:	e78c      	b.n	405f74 <__udivdi3+0x184>
  40605a:	45b8      	cmp	r8, r7
  40605c:	d99b      	bls.n	405f96 <__udivdi3+0x1a6>
  40605e:	3d02      	subs	r5, #2
  406060:	4427      	add	r7, r4
  406062:	e799      	b.n	405f98 <__udivdi3+0x1a8>
  406064:	4603      	mov	r3, r0
  406066:	e7de      	b.n	406026 <__udivdi3+0x236>
  406068:	4690      	mov	r8, r2
  40606a:	e7c7      	b.n	405ffc <__udivdi3+0x20c>
  40606c:	3802      	subs	r0, #2
  40606e:	4421      	add	r1, r4
  406070:	e73a      	b.n	405ee8 <__udivdi3+0xf8>
  406072:	bf00      	nop
	...
  406088:	00000004 	.word	0x00000004
  40608c:	00000004 	.word	0x00000004
  406090:	00000004 	.word	0x00000004
  406094:	0000000a 	.word	0x0000000a
  406098:	00000002 	.word	0x00000002
  40609c:	0000000a 	.word	0x0000000a
  4060a0:	00000003 	.word	0x00000003
  4060a4:	0000003c 	.word	0x0000003c
  4060a8:	00000002 	.word	0x00000002
  4060ac:	0000000a 	.word	0x0000000a
  4060b0:	00000003 	.word	0x00000003
  4060b4:	0000006e 	.word	0x0000006e
  4060b8:	00000002 	.word	0x00000002
  4060bc:	0000000a 	.word	0x0000000a
  4060c0:	00000003 	.word	0x00000003
  4060c4:	73657250 	.word	0x73657250
  4060c8:	20612073 	.word	0x20612073
  4060cc:	74747562 	.word	0x74747562
  4060d0:	74206e6f 	.word	0x74206e6f
  4060d4:	706f206f 	.word	0x706f206f
  4060d8:	61206e65 	.word	0x61206e65
  4060dc:	6f6f6420 	.word	0x6f6f6420
  4060e0:	00000072 	.word	0x00000072
  4060e4:	656d6147 	.word	0x656d6147
  4060e8:	61745320 	.word	0x61745320
  4060ec:	25206574 	.word	0x25206574
  4060f0:	73203a64 	.word	0x73203a64
  4060f4:	63656c65 	.word	0x63656c65
  4060f8:	20646574 	.word	0x20646574
  4060fc:	726f6f64 	.word	0x726f6f64
  406100:	20642520 	.word	0x20642520
  406104:	6e65706f 	.word	0x6e65706f
  406108:	6f6f6420 	.word	0x6f6f6420
  40610c:	64252072 	.word	0x64252072
  406110:	00000000 	.word	0x00000000
  406114:	3a6e6f57 	.word	0x3a6e6f57
  406118:	6d614720 	.word	0x6d614720
  40611c:	74532065 	.word	0x74532065
  406120:	20657461 	.word	0x20657461
  406124:	203a6425 	.word	0x203a6425
  406128:	656c6573 	.word	0x656c6573
  40612c:	64657463 	.word	0x64657463
  406130:	6f6f6420 	.word	0x6f6f6420
  406134:	64252072 	.word	0x64252072
  406138:	65706f20 	.word	0x65706f20
  40613c:	6f64206e 	.word	0x6f64206e
  406140:	2520726f 	.word	0x2520726f
  406144:	00000064 	.word	0x00000064
  406148:	74736f4c 	.word	0x74736f4c
  40614c:	6147203a 	.word	0x6147203a
  406150:	5320656d 	.word	0x5320656d
  406154:	65746174 	.word	0x65746174
  406158:	3a642520 	.word	0x3a642520
  40615c:	6c657320 	.word	0x6c657320
  406160:	65746365 	.word	0x65746365
  406164:	6f642064 	.word	0x6f642064
  406168:	2520726f 	.word	0x2520726f
  40616c:	706f2064 	.word	0x706f2064
  406170:	64206e65 	.word	0x64206e65
  406174:	20726f6f 	.word	0x20726f6f
  406178:	00006425 	.word	0x00006425
  40617c:	73657250 	.word	0x73657250
  406180:	20612073 	.word	0x20612073
  406184:	74747562 	.word	0x74747562
  406188:	74206e6f 	.word	0x74206e6f
  40618c:	6573206f 	.word	0x6573206f
  406190:	7463656c 	.word	0x7463656c
  406194:	64206120 	.word	0x64206120
  406198:	00726f6f 	.word	0x00726f6f
  40619c:	656d6147 	.word	0x656d6147
  4061a0:	6c502073 	.word	0x6c502073
  4061a4:	64657961 	.word	0x64657961
  4061a8:	6425203a 	.word	0x6425203a
  4061ac:	7753202c 	.word	0x7753202c
  4061b0:	68637469 	.word	0x68637469
  4061b4:	756f4320 	.word	0x756f4320
  4061b8:	2520746e 	.word	0x2520746e
  4061bc:	47202c64 	.word	0x47202c64
  4061c0:	73656d61 	.word	0x73656d61
  4061c4:	6e695720 	.word	0x6e695720
  4061c8:	25642520 	.word	0x25642520
  4061cc:	53202c25 	.word	0x53202c25
  4061d0:	63746977 	.word	0x63746977
  4061d4:	69572068 	.word	0x69572068
  4061d8:	6425206e 	.word	0x6425206e
  4061dc:	53202525 	.word	0x53202525
  4061e0:	20796174 	.word	0x20796174
  4061e4:	206e6957 	.word	0x206e6957
  4061e8:	25256425 	.word	0x25256425
  4061ec:	00000000 	.word	0x00000000
  4061f0:	73657250 	.word	0x73657250
  4061f4:	20612073 	.word	0x20612073
  4061f8:	74747562 	.word	0x74747562
  4061fc:	74206e6f 	.word	0x74206e6f
  406200:	6c70206f 	.word	0x6c70206f
  406204:	61207961 	.word	0x61207961
  406208:	6e696167 	.word	0x6e696167
  40620c:	00000000 	.word	0x00000000

00406210 <_global_impure_ptr>:
  406210:	20000418 20200043                                ... C.

00406216 <blanks.6743>:
  406216:	20202020 20202020 20202020 20202020                     

00406226 <zeroes.6744>:
  406226:	30303030 30303030 30303030 30303030     0000000000000000
  406236:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  406246:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  406256:	32313000 36353433 61393837 65646362     .0123456789abcde
  406266:	00300066 69666e49 7974696e 4e614e00     f.0.Infinity.NaN
  406276:	534f5000 2e005849 00050000                       .POSIX....

00406280 <p05.5289>:
  406280:	00000005 00000019 0000007d 00000000     ........}.......

00406290 <__mprec_tens>:
  406290:	00000000 3ff00000 00000000 40240000     .......?......$@
  4062a0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4062b0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4062c0:	00000000 412e8480 00000000 416312d0     .......A......cA
  4062d0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4062e0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4062f0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  406300:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  406310:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  406320:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  406330:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  406340:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  406350:	79d99db4 44ea7843                       ...yCx.D

00406358 <__mprec_tinytens>:
  406358:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
  406368:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
  406378:	64ac6f43 0ac80628                       Co.d(...

00406380 <__mprec_bigtens>:
  406380:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  406390:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4063a0:	7f73bf3c 75154fdd                       <.s..O.u

004063a8 <blanks.6687>:
  4063a8:	20202020 20202020 20202020 20202020                     

004063b8 <zeroes.6688>:
  4063b8:	30303030 30303030 30303030 30303030     0000000000000000

004063c8 <_init>:
  4063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4063ca:	bf00      	nop
  4063cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4063ce:	bc08      	pop	{r3}
  4063d0:	469e      	mov	lr, r3
  4063d2:	4770      	bx	lr

004063d4 <__init_array_start>:
  4063d4:	00403025 	.word	0x00403025

004063d8 <__frame_dummy_init_array_entry>:
  4063d8:	00400145                                E.@.

004063dc <_fini>:
  4063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4063de:	bf00      	nop
  4063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4063e2:	bc08      	pop	{r3}
  4063e4:	469e      	mov	lr, r3
  4063e6:	4770      	bx	lr

004063e8 <__fini_array_start>:
  4063e8:	0040011d 	.word	0x0040011d

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <Font08px_58>:
2000000c:	4401 0000                                   .D..

20000010 <Font08px_59>:
20000010:	c401 0000                                   ....

20000014 <Font08px_UY>:
20000014:	0605 f008 0608 0000                         ........

2000001c <Font08px_91>:
2000001c:	fe03 8282                                   ....

20000020 <Font08px_92>:
20000020:	0603 c038                                   ..8.

20000024 <Font08px_93>:
20000024:	8203 fe82                                   ....

20000028 <Font08px_94>:
20000028:	0403 0402                                   ....

2000002c <Font08px_95>:
2000002c:	8003 8080                                   ....

20000030 <Font08px_96>:
20000030:	0202 0004                                   ....

20000034 <font_table>:
20000034:	0244 2000 0248 2000 024c 2000 0250 2000     D.. H.. L.. P.. 
20000044:	0258 2000 0260 2000 0268 2000 0270 2000     X.. `.. h.. p.. 
20000054:	0334 2000 0338 2000 033c 2000 0340 2000     4.. 8.. <.. @.. 
20000064:	0344 2000 0348 2000 034c 2000 0350 2000     D.. H.. L.. P.. 
20000074:	02e4 2000 02ec 2000 02f4 2000 02fc 2000     ... ... ... ... 
20000084:	01b0 2000 030c 2000 0234 2000 01b8 2000     ... ... 4.. ... 
20000094:	0324 2000 01c0 2000 000c 2000 0010 2000     $.. ... ... ... 
200000a4:	01c8 2000 01d0 2000 01d8 2000 01e0 2000     ... ... ... ... 
200000b4:	01e8 2000 0274 2000 027c 2000 0284 2000     ... t.. |.. ... 
200000c4:	01f4 2000 01fc 2000 0204 2000 020c 2000     ... ... ... ... 
200000d4:	02a0 2000 02a8 2000 02ac 2000 02b4 2000     ... ... ... ... 
200000e4:	02bc 2000 02c4 2000 02cc 2000 02d4 2000     ... ... ... ... 
200000f4:	02dc 2000 0214 2000 021c 2000 0224 2000     ... ... ... $.. 
20000104:	022c 2000 0304 2000 023c 2000 0314 2000     ,.. ... <.. ... 
20000114:	031c 2000 0014 2000 032c 2000 001c 2000     ... ... ,.. ... 
20000124:	0020 2000 0024 2000 0028 2000 002c 2000      .. $.. (.. ,.. 
20000134:	0030 2000 0354 2000 035c 2000 0364 2000     0.. T.. \.. d.. 
20000144:	036c 2000 0374 2000 037c 2000 0380 2000     l.. t.. |.. ... 
20000154:	0388 2000 0390 2000 0394 2000 0398 2000     ... ... ... ... 
20000164:	03a0 2000 03a4 2000 03ac 2000 03b4 2000     ... ... ... ... 
20000174:	03bc 2000 03c4 2000 03cc 2000 03d0 2000     ... ... ... ... 
20000184:	03d8 2000 03dc 2000 03e4 2000 03ec 2000     ... ... ... ... 
20000194:	03f4 2000 03fc 2000 0404 2000 028c 2000     ... ... ... ... 
200001a4:	0290 2000 0294 2000 0298 2000               ... ... ... 

200001b0 <Font08px_N4>:
200001b0:	3005 2428 20fe 0000                         .0($. ..

200001b8 <Font08px_N7>:
200001b8:	0205 f202 060a 0000                         ........

200001c0 <Font08px_N9>:
200001c0:	4c05 9292 7c92 0000                         .L...|..

200001c8 <Font08px_60>:
200001c8:	1004 4428 0082 0000                         ..(D....

200001d0 <Font08px_61>:
200001d0:	2804 2828 0028 0000                         .((((...

200001d8 <Font08px_62>:
200001d8:	8204 2844 0010 0000                         ..D(....

200001e0 <Font08px_63>:
200001e0:	0405 a202 0c12 0000                         ........

200001e8 <Font08px_64>:
200001e8:	3808 9244 aaaa 24ba 0018 0000               .8D....$....

200001f4 <Font08px_UD>:
200001f4:	fe04 8282 007c 0000                         ....|...

200001fc <Font08px_UE>:
200001fc:	fe04 9292 0082 0000                         ........

20000204 <Font08px_UF>:
20000204:	fe04 1212 0002 0000                         ........

2000020c <Font08px_UG>:
2000020c:	7c05 9282 f492 0000                         .|......

20000214 <Font08px_UQ>:
20000214:	7c05 a282 bc42 0000                         .|..B...

2000021c <Font08px_UR>:
2000021c:	fe04 3212 00cc 0000                         ...2....

20000224 <Font08px_US>:
20000224:	4c04 9292 0064 0000                         .L..d...

2000022c <Font08px_UT>:
2000022c:	0205 fe02 0202 0000                         ........

20000234 <Font08px_N6>:
20000234:	7c05 9292 6492 0000                         .|...d..

2000023c <Font08px_UV>:
2000023c:	0e05 c030 0e30 0000                         ..0.0...

20000244 <Font08px_32>:
20000244:	0002 0000                                   ....

20000248 <Font08px_33>:
20000248:	be01 0000                                   ....

2000024c <Font08px_34>:
2000024c:	0603 0600                                   ....

20000250 <Font08px_35>:
20000250:	2805 28fe 28fe 0000                         .(.(.(..

20000258 <Font08px_36>:
20000258:	4805 fe54 2454 0000                         .HT.T$..

20000260 <Font08px_37>:
20000260:	4605 1026 c4c8 0000                         .F&.....

20000268 <Font08px_38>:
20000268:	6c05 ac92 a040 0000                         .l..@...

20000270 <Font08px_39>:
20000270:	0601 0000                                   ....

20000274 <Font08px_UA>:
20000274:	f805 1214 f814 0000                         ........

2000027c <Font08px_UB>:
2000027c:	fe04 9292 006c 0000                         ....l...

20000284 <Font08px_UC>:
20000284:	7c04 8282 0044 0000                         .|..D...

2000028c <Font08px_123>:
2000028c:	1003 826c                                   ..l.

20000290 <Font08px_124>:
20000290:	fe01 0000                                   ....

20000294 <Font08px_125>:
20000294:	8203 106c                                   ..l.

20000298 <Font08px_126>:
20000298:	1005 1008 1020 0000                         .... ...

200002a0 <Font08px_UH>:
200002a0:	fe04 1010 00fe 0000                         ........

200002a8 <Font08px_UI>:
200002a8:	8203 82fe                                   ....

200002ac <Font08px_UJ>:
200002ac:	4004 8080 007e 0000                         .@..~...

200002b4 <Font08px_UK>:
200002b4:	fe05 2810 8244 0000                         ...(D...

200002bc <Font08px_UL>:
200002bc:	fe04 8080 0080 0000                         ........

200002c4 <Font08px_UM>:
200002c4:	fe05 0804 fe04 0000                         ........

200002cc <Font08px_UN>:
200002cc:	fe05 1804 fe60 0000                         ....`...

200002d4 <Font08px_UO>:
200002d4:	7c04 8282 007c 0000                         .|..|...

200002dc <Font08px_UP>:
200002dc:	fe04 1212 000c 0000                         ........

200002e4 <Font08px_N0>:
200002e4:	7c05 92a2 7c8a 0000                         .|...|..

200002ec <Font08px_N1>:
200002ec:	0005 fe84 0080 0000                         ........

200002f4 <Font08px_N2>:
200002f4:	8405 a2c2 8c92 0000                         ........

200002fc <Font08px_N3>:
200002fc:	4405 9282 6c92 0000                         .D...l..

20000304 <Font08px_UU>:
20000304:	7e04 8080 007e 0000                         .~..~...

2000030c <Font08px_N5>:
2000030c:	5e05 8a8a 728a 0000                         .^...r..

20000314 <Font08px_UW>:
20000314:	3e05 38c0 3ec0 0000                         .>.8.>..

2000031c <Font08px_UX>:
2000031c:	c605 1028 c628 0000                         ..(.(...

20000324 <Font08px_N8>:
20000324:	6c05 9292 6c92 0000                         .l...l..

2000032c <Font08px_UZ>:
2000032c:	c205 92a2 868a 0000                         ........

20000334 <Font08px_40>:
20000334:	3803 8244                                   .8D.

20000338 <Font08px_41>:
20000338:	8203 3844                                   ..D8

2000033c <Font08px_42>:
2000033c:	2803 2810                                   .(.(

20000340 <Font08px_43>:
20000340:	1003 1038                                   ..8.

20000344 <Font08px_44>:
20000344:	c001 0000                                   ....

20000348 <Font08px_45>:
20000348:	1003 1010                                   ....

2000034c <Font08px_46>:
2000034c:	8001 0000                                   ....

20000350 <Font08px_47>:
20000350:	c003 0638                                   ..8.

20000354 <Font08px_la>:
20000354:	7004 8888 00f8 0000                         .p......

2000035c <Font08px_lb>:
2000035c:	fe04 8888 0070 0000                         ....p...

20000364 <Font08px_lc>:
20000364:	7004 8888 0088 0000                         .p......

2000036c <Font08px_ld>:
2000036c:	7004 8888 00fe 0000                         .p......

20000374 <Font08px_le>:
20000374:	7004 a8a8 0030 0000                         .p..0...

2000037c <Font08px_lf>:
2000037c:	fc03 0212                                   ....

20000380 <Font08px_lg>:
20000380:	1004 a8a8 0078 0000                         ....x...

20000388 <Font08px_lh>:
20000388:	fe04 0810 00f0 0000                         ........

20000390 <Font08px_li>:
20000390:	fa01 0000                                   ....

20000394 <Font08px_lj>:
20000394:	8002 007a                                   ..z.

20000398 <Font08px_lk>:
20000398:	fe04 5020 0088 0000                         .. P....

200003a0 <Font08px_ll>:
200003a0:	fe01 0000                                   ....

200003a4 <Font08px_lm>:
200003a4:	f805 f008 f008 0000                         ........

200003ac <Font08px_ln>:
200003ac:	f804 0810 00f0 0000                         ........

200003b4 <Font08px_lo>:
200003b4:	7004 8888 0070 0000                         .p..p...

200003bc <Font08px_lp>:
200003bc:	f804 2828 0010 0000                         ..((....

200003c4 <Font08px_lq>:
200003c4:	1004 2828 00f8 0000                         ..((....

200003cc <Font08px_lr>:
200003cc:	f803 0810                                   ....

200003d0 <Font08px_ls>:
200003d0:	9004 a8a8 0048 0000                         ....H...

200003d8 <Font08px_lt>:
200003d8:	0803 887c                                   ..|.

200003dc <Font08px_lu>:
200003dc:	7804 8080 00f8 0000                         .x......

200003e4 <Font08px_lv>:
200003e4:	1805 8060 1860 0000                         ..`.`...

200003ec <Font08px_lw>:
200003ec:	3805 30c0 38c0 0000                         .8.0.8..

200003f4 <Font08px_lx>:
200003f4:	8805 2050 8850 0000                         ..P P...

200003fc <Font08px_ly>:
200003fc:	1804 a0a0 0078 0000                         ....x...

20000404 <Font08px_lz>:
20000404:	c803 98a8                                   ....

20000408 <SystemCoreClock>:
20000408:	0900 003d                                   ..=.

2000040c <g_door_pressed>:
2000040c:	0004 0000                                   ....

20000410 <_impure_ptr>:
20000410:	0418 2000 0000 0000                         ... ....

20000418 <impure_data>:
20000418:	0000 0000 0704 2000 076c 2000 07d4 2000     ....... l.. ... 
	...
2000044c:	6214 0040 0000 0000 0000 0000 0000 0000     .b@.............
	...
200004c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200004d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000840 <lc_ctype_charset>:
20000840:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20000860 <__mb_cur_max>:
20000860:	0001 0000                                   ....

20000864 <lc_message_charset>:
20000864:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20000884 <lconv>:
20000884:	627d 0040 627e 0040 627e 0040 627e 0040     }b@.~b@.~b@.~b@.
20000894:	627e 0040 627e 0040 627e 0040 627e 0040     ~b@.~b@.~b@.~b@.
200008a4:	627e 0040 627e 0040 ffff ffff ffff ffff     ~b@.~b@.........
200008b4:	ffff ffff ffff 0000                         ........

200008bc <__malloc_av_>:
	...
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 
200008f4:	08ec 2000 08ec 2000 08f4 2000 08f4 2000     ... ... ... ... 
20000904:	08fc 2000 08fc 2000 0904 2000 0904 2000     ... ... ... ... 
20000914:	090c 2000 090c 2000 0914 2000 0914 2000     ... ... ... ... 
20000924:	091c 2000 091c 2000 0924 2000 0924 2000     ... ... $.. $.. 
20000934:	092c 2000 092c 2000 0934 2000 0934 2000     ,.. ,.. 4.. 4.. 
20000944:	093c 2000 093c 2000 0944 2000 0944 2000     <.. <.. D.. D.. 
20000954:	094c 2000 094c 2000 0954 2000 0954 2000     L.. L.. T.. T.. 
20000964:	095c 2000 095c 2000 0964 2000 0964 2000     \.. \.. d.. d.. 
20000974:	096c 2000 096c 2000 0974 2000 0974 2000     l.. l.. t.. t.. 
20000984:	097c 2000 097c 2000 0984 2000 0984 2000     |.. |.. ... ... 
20000994:	098c 2000 098c 2000 0994 2000 0994 2000     ... ... ... ... 
200009a4:	099c 2000 099c 2000 09a4 2000 09a4 2000     ... ... ... ... 
200009b4:	09ac 2000 09ac 2000 09b4 2000 09b4 2000     ... ... ... ... 
200009c4:	09bc 2000 09bc 2000 09c4 2000 09c4 2000     ... ... ... ... 
200009d4:	09cc 2000 09cc 2000 09d4 2000 09d4 2000     ... ... ... ... 
200009e4:	09dc 2000 09dc 2000 09e4 2000 09e4 2000     ... ... ... ... 
200009f4:	09ec 2000 09ec 2000 09f4 2000 09f4 2000     ... ... ... ... 
20000a04:	09fc 2000 09fc 2000 0a04 2000 0a04 2000     ... ... ... ... 
20000a14:	0a0c 2000 0a0c 2000 0a14 2000 0a14 2000     ... ... ... ... 
20000a24:	0a1c 2000 0a1c 2000 0a24 2000 0a24 2000     ... ... $.. $.. 
20000a34:	0a2c 2000 0a2c 2000 0a34 2000 0a34 2000     ,.. ,.. 4.. 4.. 
20000a44:	0a3c 2000 0a3c 2000 0a44 2000 0a44 2000     <.. <.. D.. D.. 
20000a54:	0a4c 2000 0a4c 2000 0a54 2000 0a54 2000     L.. L.. T.. T.. 
20000a64:	0a5c 2000 0a5c 2000 0a64 2000 0a64 2000     \.. \.. d.. d.. 
20000a74:	0a6c 2000 0a6c 2000 0a74 2000 0a74 2000     l.. l.. t.. t.. 
20000a84:	0a7c 2000 0a7c 2000 0a84 2000 0a84 2000     |.. |.. ... ... 
20000a94:	0a8c 2000 0a8c 2000 0a94 2000 0a94 2000     ... ... ... ... 
20000aa4:	0a9c 2000 0a9c 2000 0aa4 2000 0aa4 2000     ... ... ... ... 
20000ab4:	0aac 2000 0aac 2000 0ab4 2000 0ab4 2000     ... ... ... ... 
20000ac4:	0abc 2000 0abc 2000 0ac4 2000 0ac4 2000     ... ... ... ... 
20000ad4:	0acc 2000 0acc 2000 0ad4 2000 0ad4 2000     ... ... ... ... 
20000ae4:	0adc 2000 0adc 2000 0ae4 2000 0ae4 2000     ... ... ... ... 
20000af4:	0aec 2000 0aec 2000 0af4 2000 0af4 2000     ... ... ... ... 
20000b04:	0afc 2000 0afc 2000 0b04 2000 0b04 2000     ... ... ... ... 
20000b14:	0b0c 2000 0b0c 2000 0b14 2000 0b14 2000     ... ... ... ... 
20000b24:	0b1c 2000 0b1c 2000 0b24 2000 0b24 2000     ... ... $.. $.. 
20000b34:	0b2c 2000 0b2c 2000 0b34 2000 0b34 2000     ,.. ,.. 4.. 4.. 
20000b44:	0b3c 2000 0b3c 2000 0b44 2000 0b44 2000     <.. <.. D.. D.. 
20000b54:	0b4c 2000 0b4c 2000 0b54 2000 0b54 2000     L.. L.. T.. T.. 
20000b64:	0b5c 2000 0b5c 2000 0b64 2000 0b64 2000     \.. \.. d.. d.. 
20000b74:	0b6c 2000 0b6c 2000 0b74 2000 0b74 2000     l.. l.. t.. t.. 
20000b84:	0b7c 2000 0b7c 2000 0b84 2000 0b84 2000     |.. |.. ... ... 
20000b94:	0b8c 2000 0b8c 2000 0b94 2000 0b94 2000     ... ... ... ... 
20000ba4:	0b9c 2000 0b9c 2000 0ba4 2000 0ba4 2000     ... ... ... ... 
20000bb4:	0bac 2000 0bac 2000 0bb4 2000 0bb4 2000     ... ... ... ... 
20000bc4:	0bbc 2000 0bbc 2000 0bc4 2000 0bc4 2000     ... ... ... ... 
20000bd4:	0bcc 2000 0bcc 2000 0bd4 2000 0bd4 2000     ... ... ... ... 
20000be4:	0bdc 2000 0bdc 2000 0be4 2000 0be4 2000     ... ... ... ... 
20000bf4:	0bec 2000 0bec 2000 0bf4 2000 0bf4 2000     ... ... ... ... 
20000c04:	0bfc 2000 0bfc 2000 0c04 2000 0c04 2000     ... ... ... ... 
20000c14:	0c0c 2000 0c0c 2000 0c14 2000 0c14 2000     ... ... ... ... 
20000c24:	0c1c 2000 0c1c 2000 0c24 2000 0c24 2000     ... ... $.. $.. 
20000c34:	0c2c 2000 0c2c 2000 0c34 2000 0c34 2000     ,.. ,.. 4.. 4.. 
20000c44:	0c3c 2000 0c3c 2000 0c44 2000 0c44 2000     <.. <.. D.. D.. 
20000c54:	0c4c 2000 0c4c 2000 0c54 2000 0c54 2000     L.. L.. T.. T.. 
20000c64:	0c5c 2000 0c5c 2000 0c64 2000 0c64 2000     \.. \.. d.. d.. 
20000c74:	0c6c 2000 0c6c 2000 0c74 2000 0c74 2000     l.. l.. t.. t.. 
20000c84:	0c7c 2000 0c7c 2000 0c84 2000 0c84 2000     |.. |.. ... ... 
20000c94:	0c8c 2000 0c8c 2000 0c94 2000 0c94 2000     ... ... ... ... 
20000ca4:	0c9c 2000 0c9c 2000 0ca4 2000 0ca4 2000     ... ... ... ... 
20000cb4:	0cac 2000 0cac 2000 0cb4 2000 0cb4 2000     ... ... ... ... 

20000cc4 <__malloc_sbrk_base>:
20000cc4:	ffff ffff                                   ....

20000cc8 <__malloc_trim_threshold>:
20000cc8:	0000 0002                                   ....
